{"language": "Solidity", "settings": {"evmVersion": "paris", "libraries": {}, "metadata": {"bytecodeHash": "none", "useLiteralContent": true}, "optimizer": {"enabled": true}, "remappings": [], "viaIR": false, "outputSelection": {"*": {"*": ["evm.legacyAssembly"]}}}, "sources": {"@openzeppelin/contracts/access/AccessControl.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.30;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"}, "@openzeppelin/contracts/access/IAccessControl.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"}, "@openzeppelin/contracts/utils/Context.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"}, "@openzeppelin/contracts/utils/Strings.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.30;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"}, "@openzeppelin/contracts/utils/introspection/ERC165.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.30;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"}, "@openzeppelin/contracts/utils/introspection/ERC165Storage.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\n\npragma solidity ^0.8.30;\n\nimport \"./ERC165.sol\";\n\n/**\n * @dev Storage based implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165Storage is ERC165 {\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n"}, "@openzeppelin/contracts/utils/introspection/IERC165.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"}, "@openzeppelin/contracts/utils/math/Math.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"}, "@openzeppelin/contracts/utils/math/SignedMath.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"}, "contracts/common/AuthControlSeigManager.sol": {"content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport { ERC165Storage } from \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"./AuthRoleSeigManager.sol\";\n\ncontract AuthControlSeigManager is AuthRoleSeigManager, ERC165Storage, AccessControl {\n    modifier onlyOwner() {\n        require(isAdmin(msg.sender), \"AuthControl: Caller is not an admin\");\n        _;\n    }\n\n    modifier onlyMinter() {\n        require(hasRole(MINTER_ROLE, msg.sender), \"AuthControl: Caller is not a minter\");\n        _;\n    }\n\n    modifier onlyOperator() {\n        require(hasRole(OPERATOR_ROLE, msg.sender), \"AuthControl: Caller is not an operator\");\n        _;\n    }\n\n    modifier onlyChallenger() {\n        require(hasRole(CHALLENGER_ROLE, msg.sender), \"AuthControl: Caller is not a challenger\");\n        _;\n    }\n\n    modifier onlyPauser() {\n        require(hasRole(PAUSE_ROLE, msg.sender), \"AuthControl: Caller is not a pauser\");\n        _;\n    }\n\n    modifier onlyMinterOrAdmin() {\n        require(isAdmin(msg.sender) || hasRole(MINTER_ROLE, msg.sender), \"not onlyMinterOrAdmin\");\n        _;\n    }\n\n    /// @dev add admin\n    /// @param account  address to add\n    function addAdmin(address account) public virtual onlyOwner {\n        grantRole(DEFAULT_ADMIN_ROLE, account);\n    }\n\n    function addMinter(address account) public virtual onlyOwner {\n        grantRole(MINTER_ROLE, account);\n    }\n\n    function addOperator(address account) public virtual onlyOwner {\n        grantRole(OPERATOR_ROLE, account);\n    }\n\n    function addChallenger(address account) public virtual onlyMinterOrAdmin {\n        grantRole(CHALLENGER_ROLE, account);\n    }\n\n    /// @dev remove admin\n    /// @param account  address to remove\n    function removeAdmin(address account) public virtual onlyOwner {\n        renounceRole(DEFAULT_ADMIN_ROLE, account);\n    }\n\n    function removeMinter(address account) public virtual onlyOwner {\n        renounceRole(MINTER_ROLE, account);\n    }\n\n    function removeChallenger(address account) public virtual onlyOwner {\n        renounceRole(CHALLENGER_ROLE, account);\n    }\n\n    function removeOperator(address account) public virtual onlyOwner {\n        renounceRole(OPERATOR_ROLE, account);\n    }\n    /// @dev transfer admin\n    /// @param newAdmin new admin address\n    function transferAdmin(address newAdmin) public virtual onlyOwner {\n        require(newAdmin != address(0), \"Accessible: zero address\");\n        require(msg.sender != newAdmin, \"Accessible: same admin\");\n\n        grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function transferOwnership(address newAdmin) public virtual onlyOwner {\n        transferAdmin(newAdmin);\n    }\n\n    function renounceOwnership() public onlyOwner {\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function renounceMinter() public {\n        renounceRole(MINTER_ROLE, msg.sender);\n    }\n\n    function renounceOperator() public {\n        renounceRole(OPERATOR_ROLE, msg.sender);\n    }\n\n    function renounceChallenger() public {\n        renounceRole(CHALLENGER_ROLE, msg.sender);\n    }\n\n    function revokeMinter(address account) public onlyOwner {\n        revokeRole(MINTER_ROLE, account);\n    }\n\n    function revokeOperator(address account) public onlyOwner {\n        revokeRole(OPERATOR_ROLE, account);\n    }\n\n    function revokeChallenger(address account) public onlyOwner {\n        revokeRole(CHALLENGER_ROLE, account);\n    }\n\n    /// @dev whether admin\n    /// @param account  address to check\n    function isAdmin(address account) public view virtual returns (bool) {\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\n    }\n\n    function isOwner() public view virtual returns (bool) {\n        return hasRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function isMinter(address account) public view virtual returns (bool) {\n        return hasRole(MINTER_ROLE, account);\n    }\n\n    function isOperator(address account) public view virtual returns (bool) {\n        return hasRole(OPERATOR_ROLE, account);\n    }\n\n    function isChallenger(address account) public view virtual returns (bool) {\n        return hasRole(CHALLENGER_ROLE, account);\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Storage, AccessControl) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n}\n"}, "contracts/common/AuthRoleSeigManager.sol": {"content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\ncontract AuthRoleSeigManager {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER\");\n    bytes32 public constant OPERATOR_ROLE = keccak256(\"OPERATOR\");\n    bytes32 public constant CHALLENGER_ROLE = keccak256(\"CHALLENGER\");\n    bytes32 public constant PAUSE_ROLE = keccak256(\"PAUSE\");\n}\n"}, "contracts/dao/interfaces/IWTON.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\ninterface IWTON {\n\n    function onApprove(\n        address owner,\n        address spender,\n        uint256 tonAmount,\n        bytes calldata data\n    ) external returns (bool);\n\n    function swapToTON(uint256 wtonAmount) external returns (bool);\n    function swapToTONAndTransfer(address to, uint256 wtonAmount) external returns (bool);\n    function swapFromTONAndTransfer(address to, uint256 tonAmount) external returns (bool);\n    function renounceTonMinter() external;\n    function transfer(address to, uint256 amount) external returns (bool);\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n    function renounceMinter() external ;\n    function mint(address account, uint256 amount) external returns (bool);\n\n}"}, "contracts/dao/interfaces/Layer2I.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\ninterface Layer2I {\n  function operator() external view returns (address);\n  function isLayer2() external view returns (bool);\n  function currentFork() external view returns (uint);\n  function lastEpoch(uint forkNumber) external view returns (uint);\n  function changeOperator(address _operator) external;\n}\n"}, "contracts/libraries/DSMath.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\ncontract DSMath {\n  function add(uint x, uint y) internal pure returns (uint z) {\n    require((z = x + y) >= x, \"ds-math-add-overflow\");\n  }\n  function sub(uint x, uint y) internal pure returns (uint z) {\n    require((z = x - y) <= x, \"ds-math-sub-underflow\");\n  }\n  function mul(uint x, uint y) internal pure returns (uint z) {\n    require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n  }\n\n  function min(uint x, uint y) internal pure returns (uint z) {\n    return x <= y ? x : y;\n  }\n  function max(uint x, uint y) internal pure returns (uint z) {\n    return x >= y ? x : y;\n  }\n  function imin(int x, int y) internal pure returns (int z) {\n    return x <= y ? x : y;\n  }\n  function imax(int x, int y) internal pure returns (int z) {\n    return x >= y ? x : y;\n  }\n\n  uint constant WAD_ = 10 ** 18;\n  uint constant RAY_ = 10 ** 27;\n\n  function wmul(uint x, uint y) internal pure returns (uint z) {\n    z = add(mul(x, y), WAD_ / 2) / WAD_;\n  }\n  function rmul(uint x, uint y) internal pure returns (uint z) {\n    z = add(mul(x, y), RAY_ / 2) / RAY_;\n  }\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\n    z = add(mul(x, WAD_), y / 2) / y;\n  }\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\n    z = add(mul(x, RAY_), y / 2) / y;\n  }\n\n  function wmul2(uint x, uint y) internal pure returns (uint z) {\n    z = mul(x, y) / WAD_;\n  }\n  function rmul2(uint x, uint y) internal pure returns (uint z) {\n    z = mul(x, y) / RAY_;\n  }\n  function wdiv2(uint x, uint y) internal pure returns (uint z) {\n    z = mul(x, WAD_) / y;\n  }\n  function rdiv2(uint x, uint y) internal pure returns (uint z) {\n    z = mul(x, RAY_) / y;\n  }\n\n  // This famous algorithm is called \"exponentiation by squaring\"\n  // and calculates x^n with x as fixed-point and n as regular unsigned.\n  //\n  // It's O(log n), instead of O(n) for naive repeated multiplication.\n  //\n  // These facts are why it works:\n  //\n  //  If n is even, then x^n = (x^2)^(n/2).\n  //  If n is odd,  then x^n = x * x^(n-1),\n  //   and applying the equation for even x gives\n  //  x^n = x * (x^2)^((n-1) / 2).\n  //\n  //  Also, EVM division is flooring and\n  //  floor[(n-1) / 2] = floor[n / 2].\n  //\n  function wpow(uint x, uint n) internal pure returns (uint z) {\n    z = n % 2 != 0 ? x : WAD_;\n\n    for (n /= 2; n != 0; n /= 2) {\n      x = wmul(x, x);\n\n      if (n % 2 != 0) {\n        z = wmul(z, x);\n      }\n    }\n  }\n\n  function rpow(uint x, uint n) internal pure returns (uint z) {\n    z = n % 2 != 0 ? x : RAY_;\n\n    for (n /= 2; n != 0; n /= 2) {\n      x = rmul(x, x);\n\n      if (n % 2 != 0) {\n        z = rmul(z, x);\n      }\n    }\n  }\n}\n"}, "contracts/proxy/ProxyStorage.sol": {"content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.30;\n\ncontract ProxyStorage  {\n\n    bool public pauseProxy;\n\n    mapping(uint256 => address) public proxyImplementation;\n    mapping(address => bool) public aliveImplementation;\n    mapping(bytes4 => address) public selectorImplementation;\n\n}"}, "contracts/stake/interfaces/IRefactor.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\ninterface IRefactor {\n  struct Balance {\n        uint256 balance;\n        uint256 refactoredCount;\n    }\n\n    struct Factor {\n        uint256 factor;\n        uint256 refactorCount;\n    }\n}\n"}, "contracts/stake/interfaces/RefactorCoinageSnapshotI.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport { IRefactor } from \"../interfaces/IRefactor.sol\";\ninterface RefactorCoinageSnapshotI {\n  function factor() external view returns (uint256);\n  function setFactor(uint256 factor) external returns (bool);\n  function setSeigManager(address _seigManager) external  ;\n  function burn(uint256 amount) external;\n  function burnFrom(address account, uint256 amount) external;\n  function mint(address account, uint256 amount) external returns (bool);\n  function totalSupply() external view returns (uint256);\n  function balanceOf(address account) external view returns (uint256);\n  function addMinter(address account) external;\n  function renounceMinter() external;\n  function transferOwnership(address newOwner) external;\n  function snapshot() external returns (uint256 id);\n  function totalSupplyAt(uint256 snapshotId) external view returns (uint256 amount);\n  function balanceOfAt(address account, uint256 snapshotId) external view returns (uint256 amount);\n\n  function getTotalAndFactor() external view returns (IRefactor.Balance memory, IRefactor.Factor memory);\n  function getBalanceAndFactor(address account) external view returns (IRefactor.Balance memory, IRefactor.Factor memory);\n  function getTotalAndFactorAt(uint256 snapshotId) external view returns (IRefactor.Balance memory, IRefactor.Factor memory);\n  function getBalanceAndFactorAt(address account, uint256 snapshotId) external view returns (IRefactor.Balance memory, IRefactor.Factor memory);\n}\n"}, "contracts/stake/managers/SeigManagerStorage.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\nimport { RefactorCoinageSnapshotI } from \"../interfaces/RefactorCoinageSnapshotI.sol\";\n\n/// @title\n/// @notice\ncontract SeigManagerStorage   {\n\n    //////////////////////////////\n    // Constants\n    //////////////////////////////\n\n    uint256 constant public RAY = 10 ** 27; // 1 RAY\n    uint256 constant internal _DEFAULT_FACTOR = RAY;\n\n    uint256 constant public MAX_VALID_COMMISSION = RAY; // 1 RAY\n    uint256 constant public MIN_VALID_COMMISSION = 10 ** 25; // 0.01 RAY\n\n    //////////////////////////////\n    // Common contracts\n    //////////////////////////////\n\n    address internal _registry;\n    address internal _depositManager;\n    address internal _powerton;\n    address public dao;\n\n    //////////////////////////////\n    // Token-related\n    //////////////////////////////\n\n    // TON token contract\n    address internal _ton;\n\n    // WTON token contract\n    address internal _wton; // TODO: use mintable erc20!\n\n    // contract factory\n    address public factory;\n\n    // track total deposits of each layer2.\n    RefactorCoinageSnapshotI internal _tot;\n\n    // coinage token for each layer2.\n    mapping (address => RefactorCoinageSnapshotI) internal _coinages;\n\n    // last commit block number for each layer2.\n    mapping (address => uint256) internal _lastCommitBlock;\n\n    // total seigniorage per block\n    uint256 internal _seigPerBlock;\n\n    // the block number when seigniorages are given\n    uint256 internal _lastSeigBlock;\n\n    // block number when paused or unpaused\n    uint256 internal _pausedBlock;\n    uint256 internal _unpausedBlock;\n\n    // commission rates in RAY\n    mapping (address => uint256) internal _commissionRates;\n\n    // whether commission is negative or not (default=possitive)\n    mapping (address => bool) internal _isCommissionRateNegative;\n\n    // setting commissionrate delay\n    uint256 public adjustCommissionDelay;\n    mapping (address => uint256) public delayedCommissionBlock;\n    mapping (address => uint256) public delayedCommissionRate;\n    mapping (address => bool) public delayedCommissionRateNegative;\n\n    // minimum deposit amount\n    uint256 public minimumAmount;\n\n    uint256 public powerTONSeigRate;\n    uint256 public daoSeigRate;\n    uint256 public relativeSeigRate;\n\n    uint256 public accRelativeSeig;\n\n    bool public paused;\n    uint256 public lastSnapshotId;\n\n}\n"}, "contracts/stake/managers/SeigManagerV1_1Storage.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\n/// @title\n/// @notice\ncontract SeigManagerV1_1Storage  {\n\n    uint256 constant public SEIG_START_MAINNET = 10837698;\n    uint256 constant public INITIAL_TOTAL_SUPPLY_MAINNET = 50000000000000000000000000000000000;\n    uint256 constant public BURNT_AMOUNT_MAINNET = 178111666909855730000000000000000;\n\n    /// Seigniorage issuance start block\n    uint256 public seigStartBlock;\n\n    /// initial total supply\n    uint256 public initialTotalSupply;\n\n    /// burnt amount at DAO\n    uint256 public burntAmountAtDAO;\n\n}\n"}, "contracts/stake/managers/SeigManagerV1_3.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport {DSMath} from '../../libraries/DSMath.sol';\nimport {RefactorCoinageSnapshotI} from '../interfaces/RefactorCoinageSnapshotI.sol';\nimport {IWTON} from '../../dao/interfaces/IWTON.sol';\nimport {Layer2I} from '../../dao/interfaces/Layer2I.sol';\n\nimport '../../proxy/ProxyStorage.sol';\nimport {AuthControlSeigManager} from '../../common/AuthControlSeigManager.sol';\nimport {SeigManagerStorage} from './SeigManagerStorage.sol';\nimport {SeigManagerV1_1Storage} from './SeigManagerV1_1Storage.sol';\nimport {SeigManagerV1_3Storage} from './SeigManagerV1_3Storage.sol';\n\nerror LastSeigBlockError();\nerror MinimumAmountError();\nerror UpdateSeigniorageError();\nerror IncreaseTotError();\nerror InvalidCoinageError();\nerror OnlyLayer2ManagerError();\nerror Layer2TvlError();\n\ninterface ITON {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n}\n\ninterface ICandidate {\n    function updateSeigniorage() external returns (bool);\n}\n\ninterface IL1BridgeRegistry {\n    function layer2TVL(address _rollupConfig) external view returns (uint256 amount);\n}\n\ninterface ILayer2Manager {\n    function updateSeigniorage(address rollupConfig, uint256 amount) external;\n    function rollupConfigOfOperator(address operator) external view returns (address);\n    function statusLayer2(address rollupConfig) external view returns (uint8);\n}\n\ninterface IILayer2Registry {\n    function layer2s(address layer2) external view returns (bool);\n    function numLayer2s() external view returns (uint256);\n    function layer2ByIndex(uint256 index) external view returns (address);\n}\n/**\n * @dev SeigManager gives seigniorage to operator and WTON holders.\n * For each commit by operator, operator (or user) will get seigniorage\n * in propotion to the staked (or delegated) amount of WTON.\n *\n * [Tokens]\n * - {tot} tracks total staked or delegated WTON of each Layer2 contract (and depositor?).\n * - {coinages[layer2]} tracks staked or delegated WTON of user or operator to a Layer2 contract.\n *\n * For each commit by operator,\n *  1. increases all layer2's balance of {tot} by (the staked amount of WTON) /\n *     (total supply of TON and WTON) * (num blocks * seigniorage per block).\n *  2. increases all depositors' blanace of {coinages[layer2]} in proportion to the staked amount of WTON,\n *     up to the increased amount in step (1).\n *  3. set the layer2's balance of {committed} as the layer2's {tot} balance.\n *\n * For each stake or delegate with amount of {v} to a Layer2,\n *  1. mint {v} {coinages[layer2]} tokens to the account\n *  2. mint {v} {tot} tokens to the layer2 contract\n *\n * For each unstake or undelegate (or get rewards) with amount of {v} to a Layer2,\n *  1. burn {v} {coinages[layer2]} tokens from the account\n *  2. burn {v + \u237a} {tot} tokens from the layer2 contract,\n *   where \u237a = SEIGS * staked ratio of the layer2 * withdrawal ratio of the account\n *     - SEIGS                              = tot total supply - tot total supply at last commit from the layer2\n *     - staked ratio of the layer2     = tot balance of the layer2 / tot total supply\n *     - withdrawal ratio of the account  = amount to withdraw / total supply of coinage\n *\n */\ncontract SeigManagerV1_3 is\n    ProxyStorage,\n    AuthControlSeigManager,\n    SeigManagerStorage,\n    SeigManagerV1_1Storage,\n    DSMath,\n    SeigManagerV1_3Storage\n{\n    //////////////////////////////\n    // Events\n    //////////////////////////////\n\n    event SeigGiven(\n        address indexed layer2,\n        uint256 totalSeig,\n        uint256 stakedSeig,\n        uint256 unstakedSeig,\n        uint256 powertonSeig,\n        uint256 daoSeig,\n        uint256 pseig\n    );\n    event Comitted(address indexed layer2);\n\n    /** These were reflected from 18732908 block. */\n    event AddedSeigAtLayer(\n        address layer2,\n        uint256 seigs,\n        uint256 operatorSeigs,\n        uint256 nextTotalSupply,\n        uint256 prevTotalSupply\n    );\n\n    /** It was deleted from block 18732908, but was added again on v1. */\n    event CommitLog1(\n        uint256 totalStakedAmount,\n        uint256 totalSupplyOfWTON,\n        uint256 prevTotalSupply,\n        uint256 nextTotalSupply\n    );\n\n    /** Added from v1_3. */\n    /**\n     * @notice Event that occurs when seigniorage is distributed when update seigniorage is executed\n     * @param layer2        The layer2 address\n     * @param totalSeig     Total amount of seigniorage issued\n     * @param stakedSeig    Seigniorage equals to the staking ratio in TON total supply\n     *                      in total issued seigniorage\n     * @param unstakedSeig  Total issued seigniorage minus stakedSeig\n     * @param powertonSeig  Seigniorage distributed to powerton\n     * @param daoSeig       Seigniorage distributed to dao\n     * @param pseig         Seigniorage equal to relativeSeigRate ratio from unstakedSeig amount\n     *                      Seigniorage given to stakers = stakedSeig + pseig\n     * @param l2TotalSeigs  Seigniorage distributed to L2 sequencer\n     * @param layer2Seigs   Seigniorage currently settled (give) to CandidateAddOn's operatorManager contract\n     */\n    event SeigGiven2(\n        address indexed layer2,\n        uint256 totalSeig,\n        uint256 stakedSeig,\n        uint256 unstakedSeig,\n        uint256 powertonSeig,\n        uint256 daoSeig,\n        uint256 pseig,\n        uint256 l2TotalSeigs,\n        uint256 layer2Seigs\n    );\n\n    /**\n     * @notice Event that occurs when calling excludeFromSeigniorage function\n     * @param layer2        the layer2 address\n     * @param layer2Tvl     the layer2 TON TVL\n     * @param initialDebt   the layer2 initial debt for calculating a reward\n     */\n    event ExcludedFromSeigniorage(address layer2, uint256 layer2Tvl, uint256 initialDebt);\n\n    //////////////////////////////\n    // onlyOwner\n    //////////////////////////////\n\n    /**\n     * @notice Set the layer2Manager address\n     * @param layer2Manager_    the layer2Manager address\n     */\n    function setLayer2Manager(address layer2Manager_) external onlyOwner {\n        layer2Manager = layer2Manager_;\n    }\n\n    /**\n     * @notice Set the start block number of issuing a l2 seigniorage\n     * @param startBlock_    the start block number\n     */\n    function setLayer2StartBlock(uint256 startBlock_) external onlyOwner {\n        layer2StartBlock = startBlock_;\n    }\n\n    /**\n     * @notice Set the l1BridgeRegistry_ address\n     * @param l1BridgeRegistry_    the l1BridgeRegistry address\n     */\n    function setL1BridgeRegistry(address l1BridgeRegistry_) external onlyOwner {\n        l1BridgeRegistry = l1BridgeRegistry_;\n    }\n\n    function resetL2RewardPerUint() external onlyOwner {\n        require(layer2StartBlock == 0, 'Only possible when layer2StartBlock is 0');\n        l2RewardPerUint = 0;\n    }\n\n    //////////////////////////////\n    // onlyLayer2Manager\n    //////////////////////////////\n\n    /**\n     * @notice Exclude the layer2 in distributing a seigniorage\n     * @param _layer2     the layer2(candidate) address\n     */\n    function excludeFromSeigniorage(address _layer2) external returns (bool) {\n        _onlyLayer2Manager();\n        Layer2Reward storage reward = layer2RewardInfo[_layer2];\n        // require (totalLayer2TVL >= reward.layer2Tvl, \"check layer2Tvl\");\n        if (totalLayer2TVL < reward.layer2Tvl) revert Layer2TvlError();\n\n        emit ExcludedFromSeigniorage(_layer2, reward.layer2Tvl, reward.initialDebt);\n\n        if (reward.layer2Tvl != 0) {\n            totalLayer2TVL -= reward.layer2Tvl;\n            reward.layer2Tvl = 0;\n            reward.initialDebt = 0;\n        }\n\n        return true;\n    }\n\n    //////////////////////////////\n    // checkCoinage\n    //////////////////////////////\n\n    /**\n     * @notice Distribute the issuing seigniorage.\n     *         If caller is a CandidateAddOn, the seigniorage is settled to the L2 OperatorManager.\n     */\n    function updateSeigniorageOperator() external returns (bool) {\n        return _updateSeigniorage(true);\n    }\n\n    /**\n     * @notice Distribute the issuing seigniorage.\n     */\n    function updateSeigniorage() external returns (bool) {\n        return _updateSeigniorage(false);\n    }\n\n    //////////////////////////////\n    // External functions\n    //////////////////////////////\n\n    /**\n     * @notice Distribute the issuing seigniorage on layer2(candidate).\n     */\n    function updateSeigniorageLayer(address layer2) external returns (bool) {\n        if (!ICandidate(layer2).updateSeigniorage()) revert UpdateSeigniorageError();\n        return true;\n    }\n\n    //////////////////////////////\n    // View functions\n    //////////////////////////////\n\n    /**\n     * @notice Estimate the seigniorage to be distributed\n     * @param blockNumber         The block number\n     * @param layer2              The layer2 address\n     * @param _isSenderOperator   Whether sender is operator of layer2\n     * @return maxSeig            Total amount of seigniorage occurring in that block\n     * @return stakedSeig         the amount equals to the staking ratio in TON total supply\n     *                            in total issuing seigniorage\n     * @return unstakedSeig       MaxSeig minus stakedSeig\n     * @return powertonSeig       the amount calculated to be distributed to Powerton\n     * @return daoSeig            the amount calculated to be distributed to DAO\n     * @return relativeSeig       the amount equal to relativeSeigRate ratio from unstakedSeig amount\n     * @return l2TotalSeigs       the amount calculated to be distributed to L2 sequencer\n     * @return layer2Seigs        the amount currently to be settled (give)  to CandidateAddOn's operatorManager contract\n     */\n    function estimatedDistribute(\n        uint256 blockNumber,\n        address layer2,\n        bool _isSenderOperator\n    )\n        external\n        view\n        returns (\n            uint256 maxSeig,\n            uint256 stakedSeig,\n            uint256 unstakedSeig,\n            uint256 powertonSeig,\n            uint256 daoSeig,\n            uint256 relativeSeig,\n            uint256 l2TotalSeigs,\n            uint256 layer2Seigs\n        )\n    {\n        // short circuit if already seigniorage is given.\n        if (blockNumber <= _lastSeigBlock || RefactorCoinageSnapshotI(_tot).totalSupply() == 0) {\n            return (0, 0, 0, 0, 0, 0, 0, 0);\n        }\n\n        uint256 span = blockNumber - _lastSeigBlock;\n        if (_unpausedBlock > _lastSeigBlock) span -= (_unpausedBlock - _pausedBlock);\n\n        uint256 prevTotalSupply = _tot.totalSupply();\n        uint256 nextTotalSupply;\n        maxSeig = span * _seigPerBlock;\n        uint256 tos = _totalSupplyOfTon(blockNumber);\n        stakedSeig = rdiv(rmul(maxSeig, prevTotalSupply), tos);\n\n        // L2 sequencers\n        uint256 curLayer2Tvl = 0;\n        address rollupConfig;\n        bool layer2Allowed;\n        uint256 tempLayer2StartBlock = layer2StartBlock;\n        Layer2Reward memory oldLayer2Info = layer2RewardInfo[layer2];\n        if (layer2StartBlock == 0) tempLayer2StartBlock = blockNumber - 1;\n\n        if (\n            layer2Manager != address(0) &&\n            tempLayer2StartBlock != 1 &&\n            tempLayer2StartBlock < blockNumber\n        ) {\n            (rollupConfig, layer2Allowed) = allowIssuanceLayer2Seigs(layer2);\n\n            if (layer2Allowed) {\n                curLayer2Tvl = IL1BridgeRegistry(l1BridgeRegistry).layer2TVL(rollupConfig);\n                if (totalLayer2TVL != 0)\n                    l2TotalSeigs = rdiv(rmul(maxSeig, totalLayer2TVL * 1e9), tos);\n            }\n        }\n\n        // pseig\n        // uint256 totalPseig = rmul(maxSeig - stakedSeig, relativeSeigRate);\n        uint256 totalPseig = rmul(maxSeig - stakedSeig - l2TotalSeigs, relativeSeigRate);\n\n        nextTotalSupply = prevTotalSupply + stakedSeig + totalPseig;\n        unstakedSeig = maxSeig - stakedSeig - l2TotalSeigs;\n\n        if (address(_powerton) != address(0)) powertonSeig = rmul(unstakedSeig, powerTONSeigRate);\n        if (dao != address(0)) daoSeig = rmul(unstakedSeig, daoSeigRate);\n\n        if (relativeSeigRate != 0) relativeSeig = totalPseig;\n\n        // L2 seigs settlement\n        uint256 tempL2RewardPerUint = l2RewardPerUint;\n        if (layer2Allowed) {\n            if (l2TotalSeigs != 0) tempL2RewardPerUint += ((l2TotalSeigs * 1e18) / totalLayer2TVL);\n\n            if (\n                tempL2RewardPerUint != 0 &&\n                (_isSenderOperator || oldLayer2Info.layer2Tvl > curLayer2Tvl) &&\n                (oldLayer2Info.layer2Tvl != 0)\n            ) {\n                layer2Seigs =\n                    tempL2RewardPerUint *\n                    (oldLayer2Info.layer2Tvl / 1e18) -\n                    oldLayer2Info.initialDebt;\n            }\n        }\n    }\n\n    /**\n     * @notice Query the staking amount held by the operator\n     * @param layer2 the layer2(candidate) address\n     */\n    function getOperatorAmount(address layer2) external view returns (uint256) {\n        address operator = Layer2I(layer2).operator();\n        return _coinages[layer2].balanceOf(operator);\n    }\n\n    /**\n     * @notice Check layer2 information managed in Layer2Manager\n     * @param layer2            The layer2 address\n     * @return rollupConfig     The rollupConfig address of layer2\n     * @return allowed          Seigniorage distribution status on layer2.\n     *                          If true, seigniorage is being distributed.\n     */\n    function allowIssuanceLayer2Seigs(\n        address layer2\n    ) public view returns (address rollupConfig, bool allowed) {\n        rollupConfig = ILayer2Manager(layer2Manager).rollupConfigOfOperator(\n            Layer2I(layer2).operator()\n        );\n        if (rollupConfig == address(0)) allowed = false;\n        else if (ILayer2Manager(layer2Manager).statusLayer2(rollupConfig) == 1) allowed = true;\n    }\n\n    /**\n     * @notice Query the unsettled amount of layer2\n     * @param layer2   The layer2 address\n     * @return amount  The unsettled amount of layer2\n     */\n    function unSettledReward(address layer2) public view returns (uint256 amount) {\n        Layer2Reward memory layer2Info = layer2RewardInfo[layer2];\n        if (layer2Info.layer2Tvl != 0)\n            amount = l2RewardPerUint * (layer2Info.layer2Tvl / 1e18) - layer2Info.initialDebt;\n    }\n\n    function unallocatedSeigniorage() external view returns (uint256 amount) {\n        amount = _tot.totalSupply() - stakeOfAllLayers();\n    }\n\n    function unallocatedSeigniorageAt(uint256 snapshotId) external view returns (uint256 amount) {\n        amount = _tot.totalSupplyAt(snapshotId) - stakeOfAllLayersAt(snapshotId);\n    }\n\n    function stakeOfAllLayers() public view returns (uint256 amount) {\n        uint256 num = IILayer2Registry(_registry).numLayer2s();\n        for (uint256 i = 0; i < num; i++) {\n            address layer2 = IILayer2Registry(_registry).layer2ByIndex(i);\n            address coin = address(_coinages[layer2]);\n            if (coin != address(0)) amount += _coinages[layer2].totalSupply();\n        }\n    }\n\n    function stakeOfAllLayersAt(uint256 snapshotId) public view returns (uint256 amount) {\n        uint256 num = IILayer2Registry(_registry).numLayer2s();\n        for (uint256 i = 0; i < num; i++) {\n            address layer2 = IILayer2Registry(_registry).layer2ByIndex(i);\n            address coin = address(_coinages[layer2]);\n            if (coin != address(0)) amount += _coinages[layer2].totalSupplyAt(snapshotId);\n        }\n    }\n\n    //////////////////////////////\n    // Internal functions\n    //////////////////////////////\n\n    /**\n     * @dev Callback for a new commit\n     */\n    /// on v1_3, it is changed with reflecting L2 sequencer.\n    function _updateSeigniorage(bool _isSenderOperator) internal ifFree returns (bool) {\n        // short circuit if paused\n        if (paused) {\n            return true;\n        }\n\n        RefactorCoinageSnapshotI coinage = _coinages[msg.sender];\n        _checkCoinage(address(coinage));\n\n        // require(block.number > _lastSeigBlock, \"last seig block is not past\");\n        if (block.number <= _lastSeigBlock) revert LastSeigBlockError();\n\n        address operator = Layer2I(msg.sender).operator();\n        uint256 operatorAmount = coinage.balanceOf(operator);\n\n        if (operatorAmount < minimumAmount) revert MinimumAmountError();\n        if (!_increaseTot(_isSenderOperator)) revert IncreaseTotError();\n\n        _lastCommitBlock[msg.sender] = block.number;\n\n        // 2. increase total supply of {coinages[layer2]}\n        uint256 prevTotalSupply = coinage.totalSupply();\n        uint256 nextTotalSupply = _tot.balanceOf(msg.sender);\n\n        // short circuit if there is no seigs for the layer2\n        if (prevTotalSupply >= nextTotalSupply) {\n            emit Comitted(msg.sender);\n            return true;\n        }\n\n        uint256 seigs = nextTotalSupply - prevTotalSupply;\n        uint256 operatorSeigs;\n\n        // calculate commission amount\n        bool isCommissionRateNegative_ = _isCommissionRateNegative[msg.sender];\n\n        (nextTotalSupply, operatorSeigs) = _calcSeigsDistribution(\n            msg.sender,\n            coinage,\n            prevTotalSupply,\n            seigs,\n            isCommissionRateNegative_,\n            operator\n        );\n\n        // gives seigniorages to the layer2 as coinage\n        require(\n            coinage.setFactor(_calcNewFactor(prevTotalSupply, nextTotalSupply, coinage.factor())),\n            'fail setFactor'\n        );\n\n        // give commission to operator or delegators\n        if (operatorSeigs != 0) {\n            if (isCommissionRateNegative_) {\n                // TODO: adjust arithmetic error\n                // burn by \ud835\udf38\n                coinage.burnFrom(operator, operatorSeigs);\n            } else {\n                coinage.mint(operator, operatorSeigs);\n            }\n        }\n\n        IWTON(_wton).mint(address(_depositManager), seigs);\n\n        emit Comitted(msg.sender);\n        emit AddedSeigAtLayer(msg.sender, seigs, operatorSeigs, nextTotalSupply, prevTotalSupply);\n\n        return true;\n    }\n\n    function _onlyLayer2Manager() internal view {\n        if (msg.sender != layer2Manager) revert OnlyLayer2ManagerError();\n    }\n\n    function _checkCoinage(address coinage_) internal pure {\n        if (coinage_ == address(0)) revert InvalidCoinageError();\n    }\n\n    function _calcSeigsDistribution(\n        address layer2,\n        RefactorCoinageSnapshotI coinage,\n        uint256 prevTotalSupply,\n        uint256 seigs,\n        bool isCommissionRateNegative_,\n        address operator\n    ) internal returns (uint256 nextTotalSupply, uint256 operatorSeigs) {\n        uint256 _delayedCommissionBlock = delayedCommissionBlock[layer2];\n\n        if (_delayedCommissionBlock != 0 && block.number >= _delayedCommissionBlock) {\n            _commissionRates[layer2] = delayedCommissionRate[layer2];\n            _isCommissionRateNegative[layer2] = delayedCommissionRateNegative[layer2];\n            delayedCommissionBlock[layer2] = 0;\n        }\n\n        uint256 commissionRate = _commissionRates[layer2];\n\n        nextTotalSupply = prevTotalSupply + seigs;\n\n        // short circuit if there is no commission rate\n        if (commissionRate == 0) return (nextTotalSupply, operatorSeigs);\n\n        // if commission rate is possitive\n        if (!isCommissionRateNegative_) {\n            operatorSeigs = rmul(seigs, commissionRate); // additional seig for operator\n            nextTotalSupply -= operatorSeigs;\n            return (nextTotalSupply, operatorSeigs);\n        }\n\n        // short circuit if there is no previous total deposit (meanning, there is no deposit)\n        if (prevTotalSupply == 0) return (nextTotalSupply, operatorSeigs);\n\n        // See negative commission distribution formular here: TBD\n        uint256 operatorBalance = coinage.balanceOf(operator);\n\n        // short circuit if there is no operator deposit\n        if (operatorBalance == 0) return (nextTotalSupply, operatorSeigs);\n\n        uint256 operatorRate = rdiv(operatorBalance, prevTotalSupply);\n\n        // \u0251: insufficient seig for operator\n        operatorSeigs = rmul(\n            rmul(seigs, operatorRate), // seigs for operator\n            commissionRate\n        );\n\n        // \u03b2:\n        uint256 delegatorSeigs = operatorRate == RAY\n            ? operatorSeigs\n            : rdiv(operatorSeigs, RAY - operatorRate);\n\n        // \ud835\udf38:\n        operatorSeigs = operatorRate == RAY\n            ? operatorSeigs\n            : operatorSeigs + rmul(delegatorSeigs, operatorRate);\n\n        // nextTotalSupply = nextTotalSupply + delegatorSeigs;\n        nextTotalSupply += delegatorSeigs;\n\n        return (nextTotalSupply, operatorSeigs);\n    }\n\n    function _calcNewFactor(\n        uint256 source,\n        uint256 target,\n        uint256 oldFactor\n    ) internal pure returns (uint256) {\n        return rdiv(rmul(target, oldFactor), source);\n    }\n\n    function _increaseTot(bool _isSenderOperator) internal returns (bool result) {\n        // short circuit if already seigniorage is given.\n        if (block.number <= _lastSeigBlock) return false;\n\n        if (RefactorCoinageSnapshotI(_tot).totalSupply() == 0) {\n            _lastSeigBlock = block.number;\n            return false;\n        }\n\n        uint256 prevTotalSupply;\n        uint256 nextTotalSupply;\n\n        // 1. increase total supply of {tot} by maximum seigniorages * staked rate\n        //    staked rate = total staked amount / total supply of (W)TON\n        prevTotalSupply = _tot.totalSupply();\n\n        uint256 span = block.number - _lastSeigBlock;\n        if (_unpausedBlock > _lastSeigBlock) span -= (_unpausedBlock - _pausedBlock);\n\n        // maximum seigniorages\n        uint256 maxSeig = span * _seigPerBlock;\n\n        // total supply of (W)TON , https://github.com/tokamak-network/TON-total-supply\n        uint256 tos = totalSupplyOfTon();\n\n        // maximum seigniorages * staked rate\n        uint256 stakedSeig = rdiv(\n            rmul(\n                maxSeig,\n                // total staked amount\n                prevTotalSupply\n            ),\n            tos\n        );\n\n        // L2 sequencers\n        uint256 l2TotalSeigs;\n        uint256 curLayer2Tvl;\n        address rollupConfig;\n        bool layer2Allowed;\n\n        // L2 seigs settlement\n        uint256 layer2Seigs;\n        address _layer2Manager = layer2Manager;\n\n        Layer2Reward memory oldLayer2Info = layer2RewardInfo[msg.sender];\n        if (layer2StartBlock == 0) layer2StartBlock = block.number - 1;\n\n        if (\n            _layer2Manager != address(0) && layer2StartBlock != 1 && layer2StartBlock < block.number\n        ) {\n            (rollupConfig, layer2Allowed) = allowIssuanceLayer2Seigs(msg.sender);\n            if (layer2Allowed)\n                curLayer2Tvl = IL1BridgeRegistry(l1BridgeRegistry).layer2TVL(rollupConfig);\n            if (totalLayer2TVL != 0) l2TotalSeigs = rdiv(rmul(maxSeig, totalLayer2TVL * 1e9), tos);\n        }\n\n        // pseig\n        // uint256 totalPseig = rmul(maxSeig - stakedSeig, relativeSeigRate);\n        uint256 totalPseig = rmul(maxSeig - stakedSeig - l2TotalSeigs, relativeSeigRate);\n        nextTotalSupply = prevTotalSupply + stakedSeig + totalPseig;\n        _lastSeigBlock = block.number;\n\n        _tot.setFactor(_calcNewFactor(prevTotalSupply, nextTotalSupply, _tot.factor()));\n\n        emit CommitLog1(_tot.totalSupply(), tos, prevTotalSupply, nextTotalSupply);\n\n        uint256 unstakedSeig = maxSeig - stakedSeig - l2TotalSeigs;\n        uint256 powertonSeig;\n        uint256 daoSeig;\n        uint256 relativeSeig;\n\n        address wton_ = _wton;\n        if (l2TotalSeigs != 0) IWTON(wton_).mint(_layer2Manager, l2TotalSeigs);\n\n        if (_powerton != address(0)) {\n            powertonSeig = rmul(unstakedSeig, powerTONSeigRate);\n            IWTON(wton_).mint(_powerton, powertonSeig);\n        }\n\n        if (dao != address(0)) {\n            daoSeig = rmul(unstakedSeig, daoSeigRate);\n            IWTON(wton_).mint(dao, daoSeig);\n        }\n\n        if (relativeSeigRate != 0) {\n            relativeSeig = totalPseig;\n            accRelativeSeig += relativeSeig;\n        }\n\n        // L2 seigs settlement\n        if (layer2Allowed) {\n            if (l2TotalSeigs != 0) l2RewardPerUint += ((l2TotalSeigs * 1e18) / totalLayer2TVL);\n\n            Layer2Reward storage newLayer2Info = layer2RewardInfo[msg.sender];\n\n            if (l2RewardPerUint != 0) {\n                if (_isSenderOperator || oldLayer2Info.layer2Tvl > curLayer2Tvl) {\n                    layer2Seigs = unSettledReward(msg.sender);\n\n                    if (layer2Seigs != 0) {\n                        ILayer2Manager(_layer2Manager).updateSeigniorage(rollupConfig, layer2Seigs);\n                        newLayer2Info.initialDebt += layer2Seigs;\n                    }\n                } else if (_lastCommitBlock[msg.sender] == 0) {\n                    newLayer2Info.initialDebt = (l2RewardPerUint * oldLayer2Info.layer2Tvl) / 1e18;\n                }\n            }\n\n            newLayer2Info.layer2Tvl = curLayer2Tvl;\n            totalLayer2TVL = totalLayer2TVL + curLayer2Tvl - oldLayer2Info.layer2Tvl;\n        }\n\n        // on v1_3. changed event\n        // emit SeigGiven(msg.sender, maxSeig, stakedSeig, unstakedSeig, powertonSeig, daoSeig, relativeSeig);\n        emit SeigGiven2(\n            msg.sender,\n            maxSeig,\n            stakedSeig,\n            unstakedSeig,\n            powertonSeig,\n            daoSeig,\n            relativeSeig,\n            l2TotalSeigs,\n            layer2Seigs\n        );\n\n        result = true;\n    }\n\n    //=====\n\n    // https://github.com/tokamak-network/TON-total-supply\n    // 50,000,000 + 3.92*(target block # - 10837698) - TON in 0x0..1 - 178111.66690985573\n    function totalSupplyOfTon() public view returns (uint256 tos) {\n        uint256 startBlock = (seigStartBlock == 0 ? SEIG_START_MAINNET : seigStartBlock);\n        uint256 initial = (\n            initialTotalSupply == 0 ? INITIAL_TOTAL_SUPPLY_MAINNET : initialTotalSupply\n        );\n        uint256 burntAmount = (burntAmountAtDAO == 0 ? BURNT_AMOUNT_MAINNET : burntAmountAtDAO);\n\n        tos =\n            initial +\n            (_seigPerBlock * (block.number - startBlock)) -\n            (ITON(_ton).balanceOf(address(1)) * (10 ** 9)) -\n            burntAmount;\n    }\n\n    function _totalSupplyOfTon(uint256 blockNumber) internal view returns (uint256 tos) {\n        uint256 startBlock = (seigStartBlock == 0 ? SEIG_START_MAINNET : seigStartBlock);\n        uint256 initial = (\n            initialTotalSupply == 0 ? INITIAL_TOTAL_SUPPLY_MAINNET : initialTotalSupply\n        );\n        uint256 burntAmount = (burntAmountAtDAO == 0 ? BURNT_AMOUNT_MAINNET : burntAmountAtDAO);\n\n        tos =\n            initial +\n            (_seigPerBlock * (blockNumber - startBlock)) -\n            (ITON(_ton).balanceOf(address(1)) * (10 ** 9)) -\n            burntAmount;\n    }\n}\n"}, "contracts/stake/managers/SeigManagerV1_3Storage.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\n/// @title\n/// @notice\ncontract SeigManagerV1_3Storage  {\n\n    struct Layer2Reward {\n        uint256 layer2Tvl;\n        uint256 initialDebt;\n    }\n\n    /// L1BridgeRegistry address\n    address public l1BridgeRegistry;\n    /// Layer2Manager address\n    address public layer2Manager;\n\n    /// layer2 seigs start block\n    uint256 public layer2StartBlock;\n\n    uint256 public l2RewardPerUint;  // ray unit .1e27\n\n    /// total layer2 TON TVL\n    uint256 public totalLayer2TVL;\n\n    /// layer2 reward information for each layer2(candidate).\n    mapping (address => Layer2Reward) public layer2RewardInfo;\n\n    bool internal _lock;\n\n    modifier ifFree {\n        require(!_lock, \"lock\");\n        _lock = true;\n        _;\n        _lock = false;\n    }\n}\n"}}}
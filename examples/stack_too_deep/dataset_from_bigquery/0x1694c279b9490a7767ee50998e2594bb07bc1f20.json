{"language": "Solidity", "sources": {"contracts/TopiaNFTVaultV2.sol": {"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.30;\n\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport './interfaces/ITOPIA.sol';\nimport './interfaces/INFT.sol';\nimport './interfaces/IHUB.sol';\n\n\ncontract TopiaNFTVault is ReentrancyGuard, Ownable, IERC721Receiver {\n    using SafeERC20 for IERC20;\n\n    // The ERC721 token contracts\n    INFT public ALPHA;\n    INFT public GENESIS;\n    INFT public RATS;\n    IHUB public HUB;\n\n    // The address of the DUST contract\n    ITOPIA public TOPIA;\n\n    address public sweepersTreasury;\n\n    // The minimum amount of time left in an auction after a new bid is created\n    uint32 public timeBufferThreshold;\n    // The amount of time to add to the auction when a bid is placed under the timeBufferThreshold\n    uint32 public timeBuffer;\n\n    // The minimum percentage difference between the last bid amount and the current bid\n    uint16 public minBidIncrementPercentage;\n\n    address payable public Dev;\n    uint256 public DevFee = 0.0005 ether;\n\n    // The auction info\n    struct Auction {\n        // The Contract Address for the listed NFT\n        INFT contractAddress;\n        // The Token ID for the listed NFT\n        uint16 tokenId;\n        // The time that the auction started\n        uint32 startTime;\n        // The time that the auction is scheduled to end\n        uint32 endTime;\n        // The opening price for the auction\n        uint256 startingPrice;\n        // The current bid amount in DUST\n        uint256 currentBid;\n        // The previous bid amount in DUST\n        uint256 previousBid;\n        // The active bidId\n        uint32 activeBidId;\n        // The address of the current highest bid\n        address bidder;\n        // The number of bids placed\n        uint16 numberBids;\n        // The statuses of the auction\n        bool blind;\n        bool settled;\n        bool failed;\n        string hiddenImage;\n        string openseaSlug;\n    }\n    mapping(uint32 => Auction) public auctionId;\n    uint32 private currentAuctionId = 0;\n    uint32 private currentBidId = 0;\n    uint32 public activeAuctionCount;\n\n    struct Bids {\n        uint256 bidAmount;\n        address bidder;\n        uint32 auctionId;\n        uint8 bidStatus; // 1 = active, 2 = outbid, 3 = canceled, 4 = accepted\n    }\n    mapping(uint32 => Bids) public bidId;\n    mapping(uint32 => uint32[]) public auctionBids;\n    mapping(address => uint32[]) public userBids;\n    bool public mustHold;\n\n    modifier holdsMetatopia() {\n        require(!mustHold || ALPHA.balanceOf(msg.sender) > 0 || GENESIS.balanceOf(msg.sender) > 0 || RATS.balanceOf(msg.sender) > 0 || HUB.balanceOf(msg.sender) > 0, \"Must hold a Sweeper NFT\");\n        _;\n    }\n\n    modifier onlySweepersTreasury() {\n        require(msg.sender == sweepersTreasury || msg.sender == owner(), \"Sender not allowed\");\n        _;\n    }\n\n    event AuctionCreated(uint32 indexed AuctionId, uint32 startTime, uint32 endTime, address indexed NFTContract, uint16 indexed TokenId, bool BlindAuction);\n    event AuctionSettled(uint32 indexed AuctionId, address indexed NFTProjectAddress, uint16 tokenID, address buyer, uint256 finalAmount);\n    event AuctionFailed(uint32 indexed AuctionId, address indexed NFTProjectAddress, uint16 tokenID);\n    event AuctionCanceled(uint32 indexed AuctionId, address indexed NFTProjectAddress, uint16 tokenID);\n    event AuctionExtended(uint32 indexed AuctionId, uint32 NewEndTime);\n    event AuctionTimeBufferUpdated(uint32 timeBuffer);\n    event AuctionMinBidIncrementPercentageUpdated(uint16 minBidIncrementPercentage);\n    event BidPlaced(uint32 indexed BidId, uint32 indexed AuctionId, address sender, uint256 value);\n\n    constructor(\n        address _alpha,\n        address _genesis,\n        address _rats,\n        address _hub,\n        address _topia,\n        uint32 _timeBuffer,\n        uint16 _minBidIncrementPercentage\n    ) {\n        ALPHA = INFT(_alpha);\n        GENESIS = INFT(_genesis);\n        RATS = INFT(_rats);\n        HUB = IHUB(_hub);\n        TOPIA = ITOPIA(_topia);\n        timeBuffer = _timeBuffer;\n        timeBufferThreshold = _timeBuffer;\n        minBidIncrementPercentage = _minBidIncrementPercentage;\n    }\n\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n        return IERC721Receiver.onERC721Received.selector;\n    }\n\n    /**\n     * @notice Set the auction time buffer.\n     * @dev Only callable by the owner.\n     */\n    function setTimeBuffer(uint32 _timeBufferThreshold, uint32 _timeBuffer) external onlyOwner {\n        require(timeBuffer >= timeBufferThreshold, 'timeBuffer must be >= timeBufferThreshold');\n        timeBufferThreshold = _timeBufferThreshold;\n        timeBuffer = _timeBuffer;\n\n        emit AuctionTimeBufferUpdated(_timeBuffer);\n    }\n\n    function setDev(address _dev, uint256 _devFee) external onlyOwner {\n        Dev = payable(_dev);\n        DevFee = _devFee;\n    }\n\n    function setHUB(address _hub) external onlyOwner {\n        HUB = IHUB(_hub);\n    }\n\n    function setMustHold(bool _flag) external onlyOwner {\n        mustHold = _flag;\n    }\n\n    function updateSweepersTreasury(address _treasury) external onlyOwner {\n        sweepersTreasury = _treasury;\n    }\n\n    /**\n     * @notice Set the auction minimum bid increment percentage.\n     * @dev Only callable by the owner.\n     */\n    function setMinBidIncrementPercentage(uint16 _minBidIncrementPercentage) external onlyOwner {\n        minBidIncrementPercentage = _minBidIncrementPercentage;\n\n        emit AuctionMinBidIncrementPercentageUpdated(_minBidIncrementPercentage);\n    }\n\n    function createAuction(address _nftContract, uint16 _tokenId, uint32 _startTime, uint32 _endTime, uint256 _startingPrice, string calldata _slug) external onlySweepersTreasury nonReentrant {\n        uint32 id = currentAuctionId++;\n\n        auctionId[id] = Auction({\n            contractAddress : INFT(_nftContract),\n            tokenId : _tokenId,\n            startTime : _startTime,\n            endTime : _endTime,\n            startingPrice : _startingPrice,\n            currentBid : 0,\n            previousBid : 0,\n            activeBidId : 0,\n            bidder : address(0),\n            numberBids : 0,\n            blind : false,\n            settled : false,\n            failed : false,\n            hiddenImage : 'null',\n            openseaSlug : _slug\n        });\n        activeAuctionCount++;\n\n        IERC721(_nftContract).safeTransferFrom(msg.sender, address(this), _tokenId);\n\n        emit AuctionCreated(id, _startTime, _endTime, _nftContract, _tokenId, false);\n    }\n\n    function createManyAuctionSameProject(address _nftContract, uint16[] calldata _tokenIds, uint32 _startTime, uint32 _endTime, uint256 _startingPrice, string calldata _slug) external onlySweepersTreasury nonReentrant {\n        \n        for(uint i = 0; i < _tokenIds.length; i++) {\n            uint32 id = currentAuctionId++;\n            auctionId[id] = Auction({\n                contractAddress : INFT(_nftContract),\n                tokenId : _tokenIds[i],\n                startTime : _startTime,\n                endTime : _endTime,\n                startingPrice : _startingPrice,\n                currentBid : 0,\n                previousBid : 0,\n                activeBidId : 0,\n                bidder : address(0),\n                numberBids : 0,\n                blind : false,\n                settled : false,\n                failed : false,\n                hiddenImage : 'null',\n                openseaSlug : _slug\n            });\n            activeAuctionCount++;\n\n            IERC721(_nftContract).safeTransferFrom(msg.sender, address(this), _tokenIds[i]);\n\n            emit AuctionCreated(id, _startTime, _endTime, _nftContract, _tokenIds[i], false);\n        }\n    }\n\n    function createBlindAuction(address _nftContract, uint32 _startTime, uint32 _endTime, string calldata _hiddenImage, uint256 _startingPrice, string calldata _slug) external onlySweepersTreasury nonReentrant {\n        uint32 id = currentAuctionId++;\n\n        auctionId[id] = Auction({\n            contractAddress : INFT(_nftContract),\n            tokenId : 0,\n            startTime : _startTime,\n            endTime : _endTime,\n            startingPrice : _startingPrice,\n            currentBid : 0,\n            previousBid : 0,\n            activeBidId : 0,\n            bidder : address(0),\n            numberBids : 0,\n            blind : true,\n            settled : false,\n            failed : false,\n            hiddenImage : _hiddenImage,\n            openseaSlug : _slug\n        });\n        activeAuctionCount++;       \n\n        emit AuctionCreated(id, _startTime, _endTime, _nftContract, 0, true);\n    }\n\n    function createManyBlindAuctionSameProject(address _nftContract, uint16 _numAuctions, uint32 _startTime, uint32 _endTime, string calldata _hiddenImage, uint256 _startingPrice, string calldata _slug) external onlySweepersTreasury nonReentrant {\n        \n        for(uint i = 0; i < _numAuctions; i++) {\n            uint32 id = currentAuctionId++;\n            auctionId[id] = Auction({\n                contractAddress : INFT(_nftContract),\n                tokenId : 0,\n                startTime : _startTime,\n                endTime : _endTime,\n                startingPrice : _startingPrice,\n                currentBid : 0,\n                previousBid : 0,\n                activeBidId : 0,\n                bidder : address(0),\n                numberBids : 0,\n                blind : true,\n                settled : false,\n                failed : false,\n                hiddenImage : _hiddenImage,\n                openseaSlug : _slug\n            });\n            activeAuctionCount++;\n\n            emit AuctionCreated(id, _startTime, _endTime, _nftContract, 0, true);\n        }\n    }\n\n    function updateBlindAuction(uint32 _id, uint16 _tokenId) external onlySweepersTreasury {\n        require(auctionId[_id].tokenId == 0, \"Auction already updated\");\n        auctionId[_id].tokenId = _tokenId;\n        auctionId[_id].contractAddress.safeTransferFrom(msg.sender, address(this), _tokenId);\n        auctionId[_id].blind = false;\n    }\n\n    function updateManyBlindAuction(uint32[] calldata _ids, uint16[] calldata _tokenIds) external onlySweepersTreasury {\n        require(_ids.length == _tokenIds.length, \"_id and tokenId must be same length\");\n        for(uint i = 0; i < _ids.length; i++) {\n            require(auctionId[_ids[i]].tokenId == 0, \"Auction already updated\");\n            auctionId[_ids[i]].tokenId = _tokenIds[i];\n            auctionId[_ids[i]].contractAddress.safeTransferFrom(msg.sender, address(this), _tokenIds[i]);\n            auctionId[_ids[i]].blind = false;\n        } \n    }\n\n    function updateBlindImage(uint32 _id, string calldata _hiddenImage) external onlySweepersTreasury {\n        auctionId[_id].hiddenImage = _hiddenImage;\n    }\n\n    function updateManyBlindImage(uint32[] calldata _ids, string calldata _hiddenImage) external onlySweepersTreasury {\n        for(uint i = 0; i < _ids.length; i++) {\n            auctionId[_ids[i]].hiddenImage = _hiddenImage;\n        } \n    }\n\n    function updateOpenseaSlug(uint32 _id, string calldata _slug) external onlySweepersTreasury {\n        auctionId[_id].openseaSlug = _slug;\n    }\n\n    function updateManyOpenseaSlug(uint32[] calldata _ids, string calldata _slug) external onlySweepersTreasury {\n        for(uint i = 0; i < _ids.length; i++) {\n            auctionId[_ids[i]].openseaSlug = _slug;\n        } \n    }\n\n    function updateAuctionStartingPrice(uint32 _id, uint256 _startingPrice) external onlySweepersTreasury {\n        require(auctionId[_id].currentBid < auctionId[_id].startingPrice, 'Auction already met startingPrice');\n        auctionId[_id].startingPrice = _startingPrice;\n    }\n\n    function updateManyAuctionStartingPrice(uint32[] calldata _ids, uint256 _startingPrice) external onlySweepersTreasury {\n        for(uint i = 0; i < _ids.length; i++) {\n            if(auctionId[_ids[i]].currentBid < auctionId[_ids[i]].startingPrice) {\n                auctionId[_ids[i]].startingPrice = _startingPrice;\n            } else {\n                continue;\n            }\n        }\n    }\n\n    function updateAuctionEndTime(uint32 _id, uint32 _newEndTime) external onlySweepersTreasury {\n        require(auctionId[_id].currentBid == 0, 'Auction already met startingPrice');\n        auctionId[_id].endTime = _newEndTime;\n        emit AuctionExtended(_id, _newEndTime);\n    }\n\n    function updateManyAuctionEndTime(uint32[] calldata _ids, uint32 _newEndTime) external onlySweepersTreasury {\n        for(uint i = 0; i < _ids.length; i++) {\n            if(auctionId[_ids[i]].currentBid == 0) {\n                auctionId[_ids[i]].endTime = _newEndTime;\n                emit AuctionExtended(_ids[i], _newEndTime);\n            } else {\n                continue;\n            }\n        }\n    }\n\n    function emergencyCancelAllAuctions() external onlySweepersTreasury {\n        for(uint32 i = 0; i < currentAuctionId; i++) {\n            uint8 status = auctionStatus(i);\n            if(status == 1) {\n                _cancelAuction(i);\n            } else {\n                continue;\n            }\n        }\n    }\n\n    function emergencyCancelAuction(uint32 _id) external onlySweepersTreasury {\n        require(auctionStatus(_id) == 1, 'Can only cancel active auctions');\n        _cancelAuction(_id);\n    }\n\n    function _cancelAuction(uint32 _id) private {\n        auctionId[_id].endTime = uint32(block.timestamp);\n        auctionId[_id].failed = true;\n        address lastBidder = auctionId[_id].bidder;\n\n        // Refund the last bidder, if applicable\n        if (lastBidder != address(0)) {\n            TOPIA.mint(lastBidder, auctionId[_id].currentBid);\n            bidId[auctionId[_id].activeBidId].bidStatus = 3;\n            auctionId[_id].previousBid = auctionId[_id].currentBid;\n        }\n        IERC721(auctionId[_id].contractAddress).transferFrom(address(this), Dev, auctionId[_id].tokenId);\n        emit AuctionCanceled(_id, address(auctionId[_id].contractAddress), auctionId[_id].tokenId);\n    }\n\n    function emergencyRescueNFT(INFT _nft, uint16 _tokenId) external onlySweepersTreasury {\n        _nft.safeTransferFrom(address(this), Dev, _tokenId);\n    }\n\n    function emergencyRescueERC20(IERC20 token, uint256 amount, address to) external onlySweepersTreasury {\n        if( token.balanceOf(address(this)) < amount ) {\n            amount = token.balanceOf(address(this));\n        }\n        token.transfer(to, amount);\n    }\n\n    /**\n     * @notice Create a bid for a NFT, with a given amount.\n     * @dev This contract only accepts payment in TOPIA.\n     */\n    function createBid(uint32 _id, uint256 _bidAmount) external payable holdsMetatopia nonReentrant {\n        require(auctionStatus(_id) == 1, 'Auction is not Active');\n        require(block.timestamp < auctionId[_id].endTime, 'Auction expired');\n        require(msg.value == DevFee, 'Fee not covered');\n        require(_bidAmount >= auctionId[_id].startingPrice, 'Bid amount must be at least starting price');\n        require(\n            _bidAmount >= auctionId[_id].currentBid + ((auctionId[_id].currentBid * minBidIncrementPercentage) / 10000),\n            'Must send more than last bid by minBidIncrementPercentage amount'\n        );\n\n        address lastBidder = auctionId[_id].bidder;\n        uint32 _bidId = currentBidId++;\n\n        // Refund the last bidder, if applicable\n        if (lastBidder != address(0)) {\n            TOPIA.mint(lastBidder, auctionId[_id].currentBid);\n            bidId[auctionId[_id].activeBidId].bidStatus = 2;\n            auctionId[_id].previousBid = auctionId[_id].currentBid;\n        }\n\n        auctionId[_id].currentBid = _bidAmount;\n        auctionId[_id].bidder = msg.sender;\n        auctionId[_id].activeBidId = _bidId;\n        auctionBids[_id].push(_bidId);\n        auctionId[_id].numberBids++;\n        bidId[_bidId].bidder = msg.sender;\n        bidId[_bidId].bidAmount = _bidAmount;\n        bidId[_bidId].auctionId = _id;\n        bidId[_bidId].bidStatus = 1;\n        userBids[msg.sender].push(_bidId);\n\n        TOPIA.burnFrom(msg.sender, _bidAmount);\n\n        // Extend the auction if the bid was received within `timeBufferThreshold` of the auction end time\n        bool extended = auctionId[_id].endTime - block.timestamp < timeBufferThreshold;\n        if (extended) {\n            auctionId[_id].endTime = uint32(block.timestamp) + timeBuffer;\n            emit AuctionExtended(_id, auctionId[_id].endTime);\n        }\n\n        Dev.transfer(DevFee);\n\n        emit BidPlaced(_bidId, _id, msg.sender, _bidAmount);\n    }\n\n    /**\n     * @notice Settle an auction, finalizing the bid and transferring the NFT to the winner.\n     * @dev If there are no bids, the Auction is failed and can be relisted.\n     */\n    function _settleAuction(uint32 _id) external {\n        require(auctionStatus(_id) == 2, \"Auction can't be settled at this time\");\n        require(auctionId[_id].tokenId != 0, \"Auction TokenId must be updated first\");\n\n        auctionId[_id].settled = true;\n        if (auctionId[_id].bidder == address(0) && auctionId[_id].currentBid == 0) {\n            auctionId[_id].failed = true;\n            IERC721(auctionId[_id].contractAddress).transferFrom(address(this), Dev, auctionId[_id].tokenId);\n            emit AuctionFailed(_id, address(auctionId[_id].contractAddress), auctionId[_id].tokenId);\n        } else {\n            IERC721(auctionId[_id].contractAddress).transferFrom(address(this), auctionId[_id].bidder, auctionId[_id].tokenId);\n        }\n        activeAuctionCount--;\n        emit AuctionSettled(_id, address(auctionId[_id].contractAddress), auctionId[_id].tokenId, auctionId[_id].bidder, auctionId[_id].currentBid);\n    }\n\n    function auctionStatus(uint32 _id) public view returns (uint8) {\n        if (block.timestamp >= auctionId[_id].endTime && auctionId[_id].tokenId == 0) {\n        return 5; // AWAITING TOKENID - Auction finished\n        }\n        if (auctionId[_id].failed) {\n        return 4; // FAILED - not sold by end time\n        }\n        if (auctionId[_id].settled) {\n        return 3; // SUCCESS - Bidder won \n        }\n        if (block.timestamp >= auctionId[_id].endTime) {\n        return 2; // AWAITING SETTLEMENT - Auction finished\n        }\n        if (block.timestamp <= auctionId[_id].endTime && block.timestamp >= auctionId[_id].startTime) {\n        return 1; // ACTIVE - bids enabled\n        }\n        return 0; // QUEUED - awaiting start time\n    }\n\n    function getBidsByAuctionId(uint32 _id) external view returns (uint32[] memory bidIds) {\n        uint256 length = auctionBids[_id].length;\n        bidIds = new uint32[](length);\n        for(uint i = 0; i < length; i++) {\n            bidIds[i] = auctionBids[_id][i];\n        }\n    }\n\n    function getBidsByUser(address _user) external view returns (uint32[] memory bidIds) {\n        uint256 length = userBids[_user].length;\n        bidIds = new uint32[](length);\n        for(uint i = 0; i < length; i++) {\n            bidIds[i] = userBids[_user][i];\n        }\n    }\n\n    function getTotalBidsLength() external view returns (uint32) {\n        return currentBidId - 1;\n    }\n\n    function getBidsLengthForAuction(uint32 _id) external view returns (uint256) {\n        return auctionBids[_id].length;\n    }\n\n    function getBidsLengthForUser(address _user) external view returns (uint256) {\n        return userBids[_user].length;\n    }\n\n    function getBidInfoByIndex(uint32 _bidId) external view returns (address _bidder, uint256 _bidAmount, uint32 _auctionId, string memory _bidStatus) {\n        _bidder = bidId[_bidId].bidder;\n        _bidAmount = bidId[_bidId].bidAmount;\n        _auctionId = bidId[_bidId].auctionId;\n        if(bidId[_bidId].bidStatus == 1) {\n            _bidStatus = 'active';\n        } else if(bidId[_bidId].bidStatus == 2) {\n            _bidStatus = 'outbid';\n        } else if(bidId[_bidId].bidStatus == 3) {\n            _bidStatus = 'canceled';\n        } else if(bidId[_bidId].bidStatus == 4) {\n            _bidStatus = 'accepted';\n        } else {\n            _bidStatus = 'invalid BidID';\n        }\n    }\n\n    function getBidStatus(uint32 _bidId) external view returns (string memory _bidStatus) {\n        if(bidId[_bidId].bidStatus == 1) {\n            _bidStatus = 'active';\n        } else if(bidId[_bidId].bidStatus == 2) {\n            _bidStatus = 'outbid';\n        } else if(bidId[_bidId].bidStatus == 3) {\n            _bidStatus = 'canceled';\n        } else if(bidId[_bidId].bidStatus == 4) {\n            _bidStatus = 'accepted';\n        } else {\n            _bidStatus = 'invalid BidID';\n        }\n    }\n\n    function getActiveAuctions() external view returns (uint32[] memory _activeAuctions) {\n        _activeAuctions = new uint32[](activeAuctionCount);\n        for(uint32 i = 0; i < currentAuctionId; i++) {\n            uint32 z = 0;\n            uint8 status = auctionStatus(i);\n            if(status == 1) {\n                _activeAuctions[z] = i;\n                z++;\n            } else {\n                continue;\n            }\n        }\n    }\n\n    function getAllAuctions() external view returns (uint32[] memory auctions, uint8[] memory status) {\n        auctions = new uint32[](currentAuctionId);\n        status = new uint8[](currentAuctionId);\n        for(uint32 i = 0; i < currentAuctionId; i++) {\n            auctions[i] = i;\n            status[i] = auctionStatus(i);\n        }\n    }\n}\n"}, "contracts/interfaces/IHUB.sol": {"content": "// SPDX-License-Identifier: MIT LICENSE\n\npragma solidity ^0.8.30;\n\ninterface IHUB {\n    function emitGenesisStaked(address owner, uint16[] calldata tokenIds, uint8 gameId) external;\n    function emitAlphaStaked(address owner, uint16[] calldata tokenIds, uint8 gameId) external;\n    function emitGenesisUnstaked(address owner, uint16[] calldata tokenIds) external;\n    function emitAlphaUnstaked(address owner, uint16[] calldata tokenIds) external;\n    function emitTopiaClaimed(address owner, uint256 amount) external;\n    function balanceOf(address owner) external view returns (uint256);\n}"}, "contracts/interfaces/INFT.sol": {"content": "// SPDX-License-Identifier: MIT LICENSE\n\npragma solidity ^0.8.30;\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\n\ninterface INFT is IERC721Enumerable {\n    \n}"}, "contracts/interfaces/ITOPIA.sol": {"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.30;\n\ninterface ITOPIA {\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address to, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n    function burn(uint256 _amount) external;\n    function burnFrom(address _from, uint256 _amount) external;\n    function mint(address _to, uint256 _amount) external;\n}"}, "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"}, "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"}, "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"}, "@openzeppelin/contracts/access/Ownable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"}, "@openzeppelin/contracts/security/ReentrancyGuard.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"}, "@openzeppelin/contracts/token/ERC721/IERC721.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"}, "@openzeppelin/contracts/utils/Address.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"}, "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"}, "@openzeppelin/contracts/token/ERC20/IERC20.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"}, "@openzeppelin/contracts/utils/Context.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"}, "@openzeppelin/contracts/utils/introspection/IERC165.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"}}, "settings": {"optimizer": {"enabled": true}, "viaIR": false, "evmVersion": "istanbul", "outputSelection": {"*": {"*": ["evm.legacyAssembly"]}}}}
{"language": "Solidity", "sources": {"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"}, "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"}, "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"}, "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"}, "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"}, "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"}, "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"}, "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.30;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"}, "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"}, "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.30;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"}, "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"}, "contracts/DCAStrategy.sol": {"content": "pragma solidity ^0.8.30;\n\n//SPDX-License-Identifier: BUSL-1.1\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IWETH.sol\";\nimport \"./interfaces/IOracleAggregator.sol\";\nimport \"./interfaces/IFlashLoanReceiver.sol\";\n\ninterface IFees {\n    function feeCollector(uint256 _index) external view returns (address);\n\n    function depositStatus(uint256 _index) external view returns (bool);\n\n    function calcFee(\n        uint256 _strategyId,\n        address _user,\n        address _feeToken\n    ) external view returns (uint256);\n}\n\ncontract DCAStrategy is\n    ReentrancyGuardUpgradeable,\n    UUPSUpgradeable,\n    OwnableUpgradeable,\n    PausableUpgradeable\n{\n    address public constant wethAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    uint16 public constant STRATEGY_INDEX = 23;\n    uint16 public constant DIVISOR = 1000;\n    IFees public feesInstance;\n    address public oracleAggregator;\n    uint32 public numPairs;\n    uint public fillingFee;\n\n    function initialize(\n        address feesAddress_,\n        address oracleAggregator_,\n        uint fillingFee_\n    ) public initializer {\n        __ReentrancyGuard_init();\n        __Ownable_init();\n        __Pausable_init();\n\n        feesInstance = IFees(feesAddress_);\n        oracleAggregator = oracleAggregator_;\n        fillingFee = fillingFee_;\n    }\n\n    /// @notice struct denoting user's orders\n    /// @param startRound starting round of user's order\n    /// @param rounds number of rounds to execute user's order\n    /// @param amount amount deposited by user\n    struct UserData {\n        uint64 startRound;\n        uint64 rounds;\n        uint amount;\n    }\n\n    /// @notice struct denoting data for each round\n    /// @dev rate can be derived from shares/filled\n    /// @param roundFilled amount filled in round\n    /// @param roundShares number of shares in that round\n    struct RoundData {\n        uint roundFilled;\n        uint roundShares;\n    }\n\n    /// @notice struct denoting data for each pair\n    /// @param tokenA token to sell\n    /// @param tokenB token to buy\n    /// @param decimalA token A decimals\n    /// @param decimalB token B decimals\n    /// @param period purchase interval\n    struct PairData {\n        address tokenA;\n        address tokenB;\n        uint8 decimalA;\n        uint8 decimalB;\n        uint32 period;\n    }\n\n    /// @notice mapping of pairId to pairData\n    /// @dev used for querying avaliable pairs\n    /// @dev pair +1 is always the opposite pair\n    /// @dev mapping of pairId => pairData\n    mapping(uint => PairData) public pairIdMap;\n\n    /// @notice mapping of pair key to pair id\n    /// @dev inverse of pairDataMap\n    /// @dev mapping of tokenA => tokenB => period => pairId\n    mapping(address => mapping(address => mapping(uint32 => uint)))\n        public pairDataMap;\n\n    /// @notice determines the next possible time a pair can be filled\n    /// @dev mapping of tokenA  =>  tokenB  =>  period  =>  lastFillTime\n    mapping(address => mapping(address => mapping(uint32 => uint)))\n        public lastFillTime;\n\n    /// @notice map of user address to their order\n    /// @dev mapping of user  =>  tokenA  =>  tokenB  =>  period  =>  UserData\n    mapping(address => mapping(address => mapping(address => mapping(uint32 => UserData))))\n        public userDataMap;\n\n    /// @notice mapping that provides the amount to fill for a pair + period key\n    /// @dev mapping of tokenA  =>  tokenB  =>  period  =>  amountToFill\n    mapping(address => mapping(address => mapping(uint32 => uint)))\n        public amountToFillMap;\n\n    /// @notice mapping that provides the amount to deduct for a pair + period + round key\n    /// @dev mapping of tokenA  =>  tokenB  =>  period  =>  roundNumber  =>  amountToDeduct\n    mapping(address => mapping(address => mapping(uint32 => mapping(uint => uint))))\n        public amountToDeductMap;\n\n    /// @notice the current round for a pair period\n    /// @dev mapping of tokenA  =>  tokenB  =>  period  =>  currentRound for pair\n    mapping(address => mapping(address => mapping(uint32 => uint64)))\n        public currentRoundMap; // to uint64\n\n    /// @notice round data for a pair period's round\n    /// @dev mapping of tokenA  =>  tokenB  =>  period  =>  roundNumber  =>  RoundData\n    mapping(address => mapping(address => mapping(uint32 => mapping(uint => RoundData))))\n        public roundDataMap;\n\n    /// @notice shares of token\n    /// @dev token  =>  shares\n    mapping(address => uint) public tokenShares;\n\n    event Deposit(\n        address user,\n        address tokenA,\n        address tokenB,\n        uint32 period,\n        uint amount,\n        uint round,\n        uint64 numRounds\n    );\n    event Withdraw(\n        address user,\n        address tokenA,\n        address tokenB,\n        uint32 period,\n        uint amountA,\n        uint amountB,\n        uint round\n    );\n    event Modify(\n        address user,\n        address tokenA,\n        address tokenB,\n        uint32 period,\n        uint amount,\n        uint32 newPeriod,\n        uint64 numRounds,\n        bool unwrapEth,\n        uint round,\n        uint newPeriodRound\n    );\n    event Fill(\n        address executor,\n        address tokenA,\n        address tokenB,\n        uint32 period,\n        uint amountIn,\n        uint amountOut,\n        uint rate\n    );\n    event CreatePair(\n        address tokenA,\n        address tokenB,\n        uint32 period,\n        uint pairId\n    );\n\n    /*\n     * CONTRACT OWNER\n     */\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    function setFees(uint fillingFee_) external onlyOwner { \n        require(\n            fillingFee_ <= 50, // filling fee can never be more than 5%\n            \"ERR: INVALID_FEE\"\n        );\n        fillingFee = fillingFee_;\n    }\n\n    function pauseUnpause() external onlyOwner {\n        if (paused()) {\n            _unpause();\n        } else {\n            _pause();\n        }\n    }\n    /*\n     * /CONTRACT OWNER\n     */\n\n    /// @notice deposit tokens to contract for DCA\n    /// @param tokenA token to sell\n    /// @param tokenB token to buy\n    /// @param period purchase interval\n    /// @param amount total input amount\n    /// @param numRounds number of periods to commit to\n    function deposit(\n        address tokenA,\n        address tokenB,\n        uint32 period,\n        uint amount,\n        uint64 numRounds\n    ) external payable nonReentrant whenNotPaused {\n        _deposit(tokenA, tokenB, period, amount, numRounds);\n    }\n\n    /// @notice withdraw tokens from contract\n    /// @param tokenA token to sell\n    /// @param tokenB token to buy\n    /// @param period purchase interval\n    /// @param onlyFilled true to withdraw only filled orders\n    /// @param unwrapEth whether to return in raw eth\n    /// @param feeToken protocol fee discount token\n    function withdraw(\n        address tokenA,\n        address tokenB,\n        uint32 period,\n        bool onlyFilled,\n        bool unwrapEth,\n        address feeToken\n    ) external nonReentrant whenNotPaused {\n        _withdraw(tokenA, tokenB, period, onlyFilled, unwrapEth, feeToken);\n    }\n\n    /// @notice modify existing order\n    /// @param tokenA token to sell\n    /// @param tokenB token to buy\n    /// @param period purchase interval\n    /// @param amount new amount\n    /// @param newPeriod new period\n    /// @param numRounds new number of periods to commit to\n    /// @param unwrapEth whether to unwrapEth on existing order\n    /// @param feeToken protocol fee discount token\n    function modify(\n        address tokenA,\n        address tokenB,\n        uint32 period,\n        uint amount,\n        uint32 newPeriod,\n        uint64 numRounds,\n        bool unwrapEth,\n        address feeToken\n    ) external payable nonReentrant whenNotPaused {\n        _withdraw(tokenA, tokenB, period, false, unwrapEth, feeToken);\n        _deposit(tokenA, tokenB, newPeriod, amount, numRounds);\n\n        emit Modify(msg.sender, tokenA, tokenB, period, amount, newPeriod, numRounds, unwrapEth, currentRoundMap[tokenA][tokenB][period], currentRoundMap[tokenA][tokenB][newPeriod]);\n    }\n\n    /// @notice used to fill existing order\n    /// @dev as the required token and amounts are netted off, calling tokenA tokenB period & tokenB tokenA period would yield the same result\n    /// @param tokenA token to sell\n    /// @param tokenB token to buy\n    /// @param period purchase interval\n    /// @param params params to pass on callback, ignored if length 0\n    /// @return nett amount filled including searcher fee. This is the total amount pulled by the contract\n    function fill(\n        address tokenA,\n        address tokenB,\n        uint32 period,\n        bytes memory params\n    ) public nonReentrant whenNotPaused returns (uint) {\n        require(\n            block.timestamp >= lastFillTime[tokenA][tokenB][period] + period,\n            \"ERR: PERIOD_NOT_READY\"\n        );\n        uint returnAmount;\n        uint64 currentRound = currentRoundMap[tokenA][tokenB][period];\n        // Gets the token and amount required for filling\n        (\n            address fillToken,\n            uint nettFillAmount,\n            uint rate,\n            uint amountA,\n            uint amountB,\n            uint tokenADecimals\n        ) = getFillPair(tokenA, tokenB, period, currentRound);\n\n        uint fillingFeeAmount = (nettFillAmount * fillingFee) / DIVISOR;\n\n        if (fillToken == tokenA) {\n            // nettFillAmount is in tokenA\n\n            // Optimistically transfer tokens to searcher\n            returnAmount = (nettFillAmount * rate) / tokenADecimals;\n            IERC20(tokenB).transfer(msg.sender, returnAmount);\n\n            // Callback\n            if (params.length > 0) {\n                bool success = IFlashLoanReceiver(msg.sender).executeOperation(\n                    tokenB,\n                    returnAmount,\n                    0,\n                    params\n                );\n                require(success);\n            }\n\n            // Compute filled amounts\n            amountA += nettFillAmount - fillingFeeAmount;\n            amountB -= (nettFillAmount * rate) / tokenADecimals;\n\n            // Update shares for the token\n            tokenShares[tokenB] -= returnAmount;\n            tokenShares[tokenA] += nettFillAmount - fillingFeeAmount;\n        } else {\n            // fillToken == tokenB\n            // nettFillAmount is in tokenB\n\n            // Optimistically transfer tokens to searcher\n            returnAmount = (nettFillAmount * tokenADecimals) / rate;\n            IERC20(tokenA).transfer(msg.sender, returnAmount);\n\n            if (params.length > 0) {\n                bool success = IFlashLoanReceiver(msg.sender).executeOperation(\n                    tokenA,\n                    returnAmount,\n                    0,\n                    params\n                );\n                require(success);\n            }\n\n            // Compute filled amounts\n            amountB += nettFillAmount - fillingFeeAmount;\n            amountA -= (nettFillAmount * tokenADecimals) / rate;\n\n            // Update shares for the token\n            tokenShares[tokenA] -= returnAmount;\n            tokenShares[tokenB] += nettFillAmount - fillingFeeAmount;\n        }\n\n        // Transfer amount from searcher to contract\n        IERC20(fillToken).transferFrom(\n            msg.sender,\n            address(this),\n            nettFillAmount - fillingFeeAmount\n        );\n        emit Fill(\n            msg.sender,\n            tokenA,\n            tokenB,\n            period,\n            nettFillAmount - fillingFeeAmount,\n            returnAmount,\n            rate\n        );\n\n        // Update fill time\n        lastFillTime[tokenA][tokenB][period] = block.timestamp;\n        lastFillTime[tokenB][tokenA][period] = block.timestamp;\n\n        // Sync amount to buy for next round\n        amountToFillMap[tokenA][tokenB][period] -= amountToDeductMap[tokenA][\n            tokenB\n        ][period][currentRound];\n        amountToFillMap[tokenB][tokenA][period] -= amountToDeductMap[tokenB][\n            tokenA\n        ][period][currentRound];\n        amountToDeductMap[tokenA][tokenB][period][currentRound] = 0;\n        amountToDeductMap[tokenB][tokenA][period][currentRound] = 0;\n\n\n        /// @dev the swap happens here\n        // Update round data maps\n        roundDataMap[tokenA][tokenB][period][currentRound] = RoundData({\n            roundFilled: amountB,\n            roundShares: amountToFillMap[tokenA][tokenB][period]\n        });\n        roundDataMap[tokenB][tokenA][period][currentRound] = RoundData({\n            roundFilled: amountA,\n            roundShares: amountToFillMap[tokenB][tokenA][period]\n        });\n\n        // Increment round\n        currentRoundMap[tokenA][tokenB][period] += 1;\n        currentRoundMap[tokenB][tokenA][period] += 1;\n\n        return\n            fillToken == tokenA\n                ? (nettFillAmount - fillingFeeAmount) / rate\n                : (nettFillAmount - fillingFeeAmount);\n    }\n\n    /// @notice getter for number of shares for a token pair period\n    /// @param tokenA token to sell\n    /// @param tokenB token to buy\n    /// @param period purchase interval\n    /// @return totalShares for period\n    function totalShares(\n        address tokenA,\n        address tokenB,\n        uint32 period\n    ) public view returns (uint) {\n        return (amountToFillMap[tokenA][tokenB][period] - amountToDeductMap[tokenA][tokenB][period][currentRoundMap[tokenA][tokenB][period]]);\n    }\n\n    /// @notice getter for user's filled and unfilled amounts\n    /// @param tokenA token to sell\n    /// @param tokenB token to buy\n    /// @param period purchase interval\n    /// @param user address to check\n    /// @return unfilledAmounts\n    /// @return filledAmounts\n    function getAmounts(\n        address tokenA,\n        address tokenB,\n        uint32 period,\n        address user\n    ) public view returns (uint256, uint256) {\n        UserData memory userData = userDataMap[user][tokenA][tokenB][period];\n        if (userData.startRound > 0) {\n            uint64 currentRound = currentRoundMap[tokenA][tokenB][period];\n            uint sharesPerRound = userData.amount / userData.rounds;\n            uint256 unfilledAmount;\n            if (userData.startRound + userData.rounds > currentRound) {\n                // if user rounds are still active\n                unfilledAmount =\n                    sharesPerRound *\n                    (userData.startRound + userData.rounds - currentRound);\n            }\n            uint256 filledAmount;\n            RoundData memory roundData;\n            uint64 endRound = userData.startRound + userData.rounds <\n                currentRound\n                ? userData.startRound + userData.rounds\n                : currentRound;\n\n            for (uint i = userData.startRound; i < endRound; ) {\n                roundData = roundDataMap[tokenA][tokenB][period][i];\n                filledAmount += ((sharesPerRound * roundData.roundFilled) /\n                    roundData.roundShares);\n                unchecked {\n                    ++i;\n                }\n            }\n            return (unfilledAmount, filledAmount);\n        } else {\n            return (0, 0);\n        }\n    }\n\n    /// @notice getter for computing the amount to fill\n    /// @dev amount return doesn't include filler's fee\n    /// @param tokenA token to sell\n    /// @param tokenB token to buy\n    /// @param period purchase interval\n    /// @param round round number, typically currentRound\n    /// @return token address to fill\n    /// @return amount to fill, excluding filler fee\n    /// @return oracle rate\n    /// @return total amountA\n    /// @return total amountB\n    /// @return tokenADecimals\n    function getFillPair(\n        address tokenA,\n        address tokenB,\n        uint32 period,\n        uint round\n    ) public view returns (address, uint, uint, uint, uint, uint) {\n        // Nett off the amount to fill\n        // We compute everything in tokenB\n        \n        // rateAB\n        uint rate = _getPrice(tokenA, tokenB);\n        uint tokenADecimals = 10 **\n            pairIdMap[pairDataMap[tokenA][tokenB][period]].decimalA;\n\n        uint amountA = ((amountToFillMap[tokenA][tokenB][period] -\n            amountToDeductMap[tokenA][tokenB][period][round]) * rate) /\n            tokenADecimals;        \n        uint amountB = amountToFillMap[tokenB][tokenA][period] -\n            amountToDeductMap[tokenB][tokenA][period][round];\n        require(amountA > 0 || amountB > 0, \"ERR: NO_ORDERS_TO_FILL\");\n        if (amountA > amountB) {\n            // If amountA is larger, the nett deposit required is the difference in tokenB\n            return (\n                tokenB,\n                (amountA - amountB),\n                rate,\n                (amountA * tokenADecimals) / rate,\n                amountB,\n                tokenADecimals\n            );\n        }\n        // If amountB is larger, the nett deposit required is the difference in tokenA with the converted amount in tokenA\n        return (\n            tokenA,\n            ((amountB - amountA) * tokenADecimals) / rate,\n            rate,\n            (amountA * tokenADecimals) / rate,\n            amountB,\n            tokenADecimals\n        );\n    }\n\n    /// @notice internal function to get price from oracle\n    /// @param tokenA token to sell\n    /// @param tokenB token to buy\n    /// @return rate of 1 tokenA to token B\n    function _getPrice(\n        address tokenA,\n        address tokenB\n    ) internal view returns (uint) {\n        return\n            IOracleAggregator(oracleAggregator).checkForPrice(tokenA, tokenB);\n    }\n\n    /// @notice internal function to check if user has a position\n    /// @param user address to check\n    /// @param tokenA token to sell\n    /// @param tokenB token to buy\n    /// @param period purchase interval\n    /// @return true if user already has a position\n    function _hasPosition(\n        address user,\n        address tokenA,\n        address tokenB,\n        uint32 period\n    ) internal view returns (bool) {\n        return userDataMap[user][tokenA][tokenB][period].startRound > 0;\n    }\n\n    /// @notice internal deposit function\n    /// @param tokenA token to sell\n    /// @param tokenB token to buy\n    /// @param period purchase interval\n    /// @param amount total input amount\n    /// @param numRounds number of periods to commit to\n    function _deposit(\n        address tokenA,\n        address tokenB,\n        uint32 period,\n        uint amount,\n        uint64 numRounds\n    ) internal {\n        require(\n            feesInstance.depositStatus(STRATEGY_INDEX),\n            \"ERR: DEPOSITS_STOPPED\"\n        );\n        if (msg.value > 0) {\n            (bool success, ) = payable(wethAddress).call{value: msg.value}(\"\");\n            require(success, \"ERR: WRAP_ETH_FAILED\");\n\n            tokenA = wethAddress;\n            amount = msg.value;\n        } else {\n            IERC20(tokenA).transferFrom(msg.sender, address(this), amount);\n        }\n\n        // Only allow deposit if user has no existing position\n        require(\n            !_hasPosition(msg.sender, tokenA, tokenB, period),\n            \"ERR: EXISTING_POSITION\"\n        );\n\n        /// @dev force amount to be divisible\n        amount = (amount * numRounds) / numRounds;\n\n        uint64 currentRound = currentRoundMap[tokenA][tokenB][period];\n\n        // Check if pair already exists, else create & emit event\n        if (currentRound == 0) {\n            currentRoundMap[tokenA][tokenB][period] = 1;\n            currentRoundMap[tokenB][tokenA][period] = 1;\n            // Update fill time\n            lastFillTime[tokenA][tokenB][period] = block.timestamp;\n            lastFillTime[tokenB][tokenA][period] = block.timestamp;\n            _createPairs(tokenA, tokenB, period);\n            currentRound = 1;\n        }\n\n        uint amountPerRound = amount / numRounds;\n        require(amountPerRound > 0, \"ERR: INVALID_AMOUNT\");\n\n        // Update & save the user data\n        userDataMap[msg.sender][tokenA][tokenB][period] = UserData({\n            startRound: currentRound,\n            rounds: numRounds,\n            /*\n                The amount deposited is the amount of shares the user has of the pool\n                Money can be added to the pool via flash loans or other functionality we decide to introduce later\n                Where the sitting capital is being used to generate yield\n            */\n            amount: amount\n        });\n\n        // Update round info\n        /// @dev amountPerRound is derived from trfAmount which should not overflow\n        // Update amount to purchase\n        amountToFillMap[tokenA][tokenB][period] += amountPerRound;\n\n        // Update amount to deduct\n        amountToDeductMap[tokenA][tokenB][period][\n            currentRound + numRounds\n        ] += amountPerRound;\n\n        // Bug: possible rounding issue, should use amount / numRounds * numRounds\n        // Update amount of shares for the token\n        tokenShares[tokenA] += amount;\n\n        emit Deposit(\n            msg.sender,\n            tokenA,\n            tokenB,\n            period,\n            amount,\n            currentRound,\n            numRounds\n        );\n    }\n\n    /// @notice internal withdraw function\n    /// @param tokenA token to sell\n    /// @param tokenB token to buy\n    /// @param period purchase interval\n    /// @param onlyFilled true to withdraw only filled orders\n    /// @param unwrapEth whether to return in raw eth\n    /// @param feeToken protocol fee discount token\n    function _withdraw(\n        address tokenA,\n        address tokenB,\n        uint32 period,\n        bool onlyFilled,\n        bool unwrapEth,\n        address feeToken\n    ) internal {\n        // Only allow withdrawal if user has existing position\n        require(\n            _hasPosition(msg.sender, tokenA, tokenB, period),\n            \"ERR: MISSING_POSITION\"\n        );\n        UserData memory userData = userDataMap[msg.sender][tokenA][tokenB][\n            period\n        ];\n        uint64 currentRound = currentRoundMap[tokenA][tokenB][period];\n        uint64 endRound = userData.startRound + userData.rounds < currentRound\n            ? userData.startRound + userData.rounds\n            : currentRound;\n        (uint unfilledAmount, uint filledAmount) = getAmounts(\n            tokenA,\n            tokenB,\n            period,\n            msg.sender\n        );\n\n        if (unfilledAmount == 0) {\n            onlyFilled = false;\n        }\n\n        if (!onlyFilled) {\n            userDataMap[msg.sender][tokenA][tokenB][period] = UserData({\n                startRound: 0,\n                rounds: 0,\n                amount: 0\n            });\n\n            // Update round info\n            /// @dev amountPerRound is derived from trfAmount which should not overflow\n\n            // Update amount to purchase\n            uint amountPerRound = userData.amount / userData.rounds;\n            if(currentRound <= endRound){\n                /*\n                    @dev if currentRound > endRound amountToFillMap -= amountToDeductMap\n                    would already have been executed on fill call\n                */\n                amountToFillMap[tokenA][tokenB][period] -= amountPerRound;\n\n                /// @dev the time of updating this doesn't matter as it is scoped to the round number\n                // Update amount to deduct                    \n                amountToDeductMap[tokenA][tokenB][period][\n                    userData.startRound + userData.rounds\n                ] -= amountPerRound;\n                \n                // Update amount of shares for the token\n                tokenShares[tokenA] -= unfilledAmount;\n            }\n\n            // Transfer unfilled amounts\n            _transfer(\n                msg.sender,\n                tokenA == wethAddress && unwrapEth ? address(0) : tokenA,\n                unfilledAmount\n            );\n        } else {\n            uint64 unfilledRounds = userDataMap[msg.sender][tokenA][tokenB][period].rounds - (currentRound - userDataMap[msg.sender][tokenA][tokenB][period].startRound);\n            userDataMap[msg.sender][tokenA][tokenB][period] = UserData({\n                startRound: currentRound,\n                // Unfilled rounds\n                rounds: unfilledRounds,\n                amount: ((userDataMap[msg.sender][tokenA][tokenB][period].rounds - (currentRound - userDataMap[msg.sender][tokenA][tokenB][period].startRound)) * userDataMap[msg.sender][tokenA][tokenB][period].amount) / userDataMap[msg.sender][tokenA][tokenB][period].rounds\n            });\n        }\n        \n        // Send to user filledAmount\n        if (filledAmount > 0) {\n            uint fee = (filledAmount * feesInstance.calcFee(STRATEGY_INDEX, msg.sender, feeToken)) / DIVISOR;\n            IERC20(tokenB).transfer(\n                feesInstance.feeCollector(STRATEGY_INDEX),\n                fee\n            );\n            _transfer(\n                msg.sender,\n                tokenB == wethAddress && unwrapEth ? address(0) : tokenB,\n                filledAmount - fee\n            );\n            tokenShares[tokenB] -= filledAmount;\n        }\n\n        emit Withdraw(msg.sender, tokenA, tokenB, period, unfilledAmount, filledAmount, currentRound);\n    }\n\n    /// @notice internal function for transferring tokens / raw ether out of contract\n    /// @param to address to transfer to\n    /// @param token will process as raw eth if address(0)\n    /// @param amount amount to transfer\n    function _transfer(address to, address token, uint amount) internal {\n        if(amount>0){\n            if (token == address(0)) {\n                IWETH(wethAddress).withdraw(amount);\n                (bool success, ) = payable(msg.sender).call{value: amount}(\"\");\n                require(success, \"ERR: UNWRAP_ETH_FAILED\");\n            } else {\n                IERC20(token).transfer(to, amount);\n            }\n        }\n    }\n\n    /// @notice internal function to create pair\n    /// @dev this function is only calledd the first time a pair period is introduced to the contract\n    /// @param tokenA token to sell\n    /// @param tokenB token to buy\n    /// @param period purchase interval\n    function _createPairs(\n        address tokenA,\n        address tokenB,\n        uint32 period\n    ) internal {\n        require(tokenA != tokenB, \"ERR: INVALID_TOKENS\");\n\n        ++numPairs;\n        uint8 decimalA = IERC20(tokenA).decimals();\n        uint8 decimalB = IERC20(tokenB).decimals();\n        pairIdMap[numPairs] = PairData({\n            tokenA: tokenA,\n            tokenB: tokenB,\n            decimalA: decimalA,\n            decimalB: decimalB,\n            period: period\n        });\n        pairDataMap[tokenA][tokenB][period] = numPairs;\n        emit CreatePair(tokenA, tokenB, period, numPairs);\n\n        ++numPairs;\n        pairIdMap[numPairs] = PairData({\n            tokenA: tokenB,\n            tokenB: tokenA,\n            decimalA: decimalB,\n            decimalB: decimalA,\n            period: period\n        });\n        pairDataMap[tokenB][tokenA][period] = numPairs;\n        emit CreatePair(tokenB, tokenA, period, numPairs);\n    }\n\n    /// @dev fallback function to allow receving ether\n    receive() external payable {}\n}"}, "contracts/interfaces/IERC20.sol": {"content": "pragma solidity ^0.8.30;\n\n// SPDX-License-Identifier: MIT\n\ninterface IERC20 {\n    function balanceOf(address _owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external;\n\n    function transfer(address recipient, uint256 amount) external;\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external;\n\n    function decimals() external view returns (uint8);\n\n    function symbol() external view returns(string memory);\n}"}, "contracts/interfaces/IFlashLoanReceiver.sol": {"content": "pragma solidity ^0.8.30;\n\n//SPDX-License-Identifier: MIT\n\ninterface IFlashLoanReceiver {\n    function executeOperation(address token, uint amount, uint fee, bytes calldata params) external returns (bool);\n}"}, "contracts/interfaces/IOracleAggregator.sol": {"content": "pragma solidity ^0.8.30;\n\n//SPDX-License-Identifier: MIT\n\ninterface IOracleAggregator {\n    function checkForPrice(address _tokenIn, address _tokenOut) external view returns(uint256);\n}"}, "contracts/interfaces/IWETH.sol": {"content": "pragma solidity ^0.8.30;\n// SPDX-License-Identifier: MIT\ninterface IWETH {\n    function withdraw(uint wad) external;\n}"}}, "settings": {"viaIR": false, "optimizer": {"enabled": true}, "outputSelection": {"*": {"*": ["evm.legacyAssembly"]}}, "libraries": {}}}
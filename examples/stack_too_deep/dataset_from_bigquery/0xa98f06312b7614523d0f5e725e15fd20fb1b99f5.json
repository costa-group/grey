{"language": "Solidity", "sources": {"@openzeppelin/contracts/access/Ownable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.30;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"}, "@openzeppelin/contracts/access/Ownable2Step.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.30;\n\nimport {Ownable} from \"./Ownable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        if (pendingOwner() != sender) {\n            revert OwnableUnauthorizedAccount(sender);\n        }\n        _transferOwnership(sender);\n    }\n}\n"}, "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.30;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"}, "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"}, "@openzeppelin/contracts/token/ERC20/IERC20.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"}, "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"}, "@openzeppelin/contracts/token/ERC721/ERC721.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC721} from \"./IERC721.sol\";\nimport {IERC721Receiver} from \"./IERC721Receiver.sol\";\nimport {IERC721Metadata} from \"./extensions/IERC721Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {Strings} from \"../../utils/Strings.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {IERC721Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    mapping(uint256 tokenId => address) private _owners;\n\n    mapping(address owner => uint256) private _balances;\n\n    mapping(uint256 tokenId => address) private _tokenApprovals;\n\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        if (owner == address(0)) {\n            revert ERC721InvalidOwner(address(0));\n        }\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        return _requireOwned(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual {\n        _approve(to, tokenId, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\n        _requireOwned(tokenId);\n\n        return _getApproved(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        address previousOwner = _update(to, tokenId, _msgSender());\n        if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\n        transferFrom(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     *\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\n     */\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n     * particular (ignoring whether it is owned by `owner`).\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n     * the `spender` for the specific `tokenId`.\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n     *\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n     * remain consistent with one another.\n     */\n    function _increaseBalance(address account, uint128 value) internal virtual {\n        unchecked {\n            _balances[account] += value;\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert ERC721InvalidSender(address(0));\n        }\n    }\n\n    /**\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        _checkOnERC721Received(address(0), to, tokenId, data);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        } else if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `tokenId` token must exist and be owned by `from`.\n     * - `to` cannot be the zero address.\n     * - `from` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\n        _safeTransfer(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\n     *\n     * Emits an {Approval} event.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address to, uint256 tokenId, address auth) internal {\n        _approve(to, tokenId, auth, true);\n    }\n\n    /**\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n     * emitted in the context of transfers.\n     */\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Requirements:\n     * - operator can't be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC721InvalidOperator(operator);\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n     * Returns the owner.\n     *\n     * Overrides to ownership logic should be done to {_ownerOf}.\n     */\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\n        if (to.code.length > 0) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                if (retval != IERC721Receiver.onERC721Received.selector) {\n                    revert ERC721InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert ERC721InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n}\n"}, "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"}, "@openzeppelin/contracts/token/ERC721/IERC721.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"}, "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"}, "@openzeppelin/contracts/utils/Address.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"}, "@openzeppelin/contracts/utils/Context.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"}, "@openzeppelin/contracts/utils/introspection/ERC165.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"}, "@openzeppelin/contracts/utils/introspection/IERC165.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"}, "@openzeppelin/contracts/utils/math/Math.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"}, "@openzeppelin/contracts/utils/math/SignedMath.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"}, "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"}, "@openzeppelin/contracts/utils/Strings.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.30;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"}, "contracts/interfaces/IERC20Metadata.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n \ninterface IERC20Metadata is IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n} "}, "contracts/interfaces/IVesting.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IVesting {\n    enum VestingType {\n        NORMAL\n        // Removed DAILY_SOFT, WEEKLY_SOFT, MONTHLY_SOFT since they're just NORMAL with specific tranches\n    }\n    \n    error NoTokensToRelease();\n}\n"}, "contracts/interfaces/IVestingCalculator.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport \"./IVesting.sol\";\n\ninterface IVestingCalculator {\n    enum EquationType {\n        LINEAR,      // Linear release between points\n        EXPONENTIAL, // Exponential curve between points\n        INTERVAL,    // Immediate release at each point (same as STEPWISE)\n        QUADRATIC    // Quadratic curve between points\n    }\n\n    struct TimeAmount {\n        uint256 time;        // Unix timestamp\n        uint256 amount;      // Cumulative amount of tokens until this time\n        EquationType eqType; // Equation type for calculation until next point\n    }\n    \n    error InvalidTranches();\n    error TimesMustBeInAscendingOrder();\n    error AmountsMustBeIncreasing();\n    error InvalidEquationType();\n    error InvalidParameters();\n    error VestingTypeNotEnabled();\n\n    function calculateVestedAmount(\n        TimeAmount[] calldata tranches,\n        uint256 currentTime\n    ) external view returns (uint256);\n\n    function getTotalAmount(TimeAmount[] calldata tranches) external pure returns (uint256);\n\n}\n"}, "contracts/interfaces/IVestingManager.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"./IVesting.sol\";\nimport \"./IVestingCalculator.sol\";\n\ninterface IVestingManager is IERC721, IVesting {\n    // Custom errors\n    error InvalidBeneficiary();\n    error InvalidToken();\n    error InvalidAmount();\n    error NotAuthorized();\n    error VestingAlreadyCancelled();\n    error NotCancellable();\n    error NotSoftVesting();\n    error OnlyCreatorCanCancel();\n    error NonTransferableToken();\n    error InvalidArray();\n    error InvalidTime();\n    error NFTAlreadyMinted();\n    error InvalidCalculator();\n    error InvalidSVGGenerator();\n    error NotWhitelisted();\n    error InvalidFeePercentage();\n    error InvalidFeeCollector();\n    error InvalidFlatFee();\n    error OnlyOwner();\n    error FeeTransferFailed();\n    error NotTopable();\n    error TokenDoesNotExist();\n\n    // Events\n    event VestingCreated(\n        uint256 indexed vestingId,\n        address indexed beneficiary,\n        address token,\n        IVestingCalculator.TimeAmount[] tranches,\n        bool isSoft,\n        bool isTopable,\n        bool isTransferable\n    );\n    event TokensReleased(uint256 indexed vestingId, address indexed beneficiary, uint256 amount);\n    event VestingCancelled(uint256 indexed vestingId);\n    event AirdropVestingCreated(uint256[] vestingIds, address[] beneficiaries);\n    event VestingTransferred(uint256 indexed vestingId, address indexed from, address indexed to);\n    event VestingToppedUp(\n        uint256 indexed vestingId,\n        address indexed sender,\n        uint256 amount,\n        IVestingCalculator.TimeAmount[] tranches\n    );\n    event FeePercentageUpdated(uint256 newFeePercentage);\n    event FlatFeeUpdated(uint256 newFlatFee);\n    event FeeCollectorUpdated(address indexed oldFeeCollector, address indexed newFeeCollector);\n    event SVGGeneratorUpdated(address indexed oldSVGGenerator, address indexed newSVGGenerator);\n    event FeesCollected(address token, uint256 amount, uint256 flatFee);\n    event TokenFeeExemptionUpdated(address token, bool isExempt);\n    event CreatorFeeExemptionUpdated(address creator, bool isExempt);\n    event FeeExemptionStatusUpdated(bool enabled);\n    event BulkVestingCreated(uint256[] vestingIds, address indexed beneficiary);\n    event BulkVestingCreatedForBeneficiaries(uint256[] vestingIds, address[] beneficiaries);\n\n    struct VestingSchedule {\n        address token;\n        address creator;\n        address beneficiary;\n        uint256 totalAmount;\n        uint256 released;\n        bool isSoft;\n        bool isNftized;\n        bool cancelled;\n        bool isTopable;\n        IVesting.VestingType vestingType;\n        IVestingCalculator.TimeAmount[] tranches;\n    }\n\n    // Function declarations\n    function createVesting(\n        address token,\n        IVestingCalculator.TimeAmount[] calldata tranches,\n        address beneficiary,\n        bool isSoft,\n        bool isNftized,\n        bool isTransferable,\n        bool isTopable\n    ) external payable returns (uint256);\n\n    /// @notice Creates a daily soft vesting schedule\n    /// @param token Address of the token to vest\n    /// @param tranches Array of vesting tranches with time and amount\n    /// @param beneficiary Address that will receive the vested tokens\n    /// @return The ID of the created vesting schedule\n    function createDailySoftVesting(\n        address token,\n        IVestingCalculator.TimeAmount[] calldata tranches,\n        address beneficiary\n    ) external payable returns (uint256);\n\n    /// @notice Creates multiple vesting schedules in a single transaction\n    /// @param token Address of the token to vest\n    /// @param tranches Array of vesting tranches with time and amount\n    /// @param beneficiaries Array of addresses that will receive the vested tokens\n    /// @param isSoft Whether the vestings can be cancelled\n    /// @param isNftized Whether the vesting NFTs can be minted\n    /// @param isTransferable Whether the vesting NFTs can be transferred\n    /// @param isTopable Whether the vestings can be topped up\n    /// @return Array of created vesting IDs\n    function createAirdropVesting(\n        address token,\n        IVestingCalculator.TimeAmount[] calldata tranches,\n        address[] calldata beneficiaries,\n        bool isSoft,\n        bool isNftized,\n        bool isTransferable,\n        bool isTopable\n    ) external payable returns (uint256[] memory);\n\n    /// @notice Creates multiple vestings for the same beneficiary in a single transaction\n    /// @dev Supports multiple tokens and distinct tranche arrays per vesting\n    /// @param tokens Array of token addresses for each vesting\n    /// @param tranchesList Array of tranche arrays; each element is the tranche array for the corresponding vesting\n    /// @param beneficiary The shared beneficiary for all created vestings\n    /// @param isSoft Whether the vestings can be cancelled\n    /// @param isNftized Whether the vesting NFTs can be minted\n    /// @param isTransferable Whether the vesting NFTs can be transferred\n    /// @param isTopable Whether the vestings can be topped up\n    /// @return Array of created vesting IDs\n    function createBulkVestingForBeneficiary(\n        address[] calldata tokens,\n        IVestingCalculator.TimeAmount[][] calldata tranchesList,\n        address beneficiary,\n        bool isSoft,\n        bool isNftized,\n        bool isTransferable,\n        bool isTopable\n    ) external payable returns (uint256[] memory);\n\n    /// @notice Creates multiple vestings for multiple beneficiaries in a single transaction\n    /// @dev tokens[i], tranchesList[i], beneficiaries[i] correspond to one vesting\n    /// @param tokens Array of token addresses for each vesting\n    /// @param tranchesList Array of tranche arrays; each element is the tranche array for the corresponding vesting\n    /// @param beneficiaries Addresses to receive each corresponding vesting\n    /// @param isSoft Whether the vestings can be cancelled\n    /// @param isNftized Whether the vesting NFTs can be minted\n    /// @param isTransferable Whether the vesting NFTs can be transferred\n    /// @param isTopable Whether the vestings can be topped up\n    /// @return Array of created vesting IDs\n    function createBulkVestingForBeneficiaries(\n        address[] calldata tokens,\n        IVestingCalculator.TimeAmount[][] calldata tranchesList,\n        address[] calldata beneficiaries,\n        bool isSoft,\n        bool isNftized,\n        bool isTransferable,\n        bool isTopable\n    ) external payable returns (uint256[] memory);\n\n    function cancel(uint256 vestingId) external;\n    function getVestingSchedule(uint256 vestingId) external view returns (VestingSchedule memory);\n    function getVestedAmount(uint256 vestingId) external view returns (uint256);\n    function getReleasableAmount(uint256 vestingId) external view returns (uint256);\n    function release(uint256 vestingId) external;\n\n    // Fee management functions\n    function setFeePercentage(uint256 _feePercentage) external;\n    function setFlatFee(uint256 _flatFee) external;\n    function setFeeCollector(address newFeeCollector) external;\n\n    // Fee exemption functions\n    function setCreatorFeeExempt(address _creator, bool _isExempt) external;\n    function setTokenFeeExempt(address _token, bool _isExempt) external;\n\n    // Top-up functions\n    function topUpVesting(\n        uint256 vestingId,\n        IVestingCalculator.TimeAmount[] calldata additionalTranches\n    ) external;\n}"}, "contracts/interfaces/IVestingSVGGenerator.sol": {"content": "// SPDX-License-Identifier: UNLICENSED\n// ALL RIGHTS RESERVED\n// UNCX by SDDTech reserves all rights on this code. You may not copy these contracts.\n\npragma solidity ^0.8.30;\n\n/// @title IVestingSVGGenerator\n/// @notice Interface for the VestingSVGGenerator contract\ninterface IVestingSVGGenerator {\n    /// @notice Generates the complete SVG for a vesting NFT\n    /// @param vestingId The vesting ID\n    /// @param tokenSymbol The token symbol\n    /// @param tokenName The token name\n    /// @param totalAmount The total amount to be vested\n    /// @param vestedAmount The amount currently vested and available to claim\n    /// @param startTime The vesting start time\n    /// @param endTime The vesting end time\n    /// @param isSoft Whether the vesting is soft\n    /// @param isTopable Whether the vesting can be topped up\n    /// @param beneficiary The beneficiary address\n    /// @param tokenDecimals The token decimals\n    /// @return The generated SVG string\n    function generateVestingSVG(\n        uint256 vestingId,\n        string memory tokenSymbol,\n        string memory tokenName,\n        uint256 totalAmount,\n        uint256 vestedAmount,\n        uint256 startTime,\n        uint256 endTime,\n        bool isSoft,\n        bool isTopable,\n        address beneficiary,\n        uint8 tokenDecimals\n    ) external view returns (string memory);\n\n    /// @notice Generates the complete token URI for a vesting NFT\n    /// @param vestingId The vesting ID\n    /// @param tokenSymbol The token symbol\n    /// @param tokenName The token name\n    /// @param totalAmount The total amount to be vested\n    /// @param vestedAmount The amount currently vested and available to claim\n    /// @param startTime The vesting start time\n    /// @param endTime The vesting end time\n    /// @param isSoft Whether the vesting is soft\n    /// @param isTopable Whether the vesting can be topped up\n    /// @param beneficiary The beneficiary address\n    /// @param tokenDecimals The token decimals\n    /// @return The generated token URI string\n    function generateTokenURI(\n        uint256 vestingId,\n        string memory tokenSymbol,\n        string memory tokenName,\n        uint256 totalAmount,\n        uint256 vestedAmount,\n        uint256 startTime,\n        uint256 endTime,\n        bool isSoft,\n        bool isTopable,\n        address beneficiary,\n        uint8 tokenDecimals\n    ) external view returns (string memory);\n} "}, "contracts/VestingManager.sol": {"content": "/// @title VestingManager\n// SPDX-License-Identifier: UNLICENSED\n// ALL RIGHTS RESERVED\n// UNCX by SDDTech reserves all rights on this code. You may not copy these contracts.\n\npragma solidity ^0.8.30;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable2Step.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"./interfaces/IVestingManager.sol\";\nimport \"./interfaces/IVestingCalculator.sol\";\nimport \"./interfaces/IVesting.sol\";\nimport \"./interfaces/IERC20Metadata.sol\";\nimport \"./interfaces/IVestingSVGGenerator.sol\";\n\n\n/// @notice Main contract for managing vesting schedules\ncontract VestingManager is ERC721, Ownable2Step, ReentrancyGuard, IVestingManager {\n    using SafeERC20 for IERC20;\n\n    // State variables\n    /// @notice Calculator contract used for vesting calculations\n    IVestingCalculator public immutable calculator;\n    /// @notice SVG Generator contract used for NFT metadata\n    IVestingSVGGenerator public svgGenerator;\n    /// @notice Counter for generating unique vesting IDs\n    uint256 public nextVestingId;\n\n    /// @notice Maps token address to total shares\n    mapping(address => uint256) private _totalTokenShares;\n    /// @notice Maps vesting ID to deposited shares\n    mapping(uint256 => uint256) private _depositedShares;\n\n    /// @notice Maps vesting ID to its vesting schedule details\n    mapping(uint256 => VestingSchedule) public vestingSchedules;\n\n    /// @notice Maps vesting ID to whether it can be transferred\n    mapping(uint256 => bool) private _transferable;\n\n    /// @notice Maps token address to share ratio (starts at 1:1)\n    mapping(address => uint256) private _shareRatio;\n\n    /// @notice Fee percentage in basis points (1/100 of 1%)\n    uint256 public feePercentage;\n    /// @notice Flat fee amount in wei\n    uint256 public flatFee;\n    /// @notice Address that receives fees\n    address public feeCollector;\n\n    /// @notice Mapping of creators exempt from fees\n    mapping(address => bool) public feeExemptCreators;\n    /// @notice Mapping of tokens exempt from fees\n    mapping(address => bool) public feeExemptTokens;\n\n\n    /// @notice Initializes the contract with a calculator address and SVG generator\n    /// @param _calculator Address of the vesting calculator contract\n    /// @param _svgGenerator Address of the SVG generator contract\n    /// @param _feeCollector Address of the fee collector\n    constructor(\n        address _calculator, \n        address _svgGenerator, \n        address _feeCollector\n    ) ERC721(\"Vesting NFT\", \"VNFT\") Ownable(msg.sender) {\n        if (_calculator == address(0)) revert InvalidCalculator();\n        if (_svgGenerator == address(0)) revert InvalidSVGGenerator();\n        if (_feeCollector == address(0)) revert InvalidFeeCollector();\n        \n        calculator = IVestingCalculator(_calculator);\n        svgGenerator = IVestingSVGGenerator(_svgGenerator);\n        feeCollector = _feeCollector;\n    }\n\n    /// @notice Creates a standard linear vesting schedule\n    /// @param token Address of the token to vest\n    /// @param tranches Array of vesting tranches with time and amount\n    /// @param beneficiary Address that will receive the vested tokens\n    /// @param isSoft Whether the vesting can be cancelled\n    /// @param isNftized Whether the vesting NFT can be minted\n    /// @param isTransferable Whether the vesting NFT can be transferred\n    /// @param isTopable Whether the vesting can be topped up\n    /// @return The ID of the created vesting schedule\n    function createVesting(\n        address token,\n        IVestingCalculator.TimeAmount[] calldata tranches,\n        address beneficiary,\n        bool isSoft,\n        bool isNftized,\n        bool isTransferable,\n        bool isTopable\n    ) external override payable nonReentrant returns (uint256) {\n        return _createVesting(\n            token,\n            tranches,\n            beneficiary,\n            isSoft,\n            IVesting.VestingType.NORMAL,\n            isNftized,\n            isTransferable,\n            isTopable\n        );\n    }\n\n    /// @notice Creates a daily soft vesting schedule\n    /// @param token Address of the token to vest\n    /// @param tranches Array of vesting tranches with time and amount\n    /// @param beneficiary Address that will receive the vested tokens\n    /// @return The ID of the created vesting schedule\n    function createDailySoftVesting(\n        address token,\n        IVestingCalculator.TimeAmount[] calldata tranches,\n        address beneficiary\n    ) external payable nonReentrant returns (uint256) {\n        return _createVesting(\n            token,\n            tranches,\n            beneficiary,\n            true,\n            IVesting.VestingType.NORMAL,\n            false,\n            false,\n            true      // Topable by default for daily soft vesting\n        );\n    }\n\n\n    /// @notice Creates multiple vesting schedules in a single transaction\n    /// @param token Address of the token to vest\n    /// @param tranches Array of vesting tranches with time and amount\n    /// @param beneficiaries Array of addresses that will receive the vested tokens\n    /// @param isSoft Whether the vestings can be cancelled\n    /// @param isNftized Whether the vesting NFTs can be minted\n    /// @param isTransferable Whether the vesting NFTs can be transferred\n    /// @param isTopable Whether the vestings can be topped up\n        /// @return Array of created vesting IDs\n    // solhint-disable-next-line code-complexity\n     function createAirdropVesting(\n        address token,\n        IVestingCalculator.TimeAmount[] calldata tranches,\n        address[] calldata beneficiaries,\n        bool isSoft,\n        bool isNftized,\n        bool isTransferable,\n        bool isTopable\n    ) external override payable nonReentrant returns (uint256[] memory) {\n        if (beneficiaries.length == 0) revert InvalidArray();\n        \n        // Compute per-vesting totals\n        uint256 totalAmountPer = calculator.getTotalAmount(tranches);\n        if (totalAmountPer == 0) revert InvalidAmount();\n\n        bool shouldPayTokenFees = !feeExemptTokens[token] && !feeExemptCreators[msg.sender];\n        uint256 tokenFeePer = 0;\n        if (shouldPayTokenFees && feePercentage > 0) {\n            tokenFeePer = (totalAmountPer * feePercentage) / 10000;\n        }\n        uint256 netPer = totalAmountPer - tokenFeePer;\n\n        // Handle flat fee once (if configured and not exempt)\n        bool shouldPayFlatFee = flatFee > 0 && !feeExemptTokens[token] && !feeExemptCreators[msg.sender];\n        if (shouldPayFlatFee) {\n            if (msg.value < flatFee) revert InvalidFlatFee();\n            (bool success, ) = feeCollector.call{value: flatFee}(\"\");\n            if (!success) revert FeeTransferFailed();\n            emit FeesCollected(token, 0, flatFee);\n        }\n\n        // Lock current share ratio once before minting shares\n        _updateShareRatio(token);\n\n        // Transfer all tokens once\n        uint256 totalTransferAmount = totalAmountPer * beneficiaries.length;\n        IERC20(token).safeTransferFrom(msg.sender, address(this), totalTransferAmount);\n\n        // Transfer aggregated percentage fee once\n        if (tokenFeePer > 0) {\n            uint256 totalTokenFee = tokenFeePer * beneficiaries.length;\n            IERC20(token).safeTransfer(feeCollector, totalTokenFee);\n            emit FeesCollected(token, totalTokenFee, 0);\n        }\n        \n        uint256[] memory vestingIds = new uint256[](beneficiaries.length);\n        \n        for (uint256 i = 0; i < beneficiaries.length; i++) {\n            vestingIds[i] = _createVestingPrepaid(\n                token,\n                tranches,\n                beneficiaries[i],\n                isSoft,\n                IVesting.VestingType.NORMAL,\n                isNftized,\n                isTransferable,\n                isTopable,\n                netPer\n            );\n        }\n\n        emit AirdropVestingCreated(vestingIds, beneficiaries);\n        return vestingIds;\n    }\n\n    // solhint-disable-next-line code-complexity\n    function createBulkVestingForBeneficiary(\n        address[] calldata tokens,\n        IVestingCalculator.TimeAmount[][] calldata tranchesList,\n        address beneficiary,\n        bool isSoft,\n        bool isNftized,\n        bool isTransferable,\n        bool isTopable\n    ) external override payable nonReentrant returns (uint256[] memory) {\n        if (beneficiary == address(0)) revert InvalidBeneficiary();\n        if (tokens.length == 0 || tokens.length != tranchesList.length) revert InvalidArray();\n\n        // Pay flat fee once if applicable\n        bool shouldPayFlatFee = flatFee > 0 && !feeExemptCreators[msg.sender];\n        if (shouldPayFlatFee) {\n            if (msg.value < flatFee) revert InvalidFlatFee();\n            (bool success, ) = feeCollector.call{value: flatFee}(\"\");\n            if (!success) revert FeeTransferFailed();\n            emit FeesCollected(address(0), 0, flatFee);\n        }\n\n        // Aggregate per-token totals to minimize transfers and fees\n        // totalGrossPerToken[token] => total gross to transfer\n        // totalFeePerToken[token] => total percentage fee to collect\n        uint256[] memory totalsPerIndex = new uint256[](tokens.length);\n        uint256[] memory netPerIndex = new uint256[](tokens.length);\n\n        // First pass: compute gross and net per vesting, and aggregate per token\n        // Use local map-like arrays for unique token handling\n        address[] memory uniqueTokens = new address[](tokens.length);\n        uint256[] memory grossPerToken = new uint256[](tokens.length);\n        uint256[] memory feePerToken = new uint256[](tokens.length);\n        uint256 uniqueCount = 0;\n\n        for (uint256 i = 0; i < tokens.length; i++) {\n            address token = tokens[i];\n            uint256 gross = calculator.getTotalAmount(tranchesList[i]);\n            if (gross == 0) revert InvalidAmount();\n\n            bool shouldPayTokenFees = !feeExemptTokens[token] && !feeExemptCreators[msg.sender];\n            uint256 tokenFee = (shouldPayTokenFees && feePercentage > 0)\n                ? (gross * feePercentage) / 10000\n                : 0;\n            uint256 net = gross - tokenFee;\n\n            totalsPerIndex[i] = gross;\n            netPerIndex[i] = net;\n\n            // find or add token in uniqueTokens\n            uint256 idx = type(uint256).max;\n            for (uint256 j = 0; j < uniqueCount; j++) {\n                if (uniqueTokens[j] == token) { idx = j; break; }\n            }\n            if (idx == type(uint256).max) {\n                uniqueTokens[uniqueCount] = token;\n                grossPerToken[uniqueCount] = gross;\n                feePerToken[uniqueCount] = tokenFee;\n                uniqueCount++;\n            } else {\n                grossPerToken[idx] += gross;\n                feePerToken[idx] += tokenFee;\n            }\n        }\n\n        // Lock share ratio per unique token once\n        for (uint256 j = 0; j < uniqueCount; j++) {\n            _updateShareRatio(uniqueTokens[j]);\n        }\n\n        // Transfer aggregated gross per token once, then send aggregated fee per token\n        for (uint256 j = 0; j < uniqueCount; j++) {\n            address token = uniqueTokens[j];\n            uint256 totalGross = grossPerToken[j];\n            uint256 totalFee = feePerToken[j];\n            IERC20(token).safeTransferFrom(msg.sender, address(this), totalGross);\n            if (totalFee > 0) {\n                IERC20(token).safeTransfer(feeCollector, totalFee);\n                emit FeesCollected(token, totalFee, 0);\n            }\n        }\n\n        // Create vestings using prepaid net amounts\n        uint256[] memory vestingIds = new uint256[](tokens.length);\n        for (uint256 i = 0; i < tokens.length; i++) {\n            vestingIds[i] = _createVestingPrepaid(\n                tokens[i],\n                tranchesList[i],\n                beneficiary,\n                isSoft,\n                IVesting.VestingType.NORMAL,\n                isNftized,\n                isTransferable,\n                isTopable,\n                netPerIndex[i]\n            );\n        }\n\n        emit BulkVestingCreated(vestingIds, beneficiary);\n        return vestingIds;\n    }\n\n    /// @notice Creates multiple vestings for multiple beneficiaries in a single transaction\n    /// @dev tokens[i], tranchesList[i], and beneficiaries[i] correspond to one vesting\n    // solhint-disable-next-line code-complexity\n    function createBulkVestingForBeneficiaries(\n        address[] calldata tokens,\n        IVestingCalculator.TimeAmount[][] calldata tranchesList,\n        address[] calldata beneficiaries,\n        bool isSoft,\n        bool isNftized,\n        bool isTransferable,\n        bool isTopable\n    ) external override payable nonReentrant returns (uint256[] memory) {\n        if (tokens.length == 0) revert InvalidArray();\n        if (tokens.length != tranchesList.length) revert InvalidArray();\n        if (tokens.length != beneficiaries.length) revert InvalidArray();\n\n        // Pay flat fee once if applicable (creator-based)\n        bool shouldPayFlatFee = flatFee > 0 && !feeExemptCreators[msg.sender];\n        if (shouldPayFlatFee) {\n            if (msg.value < flatFee) revert InvalidFlatFee();\n            (bool success, ) = feeCollector.call{value: flatFee}(\"\");\n            if (!success) revert FeeTransferFailed();\n            emit FeesCollected(address(0), 0, flatFee);\n        }\n\n        // Precompute per-index gross and net, aggregate by token for single transfers and single fee per token\n        uint256[] memory totalsPerIndex = new uint256[](tokens.length);\n        uint256[] memory netPerIndex = new uint256[](tokens.length);\n        \n        address[] memory uniqueTokens = new address[](tokens.length);\n        uint256[] memory grossPerToken = new uint256[](tokens.length);\n        uint256[] memory feePerToken = new uint256[](tokens.length);\n        uint256 uniqueCount = 0;\n\n        for (uint256 i = 0; i < tokens.length; i++) {\n            address token = tokens[i];\n            address beneficiary = beneficiaries[i];\n            if (beneficiary == address(0)) revert InvalidBeneficiary();\n\n            uint256 gross = calculator.getTotalAmount(tranchesList[i]);\n            if (gross == 0) revert InvalidAmount();\n\n            bool shouldPayTokenFees = !feeExemptTokens[token] && !feeExemptCreators[msg.sender];\n            uint256 tokenFee = (shouldPayTokenFees && feePercentage > 0)\n                ? (gross * feePercentage) / 10000\n                : 0;\n            uint256 net = gross - tokenFee;\n\n            totalsPerIndex[i] = gross;\n            netPerIndex[i] = net;\n\n            // add/aggregate per unique token\n            uint256 idx = type(uint256).max;\n            for (uint256 j = 0; j < uniqueCount; j++) {\n                if (uniqueTokens[j] == token) { idx = j; break; }\n            }\n            if (idx == type(uint256).max) {\n                uniqueTokens[uniqueCount] = token;\n                grossPerToken[uniqueCount] = gross;\n                feePerToken[uniqueCount] = tokenFee;\n                uniqueCount++;\n            } else {\n                grossPerToken[idx] += gross;\n                feePerToken[idx] += tokenFee;\n            }\n        }\n\n        // Lock share ratio per unique token once\n        for (uint256 j = 0; j < uniqueCount; j++) {\n            _updateShareRatio(uniqueTokens[j]);\n        }\n\n        // Transfer aggregated gross per token once, then send aggregated fee per token\n        for (uint256 j = 0; j < uniqueCount; j++) {\n            address token = uniqueTokens[j];\n            uint256 totalGross = grossPerToken[j];\n            uint256 totalFee = feePerToken[j];\n            IERC20(token).safeTransferFrom(msg.sender, address(this), totalGross);\n            if (totalFee > 0) {\n                IERC20(token).safeTransfer(feeCollector, totalFee);\n                emit FeesCollected(token, totalFee, 0);\n            }\n        }\n\n        // Create each vesting using the net amount and its beneficiary\n        uint256[] memory vestingIds = new uint256[](tokens.length);\n        for (uint256 i = 0; i < tokens.length; i++) {\n            vestingIds[i] = _createVestingPrepaid(\n                tokens[i],\n                tranchesList[i],\n                beneficiaries[i],\n                isSoft,\n                IVesting.VestingType.NORMAL,\n                isNftized,\n                isTransferable,\n                isTopable,\n                netPerIndex[i]\n            );\n        }\n\n        emit BulkVestingCreatedForBeneficiaries(vestingIds, beneficiaries);\n        return vestingIds;\n    }\n\n    /// @notice Internal function to create a vesting schedule using a pre-paid/net amount\n    /// @dev Skips fee handling and assumes caller has already handled token transfers and fees\n    function _createVestingPrepaid(\n        address token,\n        IVestingCalculator.TimeAmount[] calldata tranches,\n        address beneficiary,\n        bool isSoft,\n        IVesting.VestingType vestingType,\n        bool isNftized,\n        bool isTransferable,\n        bool isTopable,\n        uint256 vestingAmount\n    ) internal returns (uint256) {\n        if (token == address(0)) revert InvalidToken();\n        if (beneficiary == address(0)) revert InvalidBeneficiary();\n        if (vestingAmount == 0) revert InvalidAmount();\n\n        uint256 vestingId = nextVestingId++;\n        _setupVestingSchedule(vestingId, token, beneficiary, vestingAmount, isSoft, vestingType, isNftized, isTopable);\n        _setupTranches(vestingId, tranches);\n        _setupShares(vestingId, token, vestingAmount);\n\n        if (isNftized) {\n            _mint(beneficiary, vestingId);\n        }\n        _transferable[vestingId] = isTransferable;\n\n        emit VestingCreated(\n            vestingId,\n            beneficiary,\n            token,\n            tranches,\n            isSoft,\n            isTopable,\n            isTransferable\n        );\n\n        return vestingId;\n    }\n\n    /// @notice Internal function to create a vesting schedule\n    /// @param token Address of the token to vest\n    /// @param tranches Array of vesting tranches with time and amount\n    /// @param beneficiary Address that will receive the vested tokens\n    /// @param isSoft Whether the vesting can be cancelled\n    /// @param vestingType Type of vesting schedule\n    /// @param isNftized Whether the vesting NFT can be minted\n    /// @param isTransferable Whether the vesting NFT can be transferred\n    /// @param isTopable Whether the vesting can be topped up\n    /// @return The ID of the created vesting schedule\n    function _createVesting(\n        address token,\n        IVestingCalculator.TimeAmount[] calldata tranches,\n        address beneficiary,\n        bool isSoft,\n        IVesting.VestingType vestingType,\n        bool isNftized,\n        bool isTransferable,\n        bool isTopable\n    ) internal returns (uint256) {\n        if (token == address(0)) revert InvalidToken();\n        if (beneficiary == address(0)) revert InvalidBeneficiary();\n        \n        _updateShareRatio(token);\n        uint256 totalAmount = calculator.getTotalAmount(tranches);\n        if (totalAmount == 0) revert InvalidAmount();\n\n        // Handle fee collection and transfers\n        uint256 vestingAmount = _handleCreationFees(token, totalAmount);\n\n        // Create vesting schedule\n        uint256 vestingId = nextVestingId++;\n        _setupVestingSchedule(vestingId, token, beneficiary, vestingAmount, isSoft, vestingType, isNftized, isTopable);\n        _setupTranches(vestingId, tranches);\n        _setupShares(vestingId, token, vestingAmount);\n\n        // Setup NFT if needed\n        if (isNftized) {\n            _mint(beneficiary, vestingId);\n        }\n        _transferable[vestingId] = isTransferable;\n\n        // Update the event emission to include tranches\n        emit VestingCreated(\n            vestingId,\n            beneficiary,\n            token,\n            tranches,\n            isSoft,\n            isTopable,\n            isTransferable\n        );\n\n        return vestingId;\n    }\n\n    /// @notice Handles fee calculation and collection for vesting creation\n    /// @param token The token address\n    /// @param totalAmount The total amount to be vested\n    /// @return The amount available for vesting after fees\n    function _handleCreationFees(address token, uint256 totalAmount) internal returns (uint256) {\n        // Calculate fees based on exemption status\n        uint256 tokenFee = 0;\n        uint256 flatFeeAmount = 0;\n        bool shouldPayTokenFees = !feeExemptTokens[token] && !feeExemptCreators[msg.sender];\n        bool shouldPayFlatFee = flatFee > 0 && !feeExemptTokens[token] && !feeExemptCreators[msg.sender];\n        \n        // Calculate token percentage fee (always applied unless whitelisted)\n        if (shouldPayTokenFees && feePercentage > 0) {\n            tokenFee = (totalAmount * feePercentage) / 10000;\n        }\n        \n        // Calculate flat fee (optional, only if configured and not whitelisted)\n        if (shouldPayFlatFee) {\n            flatFeeAmount = flatFee;\n        }\n        \n        // Transfer total amount including fees\n        IERC20(token).safeTransferFrom(msg.sender, address(this), totalAmount);\n        \n        // Transfer token fees to fee collector if any\n        if (tokenFee > 0) {\n            IERC20(token).safeTransfer(feeCollector, tokenFee);\n            emit FeesCollected(token, tokenFee, 0);\n        }\n        \n        // Transfer flat fee in ETH if any\n        if (flatFeeAmount > 0) {\n            if (msg.value < flatFeeAmount) revert InvalidFlatFee();\n            (bool success, ) = feeCollector.call{value: flatFeeAmount}(\"\");\n            if (!success) revert FeeTransferFailed();\n            emit FeesCollected(token, 0, flatFeeAmount);\n        }\n\n        // Return the amount available for vesting (after token fees)\n        return totalAmount - tokenFee;\n    }\n\n\n\n    function _setupVestingSchedule(\n        uint256 vestingId,\n        address token,\n        address beneficiary,\n        uint256 totalAmount,\n        bool isSoft,\n        IVesting.VestingType vestingType,\n        bool isNftized,\n        bool isTopable\n    ) internal {\n        VestingSchedule storage schedule = vestingSchedules[vestingId];\n        schedule.token = token;\n        schedule.creator = msg.sender;\n        schedule.beneficiary = beneficiary;\n        schedule.totalAmount = totalAmount;\n        schedule.isSoft = isSoft;\n        schedule.isNftized = isNftized;\n        schedule.isTopable = isTopable;\n        schedule.released = 0;\n        schedule.cancelled = false;\n        schedule.vestingType = vestingType;\n    }\n\n    function _setupTranches(\n        uint256 vestingId,\n        IVestingCalculator.TimeAmount[] calldata tranches\n    ) internal {\n        VestingSchedule storage schedule = vestingSchedules[vestingId];\n        for (uint256 i = 0; i < tranches.length; i++) {\n            schedule.tranches.push(tranches[i]);\n        }\n    }\n\n    function _setupShares(\n        uint256 vestingId,\n        address token,\n        uint256 totalAmount\n    ) internal {\n        // Add offset to total shares to prevent inflation attacks\n        uint256 shares = _toShares(token, totalAmount);\n        _depositedShares[vestingId] = shares;\n        _totalTokenShares[token] += shares;\n    }\n\n    /// @notice Cancels a soft vesting schedule\n    /// @param vestingId ID of the vesting schedule to cancel\n    function cancel(uint256 vestingId) external nonReentrant {\n        VestingSchedule storage schedule = vestingSchedules[vestingId];\n        if (schedule.creator != msg.sender) revert NotAuthorized();\n        if (!schedule.isSoft) revert NotCancellable();\n        if (schedule.cancelled) revert VestingAlreadyCancelled();\n\n        uint256 vestedAmount = getVestedAmount(vestingId);\n        uint256 remainingAmount = schedule.totalAmount - vestedAmount;\n        \n        // Calculate vested shares with proper handling for edge cases\n        uint256 vestedShare;\n        if (schedule.totalAmount == 0) {\n            vestedShare = 0;\n        } else {\n            vestedShare = vestedAmount * _depositedShares[vestingId] / schedule.totalAmount;\n            // Ensure vestedShare doesn't exceed deposited shares due to rounding\n            if (vestedShare > _depositedShares[vestingId]) {\n                vestedShare = _depositedShares[vestingId];\n            }\n        }\n\n        // Update total shares safely\n        uint256 sharesToRemove = _depositedShares[vestingId] - vestedShare;\n        if (sharesToRemove > 0) {\n            _totalTokenShares[schedule.token] -= sharesToRemove;\n        }\n        \n        _depositedShares[vestingId] = vestedShare;\n\n        schedule.cancelled = true;\n        schedule.totalAmount = vestedAmount;\n\n        if (remainingAmount > 0) {\n            IERC20(schedule.token).safeTransfer(schedule.creator, remainingAmount);\n        }\n\n        emit VestingCancelled(vestingId);\n    }\n\n    /// @notice Gets the full vesting schedule for a given ID\n    /// @param vestingId ID of the vesting schedule\n    /// @return The complete vesting schedule\n    function getVestingSchedule(uint256 vestingId) external view override returns (VestingSchedule memory) {\n        return vestingSchedules[vestingId];\n    }\n\n    /// @notice Calculates the total amount vested at current time\n    /// @param vestingId ID of the vesting schedule\n    /// @return The total amount vested\n    function getVestedAmount(uint256 vestingId) public view returns (uint256) {\n        VestingSchedule storage schedule = vestingSchedules[vestingId];\n        if (schedule.cancelled) return schedule.totalAmount;\n        \n        uint256 rawVestedAmount = calculator.calculateVestedAmount(\n            schedule.tranches,\n            block.timestamp\n        );\n\n        // Return raw amount - no need to convert to shares and back\n        return rawVestedAmount;\n    }\n\n    /// @notice Calculates the amount that can be released\n    /// @param vestingId ID of the vesting schedule\n    /// @return The amount that can be released\n    function getReleasableAmount(uint256 vestingId) public view returns (uint256) {\n        VestingSchedule storage schedule = vestingSchedules[vestingId];\n        uint256 releasableShares = _getReleasableShares(vestingId);\n        return _toAmount(schedule.token, releasableShares);\n    }\n\n    /// @notice Releases vested tokens to the beneficiary\n    /// @param vestingId ID of the vesting schedule\n    function release(uint256 vestingId) external nonReentrant {\n        VestingSchedule storage schedule = vestingSchedules[vestingId];\n        \n        if (schedule.isNftized) {\n            if (msg.sender != ownerOf(vestingId)) revert NotAuthorized();\n        } else {\n            if (msg.sender != schedule.beneficiary) revert NotAuthorized();\n        }\n\n        // Update ratio before calculating releasable shares\n        _updateShareRatio(schedule.token);\n\n        // Get releasable shares using the consistent calculation method\n        uint256 releasableShares = _getReleasableShares(vestingId);\n        if (releasableShares == 0) revert NoTokensToRelease();\n\n        // Calculate amount proportional to shares\n        uint256 balance = IERC20(schedule.token).balanceOf(address(this));\n        uint256 amount = (releasableShares * balance) / _totalTokenShares[schedule.token];\n\n        // Update shares state\n        schedule.released += releasableShares;\n        _totalTokenShares[schedule.token] -= releasableShares;\n\n        // Transfer tokens\n        IERC20(schedule.token).safeTransfer(msg.sender, amount);\n\n        emit TokensReleased(vestingId, msg.sender, amount);\n    }\n\n    /// @notice Override of ERC721 _update to enforce transferability rules\n    /// @param to Address to transfer to\n    /// @param tokenId ID of the token being transferred\n    /// @param auth Address authorized to make the transfer\n    /// @return The from address_\n    function _update(\n        address to,\n        uint256 tokenId,\n        address auth\n    ) internal virtual override returns (address) {\n        address from = super._update(to, tokenId, auth);\n        \n        // Skip transferability check for mints and burns\n        if (from != address(0) && to != address(0)) {\n            if (!_transferable[tokenId]) {\n                revert NonTransferableToken();\n            }\n            // Update beneficiary for actual transfers\n            VestingSchedule storage schedule = vestingSchedules[tokenId];\n            schedule.beneficiary = to;\n        }else if(to == address(0)){\n            VestingSchedule storage schedule = vestingSchedules[tokenId];\n            schedule.isNftized = false;\n        }\n\n        return from;\n    }\n\n    /// @notice Allows beneficiary to mint their vesting NFT if not already minted\n    /// @param vestingId ID of the vesting schedule to mint NFT for\n    function mintVestingNFT(uint256 vestingId) external {\n        VestingSchedule storage schedule = vestingSchedules[vestingId];\n        \n        // Only beneficiary can mint\n        if (msg.sender != schedule.beneficiary) revert NotAuthorized();\n        if (schedule.isNftized) revert NFTAlreadyMinted();\n        \n        // Set NFT as minted before actual mint to prevent reentrance\n        schedule.isNftized = true;\n        \n        // Mint NFT to beneficiary\n        _mint(schedule.beneficiary, vestingId);\n    }\n\n    /// @notice Transfers a vesting schedule to a new beneficiary\n    /// @param vestingId ID of the vesting schedule to transfer\n    /// @param newBeneficiary Address of the new beneficiary\n    function transferVesting(uint256 vestingId, address newBeneficiary) external {\n        if (newBeneficiary == address(0)) revert InvalidBeneficiary();\n        \n        VestingSchedule storage schedule = vestingSchedules[vestingId];\n        \n        // Only current beneficiary can transfer\n        if (msg.sender != schedule.beneficiary) revert NotAuthorized();\n\n        if (schedule.isNftized) {\n            super._update( newBeneficiary, vestingId,address(0));\n        }\n        \n        // If not NFTized, just update beneficiary\n        schedule.beneficiary = newBeneficiary;\n\n        emit VestingTransferred(vestingId, msg.sender, newBeneficiary);\n    }\n\n    /// @notice Tops up a vesting schedule with additional tranches\n    /// @param vestingId ID of the vesting to top up\n    /// @param additionalTranches Array of additional vesting tranches\n    function topUpVesting(\n        uint256 vestingId,\n        IVestingCalculator.TimeAmount[] calldata additionalTranches\n    ) external nonReentrant {\n        VestingSchedule storage schedule = vestingSchedules[vestingId];\n        \n        _validateTopUpAuthorization(schedule);\n        _validateTopUpTranches(schedule, additionalTranches);\n        \n        uint256 topUpAmount = _calculateTopUpAmount(schedule, additionalTranches);\n        \n        uint256 actualTopUpAmount = _processTopUpTransfer(schedule, topUpAmount);\n        _updateTopUpState(schedule, vestingId, additionalTranches, actualTopUpAmount);\n        \n        emit VestingToppedUp(vestingId, msg.sender, actualTopUpAmount, additionalTranches);\n    }\n\n    /// @notice Validates authorization for top-up operation\n    function _validateTopUpAuthorization(VestingSchedule storage schedule) internal view {\n        if(msg.sender != schedule.creator) revert NotAuthorized();\n        if(schedule.cancelled) revert VestingAlreadyCancelled();\n        if(!schedule.isTopable) revert NotTopable();\n    }\n\n    /// @notice Validates the additional tranches for top-up\n    function _validateTopUpTranches(\n        VestingSchedule storage schedule, \n        IVestingCalculator.TimeAmount[] calldata additionalTranches\n    ) internal view {\n        uint256 lastTime = schedule.tranches[schedule.tranches.length - 1].time;\n        if (additionalTranches[0].time <= lastTime) revert InvalidTime();\n\n        uint256 newFinalAmount = calculator.getTotalAmount(additionalTranches);\n        if (newFinalAmount <= schedule.totalAmount) revert InvalidAmount();\n        if (additionalTranches[0].amount < schedule.totalAmount) revert InvalidAmount();\n    }\n\n    /// @notice Calculates the top-up amount\n    function _calculateTopUpAmount(\n        VestingSchedule storage schedule, \n        IVestingCalculator.TimeAmount[] calldata additionalTranches\n    ) internal view returns (uint256) {\n        uint256 newFinalAmount = calculator.getTotalAmount(additionalTranches);\n        return newFinalAmount - schedule.totalAmount;\n    }\n\n\n\n    /// @notice Processes the token transfer for top-up\n    function _processTopUpTransfer(VestingSchedule storage schedule, uint256 topUpAmount) internal returns (uint256) {\n        _updateShareRatio(schedule.token);\n\n        // Calculate percentage fee for top-up if not whitelisted\n        uint256 tokenFee = 0;\n        bool shouldPayTokenFees = !feeExemptTokens[schedule.token] && !feeExemptCreators[msg.sender];\n        \n        if (shouldPayTokenFees && feePercentage > 0) {\n            tokenFee = (topUpAmount * feePercentage) / 10000;\n        }\n        \n        // Transfer the full amount including fees\n        uint256 totalTransferAmount = topUpAmount + tokenFee;\n        uint256 balanceBefore = IERC20(schedule.token).balanceOf(address(this));\n        IERC20(schedule.token).safeTransferFrom(msg.sender, address(this), totalTransferAmount);\n        uint256 actualReceived = IERC20(schedule.token).balanceOf(address(this)) - balanceBefore;\n        \n        // Transfer token fees to fee collector if any\n        if (tokenFee > 0) {\n            IERC20(schedule.token).safeTransfer(feeCollector, tokenFee);\n            emit FeesCollected(schedule.token, tokenFee, 0);\n        }\n        \n        // Return the actual amount for vesting (excluding fees)\n        return actualReceived - tokenFee;\n    }\n\n    /// @notice Updates the vesting state after top-up\n    function _updateTopUpState(\n        VestingSchedule storage schedule, \n        uint256 vestingId, \n        IVestingCalculator.TimeAmount[] calldata additionalTranches, \n        uint256 actualTopUpAmount\n    ) internal {\n        uint256 newFinalAmount = calculator.getTotalAmount(additionalTranches);\n        uint256 newShares = _toShares(schedule.token, actualTopUpAmount);\n\n        schedule.totalAmount = newFinalAmount;\n        _depositedShares[vestingId] += newShares;\n        _totalTokenShares[schedule.token] += newShares;\n\n        for (uint256 i = 0; i < additionalTranches.length; i++) {\n            schedule.tranches.push(additionalTranches[i]);\n        }\n    }\n\n    function _toShares(address token, uint256 amount) internal view returns (uint256) {\n        return (amount * _shareRatio[token]) / 1e18;\n    }\n\n    function _toAmount(address token, uint256 shares) internal view returns (uint256) {\n        return (shares * 1e18) / _shareRatio[token];\n    }\n\n    function _getReleasableShares(uint256 vestingId) public view returns (uint256) {\n        VestingSchedule storage schedule = vestingSchedules[vestingId];\n        if (schedule.cancelled) {\n            return _depositedShares[vestingId] - schedule.released;\n        }\n\n        // Get raw vested amount\n        uint256 rawVestedAmount = calculator.calculateVestedAmount(\n            schedule.tranches,\n            block.timestamp\n        );\n\n        // Cap at total amount\n        if (rawVestedAmount > schedule.totalAmount) {\n            rawVestedAmount = schedule.totalAmount;\n        }\n\n        // Convert amount to shares with higher precision\n        uint256 vestedShares;\n        if (schedule.totalAmount == 0) {\n            vestedShares = 0;\n        } else {\n            // First multiply deposited shares by vested amount to maintain precision\n            uint256 vestedSharesTimesPrecision = _depositedShares[vestingId] * rawVestedAmount;\n            // Then divide by total amount\n            vestedShares = vestedSharesTimesPrecision / schedule.totalAmount;\n        }\n        \n        // Cap at deposited shares\n        if (vestedShares > _depositedShares[vestingId]) {\n            vestedShares = _depositedShares[vestingId];\n        }\n\n        // Calculate releasable shares\n        if (vestedShares <= schedule.released) return 0;\n        return vestedShares - schedule.released;\n    }\n\n    function _updateShareRatio(address token) internal {\n        uint256 totalShares = _totalTokenShares[token];       \n        if(totalShares == 0){\n            _shareRatio[token] = 1e18;\n            return;\n        }\n        uint256 balance = IERC20(token).balanceOf(address(this));\n\n        // Handle edge case where balance is very low to prevent overflow\n        if (balance == 0) {\n            _shareRatio[token] = 1e18;\n            return;\n        }\n\n        // Calculate share ratio with overflow protection\n        uint256 numerator = (totalShares + 1) * 1e18;\n        uint256 denominator = balance + 1;\n        \n        // Ensure we don't have division by zero and handle overflow\n        if (denominator == 0) {\n            _shareRatio[token] = 1e18;\n        } else {\n            _shareRatio[token] = numerator / denominator;\n        }\n    }\n\n    /// @notice Set the fee percentage\n    /// @param _feePercentage New fee percentage in basis points\n    function setFeePercentage(uint256 _feePercentage) external onlyOwner {\n        if (_feePercentage > 500) revert InvalidFeePercentage(); // Max 5%\n        feePercentage = _feePercentage;\n        emit FeePercentageUpdated(_feePercentage);\n    }\n\n    /// @notice Set the flat fee\n    /// @param _flatFee New flat fee amount in wei\n    function setFlatFee(uint256 _flatFee) external onlyOwner {\n        flatFee = _flatFee;\n        emit FlatFeeUpdated(_flatFee);\n    }\n\n    /// @notice Set whether a creator is exempt from fees\n    /// @param _creator Creator address to update\n    /// @param _isExempt Whether the creator should be exempt from fees\n    function setCreatorFeeExempt(address _creator, bool _isExempt) external onlyOwner {\n        feeExemptCreators[_creator] = _isExempt;\n        emit CreatorFeeExemptionUpdated(_creator, _isExempt);\n    }\n\n    /// @notice Set whether a token is exempt from fees\n    /// @param _token Token address to update\n    /// @param _isExempt Whether the token should be exempt from fees\n    function setTokenFeeExempt(address _token, bool _isExempt) external onlyOwner {\n        feeExemptTokens[_token] = _isExempt;\n        emit TokenFeeExemptionUpdated(_token, _isExempt);\n    }\n\n    /// @notice Set the fee collector\n    /// @param newFeeCollector Address of the new fee collector\n    function setFeeCollector(address newFeeCollector) external onlyOwner {\n        if (newFeeCollector == address(0)) revert InvalidFeeCollector();\n        address oldFeeCollector = feeCollector;\n        feeCollector = newFeeCollector;\n        emit FeeCollectorUpdated(oldFeeCollector, newFeeCollector);\n    }\n\n    /// @notice Set the SVG generator contract\n    /// @param newSVGGenerator Address of the new SVG generator contract\n    function setSVGGenerator(address newSVGGenerator) external onlyOwner {\n        if (newSVGGenerator == address(0)) revert InvalidSVGGenerator();\n        address oldSVGGenerator = address(svgGenerator);\n        svgGenerator = IVestingSVGGenerator(newSVGGenerator);\n        emit SVGGeneratorUpdated(oldSVGGenerator, newSVGGenerator);\n    }\n\n    /// @notice Returns the token URI for a given vesting NFT\n    /// @param tokenId The vesting ID\n    /// @return The token URI containing SVG metadata\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\n        if (ownerOf(tokenId) == address(0)) revert TokenDoesNotExist();\n        \n        VestingSchedule storage schedule = vestingSchedules[tokenId];\n        (string memory tokenSymbol, string memory tokenName, uint8 tokenDecimals) = _getTokenMetadata(schedule.token);\n        \n        // Calculate start and end times from tranches\n        uint256 startTime = schedule.tranches.length > 0 ? \n            schedule.tranches[0].time : block.timestamp;\n        uint256 endTime = schedule.tranches.length > 0 ? \n            schedule.tranches[schedule.tranches.length - 1].time : block.timestamp;\n        \n        // Calculate vested amount (available to claim)\n        uint256 vestedAmount = getVestedAmount(tokenId);\n        \n        return svgGenerator.generateTokenURI(\n            tokenId,\n            tokenSymbol,\n            tokenName,\n            schedule.totalAmount,\n            vestedAmount,\n            startTime,\n            endTime,\n            schedule.isSoft,\n            schedule.isTopable,\n            schedule.beneficiary,\n            tokenDecimals\n        );\n    }\n\n    /// @notice Gets comprehensive token metadata from the token contract\n    /// @param token The token address\n    /// @return symbol The token symbol\n    /// @return name The token name\n    /// @return decimals The token decimals\n    function _getTokenMetadata(address token) internal view returns (\n        string memory symbol, \n        string memory name, \n        uint8 decimals\n    ) {\n        try IERC20Metadata(token).symbol() returns (string memory _symbol) {\n            symbol = _symbol;\n        } catch {\n            symbol = \"TOKEN\";\n        }\n        \n        try IERC20Metadata(token).name() returns (string memory _name) {\n            name = _name;\n        } catch {\n            name = symbol; // Fall back to symbol if name fails\n        }\n        \n        try IERC20Metadata(token).decimals() returns (uint8 _decimals) {\n            decimals = _decimals;\n        } catch {\n            decimals = 18; // Default to 18 decimals\n        }\n    }\n}   "}}, "settings": {"viaIR": false, "optimizer": {"enabled": true}, "outputSelection": {"*": {"*": ["evm.legacyAssembly"]}}, "evmVersion": "paris"}}
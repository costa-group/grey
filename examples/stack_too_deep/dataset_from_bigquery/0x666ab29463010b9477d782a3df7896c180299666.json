{"language": "Solidity", "settings": {"optimizer": {"enabled": true}, "viaIR": false, "outputSelection": {"*": {"*": ["evm.legacyAssembly"]}}, "remappings": []}, "sources": {"IlmDirectPaymentGelato_v1.flattened.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\n// lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n\n// lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\n// lib/openzeppelin-contracts/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// lib/relay-context-contracts/contracts/vendor/ERC2771Context.sol\n\n// OpenZeppelin Contracts (last updated v4.7.0) (metatx/ERC2771Context.sol)\n\n/**\n * @dev Context variant with ERC2771 support.\n */\n// based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\nabstract contract ERC2771Context {\n    address private immutable _trustedForwarder;\n\n    constructor(address trustedForwarder) {\n        _trustedForwarder = trustedForwarder;\n    }\n\n    function isTrustedForwarder(address forwarder)\n        public\n        view\n        virtual\n        returns (bool)\n    {\n        return forwarder == _trustedForwarder;\n    }\n\n    function _msgSender() internal view virtual returns (address sender) {\n        if (isTrustedForwarder(msg.sender)) {\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\n            /// @solidity memory-safe-assembly\n            assembly {\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        } else {\n            return msg.sender;\n        }\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        if (isTrustedForwarder(msg.sender)) {\n            return msg.data[:msg.data.length - 20];\n        } else {\n            return msg.data;\n        }\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n\n// lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n\n// lib/ingredients/DirectPayment_v1.sol\n\n/**\n * Abstract payment protocol contract\n *\n * Receives tokens from senders, takes a protocol fee (set percentage of the amount), and forwards\n * the rest of the payment to the recipients.\n *\n * The contract takes original sender and recipient address as parameters, allowing msg.sender\n * to be another contract in the payment chain (passing original sender address through the chained\n * contracts (if any), and reaching a final recipent via this contract.\n */\nabstract contract DirectPayment_v1 is ReentrancyGuard {\n    \n    using SafeERC20 for IERC20;\n    \n    error FailedToPayGasToken(); // failed to pay gas token\n    error InvalidPaymentAmount(); // ERC20 allowance or balance < amount to be transferred\n    error MismatchedPaymentGasTokenValue(); // gas token value does not match msg.value\n\n    uint256 public feePercentage; // fee percentage on tokens transacted through protocol, 1 = 0.01%\n\n    event newFeePercentage(uint256 indexed _newPercentage);\n    event nftPaid(address indexed _from, address indexed _to, address indexed _nft, uint256 _nftId);\n    event tokensPaid(address indexed _from, address indexed _to, address indexed _token,\n        uint256 _amount);\n        \n\n    /*\n    //////////////////////////\n    /// External functions ///\n    //////////////////////////\n    */\n\n    /* External function that transfers NFT to recipient and emits an event.\n     */\n    function payNFT(\n        address _sender,\n        address _nftAddress,\n        uint256 _nftId,\n        address _recipient)\n        external\n        payable\n        nonReentrant\n        virtual\n    {\n        IERC721(_nftAddress).transferFrom(msg.sender, _recipient, _nftId);\n\n        emit nftPaid(_sender, _recipient, _nftAddress, _nftId);\n    }\n\n    /* External virtual function that receives ERC20s and gas tokens, takes a fee, forwards the rest\n     * to the intended recipient, and emits an event.\n     */\n    function payTokens(\n        address _sender,\n        address _token,\n        uint256 _amount,\n        uint256 _deadline,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s,\n        address _recipient)\n        external\n        nonReentrant\n        payable\n        virtual\n    {\n        if (_amount == 0) {\n            revert InvalidPaymentAmount();\n        }\n        \n        uint256 fee = (_amount * feePercentage) / 10000; // feePercentage of 1 = 0.01% fee\n        uint256 toRecipient = _amount - fee;\n\n        if (_token == address(0)) {\n            if (_amount != msg.value) {\n                revert MismatchedPaymentGasTokenValue();\n            }\n            (bool success, ) = _recipient.call{value: toRecipient}(\"\");\n            if (!success) {\n                revert FailedToPayGasToken();\n            }\n        } else {\n            if (_deadline != 0) {\n                // Handle EIP-2612-compliant tokens\n                IERC20Permit(_token).permit(msg.sender, address(this), _amount,\n                    _deadline, _v, _r, _s);\n            }\n            IERC20 token = IERC20(_token);\n            uint256 allowance = token.allowance(msg.sender, address(this));\n            uint256 balance = token.balanceOf(msg.sender);\n            if (allowance < _amount || balance < _amount ) {\n                revert InvalidPaymentAmount();\n            }\n            token.safeTransferFrom(msg.sender, address(this), _amount);\n            if (toRecipient > 0) {\n                token.safeTransfer(_recipient, toRecipient);\n            }\n        }\n\n        emit tokensPaid(_sender, _recipient, _token, _amount);\n    }\n\n    /* External virtual function to change fee percentage\n     */\n    function setFeePercentage(uint256 _newFeePercentage)\n        external\n        virtual\n    {\n        feePercentage = _newFeePercentage;\n\n        emit newFeePercentage(_newFeePercentage);\n    }\n}\n\n// lib/ingredients/ProtocolContract_v1.sol\n\n/**\n * Abstract protocol contract is Ownable and ReentrancyGuard and has virtual functions that allow\n * the Owner to transfer ERC20 and ERC721 tokens from this contract to any recipient.\n *\n * The aim is to collect tokens mistakenly sent to a child contract. The contracts that inherit from\n * this contract must consider what tokens need to be safeguarded from being withdrawable by the\n * Owner and thus override the virtual transfer functions defined in this contract.\n */\nabstract contract ProtocolContract_v1 is Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    error AmountToTransferExceedsContractBalance(\n        uint256 _amount,\n        uint256 _balance\n    );\n    error CannotSendToSelf();\n    error OwnerApproveAndCallArraysMismatch(\n        uint256 _tokensLength,\n        uint256 _spendersLength,\n        uint256 _amountsLength\n    );\n    error OwnerFailedToApproveAndCall(\n        address _token,\n        address _spender,\n        uint256 _amount\n    );\n    error OwnerFailedToSendGasToken();\n    error OwnerTransferArraysMismatch(\n        uint256 _tokensLength,\n        uint256 _amountsLength,\n        uint256 _recipientsLength\n    );\n\n    event OwnerTransferredNft(\n        address indexed _token,\n        address indexed _to,\n        uint256 indexed _nftId\n    );\n    event OwnerTransferredTokens(\n        address indexed _token,\n        address indexed _to,\n        uint256 indexed _amount\n    );\n\n    constructor(address _initialOwner) Ownable(_initialOwner) {}\n\n    /*\n    //////////////////////////\n    /// External functions ///\n    //////////////////////////\n    */\n\n    fallback() external payable virtual {}\n\n    receive() external payable virtual {}\n\n    /* External virtual function called by Owner to transfer NFTs from this contract\n     */\n    function transferNfts(\n        address[] calldata _nfts,\n        address[] calldata _recipients,\n        uint256[] calldata _nftIds\n    ) external virtual nonReentrant onlyOwner {\n        if (\n            _nfts.length != _nftIds.length || _nfts.length != _recipients.length\n        ) {\n            revert OwnerTransferArraysMismatch(\n                _nfts.length,\n                _nftIds.length,\n                _recipients.length\n            );\n        }\n        for (uint256 i = 0; i < _nfts.length; ) {\n            IERC721(_nfts[i]).safeTransferFrom(\n                address(this),\n                _recipients[i],\n                _nftIds[i]\n            );\n\n            emit OwnerTransferredNft(_nfts[i], _recipients[i], _nftIds[i]);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /* External virtual function called by Owner to transfer tokens from this contract\n     */\n    function transferTokens(\n        address[] calldata _tokens,\n        address[] calldata _recipients,\n        uint256[] calldata _amounts\n    ) external virtual nonReentrant onlyOwner {\n        if (\n            _tokens.length != _amounts.length ||\n            _tokens.length != _recipients.length\n        ) {\n            revert OwnerTransferArraysMismatch(\n                _tokens.length,\n                _amounts.length,\n                _recipients.length\n            );\n        }\n        for (uint256 i = 0; i < _tokens.length; ) {\n            if (_recipients[i] == address(this)) {\n                revert CannotSendToSelf();\n            }\n            uint256 contractBalance = _tokens[i] == address(0)\n                ? address(this).balance\n                : IERC20(_tokens[i]).balanceOf(address(this));\n            if (_amounts[i] > contractBalance) {\n                revert AmountToTransferExceedsContractBalance(\n                    _amounts[i],\n                    contractBalance\n                );\n            }\n            if (_tokens[i] == address(0)) {\n                // native token\n                (bool sent, ) = payable(_recipients[i]).call{\n                    value: _amounts[i]\n                }(\"\");\n                if (!sent) {\n                    revert OwnerFailedToSendGasToken();\n                }\n            } else {\n                if (_recipients[i] != address(0)) {\n                    IERC20(_tokens[i]).safeTransfer(\n                        _recipients[i],\n                        _amounts[i]\n                    );\n                } else {\n                    IERC20(_tokens[i]).transfer(_recipients[i], _amounts[i]);\n                }\n            }\n\n            emit OwnerTransferredTokens(\n                _tokens[i],\n                _recipients[i],\n                _amounts[i]\n            );\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /* External function that allows Owner to approve and call a contract to perform actions with\n     * this contract's tokens\n     */\n    function approveTokenAndCall(\n        address _token,\n        address _spender,\n        uint256 _amount,\n        bytes calldata _data\n    ) external nonReentrant onlyOwner {\n        bool success;\n        if (_token != address(0)) {\n            IERC20(_token).approve(_spender, _amount);\n            (success, ) = _spender.call(_data);\n        } else {\n            (success, ) = _spender.call{value: _amount}(_data);\n        }\n        if (!success) {\n            revert OwnerFailedToApproveAndCall(_token, _spender, _amount);\n        }\n    }\n\n    /* External function that allows Owner to approve many tokens and call contracts to perform\n     * actions with those tokens held by this contract\n     */\n    function approveManyTokensAndCall(\n        address[] calldata _tokens,\n        address[] calldata _spenders,\n        uint256[] calldata _amounts,\n        bytes[] calldata _data\n    ) external nonReentrant onlyOwner {\n        bool success;\n        if (\n            _tokens.length != _spenders.length ||\n            _spenders.length != _amounts.length ||\n            _amounts.length != _data.length\n        ) {\n            revert OwnerApproveAndCallArraysMismatch(\n                _tokens.length,\n                _spenders.length,\n                _amounts.length\n            );\n        }\n        for (uint256 i = 0; i < _tokens.length; ) {\n            if (_tokens[i] != address(0)) {\n                if (_amounts[i] > 0) {\n                    IERC20(_tokens[i]).approve(_spenders[i], _amounts[i]);\n                }\n                (success, ) = _spenders[i].call(_data[i]);\n            } else {\n                (success, ) = _spenders[i].call{value: _amounts[i]}(_data[i]);\n            }\n            if (!success) {\n                revert OwnerFailedToApproveAndCall(\n                    _tokens[i],\n                    _spenders[i],\n                    _amounts[i]\n                );\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n\n// src/IlmDirectPaymentGelato_v1.sol\n\n/**\n * Payment protocol contract for the Illuminate (ILM) protocol.\n *\n * Receives payments from users and takes a fee before forwarding the rest to the recipient. The\n * fees collected is withdrawable by the Owner of this contract, as it is a ProtocolContract. The\n * Owner is to be the Illuminate DAO or multisig wallet.\n *\n * This contract is compatible with Gelato Relay's sponsoredCallERC2771 function.\n */\ncontract IlmDirectPaymentGelato_v1 is DirectPayment_v1, ProtocolContract_v1, ERC2771Context {\n\n    using SafeERC20 for IERC20;\n\n    error InvalidFeePercentage(); // fee percentage must be <= 30% max\n    error InsufficientNFTFee(); // insufficient fee for NFT payment\n    error PaymentArraysLengthMismatch(); // arrays passed to payment function have different lengths\n\n    mapping(address => uint256) public customFee; // creator => custom fee, 0 = no custom fee\n\n    uint256 public nftFee; // fee in gas to send nft\n\n    constructor() ERC2771Context(0xd8253782c45a12053594b9deB72d8e8aB2Fca54c)\n        ProtocolContract_v1(0xF9dE78c2531A7042bB6D425F17f70D8AF528b911) {\n            nftFee = 1000000000000000; // 0.001 ETH\n            feePercentage = 1000; // 10%\n    }\n\n    /*\n    //////////////////////////\n    /// External functions ///\n    //////////////////////////\n    */\n\n    /* External function that transfers NFTs to recipients and emits an event per NFT and recipient.\n     */\n    function payManyNFTs(\n        address _sender,\n        address[] calldata _nftAddresses,\n        uint256[] calldata _nftIds,\n        address[] calldata _recipients)\n        external\n        payable\n        nonReentrant\n    {\n        if (\n            _nftAddresses.length != _nftIds.length ||\n            _nftIds.length != _recipients.length\n        ) {\n            revert PaymentArraysLengthMismatch();\n        }\n        \n        if (\n            msg.value < nftFee * _nftAddresses.length\n        ) {\n            revert InsufficientNFTFee();\n        }\n\n        for (uint256 i = 0; i < _nftAddresses.length; ) {\n            IERC721(_nftAddresses[i]).transferFrom(_msgSender(), _recipients[i], _nftIds[i]);\n        \n            emit nftPaid(_sender, _recipients[i], _nftAddresses[i], _nftIds[i]);\n            \n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /* External function that receives multiple ERC20s and/or gas token, takes fees, and forwards\n     * the rest to recipients.\n     */\n    function payManyTokens(\n        address _sender,\n        address[] calldata _tokens,\n        uint256[] calldata _amounts,\n        uint256[] calldata _deadlines,\n        uint8[] calldata _vs,\n        bytes32[] calldata _rs,\n        bytes32[] calldata _ss,\n        address[] calldata _recipients)\n        external\n        nonReentrant\n        payable\n    {\n        if (\n            _tokens.length != _amounts.length ||\n            _amounts.length != _deadlines.length ||\n            _deadlines.length != _vs.length ||\n            _vs.length != _rs.length ||\n            _rs.length != _ss.length ||\n            _ss.length != _recipients.length\n        ) {\n            revert PaymentArraysLengthMismatch();\n        }\n\n        uint256 gasTokenTotal = 0;\n\n        for (uint256 i = 0; i < _tokens.length; ) {\n            if (_amounts[i] == 0) {\n                revert InvalidPaymentAmount();\n            }\n            uint256 finalFeePercentage = feePercentage;\n            if (customFee[_recipients[i]] != 0) {\n                if (customFee[_recipients[i]] < finalFeePercentage) {\n                    finalFeePercentage = customFee[_recipients[i]];\n                }\n            }\n            if (customFee[_tokens[i]] != 0) {\n                if (customFee[_tokens[i]] < finalFeePercentage) {\n                    finalFeePercentage = customFee[_tokens[i]];\n                }\n            }\n            uint256 fee = _amounts[i] * finalFeePercentage / 10000;\n            uint256 toRecipient = _amounts[i] - fee;\n            if (_tokens[i] == address(0)) {\n                gasTokenTotal += _amounts[i];\n                if (gasTokenTotal > msg.value) {\n                    revert MismatchedPaymentGasTokenValue();\n                }\n                (bool success, ) = _recipients[i].call{value: toRecipient}(\"\");\n                if (!success) {\n                    revert FailedToPayGasToken();\n                }\n            } else {\n                if (_deadlines[i] != 0) {\n                    // Handle EIP-2612-compliant tokens\n                    IERC20Permit(_tokens[i]).permit(_msgSender(), address(this), _amounts[i],\n                        _deadlines[i], _vs[i], _rs[i], _ss[i]);\n                }\n                IERC20 token = IERC20(_tokens[i]);\n                uint256 allowance = token.allowance(_msgSender(), address(this));\n                uint256 balance = token.balanceOf(_msgSender());\n                if (allowance < _amounts[i] || balance < _amounts[i]) {\n                    revert InvalidPaymentAmount();\n                }\n                token.safeTransferFrom(_msgSender(), address(this), _amounts[i]);\n                if (toRecipient > 0) {\n                    token.safeTransfer(_recipients[i], toRecipient);\n                }\n            }\n\n            emit tokensPaid(_sender, _recipients[i], _tokens[i], _amounts[i]);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /* External override function that transfers NFT to recipient for a fee and emits an event.\n     */\n    function payNFT(\n        address _sender,\n        address _nftAddress,\n        uint256 _nftId,\n        address _recipient)\n        external\n        payable\n        nonReentrant\n        override\n    {\n        if (\n            msg.value < nftFee\n        ) {\n            revert InsufficientNFTFee();\n        }\n\n        IERC721(_nftAddress).transferFrom(_msgSender(), _recipient, _nftId);\n\n        emit nftPaid(_sender, _recipient, _nftAddress, _nftId);\n    }\n\n    /* External override function that receives ERC20s and gas tokens, takes a fee, forwards the rest\n     * to the intended recipient, and emits an event.\n     */\n    function payTokens(\n        address _sender,\n        address _token,\n        uint256 _amount,\n        uint256 _deadline,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s,\n        address _recipient)\n        external\n        nonReentrant\n        payable\n        override\n    {\n        if (_amount == 0) {\n            revert InvalidPaymentAmount();\n        }\n        uint256 finalFeePercentage = feePercentage;\n        if (customFee[_recipient] != 0) {\n            if (customFee[_recipient] < finalFeePercentage) {\n                finalFeePercentage = customFee[_recipient];\n            }\n        }\n        if (customFee[_token] != 0) {\n            if (customFee[_token] < finalFeePercentage) {\n                finalFeePercentage = customFee[_token];\n            }\n        } \n        uint256 fee = (_amount * finalFeePercentage) / 10000; // feePercentage of 1 = 0.01% fee\n        uint256 toRecipient = _amount - fee;\n\n        if (_token == address(0)) {\n            if (_amount != msg.value) {\n                revert MismatchedPaymentGasTokenValue();\n            }\n            (bool success, ) = _recipient.call{value: toRecipient}(\"\");\n            if (!success) {\n                revert FailedToPayGasToken();\n            }\n        } else {\n            if (_deadline != 0) {\n                // Handle EIP-2612-compliant tokens\n                IERC20Permit(_token).permit(_msgSender(), address(this), _amount,\n                    _deadline, _v, _r, _s);\n            }\n            IERC20 token = IERC20(_token);\n            uint256 allowance = token.allowance(_msgSender(), address(this));\n            uint256 balance = token.balanceOf(_msgSender());\n            if (allowance < _amount || balance < _amount ) {\n                revert InvalidPaymentAmount();\n            }\n            token.safeTransferFrom(_msgSender(), address(this), _amount);\n            if (toRecipient > 0) {\n                token.safeTransfer(_recipient, toRecipient);\n            }\n        }\n\n        emit tokensPaid(_sender, _recipient, _token, _amount);\n    }\n\n    /* External function that allows Owner to set a custom fee for a creator or token\n     */\n    function setCustomFee(address _address, uint256 _fee)\n        external\n        nonReentrant\n        onlyOwner\n    {\n        customFee[_address] = _fee;\n    }\n\n    /* External override function called by Owner to change fee percentage\n     */\n    function setFeePercentage(uint256 _newFeePercentage)\n        external\n        override\n        nonReentrant\n        onlyOwner\n        validFeePercentage(_newFeePercentage)\n    {\n        feePercentage = _newFeePercentage;\n    }\n\n    /* External function that allows Owner to set the fee in gas to send an NFT\n     */\n    function setNftFee(uint256 _newNftFee)\n        external\n        nonReentrant\n        onlyOwner\n    {\n        nftFee = _newNftFee;\n    }\n\n    //////////////////////////\n    /// Internal functions ///\n    //////////////////////////\n\n    /* Internal override function that defines _msgSender() per Gelato's ERC2771Context\n     */\n     function _msgSender()\n        internal\n        view\n        override(ERC2771Context, Context)\n        returns (address sender)\n    {\n        if (isTrustedForwarder(msg.sender)) {\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\n            /// @solidity memory-safe-assembly\n            assembly {\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        } else {\n            return msg.sender;\n        }\n    }\n\n    /* Internal override function that defines _msgData() per Gelato's ERC2771Context\n     */\n    function _msgData()\n        internal\n        view\n        override(ERC2771Context, Context)\n        returns (bytes calldata)\n    {\n        if (isTrustedForwarder(msg.sender)) {\n            return msg.data[:msg.data.length - 20];\n        } else {\n            return msg.data;\n        }\n    }\n\n    /*\n    /////////////////\n    /// Modifiers ///\n    /////////////////\n    */\n\n    modifier validFeePercentage(uint256 _fee) {\n        if(_fee > 3000) {\n            revert InvalidFeePercentage();\n        }\n        _;\n    }\n}"}}}
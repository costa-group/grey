{"language": "Solidity", "sources": {"contracts/BasedHelperContract.sol": {"content": "// SPDX-License-Identifier: UNLICENSED\n// Copyright (c) 2023 https://based.foundation\npragma solidity ^0.8.30;\n\n/**\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\n * \u256c\u256c\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\n * \u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u256c\n * \u256c\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\n * \u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\n * \u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256b\u2588\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256b\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256b\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\n * \u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u2563\u2588\u256c\u2588\u2588\u2588\u2588\u2588\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256b\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\n * \u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256b\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\n * \u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u2563\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256b\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\n * \u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256b\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u2563\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u2588\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256b\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\n * \u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256b\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\n * \u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256b\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\n * \u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256b\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\n * \u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256b\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\n * \u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256b\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\n * \u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\n * \u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2563\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\n * \u256c\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u2563\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\n * \u256c\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u2563\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u2563\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256b\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u258c\u2593\u2593\u2593\u256b\u2580\u2580\u256c\u256c\u256c\u2563\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u2593\u00d1\u256c\u2584\u2593\u2593\u2593\u2588\u2588\u2588\u2593\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u2588\u2588\u2580\u2560\u2584\u2593\u2593\u2593\u2593\u2593\u2592\u2261\u2588\u2588\u2588\u2588\u2588\u2593\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u2593\u2593\u256c\u256c\u2580\u2580\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u2593\u2592\u256c\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u255a\u2588\u2588\u2588\u2588\u2593\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u2592\u00dc\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u2592\u2560\u2560\u2593\u2588\u2593\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u258c\u2560\u2593\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2593\u2593\u256c\u2560\u2584\u2588\u2588\u2588\u2588\u2588\u2584\u2592\u2560\u2560\u2588\u2593\u2588\u2593\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u2588\u2588\u2588\u2563\u2563\u256c\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u2588\u2588\u2588\u2588\u00dc\u255f\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u00d1\u2560\u2588\u2588\u2588\u2588\u2593\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u2593\u2593\u2588\u2588\u00d1\u2584\u2593\u2588\u2593\u2588\u2593\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2592\u256c\u2593\u2588\u2588\u2588\u2593\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u256c\u00dc\u256b\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u2563\u2588\u2588\u2588\u2588\u2592\u2560\u2560\u2593\u2588\u2593\u255a\u2569\u2559\u2560\u2588\u2588\u2588\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u2588\u256c\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2593\u2588\u2588\u2588\u2588\u2593\u2588\u2588\u2588\u2593\u2593\u256c\u2588\u2562\u2588\u2593\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u255f\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2569\u256b\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2563\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u258c\u2560\u256b\u2593\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2588\u2593\u2593\u2563\u2588\u256c\u2563\u00d1\u256c\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u00d1\u2560\u2560\u2560\u256b\u2593\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u2588\u2593\u00d1\u2592\u2584\u2593\u2588\u2593\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u256c\u2563\u2593\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u2593\u2593\u2593\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u256c\u00d1\u255f\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u00d1\u256c\u2588\u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2592\u2560\u2593\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c\u2584\u2584\u2584\u2593\u2588\u256c\u255a\u255a\u2559\u2559\u2559\u2559\u2591\u2593\u2588\u2588\u2588\u2588\u2588\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2563\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u2563\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2584\u2584\u2592\u2593\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2563\u2593\u2593\u2588\u2593\u2593\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u258c\u256c\u256c\u00d1\u256c\u2563\u2593\u2588\u2588\u2593\u256c\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u2560\u256c\u2593\u2593\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u2593\u2593\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u2588\u2588\u2593\u256c\u2588\u00d1\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u256b\u256c\u256c\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u2563\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u256c\u256c\u256c\u2588\u2593\u2563\u256c\u2593\u2593\u256c\u256c\u256c\u2563\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2593\u00d1\u256c\u2592\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u256c\u2593\u2588\u256c\u256c\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u256c\u2593\u256c\u2563\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u255a\u256c\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2588\u2588\u2588\u2593\u2593\u2588\u2588\u2593\u2593\u2593\u256c\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u256c\u2569\u2588\u2588\u2593\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u256c\u256c\u256c\u2593\u2593\u256c\u2593\u2593\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2588\u2584\u2584\u2584\u2584\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2559\u00dc\u2591\u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u2588\u2588\u2593\u2592\u256c\u2588\u2588\u2588\u2588\u2588\u2593\u2563\u256c\u2563\u255f\u2563\u2593\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2563\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c\u2591\u2591\u2591\u2559\u2559\u2559\u00dc]\u00dc\u2593\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2588\u2593\u2593\u2593\u256c\u2593\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\n * \u256c\u256c\u256c\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2584\u2584\u2584\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2563\u256c\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u256c\u256c\u256c\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u256c\u2593\u2593\u2563\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\n * \u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u2563\u2588\u2588\u2588\u2588\u2588\u256c\u2563\u256c\u2588\u2588\u2588\u2588\u256c\u2588\u2588\u2588\u2588\u256c\u2588\u2588\u2588\u256c\u256c\u2588\u2588\u2588\u256c\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u2563\u2563\u2563\u2588\u2588\u2588\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u2563\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u2588\u2588\u2588\u2588\u256c\u256c\u2588\u2588\u2588\u2588\u256c\n * \u256c\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u2563\u2588\u2588\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u2588\u2588\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u2588\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u2588\u256c\n * \u256c\u2588\u256c\u256c\u2588\u2588\u2588\u2588\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u2588\u256c\u2588\u2562\u256c\u2588\u2588\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u2588\u2588\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u2588\u2588\u2588\u256c\u256c\u256c\u2588\u2588\u2588\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u2588\u256c\n * \u256c\u2588\u256c\u256c\u2588\u2588\u2588\u2588\u256c\u2588\u256c\u256c\u2562\u2588\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u2588\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u2588\u256c\u2563\u2588\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u2588\u256c\n * \u256c\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u2562\u2588\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u2588\u256c\u2563\u2588\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\n * \u256c\u2588\u256c\u256c\u2588\u2588\u2588\u2588\u256c\u2588\u256c\u256c\u2562\u2588\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u2588\u256c\u2588\u2562\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u2588\u256c\u2563\u2588\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u2588\u256c\u2563\u2588\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u2563\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\n * \u256c\u2588\u256c\u256c\u2588\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u2588\u256c\u2588\u2563\u2588\u256c\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u2588\u256c\u2563\u2588\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\n * \u256c\u2588\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u2588\u2563\u2588\u2588\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u2588\u256c\u2563\u2588\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\n * \u256c\u2588\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u2588\u256c\u2563\u2588\u2588\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u2563\u256c\u256c\u2588\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u2588\u256c\u256c\u2588\u256c\u2563\u2563\u2588\u256c\u2563\u2588\u2563\u2563\u2563\u256c\u2588\u2563\u256c\u2588\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u2588\u256c\n * \u256c\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u2588\u2588\u2588\u256c\u256c\u2588\u2588\u2588\u256c\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u2588\u2588\u2588\u256c\u2588\u2588\u2588\u256c\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u2563\u2588\u2588\u2588\u2588\u2563\u256c\u256c\u2588\u2588\u2588\u2588\u256c\u2588\u2588\u2588\u2588\u256c\u256c\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\n *\n * He who rules the AI, rules the future.\n *\n * Homepage: https://based.foundation\n *\n */\n \nabstract contract Initializable {\n    struct InitializableStorage {\n        uint64 _initialized;\n        bool _initializing;\n    }\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n    error InvalidInitialization();\n    error NotInitializing();\n    event Initialized(uint64 version);\n    modifier initializer() {\n        InitializableStorage storage $ = _getInitializableStorage();\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n    modifier reinitializer(uint64 version) {\n        InitializableStorage storage $ = _getInitializableStorage();\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n    function _disableInitializers() internal virtual {\n        InitializableStorage storage $ = _getInitializableStorage();\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    struct OwnableStorage {\n        address _owner;\n    }\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\n        assembly {\n            $.slot := OwnableStorageLocation\n        }\n    }\n    error OwnableUnauthorizedAccount(address account);\n    error OwnableInvalidOwner(address owner);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\n        __Ownable_init_unchained(initialOwner);\n    }\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n    function owner() public view virtual returns (address) {\n        OwnableStorage storage $ = _getOwnableStorage();\n        return $._owner;\n    }\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n    function _transferOwnership(address newOwner) internal virtual {\n        OwnableStorage storage $ = _getOwnableStorage();\n        address oldOwner = $._owner;\n        $._owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\ninterface IERC20Errors {\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n    error ERC20InvalidSender(address sender);\n    error ERC20InvalidReceiver(address receiver);\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n    error ERC20InvalidApprover(address approver);\n    error ERC20InvalidSpender(address spender);\n}\ninterface IERC721Errors {\n    error ERC721InvalidOwner(address owner);\n    error ERC721NonexistentToken(uint256 tokenId);\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n    error ERC721InvalidSender(address sender);\n    error ERC721InvalidReceiver(address receiver);\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n    error ERC721InvalidApprover(address approver);\n    error ERC721InvalidOperator(address operator);\n}\ninterface IERC1155Errors {\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n    error ERC1155InvalidSender(address sender);\n    error ERC1155InvalidReceiver(address receiver);\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n    error ERC1155InvalidApprover(address approver);\n    error ERC1155InvalidOperator(address operator);\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\ninterface IERC20 {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address to, uint256 value) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\ninterface IERC20Metadata is IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n}\nabstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata, IERC20Errors {\n    struct ERC20Storage {\n        mapping(address account => uint256) _balances;\n        mapping(address account => mapping(address spender => uint256)) _allowances;\n        uint256 _totalSupply;\n        string _name;\n        string _symbol;\n    }\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\n        assembly {\n            $.slot := ERC20StorageLocation\n        }\n    }\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        ERC20Storage storage $ = _getERC20Storage();\n        $._name = name_;\n        $._symbol = symbol_;\n    }\n    function name() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._name;\n    }\n    function symbol() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._symbol;\n    }\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n    function totalSupply() public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._totalSupply;\n    }\n    function balanceOf(address account) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._balances[account];\n    }\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._allowances[owner][spender];\n    }\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n    function _update(address from, address to, uint256 value) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (from == address(0)) {\n            $._totalSupply += value;\n        } else {\n            uint256 fromBalance = $._balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                $._balances[from] = fromBalance - value;\n            }\n        }\n        if (to == address(0)) {\n            unchecked {\n                $._totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                $._balances[to] += value;\n            }\n        }\n        emit Transfer(from, to, value);\n    }\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        $._allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\nstruct VESTingSchedule {\n    uint256 vestId;\n    uint256 amtETH;\n    uint32 createdChunk;\n    uint32 endRefundsChunk;\n    uint256 amountTotalVEST;\n    uint256 releasedVEST;\n    uint256 refundedVEST;\n    uint256 refundedETH;\n    bool cancelled;\n    bool vestToChadEarly;\n    bool isManual;\n}\nstruct VESTingDetail {\n    uint256 index;\n    VESTingSchedule schedule;\n}\ninterface Ivesting {\n    function blocksPerChunk() external view returns (uint32);\n    function getVestedUserDetail(address user, uint256 index) external view returns (VESTingSchedule memory);\n    function getHoldersVESTingCount(address user) external view returns (uint256);\n    function simStakeToEth(address beneficiary) external view returns (\n        uint256 releasableMyRewardsEth,\n        uint256 myTotalEverRewardsEth,\n        uint256 currentBlock\n    );\n    function vestDurationChunksManual() external view returns (uint32);\n    function vestDurationChunks() external view returns (uint32);\n    function allBeneficiariesCount() external view returns (uint256);\n    function allBeneficiaries(uint256) external view returns (address);\n}\ninterface IERC20VEST {\n    function mintVESTByVESTContract(address to, uint256 amount) external;\n    function simCheckList(address beneficiary) external view returns(uint256 vestMinted);\n}\ninterface IERC20STAKE {\n    function mintSTAKEByVESTContract(address to, uint256 amount) external;\n}\ninterface IERC20SETH {\n    function balanceOf(address account) external view returns (uint256);\n    function mintSETHByVESTContract(address to, uint256 amount) external;\n}\ninterface IERC20SCHAD {\n    function balanceOf(address account) external view returns (uint256);\n    function mintSCHADByVESTContract(address to, uint256 amount) external;\n}\ninterface IUniswapV2Pair {\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n}\ninterface IUniswapV2Router {\n    function WETH() external pure returns (address);\n}\ninterface IUniswapV2Factory {\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n}\ncontract BasedHelperContract is Initializable, OwnableUpgradeable   {\n    IUniswapV2Pair public uniswapV2Pair;\n    uint256 public v1;\n    uint256 public v2;\n    uint256 public v3;\n    uint256 public v4; \n    uint256 public lastUpdatedIndex;   \n    modifier onlyOwnerPlus() {\n        require(\n            msg.sender == address(this) ||\n\t\tmsg.sender == address(owner()) ||\n\t\tmsg.sender == address(vestingContract),\n            \"Not authorized\"\n        );\n        _;\n    }\n    function checkOnlyVestingContract() internal view{\n\trequire(msg.sender == address(owner()) || msg.sender == address(vestingContract) || msg.sender == address(this),\"Modifier fail.\");\n    }\n    modifier onlyVestingContract {\n        checkOnlyVestingContract();\n        _;\n    }\n    IERC20      private chadToken;\n    IERC20VEST  private vestToken;\n    IERC20STAKE private stakeToken;\n    IERC20SCHAD private schadToken;\n    IERC20SETH  private sethToken;\n    Ivesting public vestingContract;\n    uint256 constant SE  = 15;\n    uint256 constant SC  = 32;\n    event UpdatedPricing(uint256 v1,\n\t\t\t uint256 v2,\n\t\t\t uint256 v3,\n\t\t\t uint256 v4\n\t\t\t);\n    address WETH_ADDRESS;\n    bool initialized;\n    address factory;\n    uint256 buyDiscountFrac1k;\n    uint256 hardLimitsCounter;\n    function initialize(address _currentOwner,\n    \t\t\taddress _factoryAddress,\n\t\t\taddress _vestingContract,\n\t\t\taddress _vestToken,\n\t\t\taddress _chadToken,\n\t\t\taddress _stakeToken,\n\t\t\taddress _uniswapV2Pair,\n\t\t\taddress _WETH_ADDRESS,\n\t\t\tuint256 firstPriceEth\n\t\t       ) public initializer\n    {\n\trequire(!initialized, \"Contract already initialized\");  \n        __Ownable_init(_currentOwner);\n\tvestingContract = Ivesting(_vestingContract);\n        vestToken = IERC20VEST(_vestToken);\n        chadToken = IERC20(_chadToken);\t\n        stakeToken = IERC20STAKE(_stakeToken);\n        buyDiscountFrac1k = 900;\n        factory = _factoryAddress;\n        v1 = v2 = v3 = v4 = firstPriceEth;  \n        lastUpdatedIndex = (block.timestamp / 60 / 60) % 4;\n\tif (_uniswapV2Pair != address(0)){\n\t    uniswapV2Pair = IUniswapV2Pair(_uniswapV2Pair);\n\t}\n\tif (_WETH_ADDRESS != address(0)){\n\t    WETH_ADDRESS = _WETH_ADDRESS;\n\t}\n        initialized = true;  \n    }\n    function reInitialize(uint256 firstPriceEth \n\t\t\t ) external onlyVestingContract\n    {\n\tif (firstPriceEth > 0){\n            v1 = v2 = v3 = v4 = firstPriceEth;  \n            lastUpdatedIndex = (block.timestamp / 60 / 60) % 4;\n\t}\n    }\n    function withdrawETH() external onlyOwnerPlus{\n        payable(owner()).transfer(address(this).balance);\n    }\n    function withdrawERC20(address _token) external onlyOwnerPlus {\n        uint256 balanceChad = IERC20(_token).balanceOf(address(this));\n        require(balanceChad > 0, \"Either no ERC20 tokens to withdraw, or unknown ERC20 token.\");\n        require(IERC20(_token).transfer(msg.sender, balanceChad), \"ERC20 withdraw remaining transfer failed!\"); \n    }\n    function setVestingContract(address _vestingContract) external onlyOwnerPlus{\n        vestingContract = Ivesting(_vestingContract);\n    }\n    function updatePriceHistory() public   {\n        uint256 index = (block.timestamp / 60 / 60) % 4;  \n        if(index == lastUpdatedIndex){\n\t    return;\n\t}\n\t(uint256 reserves_tok0, uint256 reserves_tok1,) = IUniswapV2Pair(uniswapV2Pair).getReserves();\t\n\t(uint256 reservesChad, uint256 reservesEth) = (address(chadToken) < WETH_ADDRESS) ? (reserves_tok0, reserves_tok1) : (reserves_tok1, reserves_tok0);\n        uint256 curPriceEth = reservesEth * (10**18) / reservesChad;\n        if (index == 0) v1 = curPriceEth;\n        else if (index == 1) v2 = curPriceEth;\n        else if (index == 2) v3 = curPriceEth;\n        else if (index == 3) v4 = curPriceEth;\n        lastUpdatedIndex = index;\n\temit UpdatedPricing(v1,\n\t\t\t    v2,\n\t\t\t    v3,\n\t\t\t    v4\n\t\t\t    );\n    }\n    function medianOfFour(uint256 a, uint256 b, uint256 c, uint256 d) private pure returns (uint256) {\n        uint256 low1 = a < b ? a : b;\n        uint256 high1 = a >= b ? a : b;\n        uint256 low2 = c < d ? c : d;\n        uint256 high2 = c >= d ? c : d;\n        uint256 middle1 = low1 > low2 ? low1 : low2;\n        uint256 middle2 = high1 < high2 ? high1 : high2;\n        return (middle1 + middle2) / 2;\n    }\n    function getCurrentMedianPrice() public view returns (uint256) {\n        return medianOfFour(v1, v2, v3, v4);\n    }\n    function getBuyPrice() public view returns (uint256) {\n        uint256 medianPrice = getCurrentMedianPrice();\n\tmedianPrice = medianPrice * buyDiscountFrac1k / 1000;  \n        return medianPrice;\n    }\n    function setUniswapV2Pair(address _uniswapV2Pair) external onlyOwnerPlus{\n        uniswapV2Pair = IUniswapV2Pair(_uniswapV2Pair);\n    }\n    function getPricingVars() external view returns (\n\tuint256 s_v1, \n\tuint256 s_v2, \n\tuint256 s_v3, \n\tuint256 s_v4, \n\tuint256 s_lastUpdatedIndex,\n\taddress s_uniswapV2Pair,\n\tuint256 s_buyDiscountFrac1k\n    ) {\n\treturn (\n            v1, \n            v2, \n            v3, \n            v4, \n            lastUpdatedIndex,\n            address(uniswapV2Pair),\n            buyDiscountFrac1k\n\t);\n    }\n    function setbuyDiscountFrac1k(\n\tuint256 _buyDiscountFrac1k\n    ) external onlyVestingContract {\n\tbuyDiscountFrac1k = _buyDiscountFrac1k;\n    }\n    function setPricingVars(\n        uint256 _v1,\n        uint256 _v2,\n        uint256 _v3,\n        uint256 _v4,\n        uint256 _lastUpdatedIndex,\n\taddress _uniswapV2Pair,\n\tuint256 _buyDiscountFrac1k\n    ) external onlyOwnerPlus {\n        v1 = _v1;\n        v2 = _v2;\n        v3 = _v3;\n        v4 = _v4;\n        lastUpdatedIndex = _lastUpdatedIndex;\n        uniswapV2Pair = IUniswapV2Pair(_uniswapV2Pair);\n\tbuyDiscountFrac1k = _buyDiscountFrac1k;\n    }\n    function _getAfterCapLowering(uint256 reservesEth, uint256 reservesChad, uint256 tryChad, uint256 _CHAD_TOTAL_SUPPLY_WEI) internal pure returns (uint256) {\n        reservesEth *= 10**18;\n        uint256 amountMiddleEth = tryChad * reservesEth * 997 / (reservesChad * 1000 + tryChad * 997);\n        if (reservesEth <= amountMiddleEth / 10**18) {\n            return 0;\n        }\n        if (reservesEth == tryChad) {\n            return 0;\n        }\n        return ((reservesEth - amountMiddleEth) / (reservesChad + tryChad) * _CHAD_TOTAL_SUPPLY_WEI) / 10**18;\n    }\n    function doGetChadReleasableByReserves(uint256 additionalTimeReleasableVEST, uint256 useThresholdCapEth, uint256 _CHAD_TOTAL_SUPPLY_WEI) public view returns (uint256 reservesReleasableVEST){\n\t(uint256 reserves_tok0, uint256 reserves_tok1,) = IUniswapV2Pair(uniswapV2Pair).getReserves();\n\t(uint256 reservesChad, uint256 reservesEth) = (address(chadToken) < WETH_ADDRESS) ? (reserves_tok0, reserves_tok1) : (reserves_tok1, reserves_tok0);\t    \n\treservesReleasableVEST = getChadReleasableByReserves(additionalTimeReleasableVEST, useThresholdCapEth, reservesEth, reservesChad, _CHAD_TOTAL_SUPPLY_WEI);\n\treturn reservesReleasableVEST;\n    }\n    function getChadReleasableByReserves(uint256 tryChad, uint256 targetMinCapEth, uint256 reservesEth, uint256 reservesChad, uint256 _CHAD_TOTAL_SUPPLY_WEI\n\t\t\t\t\t) public pure returns (uint256 chadReleasable) {\n        uint256 curCapEth = _getAfterCapLowering(reservesEth, reservesChad, 1, _CHAD_TOTAL_SUPPLY_WEI);\n        if (curCapEth <= targetMinCapEth) {\n            return 0;\n        }\n        uint256 afterCapEth = _getAfterCapLowering(reservesEth, reservesChad, tryChad, _CHAD_TOTAL_SUPPLY_WEI);\n        if (afterCapEth >= targetMinCapEth) {\n            return tryChad;\n        }\n        uint256 closeEnough = (targetMinCapEth * 101) / 100;\n        uint256 left = 0;\n        uint256 right = tryChad;\n        while (left < right) {\n            tryChad = (left + right) / 2;\n            if (tryChad == 0) {\n                break;\n            }\n            uint256 afterCapEth1 = _getAfterCapLowering(reservesEth, reservesChad, tryChad, _CHAD_TOTAL_SUPPLY_WEI);\n            if (targetMinCapEth <= afterCapEth1 && afterCapEth1 <= closeEnough) {\n                return tryChad;\n            }\n            if (afterCapEth1 < targetMinCapEth) {\n                right = tryChad - 1;\n            } else if (afterCapEth1 > targetMinCapEth) {\n                left = tryChad + 1;\n            }\n        }\n        return tryChad;\n    }    \n    function simVestToChad(\n\taddress beneficiary, \n\tuint256 requestedReleasedVest, \n\tbool allowEarlyCommit, \n\tbool useOnlyVestNum, \n\tuint256 onlyVestNum\n    ) public view returns (\n\tuint256 releasedSoFarNow,\n\tuint256 additionalTimeReleasableVEST,\n\tuint256 reservesReleasableVEST,\n\tuint256 reservesEth,\n\tuint256 reservesChad,\n\tuint256 currentBlock\n    ) {\n\tbytes memory data = abi.encodeWithSignature(\n            \"doVestToChad(address,uint256,bool,bool,uint256,bool)\",\n            beneficiary, \n            requestedReleasedVest, \n            allowEarlyCommit, \n            useOnlyVestNum, \n            onlyVestNum, \n            true\n\t);\n\t(bool success, bytes memory returnData) = address(vestingContract).staticcall(data);\n\trequire(success, \"STATIC_CALL_FAILED\");\n\t(releasedSoFarNow, additionalTimeReleasableVEST, reservesReleasableVEST, reservesEth, reservesChad) = abi.decode(returnData, (uint256, uint256, uint256, uint256, uint256));\n\treturn (releasedSoFarNow, additionalTimeReleasableVEST, reservesReleasableVEST, reservesEth, reservesChad, block.number);\n    }    \n    function simVestToEth(\n\taddress payable beneficiary, \n\tuint256 maxVest\n    ) public view returns (\n\tuint256 totalRefundableNowVest,\n\tuint256 totalRefundableNowEth,\n\tuint256 currentBlock\n    ) {\n\tbytes memory data = abi.encodeWithSignature(\n            \"doVestToEth(address,uint256,bool)\",\n            beneficiary, \n            maxVest, \n            true\n\t);\n\t(bool success, bytes memory returnData) = address(vestingContract).staticcall(data);\n\trequire(success, \"STATIC_CALL_FAILED\");\n\t(totalRefundableNowVest, totalRefundableNowEth) = abi.decode(returnData, (uint256, uint256));\n\treturn (totalRefundableNowVest, totalRefundableNowEth, block.number);\n    }\n    function simStakeToEth(\n\taddress beneficiary\n    ) public view returns (\n\tuint256 releasableMyRewardsEth,\n\tuint256 myTotalEverRewardsEth,\n\tuint256 currentBlock\n    ) {\n\tstring memory signature = \"doStakeToEth(address,bool)\";\n\tbytes memory data = abi.encodeWithSignature(\n            signature,\n            beneficiary, \n            true\n\t);\n\t(bool success, bytes memory returnData) = address(vestingContract).staticcall(data);\n\trequire(success, \"STATIC_CALL_FAILED\");\n\t(releasableMyRewardsEth, myTotalEverRewardsEth) = abi.decode(returnData, (uint256, uint256));\n\treturn (releasableMyRewardsEth, myTotalEverRewardsEth, block.number);\n    }\n    function getAllVestingSchedulesForUser(address beneficiary) public view returns (\n        VESTingDetail[] memory vestingSchedules\n    ) {\n\tuint256 vestingCount = vestingContract.getHoldersVESTingCount(beneficiary);\n        VESTingDetail[] memory details = new VESTingDetail[](vestingCount);\n        for (uint256 i = 0; i < vestingCount; i++) {\n\t    VESTingSchedule memory vestingSchedule = vestingContract.getVestedUserDetail(beneficiary, i);\t    \n            details[i] = VESTingDetail({\n                index: i,\n\t\tschedule: vestingSchedule\n            });\n        }\n        return details;\n    }\n    function getHardLimitsAll() public view returns (\n\tuint256 all_totalEverVEST,\n        uint256 all_totalEverEth,\n        uint256 all_releasedEverVEST,\n        uint256 all_refundedEverVEST,    \n        uint256 all_refundedEverETH,    \n        uint256 all_totalRefundableNowVest,\n        uint256 all_totalRefundableNowEth,\n        uint256 all_myTotalEverRewardsEth,    \n        uint256 all_releasableMyRewardsEth,\n\tuint256 all_additionalTimeReleasableVEST,\n\tuint256 all_refundableEverVest,\n\tuint256 all_earlyVEST,\n\tuint256 all_lockedInEverVEST,\n        uint256 all_currentBlock\n    ) {\n        for (uint256 i = 0; i < vestingContract.allBeneficiariesCount(); i++) {\t    \n\t    address beneficiary = vestingContract.allBeneficiaries(i);\n\t    (uint256 totalEverVEST,\n\t     uint256 totalEverEth,\n\t     uint256 releasedEverVEST,\n\t     uint256 refundedEverVEST,    \n\t     uint256 refundedEverETH,    \n\t     uint256 totalRefundableNowVest,\n\t     uint256 totalRefundableNowEth,\n\t     uint256 myTotalEverRewardsEth,    \n\t     uint256 releasableMyRewardsEth,\n\t     uint256 additionalTimeReleasableVEST,\n\t     uint256 refundableEverVest,\n\t     uint256 earlyVEST,\n\t     uint256 lockedInEverVEST,\n\t     uint256 currentBlock\n\t    ) = getHardLimits(beneficiary);\n\t    all_totalEverVEST += totalEverVEST;\n\t    all_totalEverEth  += totalEverEth;\n\t    all_releasedEverVEST += releasedEverVEST;\n\t    all_refundedEverVEST += refundedEverVEST;\n\t    all_refundedEverETH  += refundedEverETH;    \n\t    all_totalRefundableNowVest += totalRefundableNowVest;\n\t    all_totalRefundableNowEth += totalRefundableNowEth;\n\t    all_myTotalEverRewardsEth += myTotalEverRewardsEth;\n\t    all_releasableMyRewardsEth += releasableMyRewardsEth;\n\t    all_additionalTimeReleasableVEST += additionalTimeReleasableVEST;\n\t    all_refundableEverVest += refundableEverVest;\n\t    all_earlyVEST += earlyVEST;\n\t    all_lockedInEverVEST += lockedInEverVEST;\n\t    all_currentBlock += currentBlock;\n\t}\n\treturn (all_totalEverVEST,\n\t\tall_totalEverEth,\n\t\tall_releasedEverVEST,\n\t\tall_refundedEverVEST,    \n\t\tall_refundedEverETH,    \n\t\tall_totalRefundableNowVest,\n\t\tall_totalRefundableNowEth,\n\t\tall_myTotalEverRewardsEth,    \n\t\tall_releasableMyRewardsEth,\n\t\tall_additionalTimeReleasableVEST,\n\t\tall_refundableEverVest,\n\t\tall_earlyVEST,\n\t\tall_lockedInEverVEST,\n\t\tall_currentBlock\n\t       );\n    }\n    function getHardLimits(address beneficiary) public view returns (\n        uint256 totalEverVEST,\n        uint256 totalEverEth,\n        uint256 releasedEverVEST,\n        uint256 refundedEverVEST,    \n        uint256 refundedEverETH,    \n        uint256 totalRefundableNowVest,\n        uint256 totalRefundableNowEth,\n        uint256 myTotalEverRewardsEth,    \n        uint256 releasableMyRewardsEth,\n\tuint256 additionalTimeReleasableVEST,\n\tuint256 refundableEverVest,\n\tuint256 earlyVEST,\n\tuint256 lockedInEverVEST,\n        uint256 currentBlock\n    )\n    {\n\tuint32 vestDurationChunksManual = vestingContract.vestDurationChunksManual();\n\tuint32 vestDurationChunks       = vestingContract.vestDurationChunks();\n        currentBlock = block.number;\n        uint32 currentChunk = uint32(block.number / vestingContract.blocksPerChunk());\n        if (beneficiary != address(0)) {\n\t    uint256 vestingCount = vestingContract.getHoldersVESTingCount(beneficiary);\n            for (uint256 i = 0; i < vestingCount; i++) {\n\t\tVESTingSchedule memory vestingSchedule = vestingContract.getVestedUserDetail(beneficiary, i);\n                if (vestingSchedule.cancelled) {\n                    continue;\n                }\n\t\tuint256 useVestDurationChunks;\n\t\tif (vestingSchedule.isManual){\n\t\t    useVestDurationChunks = vestDurationChunksManual;\n\t\t} else {\n\t\t    useVestDurationChunks = vestDurationChunks;\n\t\t}\n                totalEverEth += vestingSchedule.amtETH;\n                uint256 refundableThisVest;\n                if (currentChunk < vestingSchedule.endRefundsChunk) {\n                    if (vestingSchedule.amountTotalVEST >= vestingSchedule.refundedVEST + vestingSchedule.releasedVEST) {\n\t\t\trefundableThisVest = vestingSchedule.amountTotalVEST - vestingSchedule.refundedVEST - vestingSchedule.releasedVEST;\n\t\t    } else {\n\t\t\trefundableThisVest = 0;\n\t\t    }\n                }\n\t\tuint256 thisRemVest = vestingSchedule.amountTotalVEST - vestingSchedule.refundedVEST;  \n\t\tif (thisRemVest > vestingSchedule.releasedVEST){ \n\t\t    refundableEverVest += thisRemVest - vestingSchedule.releasedVEST;\n\t\t}\n\t\tuint256 releasableBasedOnTime;\n\t\tif (currentChunk < vestingSchedule.endRefundsChunk) {\n\t\t    releasableBasedOnTime = 0;\n\t\t} else if (currentChunk >= vestingSchedule.endRefundsChunk + useVestDurationChunks) {\n                    releasableBasedOnTime = thisRemVest;\n\t\t} else {\n                    releasableBasedOnTime = thisRemVest * (currentChunk - vestingSchedule.endRefundsChunk) / useVestDurationChunks;\n\t\t}\n\t\tif (releasableBasedOnTime > vestingSchedule.releasedVEST) {\n\t\t    additionalTimeReleasableVEST += releasableBasedOnTime - vestingSchedule.releasedVEST;  \n\t\t}\n\t\tif (currentChunk < vestingSchedule.endRefundsChunk) {\n\t\t    lockedInEverVEST += thisRemVest;\n\t\t}\n                releasedEverVEST += vestingSchedule.releasedVEST;\n                totalEverVEST += vestingSchedule.amountTotalVEST;\n                refundedEverVEST += vestingSchedule.refundedVEST;\n                refundedEverETH += vestingSchedule.refundedETH;\n                uint256 originalBuyPriceEthPerVest = (vestingSchedule.amtETH * 1e18) / vestingSchedule.amountTotalVEST;\n                uint256 refundableThisEth = (refundableThisVest * originalBuyPriceEthPerVest) / 1e18;\n                totalRefundableNowVest += refundableThisVest;\n                totalRefundableNowEth += refundableThisEth;       \n            }         \n\t    (releasableMyRewardsEth, myTotalEverRewardsEth, currentBlock) = simStakeToEth(beneficiary);\t \n\t    earlyVEST = vestToken.simCheckList(beneficiary);  \n       } \n        return (totalEverVEST,\n                totalEverEth,\n                releasedEverVEST,\n                refundedEverVEST,    \n                refundedEverETH,    \n                totalRefundableNowVest,\n                totalRefundableNowEth,\n                releasableMyRewardsEth,\n                myTotalEverRewardsEth,\n\t\tadditionalTimeReleasableVEST,\n\t\trefundableEverVest,\n\t\tearlyVEST,\n\t\tlockedInEverVEST,\n                currentBlock\n               );\n    }\n    function getHardLimits2(address beneficiary, bool doSimStakeToEth, bool doSimCheckList) public returns (\n        uint256 totalEverVEST,\n        uint256 totalEverEth,\n        uint256 releasedEverVEST,\n        uint256 refundedEverVEST,    \n        uint256 refundedEverETH,    \n        uint256 totalRefundableNowVest,\n        uint256 totalRefundableNowEth,\n        uint256 myTotalEverRewardsEth,    \n        uint256 releasableMyRewardsEth,\n\tuint256 additionalTimeReleasableVEST,\n\tuint256 refundableEverVest,\n\tuint256 earlyVEST,\n\tuint256 lockedInEverVEST,\n        uint256 currentBlock\n    )\n    {\n\thardLimitsCounter += 1;\n\tuint32 vestDurationChunksManual = vestingContract.vestDurationChunksManual();\n\tuint32 vestDurationChunks       = vestingContract.vestDurationChunks();\n        currentBlock = block.number;\n        uint32 currentChunk = uint32(block.number / vestingContract.blocksPerChunk());\n        if (beneficiary != address(0)) {\n\t    uint256 vestingCount = vestingContract.getHoldersVESTingCount(beneficiary);\n            for (uint256 i = 0; i < vestingCount; i++) {\n\t\tVESTingSchedule memory vestingSchedule = vestingContract.getVestedUserDetail(beneficiary, i);\n                if (vestingSchedule.cancelled) {\n                    continue;\n                }\n\t\tuint256 useVestDurationChunks;\n\t\tif (vestingSchedule.isManual){\n\t\t    useVestDurationChunks = vestDurationChunksManual;\n\t\t} else {\n\t\t    useVestDurationChunks = vestDurationChunks;\n\t\t}\n                totalEverEth += vestingSchedule.amtETH;\n                uint256 refundableThisVest;\n                if (currentChunk < vestingSchedule.endRefundsChunk) {\n                    if (vestingSchedule.amountTotalVEST >= vestingSchedule.refundedVEST + vestingSchedule.releasedVEST) {\n\t\t\trefundableThisVest = vestingSchedule.amountTotalVEST - vestingSchedule.refundedVEST - vestingSchedule.releasedVEST;\n\t\t    } else {\n\t\t\trefundableThisVest = 0;\n\t\t    }\n                }\n\t\tuint256 thisRemVest = vestingSchedule.amountTotalVEST - vestingSchedule.refundedVEST;  \n\t\tif (thisRemVest > vestingSchedule.releasedVEST){ \n\t\t    refundableEverVest += thisRemVest - vestingSchedule.releasedVEST;\n\t\t}\n\t\tuint256 releasableBasedOnTime;\n\t\tif (currentChunk < vestingSchedule.endRefundsChunk) {\n\t\t    releasableBasedOnTime = 0;\n\t\t} else if (currentChunk >= vestingSchedule.endRefundsChunk + useVestDurationChunks) {\n                    releasableBasedOnTime = thisRemVest;\n\t\t} else {\n                    releasableBasedOnTime = thisRemVest * (currentChunk - vestingSchedule.endRefundsChunk) / useVestDurationChunks;\n\t\t}\n\t\tif (releasableBasedOnTime > vestingSchedule.releasedVEST) {\n\t\t    additionalTimeReleasableVEST += releasableBasedOnTime - vestingSchedule.releasedVEST;  \n\t\t}\n\t\tif (currentChunk < vestingSchedule.endRefundsChunk) {\n\t\t    lockedInEverVEST += thisRemVest;\n\t\t}\n                releasedEverVEST += vestingSchedule.releasedVEST;\n                totalEverVEST += vestingSchedule.amountTotalVEST;\n                refundedEverVEST += vestingSchedule.refundedVEST;\n                refundedEverETH += vestingSchedule.refundedETH;\n                uint256 originalBuyPriceEthPerVest = (vestingSchedule.amtETH * 1e18) / vestingSchedule.amountTotalVEST;\n                uint256 refundableThisEth = (refundableThisVest * originalBuyPriceEthPerVest) / 1e18;\n                totalRefundableNowVest += refundableThisVest;\n                totalRefundableNowEth += refundableThisEth;       \n            }         \n\t    if (doSimStakeToEth){\n\t\t(releasableMyRewardsEth, myTotalEverRewardsEth, currentBlock) = simStakeToEth(beneficiary);\t \n\t    }\n\t    if (doSimCheckList){\n\t\tearlyVEST = vestToken.simCheckList(beneficiary);  \n\t    }\n       } \n        return (totalEverVEST,\n                totalEverEth,\n                releasedEverVEST,\n                refundedEverVEST,    \n                refundedEverETH,    \n                totalRefundableNowVest,\n                totalRefundableNowEth,\n                releasableMyRewardsEth,\n                myTotalEverRewardsEth,\n\t\tadditionalTimeReleasableVEST,\n\t\trefundableEverVest,\n\t\tearlyVEST,\n\t\tlockedInEverVEST,\n                currentBlock\n               );\n    }\n}\n"}}, "settings": {"metadata": {"bytecodeHash": "none"}, "optimizer": {"enabled": true}, "viaIR": false, "outputSelection": {"*": {"*": ["evm.legacyAssembly"]}}, "libraries": {}}}
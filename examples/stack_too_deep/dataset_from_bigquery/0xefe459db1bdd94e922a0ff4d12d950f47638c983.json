{"language": "Solidity", "sources": {"contracts/RiceFields.sol": {"content": "// contracts/RiceFields.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/IRewardFarmers.sol\";\nimport \"./libraries/ERC20Helpers.sol\";\nimport \"./interfaces/IFARM.sol\";\n\n\n\n/**\n *  \n *   .d8888b.  d8b                        888           .d8888b.                  d8b                                       \n *  d88P  Y88b Y8P                        888          d88P  Y88b                 Y8P                                       \n *  Y88b.                                 888          888    888                                                           \n *   \"Y888b.   888 88888b.d88b.  88888b.  888  .d88b.  888        888d888 8888b.  888 88888b.       .d88b.  888d888 .d88b.  \n *      \"Y88b. 888 888 \"888 \"88b 888 \"88b 888 d8P  Y8b 888  88888 888P\"      \"88b 888 888 \"88b     d88\"\"88b 888P\"  d88P\"88b \n *        \"888 888 888  888  888 888  888 888 88888888 888    888 888    .d888888 888 888  888     888  888 888    888  888 \n *  Y88b  d88P 888 888  888  888 888 d88P 888 Y8b.     Y88b  d88P 888    888  888 888 888  888 d8b Y88..88P 888    Y88b 888 \n *   \"Y8888P\"  888 888  888  888 88888P\"  888  \"Y8888   \"Y8888P88 888    \"Y888888 888 888  888 Y8P  \"Y88P\"  888     \"Y88888 \n *                               888                                                                                    888 \n *                               888                                                                               Y8b d88P \n *                               888                                                                                \"Y88P\"  \n */\n\n\n\n/**\n * @title RiceFields contract\n * @dev\n */\ncontract RiceFields is ReentrancyGuard, Ownable {\n  uint256 public PRECISION = 10**18;\n\n  IRewardFarmers rewardFarmers;\n\n  struct TokenInfo {\n    address contractAddress;\n    uint256 decimals;\n    string symbol;\n    string name;\n  }\n\n  struct DistributionInfo {\n    Distribution distribution;\n    uint256 uncommonRewardId;\n    uint256 currentTimestamp;\n    bool hasUncommonReward;\n    uint256 userAllocated;\n    uint256 tokenOutPrice;\n    uint256 tokenInPrice;\n    uint256 userDeposits;\n    bool userHasClaimed;\n    TokenInfo tokenOUT;\n    TokenInfo tokenIN;\n    uint256 rewardId;\n  }\n\n  mapping(uint256 => mapping(address => Deposit)) public deposits;\n  struct Distribution {\n    uint256 totalTokensPerDeposit;\n    uint256 uncommonRewardId;\n    uint256 percentReturned; // divided by 10_000\n    uint256 tokensPerSecond;\n    bool hasUncommonReward;\n    uint256 totalDeposited;\n    bool rewardDistributed;\n    uint256 lastDepositAt;\n    bool ownerWithdrawn;\n    uint256 platformFee;\n    uint256 startTime;\n    uint256 amountOUT;\n    uint256 duration;\n    uint256 endTime;\n    string ipfsHash;\n    address creator;\n    uint256 id;\n\n    string description;\n    string name;\n\n    uint256 nextActiveId;\n    uint256 prevActiveId;\n\n    IERC20Metadata tokenIN;\n    IERC20Metadata tokenOUT;\n  }\n\n  uint256 public newestActiveDistributionId;\n\n  struct Deposit {\n    uint256 previouslyAllocated;\n    uint256 amount;\n    bool claimed;\n  }\n\n  Distribution[] public distributions;\n\n  mapping(address => uint256[]) public userDistributions; // To track distributions a user has deposited into or created\n\n  event DistributionCreated(\n    uint256 id, address creator, string name, string description,\n    uint256 duration, string ipfsHash, uint256 amountOUT,\n    uint256 percentReturned, address tokenOUT, address tokenIN\n  );\n  event Deposited(uint256 distributionId, address indexed user, uint256 amount);\n  event Claim(uint256 distributionId, address indexed user, uint256 amount, uint256 ethAmount);\n\n  uint256 public platformFee = 100; // divided by 10_000\n\n  /**\n  * @dev Constructor to initialize the contract with the RewardFarmers contract.\n  * @param _farm Address of the RewardFarmers contract.\n  */\n  constructor(IRewardFarmers _farm) {\n    rewardFarmers = _farm;\n  }\n\n  /**\n  * @dev Returns the number of distributions created.\n  * @return The total count of distributions.\n  */\n  function distributionCount() public view returns (uint256) {\n    return distributions.length;\n  }\n\n  /**\n  * @dev Sets the farmer fee percentage. Can only be called by the contract owner.\n  * @notice This function allows the contract owner to update the farmer fee percentage.\n  * The fee is a percentage of the total deposited amount, with a maximum limit of 5% to protect users.\n  * @param newFee The new fee percentage to be set, expressed in basis points (hundredths of a percent).\n  * For example, to set a fee of 5%, `newFee` should be 500.\n  */\n  function setPlatformFee(uint256 newFee) external onlyOwner {\n    require(newFee <= 500, 'Platform fee can not be greater than 5%');\n\n    platformFee = newFee;\n  }\n\n  /**\n  * @dev Creates a new distribution with the provided parameters.\n  * @param tokenIN The address of the input token.\n  * @param tokenOUT The address of the output token.\n  * @param duration The duration of the distribution in seconds.\n  * @param amountOUT The amount of output tokens to distribute.\n  * @param name The name of the distribution.\n  * @param description The description of the distribution.\n  * @param ipfsHash The IPFS hash containing distribution details.\n  * @param percentReturned The percentage of input tokens to be returned to the user.\n  */\n  function createDistribution(\n    IERC20Metadata tokenIN,\n    IERC20Metadata tokenOUT,\n    uint256 duration,\n    uint256 amountOUT,\n    string calldata name,\n    string calldata description,\n    string calldata ipfsHash,\n    uint256 percentReturned\n  ) public payable {\n    // Transfer tokensOUT from creator to contract for yield\n    if (address(tokenOUT) != address(0)) {\n      uint256 balanceBefore = tokenOUT.balanceOf(address(this));\n      ERC20Helpers.safeTransferFrom(address(tokenOUT), msg.sender, address(this), amountOUT);\n      require(tokenOUT.balanceOf(address(this)) - balanceBefore == amountOUT, \"Incorrect number of tokens received\");\n      require(msg.value == 0, 'msg.value must be zero for distributions that do not use ETH for tokenOUT');\n    } else require(amountOUT == msg.value, 'amountOUT and msg.value must be exactly the same');\n\n    require(amountOUT / duration > 0, \"Tokens per second must be greater than 0\");\n    require(percentReturned <= 10_000 - platformFee, \"Percent returned must be less than or equal to 100% minus platformFee\");\n\n    distributions.push();\n    //\n    uint256 id = distributions.length;\n    Distribution storage distribution = distributions[id - 1];\n    userDistributions[msg.sender].push(id);\n\n    if (newestActiveDistributionId != 0)\n      distributions[newestActiveDistributionId - 1].prevActiveId = id;\n\n    distribution.nextActiveId = newestActiveDistributionId;\n    newestActiveDistributionId = id;\n\n\n    distribution.tokensPerSecond = PRECISION * amountOUT / duration;\n    distribution.percentReturned = percentReturned;\n    distribution.platformFee = platformFee;\n    distribution.amountOUT = amountOUT;\n    distribution.creator = msg.sender;\n    distribution.ipfsHash = ipfsHash;\n    distribution.duration = duration;\n    distribution.tokenOUT = tokenOUT;\n    distribution.tokenIN = tokenIN;\n    distribution.id = id;\n\n    distribution.name = name;\n    distribution.description = description;\n    emit DistributionCreated(\n      id,\n      distribution.creator,\n      name,\n      description,\n      duration,\n      ipfsHash,\n      amountOUT,\n      percentReturned,\n      address(tokenOUT),\n      address(tokenIN)\n    );\n  }\n\n  /**\n  * @dev Retrieves token information such as contract address, symbol, name, and decimals.\n  * @param token The token contract to retrieve information from.\n  * @return TokenInfo Struct containing the token information.\n  */\n  function tokenInfo(IERC20Metadata token) public view returns (TokenInfo memory) {\n    if (address(token) == address(0))\n      return TokenInfo({\n        contractAddress: address(0),\n        name: 'Ethereum',\n        symbol: 'ETH',\n        decimals: 18\n      });\n\n    return TokenInfo({\n      contractAddress: address(token),\n      decimals: ERC20Helpers.tryDecimals(token),\n      symbol: ERC20Helpers.trySymbol(token),\n      name: ERC20Helpers.tryName(token)\n    });\n  }\n\n  /**\n  * @notice Gets distribution and user-specific information for a given distribution ID.\n  * @param distributionId The ID of the distribution.\n  * @param user The address of the user.\n  * @return DistributionInfo Struct containing information about the distribution and the user's interaction with it.\n  */\n  function getInfo(uint256 distributionId, address user) public view returns (DistributionInfo memory) {\n    require(distributionId > 0 && distributionId <= distributions.length, \"Distribution ID is out of range\");\n\n    Distribution storage distribution = distributions[distributionId - 1];\n    DistributionInfo memory info;\n\n    info.distribution = distribution;\n    info.currentTimestamp = block.timestamp;\n\n    info.tokenOUT = tokenInfo(distribution.tokenOUT);\n    info.tokenIN = tokenInfo(distribution.tokenIN);\n\n    info.tokenOutPrice = ethPerToken(address(distribution.tokenOUT));\n    info.tokenInPrice = ethPerToken(address(distribution.tokenIN));\n    info.uncommonRewardId = distribution.uncommonRewardId;\n    info.hasUncommonReward = distribution.hasUncommonReward;\n\n    if (user != address(0)) {\n      Deposit storage deposited = deposits[distributionId][user];\n      info.userAllocated = allocatedAmount(distributionId, user);\n      info.userHasClaimed = deposited.claimed;\n      info.userDeposits = deposited.amount;\n    }\n\n    return info;\n\t}\n\n  /**\n  * @notice Retrieves distributions created or participated in by a specified user.\n  * @dev Supports pagination and fetches distributions by user creation or deposits. It returns a subset of distributions based on the page\n  *      and pageSize provided.\n  * @param user User's address whose distributions are queried.\n  * @param page Page number for result pagination.\n  * @param pageSize Number of distribution entries per page.\n  * @return results Array of `DistributionInfo` with details on each relevant distribution.\n  */\n  function getUserDistributions(address user, uint256 page, uint256 pageSize) public view returns (DistributionInfo[] memory) {\n    uint256 total = userDistributions[user].length;\n    uint256 startIndex = (page - 1) * pageSize;\n    if (startIndex > total) startIndex = total;\n\n    uint256 endIndex = startIndex + pageSize;\n    if (endIndex > total) endIndex = total;\n\n    uint256 resultCount = endIndex - startIndex;\n    DistributionInfo[] memory results = new DistributionInfo[](resultCount);\n\n    for (uint256 i = 0; i < resultCount; i++)\n      results[i] = getInfo(userDistributions[user][startIndex + i], user);\n\n    return results;\n  }\n\n  /**\n  * @notice Retrieves a list of active distributions that haven't distributed rewards yet.\n  * @dev Paginates active distributions based on page and pageSize parameters. This method dynamically calculates the number of\n  *      active distributions available starting from the requested page and returns only those entries.\n  * @param user Address of the user for context in the getInfo call.\n  * @param page Page number, starting from 1.\n  * @param pageSize Maximum number of entries per page.\n  * @return results Array of `DistributionInfo` with details about each active distribution.\n  */\n  function getActiveDistributions(address user, uint256 page, uint256 pageSize) public view returns (DistributionInfo[] memory) {\n    uint256 currentIndex = newestActiveDistributionId;\n    uint256 skipped = 0;\n\n    // Skip to the page's starting distribution\n    while (currentIndex != 0 && skipped < (page - 1) * pageSize) {\n      currentIndex = distributions[currentIndex - 1].nextActiveId;\n      skipped++;\n    }\n\n    // Determine the size of the results array based on remaining active distributions\n    uint256 remainingDistributions = 0;\n    uint256 countIndex = currentIndex;\n    while (countIndex != 0 && remainingDistributions < pageSize) {\n      remainingDistributions++;\n      countIndex = distributions[countIndex - 1].nextActiveId;\n    }\n\n    // Allocate the array with the correct number of elements\n    DistributionInfo[] memory results = new DistributionInfo[](remainingDistributions);\n\n    // Populate the results array\n    uint256 count = 0;\n    while (currentIndex != 0 && count < remainingDistributions) {\n      results[count] = getInfo(currentIndex, user);\n      currentIndex = distributions[currentIndex - 1].nextActiveId;\n      count++;\n    }\n\n    return results;\n  }\n\n\n  /**\n  * @dev Returns a list of recent distributions with pagination.\n  * @param user The user address to include in the distribution info.\n  * @param page The page number to fetch.\n  * @param pageSize The number of items per page.\n  * @return An array of DistributionInfo structs.\n  */\n  function getRecentDistributions(address user, uint256 page, uint256 pageSize) external view returns (DistributionInfo[] memory) {\n    uint256 totalDistributions = distributions.length;\n\n    // Calculate the starting index\n    uint256 startIndex = ((page - 1) * pageSize);\n    if (startIndex > totalDistributions)\n      startIndex = totalDistributions;\n\n    // Calculate the number of items to return\n    uint256 endIndex = startIndex + pageSize;\n    if (endIndex > totalDistributions)\n      endIndex = totalDistributions;\n\n    uint256 resultCount = endIndex - startIndex;\n    DistributionInfo[] memory recentDistributions = new DistributionInfo[](resultCount);\n\n    // Iterate over the distributions array in reverse order and fill the result array\n    for (uint256 i = 0; i < resultCount; i++)\n      recentDistributions[i] = getInfo(totalDistributions - startIndex - i, user);\n\n    return recentDistributions;\n  }\n\n  /**\n  * @dev Starts the distribution process by setting the start and end times.\n  * @param distribution The distribution to start.\n  */\n  function startDistribution(Distribution storage distribution) private {\n    distribution.startTime = block.timestamp;\n    distribution.endTime = distribution.startTime + distribution.duration;\n  }\n\n  /**\n  * @dev Allows a user to deposit into a distribution, starting the distribution if necessary.\n  * @param distributionId The ID of the distribution to deposit into.\n  * @param amount The amount to deposit.\n  */\n  function deposit(uint256 distributionId, uint256 amount) external payable nonReentrant {\n    Distribution storage distribution = distributions[distributionId - 1];\n    if (distribution.startTime == 0) startDistribution(distribution);\n    require(block.timestamp <= distribution.endTime, \"Distribution period has ended\");\n    require(deposits[distributionId][msg.sender].amount == 0, \"Can only deposit once\");\n\n    if (address(distribution.tokenIN) != address(0)) {\n      require(msg.value == 0, \"Cannot send ETH to token-based distribution\");\n      ERC20Helpers.safeTransferFrom(address(distribution.tokenIN), msg.sender, address(this), amount);\n    } else require(amount == msg.value, \"deposit amount and msg.value must be exactly the same\");\n\n    require(amount > 0, \"Cannot deposit zero tokens\");\n\n    uint256 elapsedTime = block.timestamp - distribution.lastDepositAt;\n\n    if (distribution.lastDepositAt > 0)\n      distribution.totalTokensPerDeposit += elapsedTime * distribution.tokensPerSecond / distribution.totalDeposited;\n\n    deposits[distributionId][msg.sender] = Deposit({\n      previouslyAllocated: distribution.totalTokensPerDeposit,\n      amount: amount,\n      claimed: false\n    });\n\n    distribution.totalDeposited += amount;\n    distribution.lastDepositAt = block.timestamp;\n\n    if (distribution.creator != msg.sender)\n      userDistributions[msg.sender].push(distributionId);\n\n    emit Deposited(distributionId, msg.sender, amount);\n  }\n\n  /**\n  * @dev Distributes the reward for a distribution after the distribution period has ended.\n  * @param distributionId The ID of the distribution whose rewards are to be distributed.\n  */\n  function distributeReward(uint256 distributionId) external nonReentrant {\n    Distribution storage distribution = distributions[distributionId - 1];\n    require(block.timestamp > distribution.endTime, \"Distribution period has not yet ended\");\n    _distributeReward(distribution);\n  }\n\n  /**\n  * @dev Internal function to distribute rewards for a distribution.\n  * @param distribution The distribution whose rewards are to be distributed.\n  */\n  function _distributeReward(Distribution storage distribution) internal {\n    if (distribution.rewardDistributed) return;\n    distribution.rewardDistributed = true;\n\n    // Remove from active list\n    if (distribution.prevActiveId != 0)\n      distributions[distribution.prevActiveId - 1].nextActiveId = distribution.nextActiveId;\n\n    if (distribution.nextActiveId != 0)\n      distributions[distribution.nextActiveId - 1].prevActiveId = distribution.prevActiveId;\n\n    if (newestActiveDistributionId == distribution.id)\n      newestActiveDistributionId = distribution.nextActiveId;\n\n    uint256 rewardAmount = distribution.platformFee * distribution.totalDeposited / 10_000;\n    uint256 uncommonRewardLength = rewardFarmers.uncommonRewardCount();\n\n    if (address(distribution.tokenIN) == address(0))\n      rewardFarmers.addRewards{value: rewardAmount}(distribution.id, address(0), rewardAmount);\n    else {\n      ERC20Helpers.safeApprove(address(distribution.tokenIN), address(rewardFarmers), rewardAmount);\n      rewardFarmers.addRewards(distribution.id, address(distribution.tokenIN), rewardAmount);\n      if (uncommonRewardLength != rewardFarmers.uncommonRewardCount()) {\n        distribution.uncommonRewardId = uncommonRewardLength;\n        distribution.hasUncommonReward = true;\n      }\n    }\n  }\n\n  /**\n  * @dev Allows the creator of a distribution to withdraw the input tokens after the distribution has ended.\n  * @param distributionId The ID of the distribution to withdraw from.\n  */\n  function withdraw(uint256 distributionId) external nonReentrant {\n    Distribution storage distribution = distributions[distributionId - 1];\n    require(msg.sender == distribution.creator, \"Only the creator can withdraw the received tokens\");\n    require(block.timestamp > distribution.endTime, \"Distribution period has not yet ended\");\n    require(!distribution.ownerWithdrawn, \"Creator has already withdrawn\");\n    distribution.ownerWithdrawn = true;\n    _distributeReward(distribution);\n\n    uint256 rewardAmount = distribution.platformFee * distribution.totalDeposited / 10_000;\n    uint256 amountIn = (10_000 - distribution.percentReturned) * distribution.totalDeposited / 10_000;\n    amountIn -= rewardAmount;\n\n    if (address(distribution.tokenIN) == address(0))\n      payable(msg.sender).transfer(amountIn);\n    else ERC20Helpers.safeTransfer(address(distribution.tokenIN), msg.sender, amountIn);\n\n  }\n\n  /**\n  * @dev Allows a user to claim their rewards after the distribution period has ended.\n  * @param distributionId The ID of the distribution from which to claim rewards.\n  */\n  function claim(uint256 distributionId) external nonReentrant {\n    Distribution storage distribution = distributions[distributionId - 1];\n    require(block.timestamp > distribution.endTime, \"Distribution period has not yet ended\");\n\n    _distributeReward(distribution);\n\n    Deposit storage userDeposit = deposits[distributionId][msg.sender];\n    require(!userDeposit.claimed, \"Already claimed\");\n    userDeposit.claimed = true;\n\n    uint256 yieldAmount = allocatedAmount(distributionId, msg.sender);\n    uint256 amountReturned = userDeposit.amount * distribution.percentReturned / 10_000;\n\n    if (address(distribution.tokenOUT) == address(0))\n      payable(msg.sender).transfer(yieldAmount);\n    else ERC20Helpers.safeTransfer(address(distribution.tokenOUT), msg.sender, yieldAmount);\n\n    if (address(distribution.tokenIN) == address(0))\n      payable(msg.sender).transfer(amountReturned);\n    else ERC20Helpers.safeTransfer(address(distribution.tokenIN), msg.sender, amountReturned);\n\n    emit Claim(distributionId, msg.sender, yieldAmount, amountReturned);\n  }\n\n  /**\n  * @dev Calculates the current allocation period for a distribution.\n  * @param distributionId The ID of the distribution.\n  * @return The current allocation period in seconds.\n  */\n  function currentAllocationPeriod(uint256 distributionId) public view returns (uint256) {\n    Distribution storage distribution = distributions[distributionId - 1];\n    if (distribution.endTime < block.timestamp)\n      return distribution.endTime - distribution.lastDepositAt;\n    else return block.timestamp - distribution.lastDepositAt;\n  }\n\n  /**\n  * @dev Calculates the total allocated amount for a user in a distribution.\n  * @param distributionId The ID of the distribution.\n  * @param user The address of the user.\n  * @return The total allocated amount for the user.\n  */\n  function allocatedAmount(uint256 distributionId, address user) public view returns (uint256) {\n    Distribution storage distribution = distributions[distributionId - 1];\n    if (distribution.totalDeposited == 0) return 0;\n    Deposit storage deposited = deposits[distributionId][user];\n    uint256 currentAllocationAmount = currentAllocationPeriod(distributionId) * distribution.tokensPerSecond * deposited.amount / distribution.totalDeposited;\n    uint256 previousAllocationAmount = deposited.amount * (distribution.totalTokensPerDeposit - deposited.previouslyAllocated);\n\n    return (previousAllocationAmount + currentAllocationAmount) / PRECISION;\n  }\n\n  /**\n  * @dev Calculates the current allocation for a user in a distribution.\n  * @param distributionId The ID of the distribution.\n  * @param user The user's address.\n  * @return The current allocation for the user.\n  */\n  function currentAllocation(uint256 distributionId, address user) public view returns (uint256) {\n    Distribution storage distribution = distributions[distributionId - 1];\n    if (distribution.totalDeposited == 0) return 0;\n    Deposit storage deposited = deposits[distributionId][user];\n    return currentAllocationPeriod(distributionId) * distribution.tokensPerSecond * deposited.amount / distribution.totalDeposited;\n  }\n\n  /**\n  * @dev Calculates the previous allocation for a user in a distribution.\n  * @param distributionId The ID of the distribution.\n  * @param user The user's address.\n  * @return The previous allocation for the user.\n  */\n  function previousAllocation(uint256 distributionId, address user) public view returns (uint256) {\n    Distribution storage distribution = distributions[distributionId - 1];\n    if (distribution.totalDeposited == 0) return 0;\n    Deposit storage deposited = deposits[distributionId][user];\n    return deposited.amount * (distribution.totalTokensPerDeposit - deposited.previouslyAllocated);\n  }\n\n  /**\n  * @dev Retrieves the current exchange rate of a token to ETH.\n  * @param token The address of the token.\n  * @return The exchange rate of the token to ETH.\n  */\n  function ethPerToken(address token) public view returns (uint) {\n    return rewardFarmers.ethPerToken(token);\n  }\n}\n"}, "node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"}, "node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.30;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"}, "node_modules/@openzeppelin/contracts/access/Ownable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"}, "contracts/interfaces/IRewardFarmers.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\ninterface IRewardFarmers {\n  // Define method signatures that are used in the RiceFields contract\n\n  // Assuming addRewards is a function called on rewardFarmers\n  function addRewards(uint256 distributionId, address token, uint256 amount) external payable;\n\n  // Assuming uncommonRewardCount is a function called on rewardFarmers\n  function uncommonRewardCount() external view returns (uint256);\n\n  // Assuming ethPerToken is a function called on rewardFarmers\n  function ethPerToken(address token) external view returns (uint256);\n}\n\n"}, "contracts/libraries/ERC20Helpers.sol": {"content": "// SPDX-License-Identifier: GPL-3.0-or-later\nimport \"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\";\n\npragma solidity ^0.8.30;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary ERC20Helpers {\n  function safeApprove(\n    address token,\n    address to,\n    uint256 value\n  ) internal {\n    // bytes4(keccak256(bytes('approve(address,uint256)')));\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n    require(\n      success && (data.length == 0 || abi.decode(data, (bool))),\n      'ERC20Helpers::safeApprove: approve failed'\n    );\n  }\n\n  function safeTransfer(\n    address token,\n    address to,\n    uint256 value\n  ) internal {\n    // bytes4(keccak256(bytes('transfer(address,uint256)')));\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n    require(\n      success && (data.length == 0 || abi.decode(data, (bool))),\n      'ERC20Helpers::safeTransfer: transfer failed'\n    );\n  }\n\n  function safeTransferFrom(\n    address token,\n    address from,\n    address to,\n    uint256 value\n  ) internal {\n    // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n    require(\n      success && (data.length == 0 || abi.decode(data, (bool))),\n      'ERC20Helpers::transferFrom: transferFrom failed'\n    );\n  }\n\n  function safeTransferETH(address to, uint256 value) internal {\n    (bool success, ) = to.call{value: value}(new bytes(0));\n    require(success, 'ERC20Helpers::safeTransferETH: ETH transfer failed');\n  }\n\n  /**\n  * @dev Tries to fetch the decimals of the given token, defaults to 0 if undefined.\n  * @param token The token contract to retrieve decimals from.\n  * @return The number of decimals of the token.\n  */\n  function tryDecimals(IERC20Metadata token) internal view returns (uint8) {\n    try token.decimals{gas: 20000}() returns (uint8 value) {\n      return value;\n    } catch {\n      return 18; // Default value\n    }\n  }\n\n  /**\n  * @dev Tries to fetch the symbol of the given token, defaults to \"UNKNOWN\" if undefined.\n  * @param token The token contract to retrieve the symbol from.\n  * @return The symbol of the token.\n  */\n  function trySymbol(IERC20Metadata token) internal view returns (string memory) {\n    try token.symbol{gas: 20000}() returns (string memory value) {\n      return value;\n    } catch {\n      return \"UNKNOWN\"; // Default value\n    }\n  }\n\n  /**\n  * @dev Tries to fetch the name of the given token, defaults to \"Unknown Token\" if undefined.\n  * @param token The token contract to retrieve the name from.\n  * @return The name of the token.\n  */\n  function tryName(IERC20Metadata token) internal view returns (string memory) {\n    try token.name{gas: 20000}() returns (string memory value) {\n      return value;\n    } catch {\n      return \"Unknown Token\"; // Default value\n    }\n  }\n\n}\n\n\n"}, "contracts/interfaces/IFARM.sol": {"content": "pragma solidity ^0.8.30;\n\ninterface IFARM {\n  function activateRewards(address _uniswapPair, address _weth, address _router) external;\n}\n\n"}, "node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"}, "node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"}, "node_modules/@openzeppelin/contracts/utils/Context.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"}, "node_modules/@openzeppelin/contracts/interfaces/IERC20Metadata.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../token/ERC20/extensions/IERC20Metadata.sol\";\n"}}, "settings": {"remappings": ["@ensdomains/=node_modules/@ensdomains/", "@ganache/=node_modules/@ganache/", "@openzeppelin/=node_modules/@openzeppelin/", "@truffle/=node_modules/@truffle/", "@uniswap/=node_modules/@uniswap/", "hardhat/=node_modules/hardhat/", "truffle/=node_modules/truffle/"], "optimizer": {"enabled": true}, "metadata": {"useLiteralContent": false, "bytecodeHash": "ipfs", "appendCBOR": true}, "outputSelection": {"*": {"*": ["evm.legacyAssembly"]}}, "evmVersion": "paris", "viaIR": false, "libraries": {}}}
{"language": "Solidity", "sources": {"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.30;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"}, "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"}, "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"}, "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"}, "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.30;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"}, "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.30;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"}, "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"}, "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"}, "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.30;\n\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"}, "contracts/Comptroller/Comptroller.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport './ComptrollerStorage.sol';\nimport '../Interfaces/ICTokenExternal.sol';\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\nimport '../SumerErrors.sol';\n\n/**\n * @title Compound's Comptroller Contract\n * @author Compound\n */\ncontract Comptroller is AccessControlUpgradeable, ComptrollerStorage, SumerErrors {\n  /// @notice Emitted when an admin supports a market\n  event MarketListed(address cToken);\n\n  event MarketUnlisted(address cToken);\n\n  /// @notice Emitted when an account enters a market\n  event MarketEntered(address cToken, address account);\n\n  /// @notice Emitted when an account exits a market\n  event MarketExited(address cToken, address account);\n\n  /// @notice Emitted when liquidation incentive is changed by admin\n  event NewLiquidationIncentive(uint16 heteroPercent, uint64 homoPercent, uint64 sutokenPercent);\n\n  event NewDependencies(address compLogic, address redemptionManager);\n\n  event NewPause(address ctoken, bool mintPaused, bool borrowPaused, bool transferPaused, bool seizePaused);\n\n  event NewTimelock(address timelock);\n\n  event NewPriceOracle(address priceOracle);\n\n  /// @notice Emitted when global config is changed\n  event NewGlobalConfig(\n    uint16 closeFactorPercent,\n    uint32 minCloseValue,\n    uint32 minSuBorrowValue,\n    uint32 minWaitBeforeLiquidatable,\n    uint8 largestGroupId\n  );\n\n  /// @notice Emitted when market for a cToken is changed\n  event NewCap(address indexed cToken, uint120 borrowCap, uint120 supplyCap);\n\n  /// @notice Emitted when pause guardian is changed\n  event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\n\n  event UpdateAssetGroup(\n    uint8 indexed groupId,\n    uint16 intraCRatePercent,\n    uint16 intraMintRatePercent,\n    uint16 intraSuRatePercent,\n    uint16 interCRatePercent,\n    uint16 interSuRatePercent,\n    bool isNewGroup\n  );\n\n  event RemoveAssetGroup(uint8 indexed groupId);\n\n  constructor() {\n    _disableInitializers();\n  }\n\n  function initialize(\n    address _admin,\n    address _gov,\n    address _compLogic,\n    address _redemptionManager,\n    address _timelock,\n    address _oracle\n  ) external initializer {\n    _setupRole(DEFAULT_ADMIN_ROLE, _admin);\n\n    governanceToken = _gov;\n    // Set comptroller's oracle to newOracle\n\n    compLogic = ICompLogic(_compLogic);\n    redemptionManager = IRedemptionManager(_redemptionManager);\n    emit NewDependencies(_compLogic, _redemptionManager);\n\n    timelock = _timelock;\n    oracle = IPriceOracle(_oracle);\n    emit NewPriceOracle(address(oracle));\n  }\n\n  /////////////////////////////////////////////////////////\n  // Modifiers\n  /////////////////////////////////////////////////////////\n  /// @notice Checks if the provided address is nonzero, reverts otherwise\n  /// @param address_ Address to check\n  /// @custom:error ZeroAddressNotAllowed is thrown if the provided address is a zero address\n  modifier ensureNonzeroAddress(address address_) {\n    if (address_ == address(0)) {\n      revert ZeroAddressNotAllowed();\n    }\n    _;\n  }\n\n  modifier onlyListedCToken(address cToken) {\n    if (!isListed(cToken)) {\n      revert OnlyListedCToken();\n    }\n    _;\n  }\n\n  modifier onlyAdminOrPauser() {\n    if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender) && !hasRole(PAUSER_ROLE, msg.sender)) {\n      revert OnlyAdminOrPauser();\n    }\n    _;\n  }\n\n  /////////////////////////////////////////////////////////\n  // Market Function\n  /////////////////////////////////////////////////////////\n  /**\n   * @notice Returns the assets an account has entered\n   * @param account The address of the account to pull assets for\n   * @return A dynamic list with the assets the account has entered\n   */\n  function getAssetsIn(address account) external view returns (address[] memory) {\n    address[] memory assetsIn = accountAssets[account];\n\n    return assetsIn;\n  }\n\n  /**\n   * @notice Returns whether the given account is entered in the given asset\n   * @param account The address of the account to check\n   * @param cToken The cToken to check\n   * @return True if the account is in the asset, otherwise false.\n   */\n  function checkMembership(address account, address cToken) internal view returns (bool) {\n    return markets[cToken].accountMembership[account];\n  }\n\n  function isListed(address asset) public view returns (bool) {\n    return markets[asset].isListed;\n  }\n\n  /**\n   * @notice Return all of the markets\n   * @dev The automatic getter may be used to access an individual market.\n   * @return The list of market addresses\n   */\n  function getAllMarkets() public view returns (address[] memory) {\n    return allMarkets;\n  }\n\n  /**\n   * @notice Add assets to be included in account liquidity calculation\n   * @param cTokens The list of addresses of the cToken markets to be enabled\n   */\n  function enterMarkets(address[] memory cTokens) public {\n    uint256 len = cTokens.length;\n\n    for (uint256 i = 0; i < len; ++i) {\n      address cToken = cTokens[i];\n      addToMarketInternal(cToken, msg.sender);\n    }\n  }\n\n  /**\n   * @notice Add the market to the borrower's \"assets in\" for liquidity calculations\n   * @param cToken The market to enter\n   * @param borrower The address of the account to modify\n   */\n  function addToMarketInternal(address cToken, address borrower) internal onlyListedCToken(cToken) {\n    Market storage marketToJoin = markets[cToken];\n\n    if (marketToJoin.accountMembership[borrower]) {\n      // already joined\n      return;\n    }\n\n    if (\n      marketConfig[cToken].mintPaused ||\n      marketConfig[cToken].borrowPaused ||\n      marketConfig[cToken].transferPaused ||\n      marketConfig[cToken].seizePaused\n    ) {\n      revert CantEnterPausedMarket();\n    }\n\n    // survived the gauntlet, add to list\n    // NOTE: we store these somewhat redundantly as a significant optimization\n    //  this avoids having to iterate through the list for the most common use cases\n    //  that is, only when we need to perform liquidity checks\n    //  and not whenever we want to check if an account is in a particular market\n    marketToJoin.accountMembership[borrower] = true;\n    accountAssets[borrower].push(cToken);\n\n    // all tokens are grouped with equal assets.\n    //addToEqualAssetGroupInternal(cToken, borrower, eqAssetGroup, rateMantissa);\n\n    emit MarketEntered(cToken, borrower);\n\n    return;\n  }\n\n  /**\n   * @notice Removes asset from sender's account liquidity calculation\n   * @dev Sender must not have an outstanding borrow balance in the asset,\n   *  or be providing necessary collateral for an outstanding borrow.\n   * @param cTokenAddress The address of the asset to be removed\n   */\n  function exitMarket(address cTokenAddress) external {\n    address cToken = cTokenAddress;\n    /* Get sender tokensHeld and amountOwed underlying from the cToken */\n    (uint256 tokensHeld, uint256 amountOwed, , ) = ICToken(cToken).getAccountSnapshot(msg.sender);\n\n    /* Fail if the sender has a borrow balance */\n    if (amountOwed != 0) {\n      revert CantExitMarketWithNonZeroBorrowBalance();\n    }\n    /* Fail if the sender is not permitted to redeem all of their tokens */\n    redeemAllowedInternal(cTokenAddress, msg.sender, tokensHeld);\n\n    _exitMarketInternal(msg.sender, cTokenAddress);\n  }\n\n  function _exitMarketInternal(address user, address cTokenAddress) internal {\n    Market storage marketToExit = markets[cTokenAddress];\n\n    /* Return true if the sender is not already \u2018in\u2019 the market */\n    if (!marketToExit.accountMembership[user]) {\n      return;\n    }\n\n    /* Set cToken account membership to false */\n    delete marketToExit.accountMembership[user];\n\n    /* Delete cToken from the account\u2019s list of assets */\n    // load into memory for faster iteration\n    address[] memory userAssetList = accountAssets[user];\n    uint256 len = userAssetList.length;\n    uint256 assetIndex = len;\n    for (uint256 i = 0; i < len; ++i) {\n      if (userAssetList[i] == cTokenAddress) {\n        assetIndex = i;\n        break;\n      }\n    }\n\n    // We *must* have found the asset in the list or our redundant data structure is broken\n    assert(assetIndex < len);\n\n    // copy last item in list to location of item to be removed, reduce length by 1\n    address[] storage storedList = accountAssets[user];\n    storedList[assetIndex] = storedList[storedList.length - 1];\n    storedList.pop();\n\n    // remove the same\n    //exitEqualAssetGroupInternal(cTokenAddress, msg.sender);\n\n    emit MarketExited(cTokenAddress, user);\n  }\n\n  function _addMarketInternal(address cToken) internal {\n    for (uint256 i = 0; i < allMarkets.length; ++i) {\n      if (allMarkets[i] == cToken) {\n        revert MarketAlreadyListed();\n      }\n    }\n    allMarkets.push(cToken);\n  }\n\n  /**\n   * @notice Add the market to the markets mapping and set it as listed\n   * @dev Admin function to set isListed and add support for the market\n   * @param cToken The address of the market (token) to list\n   */\n  function _supportMarket(\n    address cToken,\n    uint8 groupId,\n    uint120 borrowCap,\n    uint120 supplyCap\n  ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    if (markets[cToken].isListed) {\n      revert MarketAlreadyListed();\n    }\n    if (groupId <= 0) {\n      revert InvalidGroupId();\n    }\n\n    // ICToken(cToken).isCToken();\n    ICToken(cToken).isCToken(); // Sanity check to make sure its really a address\n\n    // Note that isComped is not in active use anymore\n    // markets[cToken] = Market({isListed: true, isComped: false, assetGroupId: groupId});\n    Market storage market = markets[cToken];\n    market.isListed = true;\n    market.assetGroupId = groupId;\n\n    _addMarketInternal(cToken);\n    _initializeMarket(cToken);\n\n    emit MarketListed(cToken);\n\n    marketConfig[cToken].borrowCap = borrowCap;\n    marketConfig[cToken].supplyCap = supplyCap;\n    emit NewCap(cToken, borrowCap, supplyCap);\n  }\n\n  /**\n   * @notice Add the market to the markets mapping and set it as listed\n   * @dev Admin function to set isListed and add support for the market\n   * @param cToken The address of the market (token) to list\n   */\n  function _unlistMarket(address cToken) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    if (!markets[cToken].isListed) {\n      revert MarketAlreadyUnlisted();\n    }\n\n    if (\n      !(marketConfig[cToken].mintPaused &&\n        marketConfig[cToken].borrowPaused &&\n        marketConfig[cToken].transferPaused &&\n        marketConfig[cToken].seizePaused)\n    ) {\n      revert OnlyPausedMarketCanBeUnlisted();\n    }\n\n    // only allow unlist current market if its total borrow usd value is lte 1\n    uint256 usdValue = (getUnderlyingPriceNormalized(cToken) * ICToken(cToken).totalBorrows()) / 1e36;\n    if (usdValue > 1) {\n      revert MarketNotEmpty();\n    }\n    // if (ICToken(cToken).totalBorrows() != 0) {\n    //   revert TotalBorrowsNotZero();\n    // }\n\n    if (ICToken(cToken).totalSupply() != 0) {\n      revert TotalSupplyNotZero();\n    }\n\n    // Note that isComped is not in active use anymore\n    // markets[cToken] = Market({isListed: true, isComped: false, assetGroupId: groupId});\n    delete markets[cToken];\n\n    uint len = allMarkets.length;\n    uint index = len;\n    for (uint i = 0; i < len; ++i) {\n      if (allMarkets[i] == cToken) {\n        index = i;\n        break;\n      }\n    }\n    assert(index < len);\n    allMarkets[index] = allMarkets[len - 1];\n    allMarkets.pop();\n\n    compLogic.uninitializeMarket(cToken);\n\n    emit MarketUnlisted(cToken);\n\n    // keep marketConfig here so that paused information is not lost\n    // if the market is listed back again, it's still paused\n    marketConfig[cToken].supplyCap = 0;\n    marketConfig[cToken].borrowCap = 0;\n  }\n\n  // Please use this with caution, because changing groupId of assets will affects liquidity/shortfall of accounts\n  // and will make some previously healthy accounts underwater\n  function _changeGroupIdForAsset(\n    address cToken,\n    uint8 newGroupId\n  ) external onlyRole(DEFAULT_ADMIN_ROLE) onlyListedCToken(cToken) {\n    if (newGroupId == 0) {\n      revert InvalidGroupId();\n    }\n    CompactAssetGroup memory g = assetGroup[newGroupId];\n    if (g.groupId != newGroupId) {\n      revert InvalidGroupId();\n    }\n    markets[cToken].assetGroupId = newGroupId;\n  }\n\n  // function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\n  //   require(n < 2 ** 32, errorMessage);\n  //   return uint32(n);\n  // }\n\n  function _initializeMarket(address cToken) internal {\n    if (block.number >= 2 ** 32) {\n      revert InvalidBlockNumber();\n    }\n    uint32 blockNumber = uint32(block.number);\n    compLogic.initializeMarket(cToken, blockNumber);\n  }\n\n  /////////////////////////////////////////////////////////\n  // Setters\n  /////////////////////////////////////////////////////////\n  /**\n   * @notice Return the address of the COMP token\n   * @param _governanceToken The address of COMP(governance token)\n   */\n  function _setGovTokenAddress(\n    address _governanceToken\n  ) external onlyRole(DEFAULT_ADMIN_ROLE) ensureNonzeroAddress(_governanceToken) {\n    governanceToken = _governanceToken;\n  }\n\n  function _setTimelock(address _timelock) external onlyRole(DEFAULT_ADMIN_ROLE) ensureNonzeroAddress(_timelock) {\n    timelock = _timelock;\n    emit NewTimelock(_timelock);\n  }\n\n  /**\n   * @notice Sets a new price oracle for the comptroller\n   * @dev Admin function to set a new price oracle\n   */\n  function _setPriceOracle(address _oracle) external onlyRole(DEFAULT_ADMIN_ROLE) ensureNonzeroAddress(_oracle) {\n    oracle = IPriceOracle(_oracle);\n    emit NewPriceOracle(_oracle);\n  }\n\n  function _setInterMintAllowed(bool allowed) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    interMintAllowed = allowed;\n  }\n\n  function _setGlobalConfig(GlobalConfig calldata globalConfig_) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    // Save current value for use in log\n    uint8 largestGroupId = globalConfig.largestGroupId;\n    globalConfig = globalConfig_;\n    globalConfig.largestGroupId = largestGroupId;\n    emit NewGlobalConfig(\n      globalConfig_.closeFactorPercent,\n      globalConfig_.minCloseValue,\n      globalConfig_.minSuBorrowValue,\n      globalConfig_.minWaitBeforeLiquidatable,\n      largestGroupId\n    );\n  }\n\n  function _setLargestGroupId(uint8 largestGroupId) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    globalConfig.largestGroupId = largestGroupId;\n  }\n  /**\n   * @notice Sets liquidationIncentive\n   * @dev Admin function to set liquidationIncentive\n   * @param liquidationIncentive_ New liquidationIncentive scaled by 1e18 for hetero/homo/sutoken assets\n   */\n  function _setLiquidationIncentive(\n    LiquidationIncentive calldata liquidationIncentive_\n  ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    // Save current value for use in log\n    liquidationIncentive = liquidationIncentive_;\n    // Emit event with old incentive, new incentive\n    emit NewLiquidationIncentive(\n      liquidationIncentive_.heteroPercent,\n      liquidationIncentive_.homoPercent,\n      liquidationIncentive_.sutokenPercent\n    );\n  }\n\n  /**\n   * @notice Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\n   * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\n   * @param cTokens The addresses of the markets (tokens) to change the borrow caps for\n   * @param borrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\n   * @param supplyCaps The new supply cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\n\n   */\n  function _setCaps(\n    address[] calldata cTokens,\n    uint120[] calldata borrowCaps,\n    uint120[] calldata supplyCaps\n  ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    uint256 numMarkets = cTokens.length;\n    if (numMarkets == 0 || numMarkets != borrowCaps.length || numMarkets != supplyCaps.length) {\n      revert InvalidInput();\n    }\n\n    for (uint256 i = 0; i < numMarkets; i++) {\n      marketConfig[cTokens[i]].borrowCap = borrowCaps[i];\n      marketConfig[cTokens[i]].supplyCap = supplyCaps[i];\n      emit NewCap(cTokens[i], borrowCaps[i], supplyCaps[i]);\n    }\n  }\n\n  /////////////////////////////////////////////////////////\n  // Asset Group related\n  /////////////////////////////////////////////////////////\n  function setAssetGroup(\n    uint8 groupId,\n    uint16 intraCRatePercent, // ctoken collateral rate for intra group ctoken liability\n    uint16 intraMintRatePercent, // ctoken collateral rate for intra group sutoken liability\n    uint16 intraSuRatePercent, // sutoken collateral rate for intra group ctoken liability\n    uint16 interCRatePercent, // ctoken collateral rate for inter group ctoken/sutoken liability\n    uint16 interSuRatePercent // sutoken collateral rate for inter group ctoken/sutoken liability\n  ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    bool groupAdded = assetGroup[groupId].groupId == 0;\n\n    assetGroup[groupId] = CompactAssetGroup(\n      groupId,\n      intraCRatePercent,\n      intraMintRatePercent,\n      intraSuRatePercent,\n      interCRatePercent,\n      interSuRatePercent\n    );\n    emit UpdateAssetGroup(\n      groupId,\n      intraCRatePercent,\n      intraMintRatePercent,\n      intraSuRatePercent,\n      interCRatePercent,\n      interSuRatePercent,\n      groupAdded\n    );\n    if (groupId > globalConfig.largestGroupId) {\n      globalConfig.largestGroupId = groupId;\n    }\n  }\n\n  function removeAssetGroup(uint8 groupId) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    delete assetGroup[groupId];\n    emit RemoveAssetGroup(groupId);\n  }\n\n  // function cleanAssetGroup() external onlyRole(DEFAULT_ADMIN_ROLE) {\n  //   for (uint8 i = 0; i < globalConfig.largestGroupId; i++) {\n  //     delete assetGroup[i];\n  //   }\n\n  //   globalConfig.largestGroupId = 0;\n  // }\n\n  /////////////////////////////////////////////////////////\n  // Pause related\n  /////////////////////////////////////////////////////////\n  /**\n   * @notice Admin function to change the Pause Guardian\n   * @param newPauseGuardian The address of the new Pause Guardian\n   */\n  function _setPauseGuardian(\n    address newPauseGuardian\n  ) external onlyRole(DEFAULT_ADMIN_ROLE) ensureNonzeroAddress(newPauseGuardian) {\n    // Save current value for inclusion in log\n    address oldPauseGuardian = pauseGuardian;\n    revokeRole(PAUSER_ROLE, oldPauseGuardian);\n\n    // Store pauseGuardian with value newPauseGuardian\n    pauseGuardian = newPauseGuardian;\n    grantRole(PAUSER_ROLE, newPauseGuardian);\n\n    // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\n    emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\n  }\n\n  // Pause functions\n  function _pause(\n    address cToken,\n    bool mintPaused,\n    bool borrowPaused,\n    bool transferPaused,\n    bool seizePaused\n  ) external onlyAdminOrPauser {\n    marketConfig[cToken].mintPaused = mintPaused;\n    marketConfig[cToken].borrowPaused = borrowPaused;\n    marketConfig[cToken].transferPaused = transferPaused;\n    marketConfig[cToken].seizePaused = seizePaused;\n    emit NewPause(address(cToken), mintPaused, borrowPaused, transferPaused, seizePaused);\n  }\n\n  /////////////////////////////////////////////////////////\n  // Policy Hooks\n  /////////////////////////////////////////////////////////\n  /**\n   * @notice Checks if the account should be allowed to mint tokens in the given market\n   * @param cToken The market to verify the mint against\n   * @param minter The account which would get the minted tokens\n   * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\n   */\n  function mintAllowed(address cToken, address minter, uint256 mintAmount) external onlyListedCToken(cToken) {\n    // Pausing is a very serious situation - we revert to sound the alarms\n    if (marketConfig[cToken].mintPaused) {\n      revert MintPaused();\n    }\n\n    // Shh - currently unused: minter; mintAmount;\n\n    /* Get minter's cToken balance*/\n    (uint256 tokensHeld, uint256 amountOwed, , ) = ICToken(cToken).getAccountSnapshot(minter);\n\n    // only enter market automatically at the first time\n    if ((!markets[cToken].accountMembership[minter]) && (tokensHeld == 0) && (amountOwed == 0)) {\n      // only cTokens may call mintAllowed if minter not in market\n      if (msg.sender != cToken) {\n        revert SenderMustBeCToken();\n      }\n\n      // attempt to add borrower to the market\n      addToMarketInternal(msg.sender, minter);\n\n      // it should be impossible to break the important invariant\n      assert(markets[cToken].accountMembership[minter]);\n    }\n\n    // TODO: temporarily comment out for less gas usage\n    // Keep the flywheel moving\n    // compLogic.updateCompSupplyIndex(cToken);\n    // compLogic.distributeSupplierComp(cToken, minter);\n\n    uint256 exchangeRateMantissa = ICToken(cToken).exchangeRateStored();\n    if (\n      (ICToken(cToken).totalSupply() * exchangeRateMantissa) / expScale + mintAmount > marketConfig[cToken].supplyCap\n    ) {\n      revert SupplyCapReached();\n    }\n  }\n\n  /**\n   * @notice Checks if the account should be allowed to redeem tokens in the given market\n   * @param cToken The market to verify the redeem against\n   * @param redeemer The account which would redeem the tokens\n   * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\n   */\n  function redeemAllowed(address cToken, address redeemer, uint256 redeemTokens) external {\n    redeemAllowedInternal(cToken, redeemer, redeemTokens);\n\n    // TODO: temporarily comment out for less gas usage\n    // Keep the flywheel moving\n    // compLogic.updateCompSupplyIndex(cToken);\n    // compLogic.distributeSupplierComp(cToken, redeemer);\n  }\n\n  function redeemAllowedInternal(\n    address cToken,\n    address redeemer,\n    uint256 redeemTokens\n  ) internal view onlyListedCToken(cToken) {\n    /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\n    if (!markets[cToken].accountMembership[redeemer]) {\n      return;\n    }\n\n    /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\n    (, uint256 shortfall) = getHypotheticalAccountLiquidity(redeemer, cToken, redeemTokens, 0);\n    if (shortfall > 0) {\n      revert InsufficientCollateral();\n    }\n  }\n\n  /**\n   * @notice Validates redeem and reverts on rejection. May emit logs.\n   * @param cToken Asset being redeemed\n   * @param redeemer The address redeeming the tokens\n   * @param redeemAmount The amount of the underlying asset being redeemed\n   * @param redeemTokens The number of tokens being redeemed\n   */\n  function redeemVerify(\n    address cToken,\n    address redeemer,\n    uint256 redeemAmount,\n    uint256 redeemTokens\n  ) external onlyListedCToken(msg.sender) {\n    if (msg.sender != cToken) {\n      revert InvalidCToken();\n    }\n    // Shh - currently unused: cToken; redeemer;\n\n    // Require tokens is zero or amount is also zero\n    if (redeemTokens == 0 && redeemAmount > 0) {\n      revert InvalidRedeem();\n    }\n\n    (uint256 tokensHeld, uint256 amountOwed, , ) = ICToken(cToken).getAccountSnapshot(redeemer);\n\n    if (tokensHeld == 0 && amountOwed == 0) {\n      _exitMarketInternal(redeemer, cToken);\n    }\n  }\n\n  /**\n   * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\n   * @param cToken The market to verify the borrow against\n   * @param borrower The account which would borrow the asset\n   * @param borrowAmount The amount of underlying the account would borrow\n   */\n  function borrowAllowed(address cToken, address borrower, uint256 borrowAmount) external onlyListedCToken(cToken) {\n    // Pausing is a very serious situation - we revert to sound the alarms\n    if (marketConfig[cToken].borrowPaused) {\n      revert BorrowPaused();\n    }\n\n    for (uint256 i = 0; i < accountAssets[borrower].length; ++i) {\n      address asset = accountAssets[borrower][i];\n\n      if (!markets[asset].isListed) {\n        // unlisted market\n        (uint256 tokensHeld, uint256 amountOwed, , ) = ICToken(asset).getAccountSnapshot(borrower);\n\n        if (tokensHeld == 0 && amountOwed == 0) {\n          _exitMarketInternal(borrower, asset);\n        } else {\n          revert MarketNotListed();\n        }\n      } else if (marketConfig[asset].borrowPaused) {\n        revert MarketPaused();\n      }\n    }\n\n    if (!markets[cToken].accountMembership[borrower]) {\n      // only cTokens may call borrowAllowed if borrower not in market\n      if (msg.sender != cToken) {\n        revert OnlyCToken();\n      }\n\n      // attempt to add borrower to the market\n      addToMarketInternal(msg.sender, borrower);\n\n      // it should be impossible to break the important invariant\n      assert(markets[cToken].accountMembership[borrower]);\n    }\n\n    //uint borrowCap = borrowCaps[cToken];\n    if (ICToken(cToken).totalBorrows() + borrowAmount > marketConfig[cToken].borrowCap) {\n      revert BorrowCapReached();\n    }\n\n    // check MinSuBorrowValue for csuToken\n    // if (!ICToken(cToken).isCToken()) {\n    //   uint256 borrowBalance = ICToken(cToken).borrowBalanceStored(msg.sender);\n    //   uint256 priceMantissa = getUnderlyingPriceNormalized(cToken);\n    //   uint256 borrowVal = (priceMantissa * (borrowBalance + borrowAmount)) / expScale/ expScale;\n    //   if (minSuBorrowValue > 0 && borrowVal < minSuBorrowValue) {\n    //     revert BorrowValueMustBeLargerThanThreshold(minSuBorrowValue);\n    //   }\n    // }\n\n    (, uint256 shortfall) = getHypotheticalAccountLiquidity(borrower, cToken, 0, borrowAmount);\n    if (shortfall > 0) {\n      revert InsufficientCollateral();\n    }\n\n    // TODO: temporarily comment out for less gas usage\n    // Keep the flywheel moving\n    // Exp memory borrowIndex = Exp({mantissa: ICToken(cToken).borrowIndex()});\n    // compLogic.updateCompBorrowIndex(cToken, borrowIndex);\n    // compLogic.distributeBorrowerComp(cToken, borrower, borrowIndex);\n  }\n\n  /**\n   * underlying price for specific ctoken (unit of 1e36)\n   */\n  function getUnderlyingPriceNormalized(address cToken) public view returns (uint256) {\n    if (!isListed(cToken)) {\n      revert MarketNotListed();\n    }\n    uint256 priceMantissa = oracle.getUnderlyingPrice(cToken);\n    if (priceMantissa <= 0) {\n      revert PriceError();\n    }\n    uint decimals = ICToken(cToken).decimals();\n    if (decimals < 18) {\n      priceMantissa = priceMantissa * (10 ** (18 - decimals));\n    }\n    return priceMantissa;\n  }\n\n  /**\n   * @notice Checks if the account should be allowed to repay a borrow in the given market\n   * @param cToken The market to verify the repay against\n   * @param payer The account which would repay the asset\n   * @param borrower The account which would borrowed the asset\n   * @param repayAmount The amount of the underlying asset the account would repay\n   */\n  function repayBorrowAllowed(\n    address cToken,\n    address payer,\n    address borrower,\n    uint256 repayAmount\n  ) external onlyListedCToken(cToken) {\n    // Shh - currently unused: repayAmount;\n    // TODO: temporarily comment out for less gas usage\n    // Keep the flywheel moving\n    // Exp memory borrowIndex = Exp({mantissa: ICToken(cToken).borrowIndex()});\n    // compLogic.updateCompBorrowIndex(cToken, borrowIndex);\n    // compLogic.distributeBorrowerComp(cToken, borrower, borrowIndex);\n  }\n\n  /**\n   * @notice Validates repayBorrow and reverts on rejection. May emit logs.\n   * @param cToken Asset being repaid\n   * @param payer The address repaying the borrow\n   * @param borrower The address of the borrower\n   * @param actualRepayAmount The amount of underlying being repaid\n   */\n  function repayBorrowVerify(\n    address cToken,\n    address payer,\n    address borrower,\n    uint actualRepayAmount,\n    uint borrowIndex\n  ) external onlyListedCToken(msg.sender) {\n    // Shh - currently unused\n    if (cToken != msg.sender) {\n      revert InvalidCToken();\n    }\n    payer;\n    borrower;\n    actualRepayAmount;\n    borrowIndex;\n\n    (uint256 tokensHeld, uint256 amountOwed, , ) = ICToken(cToken).getAccountSnapshot(borrower);\n\n    if (tokensHeld == 0 && amountOwed == 0) {\n      _exitMarketInternal(borrower, cToken);\n    }\n  }\n\n  /**\n   * @notice Checks if the seizing of assets should be allowed to occur\n   * @param cTokenCollateral Asset which was used as collateral and will be seized\n   * @param cTokenBorrowed Asset which was borrowed by the borrower\n   * @param liquidator The address repaying the borrow and seizing the collateral\n   * @param borrower The address of the borrower\n   * @param seizeTokens The number of collateral tokens to seize\n   */\n  function seizeAllowed(\n    address cTokenCollateral,\n    address cTokenBorrowed,\n    address liquidator,\n    address borrower,\n    uint256 seizeTokens\n  ) external onlyListedCToken(cTokenCollateral) onlyListedCToken(cTokenBorrowed) {\n    // Pausing is a very serious situation - we revert to sound the alarms\n    if (marketConfig[cTokenCollateral].seizePaused) {\n      revert SeizePaused();\n    }\n\n    // Shh - currently unused: seizeTokens;\n    if (ICToken(cTokenCollateral).comptroller() != ICToken(cTokenBorrowed).comptroller()) {\n      revert ComptrollerMismatch();\n    }\n\n    // TODO: temporarily comment out for less gas usage\n    // Keep the flywheel moving\n    // compLogic.updateCompSupplyIndex(cTokenCollateral);\n    // compLogic.distributeSupplierComp(cTokenCollateral, borrower);\n    // compLogic.distributeSupplierComp(cTokenCollateral, liquidator);\n  }\n\n  /**\n   * @notice Checks if the account should be allowed to transfer tokens in the given market\n   * @param cToken The market to verify the transfer against\n   * @param src The account which sources the tokens\n   * @param dst The account which receives the tokens\n   * @param transferTokens The number of cTokens to transfer\n   */\n  function transferAllowed(address cToken, address src, address dst, uint256 transferTokens) external {\n    // Pausing is a very serious situation - we revert to sound the alarms\n    if (marketConfig[cToken].transferPaused) {\n      revert TransferPaused();\n    }\n\n    // Currently the only consideration is whether or not\n    //  the src is allowed to redeem this many tokens\n    redeemAllowedInternal(cToken, src, transferTokens);\n\n    // TODO: temporarily comment out for less gas usage\n    // Keep the flywheel moving\n    // compLogic.updateCompSupplyIndex(cToken);\n    // compLogic.distributeSupplierComp(cToken, src);\n    // compLogic.distributeSupplierComp(cToken, dst);\n  }\n\n  /**\n   * @notice Checks if the liquidation should be allowed to occur\n   * @param cTokenCollateral Asset which was used as collateral and will be seized\n   * @param liquidator The address repaying the borrow and seizing the collateral\n   * @param borrower The address of the borrower\n   * @param repayAmount The amount of underlying being repaid\n   */\n  function liquidateBorrowAllowed(\n    address cTokenBorrowed,\n    address cTokenCollateral,\n    address liquidator,\n    address borrower,\n    uint256 repayAmount\n  ) public view {\n    // Shh - currently unused:\n    liquidator;\n    if (!markets[cTokenBorrowed].isListed || !markets[cTokenCollateral].isListed) {\n      revert MarketNotListed();\n    }\n\n    if (!ICToken(cTokenBorrowed).isCToken() && ICToken(cTokenCollateral).isCToken() && !interMintAllowed) {\n      revert InterMintNotAllowed();\n    }\n\n    uint256 borrowBalance = ICToken(cTokenBorrowed).borrowBalanceStored(borrower);\n\n    if (block.timestamp - globalConfig.minWaitBeforeLiquidatable <= lastBorrowedAt[borrower]) {\n      revert NotLiquidatableYet();\n    }\n    /* allow accounts to be liquidated if the market is deprecated */\n    if (ICToken(cTokenBorrowed).isDeprecated()) {\n      if (borrowBalance < repayAmount) {\n        revert TooMuchRepay();\n      }\n    } else {\n      /* The borrower must have shortfall in order to be liquidatable */\n      (, uint256 shortfall) = getHypotheticalAccountLiquidity(borrower, cTokenBorrowed, 0, 0);\n\n      if (shortfall <= 0) {\n        revert InsufficientShortfall();\n      }\n      uint256 priceMantissa = getUnderlyingPriceNormalized(cTokenBorrowed);\n      /* The liquidator may not repay more than what is allowed by the closeFactor */\n      uint256 maxClose = (uint256(globalConfig.closeFactorPercent) * percentScale * borrowBalance) / expScale;\n      uint256 maxCloseValue = (priceMantissa * maxClose) / expScale / expScale;\n      if (maxCloseValue < globalConfig.minCloseValue) {\n        if (repayAmount > borrowBalance) {\n          revert TooMuchRepay();\n        }\n      } else {\n        if (repayAmount > maxClose) {\n          revert TooMuchRepay();\n        }\n      }\n    }\n  }\n\n  /**\n   * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.\n   * @param cTokenBorrowed Asset which was borrowed by the borrower\n   * @param cTokenCollateral Asset which was used as collateral and will be seized\n   * @param liquidator The address repaying the borrow and seizing the collateral\n   * @param borrower The address of the borrower\n   * @param actualRepayAmount The amount of underlying being repaid\n   */\n  function liquidateBorrowVerify(\n    address cTokenBorrowed,\n    address cTokenCollateral,\n    address liquidator,\n    address borrower,\n    uint actualRepayAmount,\n    uint seizeTokens\n  ) external onlyListedCToken(msg.sender) onlyListedCToken(cTokenCollateral) {\n    // Shh - currently unused\n\n    if (cTokenBorrowed != msg.sender) {\n      revert InvalidCToken();\n    }\n    cTokenCollateral;\n    liquidator;\n    borrower;\n    actualRepayAmount;\n    seizeTokens;\n\n    (uint256 tokensHeld, uint256 amountOwed, , ) = ICToken(cTokenBorrowed).getAccountSnapshot(borrower);\n\n    if (tokensHeld == 0 && amountOwed == 0) {\n      _exitMarketInternal(borrower, cTokenBorrowed);\n    }\n  }\n  /**\n   * @notice Validates borrow and reverts on rejection. May emit logs.\n   * @param borrower The address borrowing the underlying\n   * @param borrowAmount The amount of the underlying asset requested to borrow\n   */\n  function borrowVerify(address borrower, uint256 borrowAmount) external onlyListedCToken(msg.sender) {\n    // Shh - currently unused\n    // address cToken = msg.sender;\n    borrower;\n    borrowAmount;\n    // redemptionManager.updateSortedBorrows(cToken, borrower);\n\n    lastBorrowedAt[borrower] = uint48(block.timestamp);\n  }\n\n  /////////////////////////////////////////////////////////\n  // Hypothetical Calculation\n  /////////////////////////////////////////////////////////\n  /**\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\n     * @param cTokenModify The market to hypothetically redeem/borrow in\n     * @param account The account to determine liquidity for\n     * @param redeemTokens The number of tokens to hypothetically redeem\n     * @param borrowAmount The amount of underlying to hypothetically borrow\n     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,\n     *  without calculating accumulated interest.\n     * @return (possible error code,\n                hypothetical account liquidity in excess of collateral requirements,\n     *          hypothetical account shortfall below collateral requirements)\n     */\n  function getHypotheticalAccountLiquidity(\n    address account,\n    address cTokenModify,\n    uint256 redeemTokens,\n    uint256 borrowAmount\n  ) public view returns (uint256, uint256) {\n    uint256 assetsGroupNum = globalConfig.largestGroupId + 1;\n    GroupVar[] memory groupVars = new GroupVar[](assetsGroupNum);\n    bool targetIsSuToken = (cTokenModify != address(0)) && !ICToken(cTokenModify).isCToken();\n\n    uint256 sumLiquidity = 0;\n    uint256 sumBorrowPlusEffects = 0;\n    uint256 sumInterCBorrowVal = 0;\n    uint256 sumInterSuBorrowVal = 0;\n    GroupVar memory targetGroup;\n\n    // For each asset the account is in\n    address[] memory assets = accountAssets[account];\n\n    // loop through tokens to add deposit/borrow for ctoken/sutoken in each group\n    for (uint256 i = 0; i < assets.length; ++i) {\n      address asset = assets[i];\n      uint256 depositVal = 0;\n      uint256 borrowVal = 0;\n      if (!markets[asset].isListed) {\n        continue;\n      }\n\n      uint8 assetGroupId = markets[asset].assetGroupId;\n      if (groupVars[assetGroupId].groupId == 0 && assetGroupId != 0) {\n        CompactAssetGroup memory g = assetGroup[assetGroupId];\n        groupVars[assetGroupId] = GroupVar(\n          g.groupId,\n          0,\n          0,\n          0,\n          0,\n          uint256(g.intraCRatePercent) * percentScale,\n          uint256(g.intraMintRatePercent) * percentScale,\n          uint256(g.intraSuRatePercent) * percentScale,\n          uint256(g.interCRatePercent) * percentScale,\n          uint256(g.interSuRatePercent) * percentScale\n        );\n      }\n\n      (\n        uint256 depositBalance,\n        uint256 borrowBalance,\n        uint256 exchangeRateMantissa,\n        uint256 discountRateMantissa\n      ) = ICToken(asset).getAccountSnapshot(account);\n\n      // skip the calculation to save gas\n      if (asset != cTokenModify && depositBalance == 0 && borrowBalance == 0) {\n        continue;\n      }\n\n      // Get price of asset\n      // normalize price for asset with unit of 1e(36-token decimal)\n      uint256 oraclePriceMantissa = getUnderlyingPriceNormalized(asset);\n\n      // Pre-compute a conversion factor from tokens -> USD (normalized price value)\n      // tokensToDenom = oraclePrice * exchangeRate * discourntRate\n      uint256 tokensToDenom = (((oraclePriceMantissa * exchangeRateMantissa) / expScale) * discountRateMantissa) /\n        expScale;\n\n      depositVal += (tokensToDenom * depositBalance) / expScale;\n      borrowVal += (oraclePriceMantissa * borrowBalance) / expScale;\n      if (asset == cTokenModify) {\n        uint256 redeemVal = (tokensToDenom * redeemTokens) / expScale;\n        if (redeemVal <= depositVal) {\n          // if redeemedVal <= depositVal, absorb it with deposits\n          depositVal = depositVal - redeemVal;\n          redeemVal = 0;\n        } else {\n          // if redeemVal > depositVal\n          redeemVal = redeemVal - depositVal;\n          borrowVal = borrowVal + redeemVal;\n          depositVal = 0;\n        }\n\n        borrowVal += (oraclePriceMantissa * borrowAmount) / expScale;\n      }\n\n      if (ICToken(asset).isCToken()) {\n        groupVars[assetGroupId].cDepositVal += depositVal;\n        groupVars[assetGroupId].cBorrowVal += borrowVal;\n      } else {\n        groupVars[assetGroupId].suDepositVal += depositVal;\n        groupVars[assetGroupId].suBorrowVal += borrowVal;\n      }\n    }\n    // end of loop in assets\n\n    // loop in groups to calculate accumulated collateral/liability for two types:\n    // inter-group and intra-group for target token\n    uint8 targetGroupId = markets[cTokenModify].assetGroupId;\n\n    for (uint8 i = 0; i < assetsGroupNum; ++i) {\n      if (groupVars[i].groupId == 0) {\n        continue;\n      }\n      GroupVar memory g = groupVars[i];\n\n      // absorb sutoken loan with ctoken collateral\n      if (g.suBorrowVal > 0) {\n        (g.cDepositVal, g.suBorrowVal) = absorbLoan(g.cDepositVal, g.suBorrowVal, g.intraMintRate);\n      }\n\n      // absorb ctoken loan with ctoken collateral\n      if (g.cBorrowVal > 0) {\n        (g.cDepositVal, g.cBorrowVal) = absorbLoan(g.cDepositVal, g.cBorrowVal, g.intraCRate);\n      }\n\n      // absorb sutoken loan with sutoken collateral\n      if (g.suBorrowVal > 0) {\n        (g.suDepositVal, g.suBorrowVal) = absorbLoan(g.suDepositVal, g.suBorrowVal, g.intraSuRate);\n      }\n\n      // absorb ctoken loan with sutoken collateral\n      if (g.cBorrowVal > 0) {\n        (g.suDepositVal, g.cBorrowVal) = absorbLoan(g.suDepositVal, g.cBorrowVal, g.intraSuRate);\n      }\n\n      // after intra-group collateral-liability match, either asset or debt must be 0\n      if (g.cDepositVal + g.suDepositVal != 0 && g.cBorrowVal + g.suBorrowVal != 0) {\n        revert EitherAssetOrDebtMustBeZeroInGroup(\n          g.groupId,\n          g.cDepositVal,\n          g.suDepositVal,\n          g.cBorrowVal,\n          g.suBorrowVal\n        );\n      }\n\n      if (g.groupId == targetGroupId) {\n        targetGroup = g;\n      } else {\n        sumLiquidity += (g.interCRate * g.cDepositVal) / expScale;\n        sumLiquidity += (g.interSuRate * g.suDepositVal) / expScale;\n        sumInterCBorrowVal = sumInterCBorrowVal + g.cBorrowVal;\n        sumInterSuBorrowVal = sumInterSuBorrowVal + g.suBorrowVal;\n      }\n    }\n\n    // absorb c-loan with inter group collateral\n    (sumLiquidity, sumInterCBorrowVal) = deduct(sumLiquidity, sumInterCBorrowVal);\n\n    // absorb su-loan with inter group collateral only if inter mint is allowed\n    if (interMintAllowed) {\n      (sumLiquidity, sumInterSuBorrowVal) = deduct(sumLiquidity, sumInterSuBorrowVal);\n    }\n\n    // absorb target group c-loan with other group collateral\n    (sumLiquidity, targetGroup.cBorrowVal) = deduct(sumLiquidity, targetGroup.cBorrowVal);\n\n    // absorb target group s-loan with other group collateral only if inter mint is allowed\n    if (interMintAllowed) {\n      (sumLiquidity, targetGroup.suBorrowVal) = deduct(sumLiquidity, targetGroup.suBorrowVal);\n    }\n\n    // absorb inter group c-loan with target group c-collateral\n    if (sumInterCBorrowVal > 0) {\n      (targetGroup.cDepositVal, sumInterCBorrowVal) = absorbLoan(\n        targetGroup.cDepositVal,\n        sumInterCBorrowVal,\n        targetGroup.interCRate\n      );\n    }\n\n    // absorb inter group c-loan with target group su-collateral\n    if (sumInterCBorrowVal > 0) {\n      (targetGroup.suDepositVal, sumInterCBorrowVal) = absorbLoan(\n        targetGroup.suDepositVal,\n        sumInterCBorrowVal,\n        targetGroup.interSuRate\n      );\n    }\n\n    // absorb inter group su-loan only if inter mint allowed\n    if (interMintAllowed) {\n      // absorb inter group su-loan with target group c-collateral\n      if (sumInterSuBorrowVal > 0) {\n        (targetGroup.cDepositVal, sumInterSuBorrowVal) = absorbLoan(\n          targetGroup.cDepositVal,\n          sumInterSuBorrowVal,\n          targetGroup.interCRate\n        );\n      }\n\n      if (sumInterSuBorrowVal > 0) {\n        (targetGroup.suDepositVal, sumInterSuBorrowVal) = absorbLoan(\n          targetGroup.suDepositVal,\n          sumInterSuBorrowVal,\n          targetGroup.interSuRate\n        );\n      }\n    }\n\n    sumBorrowPlusEffects = sumInterCBorrowVal + sumInterSuBorrowVal + targetGroup.cBorrowVal + targetGroup.suBorrowVal;\n    if (sumBorrowPlusEffects > 0) {\n      return (0, sumBorrowPlusEffects);\n    }\n\n    if (targetIsSuToken) {\n      if (!interMintAllowed) {\n        sumLiquidity = 0;\n      }\n      // if target is sutoken\n      // limit = inter-group limit + intra ctoken collateral * intra mint rate\n      sumLiquidity += (targetGroup.intraMintRate * targetGroup.cDepositVal) / expScale;\n    } else {\n      // if target is not sutoken\n      // limit = inter-group limit + intra ctoken collateral * intra c rate\n      sumLiquidity += (targetGroup.intraCRate * targetGroup.cDepositVal) / expScale;\n    }\n\n    // limit = inter-group limit + intra-group ctoken limit + intra sutoken collateral * intra su rate\n    sumLiquidity += (targetGroup.intraSuRate * targetGroup.suDepositVal) / expScale;\n\n    return (sumLiquidity, 0);\n  }\n\n  function deduct(uint256 collateral, uint256 loan) internal pure returns (uint256, uint256) {\n    if (loan == 0) {\n      return (collateral, loan);\n    }\n    if (collateral > loan) {\n      collateral -= loan;\n      loan = 0;\n    } else {\n      loan -= collateral;\n      collateral = 0;\n    }\n    return (collateral, loan);\n  }\n\n  function absorbLoan(\n    uint256 collateralValue,\n    uint256 borrowValue,\n    uint256 collateralRate\n  ) internal pure returns (uint256, uint256) {\n    if (collateralRate == 0) {\n      return (0, borrowValue);\n    }\n    uint256 collateralizedLoan = (collateralRate * collateralValue) / expScale;\n    uint256 usedCollateral = (borrowValue * expScale) / collateralRate;\n    uint256 newCollateralValue = 0;\n    uint256 newBorrowValue = 0;\n    if (collateralizedLoan > borrowValue) {\n      newCollateralValue = collateralValue - usedCollateral;\n    } else {\n      newBorrowValue = borrowValue - collateralizedLoan;\n    }\n    return (newCollateralValue, newBorrowValue);\n  }\n\n  // version is enabled after V2\n  function version() external pure returns (Version) {\n    return Version.V3;\n  }\n}\n"}, "contracts/Comptroller/ComptrollerStorage.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport '../Interfaces/IComptroller.sol';\nimport '../Interfaces/ICompLogic.sol';\nimport '../Interfaces/IPriceOracle.sol';\nimport '../Interfaces/IRedemptionManager.sol';\n\ncontract ComptrollerStorage {\n  /// @notice Indicator that this is a Comptroller contract (for inspection)\n  bool public constant isComptroller = true;\n  uint256 internal constant percentScale = 1e14;\n  bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\n  uint256 internal constant expScale = 1e18;\n\n  // from AccessControlEnumerableUpgradeable\n  uint256[50] private __gap;\n\n  // uint256 closeFactorMantissa; // 201\n  // uint256 heteroLiquidationIncentiveMantissa; // 202\n  uint256[2] private gap0; // 201-202\n\n  /**\n   * @notice Per-account mapping of \"assets you are in\", capped by maxAssets\n   */\n  mapping(address => address[]) public accountAssets; // 203\n  /// @notice Whether or not this market is listed\n  /// @notice Per-market mapping of \"accounts in this asset\"\n  /// @notice Whether or not this market receives COMP\n  struct Market {\n    bool isListed;\n    uint8 assetGroupId;\n    mapping(address => bool) accountMembership;\n    bool isComped;\n  }\n\n  /**\n   * @notice Official mapping of cTokens -> Market metadata\n   * @dev Used e.g. to determine if a market is supported\n   */\n  mapping(address => Market) public markets; // 204\n\n  /// @notice A list of all markets\n  address[] public allMarkets; // 205\n\n  // mapping(address => uint256) public maxSupply; // 206\n  // uint256 internal homoLiquidationIncentiveMantissa; // 207\n  // uint256 internal sutokenLiquidationIncentiveMantissa; // 208\n  uint256[3] private gap1;\n\n  address public governanceToken; // 209\n\n  // uint256 public suTokenRateMantissa; // 210\n  // AssetGroupDeprecated[] public _eqAssetGroupsDeprecated; // 211\n  // mapping(uint8 => uint8) public assetGroupIdToIndex; // 212\n  uint256[3] private gap22;\n\n  address public pauseGuardian; // 213\n  // bool private _mintGuardianPaused;\n  // bool private _borrowGuardianPaused;\n  // bool private transferGuardianPaused;\n  // bool private seizeGuardianPaused;\n  // mapping(address => bool) private mintGuardianPaused; // 214\n  // mapping(address => bool) private borrowGuardianPaused; // 215\n  // address public borrowCapGuardian; // 216\n  // mapping(address => uint256) public borrowCaps; // 217\n  uint256[4] private gap3;\n\n  // additional variables\n  ICompLogic public compLogic; // 218\n  IPriceOracle public oracle; // 219\n\n  // IAccountLiquidity public accountLiquidity; // 220\n  uint256 private gap4; // 220\n\n  address public timelock; // 221\n  IRedemptionManager public redemptionManager; // 222\n\n  // uint256 public minSuBorrowValue; // 223\n  // bool protocolPaused; // 224\n  // uint256 public minCloseValue; // 225\n  uint256[3] private gap5; // 223-225\n\n  // ctoken => last borrowed at timestamp\n  mapping(address => uint48) public lastBorrowedAt; // 226\n\n  // uint48 public minWaitBeforeLiquidatable; // 227\n  uint256 private gap6;\n\n  mapping(uint8 => CompactAssetGroup) public assetGroup; // groupId => asset group 228\n  mapping(address => MarketConfig) public marketConfig; // ctoken => market configs & pause switches 229\n\n  GlobalConfig public globalConfig; // 230\n  LiquidationIncentive public liquidationIncentive; // 231\n\n  bool public interMintAllowed; //\n}\n"}, "contracts/Interfaces/ICompLogic.sol": {"content": "pragma solidity ^0.8.30;\n\ninterface ICompLogic {\n  struct Exp {\n    uint256 mantissa;\n  }\n  function setCompSpeed(address cToken, uint256 supplySpeed, uint256 borrowSpeed) external;\n\n  function updateCompSupplyIndex(address cToken) external;\n\n  function updateCompBorrowIndex(address cToken, Exp memory marketBorrowIndex) external;\n\n  function distributeSupplierComp(address cToken, address supplier) external;\n\n  function distributeBorrowerComp(address cToken, address borrower, Exp memory marketBorrowIndex) external;\n\n  function initializeMarket(address cToken, uint32 blockNumber) external;\n\n  function uninitializeMarket(address cToken) external;\n\n  function getHypotheticalSafeLimit(\n    address account,\n    address cTokenModify,\n    uint256 intraSafeLimitMantissa,\n    uint256 interSafeLimitMantissa\n  ) external view returns (uint256);\n}\n"}, "contracts/Interfaces/IComptroller.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nenum Version {\n  V0,\n  V1,\n  V2, // packed asset group\n  V3, // added interMintRate into asset group\n  V4 // use interMintSwitch instead of interMintRate\n}\n\nstruct GroupVar {\n  uint8 groupId;\n  uint256 cDepositVal;\n  uint256 cBorrowVal;\n  uint256 suDepositVal;\n  uint256 suBorrowVal;\n  uint256 intraCRate;\n  uint256 intraMintRate;\n  uint256 intraSuRate;\n  uint256 interCRate;\n  uint256 interSuRate;\n}\n\n/// @notice AssetGroup, contains information of groupName and rateMantissas\nstruct AssetGroupDeprecated {\n  uint8 groupId;\n  string groupName;\n  uint256 intraCRateMantissa;\n  uint256 intraMintRateMantissa;\n  uint256 intraSuRateMantissa;\n  uint256 interCRateMantissa;\n  uint256 interSuRateMantissa;\n  bool exist;\n}\n\n/// @notice NewAssetGroup, contains information of groupName and rateMantissas\nstruct CompactAssetGroup {\n  uint8 groupId;\n  uint16 intraCRatePercent;\n  uint16 intraMintRatePercent;\n  uint16 intraSuRatePercent;\n  uint16 interCRatePercent;\n  uint16 interSuRatePercent;\n}\n\nstruct GlobalConfig {\n  uint16 closeFactorPercent; // percent decimals(4)\n  uint32 minCloseValue; // usd value decimals(0)\n  uint32 minSuBorrowValue; // usd value decimals(0)\n  uint32 minWaitBeforeLiquidatable; // seconds decimals(0)\n  uint8 largestGroupId;\n}\n\nstruct MarketConfig {\n  bool mintPaused;\n  bool borrowPaused;\n  bool transferPaused;\n  bool seizePaused;\n  uint120 borrowCap; //\n  uint120 supplyCap;\n}\n\nstruct LiquidationIncentive {\n  uint16 heteroPercent;\n  uint16 homoPercent;\n  uint16 sutokenPercent;\n}\n\ninterface IComptroller {\n  /*** Assets You Are In ***/\n  function isComptroller() external view returns (bool);\n\n  function markets(address) external view returns (bool, uint8, bool);\n\n  function getAllMarkets() external view returns (address[] memory);\n\n  function oracle() external view returns (address);\n\n  function redemptionManager() external view returns (address);\n\n  function enterMarkets(address[] calldata cTokens) external;\n\n  function exitMarket(address cToken) external;\n\n  // function getAssetsIn(address) external view returns (ICToken[] memory);\n  function claimSumer(address) external;\n\n  function compAccrued(address) external view returns (uint256);\n\n  function getAssetsIn(address account) external view returns (address[] memory);\n\n  function timelock() external view returns (address);\n\n  function getUnderlyingPriceNormalized(address cToken) external view returns (uint256);\n  /*** Policy Hooks ***/\n\n  function mintAllowed(address cToken, address minter, uint256 mintAmount) external;\n\n  function redeemAllowed(address cToken, address redeemer, uint256 redeemTokens) external;\n  function redeemVerify(address cToken, address redeemer, uint256 redeemAmount, uint256 redeemTokens) external;\n\n  function borrowAllowed(address cToken, address borrower, uint256 borrowAmount) external;\n  function borrowVerify(address borrower, uint borrowAmount) external;\n\n  function repayBorrowAllowed(address cToken, address payer, address borrower, uint256 repayAmount) external;\n  function repayBorrowVerify(\n    address cToken,\n    address payer,\n    address borrower,\n    uint actualRepayAmount,\n    uint borrowIndex\n  ) external;\n\n  function seizeAllowed(\n    address cTokenCollateral,\n    address cTokenBorrowed,\n    address liquidator,\n    address borrower,\n    uint256 seizeTokens\n  ) external;\n  function seizeVerify(\n    address cTokenCollateral,\n    address cTokenBorrowed,\n    address liquidator,\n    address borrower,\n    uint seizeTokens\n  ) external;\n\n  function transferAllowed(address cToken, address src, address dst, uint256 transferTokens) external;\n\n  /*** Liquidity/Liquidation Calculations ***/\n\n  function liquidationIncentive() external view returns (LiquidationIncentive memory);\n\n  function isListed(address asset) external view returns (bool);\n\n  function getHypotheticalAccountLiquidity(\n    address account,\n    address cTokenModify,\n    uint256 redeemTokens,\n    uint256 borrowAmount\n  ) external view returns (uint256, uint256);\n\n  // function _getMarketBorrowCap(address cToken) external view returns (uint256);\n\n  /// @notice Emitted when an action is paused on a market\n  event ActionPaused(address cToken, string action, bool pauseState);\n\n  /// @notice Emitted when borrow cap for a cToken is changed\n  event NewBorrowCap(address indexed cToken, uint256 newBorrowCap);\n\n  /// @notice Emitted when borrow cap guardian is changed\n  event NewBorrowCapGuardian(address oldBorrowCapGuardian, address newBorrowCapGuardian);\n\n  /// @notice Emitted when pause guardian is changed\n  event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\n\n  event RemoveAssetGroup(uint8 indexed groupId, uint8 equalAssetsGroupNum);\n\n  function assetGroup(uint8 groupId) external view returns (CompactAssetGroup memory);\n\n  function marketConfig(address cToken) external view returns (MarketConfig memory);\n\n  function liquidateBorrowAllowed(\n    address cTokenBorrowed,\n    address cTokenCollateral,\n    address liquidator,\n    address borrower,\n    uint256 repayAmount\n  ) external view;\n  function liquidateBorrowVerify(\n    address cTokenBorrowed,\n    address cTokenCollateral,\n    address liquidator,\n    address borrower,\n    uint repayAmount,\n    uint seizeTokens\n  ) external;\n\n  function globalConfig() external view returns (GlobalConfig memory);\n\n  function interMintAllowed() external view returns (bool);\n}\n"}, "contracts/Interfaces/ICTokenExternal.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\ninterface ICToken {\n  function comptroller() external view returns (address);\n\n  function reserveFactorMantissa() external view returns (uint256);\n\n  function borrowIndex() external view returns (uint256);\n\n  function totalBorrows() external view returns (uint256);\n\n  function totalSupply() external view returns (uint256);\n\n  function isCToken() external view returns (bool);\n\n  function balanceOf(address owner) external view returns (uint256);\n\n  function getAccountSnapshot(address account) external view returns (uint256, uint256, uint256, uint256);\n\n  function borrowBalanceStored(address account) external view returns (uint256);\n\n  function exchangeRateStored() external view returns (uint256);\n\n  function underlying() external view returns (address);\n\n  function exchangeRateCurrent() external returns (uint256);\n\n  function isCEther() external view returns (bool);\n\n  function supplyRatePerBlock() external view returns (uint256);\n\n  function borrowRatePerBlock() external view returns (uint256);\n\n  function totalReserves() external view returns (uint256);\n\n  function getCash() external view returns (uint256);\n\n  function decimals() external view returns (uint8);\n\n  function borrowBalanceCurrent(address account) external returns (uint256);\n\n  function balanceOfUnderlying(address owner) external returns (uint256);\n\n  function allowance(address owner, address spender) external view returns (uint256);\n\n  function getCurrentVotes(address account) external view returns (uint96);\n\n  function delegates(address) external view returns (address);\n\n  function getPriorVotes(address account, uint256 blockNumber) external view returns (uint96);\n\n  function isDeprecated() external view returns (bool);\n\n  function executeRedemption(\n    address redeemer,\n    address provider,\n    uint256 repayAmount,\n    address cTokenCollateral,\n    uint256 seizeAmount,\n    uint256 redemptionRateMantissa\n  ) external returns (uint256);\n\n  function discountRateMantissa() external view returns (uint256);\n\n  function accrueInterest() external returns (uint256);\n\n  function liquidateCalculateSeizeTokens(\n    address cTokenCollateral,\n    uint256 actualRepayAmount\n  ) external view returns (uint256, uint256, uint256);\n}\n"}, "contracts/Interfaces/IPriceOracle.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\ninterface IPriceOracle {\n  /**\n   * @notice Get the underlying price of a cToken asset\n   * @param cToken The cToken to get the underlying price of\n   * @return The underlying asset price mantissa (scaled by 1e18).\n   *  Zero means the price is unavailable.\n   */\n  function getUnderlyingPrice(address cToken) external view returns (uint256);\n\n  /**\n   * @notice Get the underlying price of cToken asset (normalized)\n   * = getUnderlyingPrice * (10 ** (18 - cToken.decimals))\n   */\n  function getUnderlyingPriceNormalized(address cToken_) external view returns (uint256);\n}\n"}, "contracts/Interfaces/IRedemptionManager.sol": {"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.30;\n\nimport './IPriceOracle.sol';\n\ninterface IRedemptionManager {\n  function calcActualRepayAndSeize(\n    uint256 redeemAmount,\n    address provider,\n    address cToken,\n    address csuToken\n  ) external returns (uint256, uint256, uint256, uint256);\n\n  // function updateSortedBorrows(address csuToken, address borrower) external;\n\n  function getRedemptionRate(address asset) external view returns (uint);\n\n  function getCurrentRedemptionRate(address asset, uint redeemAmount, uint _totalSupply) external returns (uint);\n\n  function redeemFaceValueWithProviderPreview(\n    address redeemer,\n    address provider,\n    address cToken,\n    address csuToken,\n    uint256 redeemAmount,\n    uint256 redemptionRateMantissa\n  ) external returns (uint256, uint256, uint256, uint256, uint256, uint256);\n\n  function redeemFaceValue(\n    address csuToken,\n    uint256 amount,\n    address[] memory providers,\n    uint256 deadline,\n    bytes memory signature\n  ) external;\n}\n"}, "contracts/SumerErrors.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\n/// @title Multicall2 - Aggregate results from multiple read-only function calls\n/// @author Michael Elliot <mike@makerdao.com>\n/// @author Joshua Levine <joshua@makerdao.com>\n/// @author Nick Johnson <arachnid@notdot.net>\n\ncontract SumerErrors {\n  error PriceError();\n\n  error TotalBorrowsNotZero();\n  error TotalSupplyNotZero();\n  error RedemptionSignerNotInitialized();\n  error NotEnoughForSeize();\n  error NoRedemptionProvider();\n  error OnlyPausedMarketCanBeUnlisted();\n  error MarketNotListed();\n  error InsufficientShortfall();\n  error TooMuchRepay();\n  error InvalidCToken();\n  error MarketNotEmpty();\n  error InvalidMinSuBorrowValue();\n  error BorrowValueMustBeLargerThanThreshold(uint256 usdThreshold);\n  error OverThreshold();\n  error MarketAlreadyListed();\n  error MarketAlreadyUnlisted();\n  error InvalidAddress();\n  error InvalidGroupId();\n  error InvalidCloseFactor();\n  error InvalidSuToken();\n  error InvalidSignatureLength();\n  error ExpiredSignature();\n  error SenderMustBeCToken();\n  error MintPaused();\n  error BorrowPaused();\n  error MarketPaused();\n  error TransferPaused();\n  error SeizePaused();\n  error InsufficientCollateral();\n  error EitherAssetOrDebtMustBeZeroInGroup(\n    uint8 groupId,\n    uint256 cDepositVal,\n    uint256 suDepositVal,\n    uint256 cBorrowVal,\n    uint256 suBorrowVal\n  );\n  error EitherAssetOrDebtMustBeZero();\n\n  error OnlyAdminOrPauser();\n\n  // general errors\n  error OnlyAdmin();\n  error OnlyPendingAdmin();\n  error OnlyRedemptionManager();\n  error OnlyListedCToken();\n  error OnlyCToken();\n  error UnderlyingBalanceError();\n  error MarketCanOnlyInitializeOnce();\n  error CantSweepUnderlying();\n  error TokenTransferInFailed();\n  error TokenTransferOutFailed();\n  error TransferNotAllowed();\n  error TokenInOrAmountInMustBeZero();\n  error AddReservesOverflow();\n  error RedeemTransferOutNotPossible();\n  error BorrowCashNotAvailable();\n  error ReduceReservesCashNotAvailable();\n  error InvalidRedeem();\n  error CantEnterPausedMarket();\n  error InvalidDiscountRate();\n  error InvalidExchangeRate();\n  error InvalidReduceAmount();\n  error InvalidReserveFactor();\n  error InvalidComptroller();\n  error InvalidInterestRateModel();\n  error InvalidAmount();\n  error InvalidInput();\n  error BorrowAndDepositBackFailed();\n  error InvalidSignatureForRedeemFaceValue();\n\n  error BorrowCapReached();\n  error SupplyCapReached();\n  error ComptrollerMismatch();\n\n  error MintMarketNotFresh();\n  error BorrowMarketNotFresh();\n  error RepayBorrowMarketNotFresh();\n  error RedeemMarketNotFresh();\n  error LiquidateMarketNotFresh();\n  error LiquidateCollateralMarketNotFresh();\n  error ReduceReservesMarketNotFresh();\n  error SetInterestRateModelMarketNotFresh();\n  error AddReservesMarketNotFresh();\n  error SetReservesFactorMarketNotFresh();\n  error CantExitMarketWithNonZeroBorrowBalance();\n\n  error InvalidTimestamp();\n\n  // error\n  error NotCToken();\n  error NotSuToken();\n\n  // error in liquidateBorrow\n  error LiquidateBorrow_RepayAmountIsZero();\n  error LiquidateBorrow_RepayAmountIsMax();\n  error LiquidateBorrow_LiquidatorIsBorrower();\n  error LiquidateBorrow_SeizeTooMuch();\n\n  // error in seize\n  error Seize_LiquidatorIsBorrower();\n\n  // error in protected mint\n  error ProtectedMint_OnlyAllowAssetsInTheSameGroup();\n\n  error RedemptionSeizeTooMuch();\n\n  error MinDelayNotReached();\n\n  error NotLiquidatableYet();\n\n  error InvalidBlockNumber();\n  error ZeroAddressNotAllowed();\n  error InterMintNotAllowed();\n}\n"}}, "settings": {"viaIR": false, "optimizer": {"enabled": true}, "outputSelection": {"*": {"*": ["evm.legacyAssembly"]}}, "evmVersion": "paris", "libraries": {}}}
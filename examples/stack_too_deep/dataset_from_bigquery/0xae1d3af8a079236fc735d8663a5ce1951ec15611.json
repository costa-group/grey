{"language": "Solidity", "settings": {"optimizer": {"enabled": true}, "viaIR": false, "outputSelection": {"*": {"*": ["evm.legacyAssembly"]}}, "remappings": []}, "sources": {"ybz/YBZCore.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\n/**\n * @title YBZ.io - Decentralized Escrow Platform\n * @notice \"Trustless. Transparent. Guaranteed.\"\n * @dev Main entry point for YBZ.io escrow system.\n *      Code is Law. Immutable Code is Reliable Law.\n * \n * @author YBZ.io Team\n * @custom:website https://ybz.io\n * @custom:security-contact security@ybz.io\n * @custom:version 1.0.3\n * @custom:date 2025-10-18\n */\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\nimport \"./interfaces/IYBZCore.sol\";\nimport \"./libraries/DealValidation.sol\";\n\ncontract YBZCore is \n    AccessControl,\n    ReentrancyGuard,\n    Pausable,\n    IYBZCore\n{\n    using SafeERC20 for IERC20;\n    using DealValidation for *;\n    \n    // ============ Roles ============\n    \n    bytes32 public constant OPERATOR_ROLE = keccak256(\"OPERATOR_ROLE\");\n    bytes32 public constant ARBITER_ROLE = keccak256(\"ARBITER_ROLE\");\n    \n    // ============ Hardcoded Addresses (Ethereum Mainnet Only) ============\n    \n    /// @notice Chainlink ETH/USD price feed (Mainnet)\n    address public constant CHAINLINK_ETH_USD = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;\n    \n    /// @notice USDT address (Mainnet)\n    address public constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n    \n    /// @notice USDC address (Mainnet)\n    address public constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n    \n    /// @notice Initial arbiters (hardcoded)\n    address public constant ARBITER_1 = 0xB1BB66C47DEE78b91E8AEEb6E74e66e02CA34567;\n    address public constant ARBITER_2 = 0xBf3a2c7c9bC27e3143dF965fFa80E421f5445678;\n\n    // ============ State Variables ============\n    \n    /// @notice Deal counter\n    uint256 private _dealIdCounter;\n    \n    /// @notice Stablecoin configuration\n    struct StablecoinInfo {\n        bool isActive;      // Whether this stablecoin is supported\n        uint8 decimals;     // Token decimals (6 for USDT/USDC, 18 for DAI)\n    }\n    \n    /// @notice All deals\n    mapping(uint256 => Deal) private _deals;\n    \n    /// @notice Dispute resolutions\n    mapping(uint256 => DisputeResolution) private _resolutions;\n    \n    /// @notice Supported stablecoins registry (replaces tokenWhitelist for ERC20)\n    /// @dev address(0) is reserved for ETH (not a stablecoin)\n    mapping(address => StablecoinInfo) public stablecoins;\n    \n    /// @notice List of all registered stablecoin addresses\n    address[] public stablecoinList;\n    \n    /// @notice Accumulated platform fees by token (treasury balance)\n    /// @dev token => accumulated fee amount\n    mapping(address => uint256) public accumulatedFees;\n    \n    // ============ Fee Management (Integrated) ============\n    \n    /// @notice Default platform fee in basis points (200 = 2%)\n    uint16 public defaultPlatformFeeBps;\n    \n    /// @notice Default arbiter fee in basis points (100 = 1%)\n    uint16 public defaultArbiterFeeBps;\n    \n    /// @notice Maximum fee in basis points (1000 = 10%)\n    uint16 public constant MAX_FEE_BPS = 1000;\n    \n    /// @notice Tiered fee structure: amount threshold => fee in bps\n    mapping(uint256 => uint16) public tieredPlatformFees;\n    \n    /// @notice Array of tier thresholds for iteration\n    uint256[] public tierThresholds;\n    \n    // ============ Treasury (Integrated) ============\n    \n    /// @notice Withdrawal destination address\n    address public withdrawalAddress;\n    \n    \n    // ============ Arbitration (Integrated) ============\n    \n    /// @notice Arbiter information\n    struct ArbiterInfo {\n        bool isActive;\n        uint256 totalCases;\n        uint256 resolvedCases;\n        uint256 reputation; // 0-100 score (not used currently)\n        uint16 arbiterFeeBps; // Individual arbiter fee in basis points (can be adjusted by admin)\n        uint64 registeredAt;\n    }\n    \n    /// @notice Registered arbiters\n    mapping(address => ArbiterInfo) public arbiters;\n    \n    /// @notice List of all arbiter addresses\n    address[] public arbiterList;\n    \n    // ============ Price Oracle (Integrated - Chainlink) ============\n    \n    /// @notice Chainlink ETH/USD price feed interface\n    AggregatorV3Interface public ethUsdPriceFeed;\n    \n    /// @notice Cached ETH price (8 decimals)\n    uint256 public cachedEthPrice;\n    \n    /// @notice Price cache timestamp\n    uint256 public priceCacheTime;\n    \n    /// @notice Price cache duration (10 minutes)\n    uint256 public constant PRICE_CACHE_DURATION = 10 minutes;\n    \n    /// @notice Minimum deal amount in USD (8 decimals: 2000_0000_0000 = $20.00)\n    uint256 public constant MIN_DEAL_AMOUNT_USD = 20_0000_0000; // $20.00\n    \n    /// @notice Minimum platform fee in USD (8 decimals: 1000_0000_0000 = $10.00)\n    uint256 public constant MIN_FEE_USD = 10_0000_0000; // $10.00\n    \n    /// @notice Maximum dispute cooldown period (24 hours)\n    /// @dev Actual cooldown is dynamic: min(24 hours, confirmWindow / 2)\n    /// @dev This prevents buyers from being locked out of disputes in short-term deals\n    uint64 public constant MAX_DISPUTE_COOLDOWN = 24 hours;\n    \n    /// @notice Platform brand message for event marketing\n    /// @dev Displayed in blockchain explorers for brand exposure\n    string public constant PLATFORM_MESSAGE = \"ybz.io - Escrow Layer\";\n    \n    // ============ Events ============\n    \n    // Core Events (from IYBZCore interface)\n    \n    // Fee Management Events\n    event FeeWithdrawn(address indexed token, address indexed recipient, uint256 amount);\n    \n    // Arbitration Events (important business operations)\n    event ArbiterRegistered(address indexed arbiter, uint64 timestamp);\n    event ArbiterRemoved(address indexed arbiter);\n    \n    // ============ Errors ============\n    \n    error DisputeCooldownActive(uint64 remainingTime);\n    error InvalidFee();\n    error InvalidThreshold();\n    error TierAlreadyExists();\n    error TierNotFound();\n    error ArbiterNotFound();\n    error ArbiterAlreadyExists();\n    error ArbiterInactive();\n    error InsufficientBalance();\n    error InvalidPrice();\n    \n    // ============ Constructor ============\n    \n    /**\n     * @notice Constructs the unified escrow contract\n     * @param admin Admin address\n     * @param withdrawalAddr Initial withdrawal address for fees\n     * @dev Everything else is auto-configured (Chainlink, stablecoins, arbiters)\n     */\n    constructor(\n        address admin,\n        address withdrawalAddr\n    ) {\n        require(admin != address(0), \"Invalid admin\");\n        require(withdrawalAddr != address(0), \"Invalid withdrawal address\");\n        \n        // Grant roles\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\n        _grantRole(OPERATOR_ROLE, admin);\n        \n        // Initialize fee structure\n        defaultPlatformFeeBps = 200;  // 2%\n        defaultArbiterFeeBps = 100;   // 1%\n        \n        // Initialize treasury\n        withdrawalAddress = withdrawalAddr;\n        \n        // Auto-configure Chainlink price feed and stablecoins for mainnet\n        if (block.chainid == 1) {\n            // Ethereum Mainnet - Auto-configure everything\n            ethUsdPriceFeed = AggregatorV3Interface(CHAINLINK_ETH_USD);\n            \n            // Register hardcoded arbiters (mainnet only)\n            _registerArbiterInternal(ARBITER_1);\n            _registerArbiterInternal(ARBITER_2);\n            \n            // Auto-register USDT\n            stablecoins[USDT] = StablecoinInfo({\n                isActive: true,\n                decimals: 6\n            });\n            stablecoinList.push(USDT);\n            \n            // Auto-register USDC\n            stablecoins[USDC] = StablecoinInfo({\n                isActive: true,\n                decimals: 6\n            });\n            stablecoinList.push(USDC);\n        }\n        // For other networks (testnet/localhost), use setManualPrice() for testing\n        \n        _dealIdCounter = 1; // Start from 1\n    }\n    \n    // ============ Deal Creation ============\n    \n    /**\n     * @notice Creates a new ETH escrow deal\n     * @param seller Seller address\n     * @param termsHash IPFS hash of deal terms\n     * @param acceptWindow Time window for seller to accept (seconds)\n     * @param submitWindow Time window for seller to submit work (seconds)\n     * @param confirmWindow Time window for buyer to confirm (seconds)\n     * @param preferredArbiter Optional: pre-select arbiter (must be active, or address(0) for random)\n     * @return dealId New deal identifier\n     */\n    function createDealETH(\n        address seller,\n        bytes32 termsHash,\n        uint64 acceptWindow,\n        uint64 submitWindow,\n        uint64 confirmWindow,\n        address preferredArbiter\n    ) external payable override nonReentrant whenNotPaused returns (uint256 dealId) {\n        // Validate inputs\n        DealValidation.validateCreateDeal(\n            seller,\n            msg.value,\n            termsHash,\n            acceptWindow,\n            submitWindow,\n            confirmWindow\n        );\n        \n        if (msg.sender == seller) revert DealValidation.InvalidAddress();\n        \n        // Create deal\n        dealId = _createDeal(\n            msg.sender,\n            seller,\n            address(0), // ETH\n            msg.value,\n            termsHash,\n            acceptWindow,\n            submitWindow,\n            confirmWindow,\n            preferredArbiter\n        );\n        \n        // Get created deal data for event\n        Deal storage newDeal = _deals[dealId];\n        \n        emit DealCreated(\n            dealId, \n            msg.sender, \n            seller, \n            address(0), \n            msg.value,\n            newDeal.creationPriceUSD,\n            newDeal.platformFeeBps,\n            newDeal.arbiterFeeBps,\n            termsHash, \n            acceptWindow, \n            submitWindow, \n            confirmWindow, \n            preferredArbiter, \n            PLATFORM_MESSAGE\n        );\n    }\n    \n    /**\n     * @notice Creates a new ERC20 escrow deal (USDT/USDC only)\n     * @param seller Seller address\n     * @param token Token address (must be USDT or USDC)\n     * @param amount Token amount\n     * @param termsHash IPFS hash of deal terms\n     * @param acceptWindow Time window for seller to accept (seconds)\n     * @param submitWindow Time window for seller to submit work (seconds)\n     * @param confirmWindow Time window for buyer to confirm (seconds)\n     * @param preferredArbiter Optional: pre-select arbiter (must be active, or address(0) for random)\n     * @return dealId New deal identifier\n     * @dev Only stablecoins (USDT/USDC) are supported for ERC20 deals\n     */\n    function createDealERC20(\n        address seller,\n        address token,\n        uint256 amount,\n        bytes32 termsHash,\n        uint64 acceptWindow,\n        uint64 submitWindow,\n        uint64 confirmWindow,\n        address preferredArbiter\n    ) external override nonReentrant whenNotPaused returns (uint256 dealId) {\n        // Validate token is a supported stablecoin\n        if (token == address(0)) revert DealValidation.InvalidAddress();\n        \n        StablecoinInfo memory stablecoin = stablecoins[token];\n        require(stablecoin.isActive, \"Token is not a supported stablecoin\");\n        \n        // ===== Early USD Amount Check for Stablecoins (Gas Optimization) =====\n        // Stablecoins are 1:1 USD, convert to 8 decimals for comparison\n        // Formula: amount * 10^(8 - tokenDecimals)\n        // Example: 100 USDT (6 decimals) = 100000000 \u2192 10000000000 (8 decimals) = $100\n        \n        uint256 dealAmountUSD;\n        if (stablecoin.decimals <= 8) {\n            dealAmountUSD = amount * (10 ** (8 - stablecoin.decimals));\n        } else {\n            dealAmountUSD = amount / (10 ** (stablecoin.decimals - 8));\n        }\n        \n        // Check minimum deal amount ($20 USD)\n        require(dealAmountUSD >= MIN_DEAL_AMOUNT_USD, \"Deal amount below $20 minimum\");\n        \n        // Minimum fee ($10) will be enforced in _releaseFunds:\n        // - If amount * 2% < $10 \u2192 charge $10\n        // - If amount * 2% >= $10 \u2192 charge 2%\n        // This way $20-$500 orders are accepted but pay $10 minimum\n        \n        // ===== End Early Check =====\n        if (seller == address(0)) revert DealValidation.InvalidAddress();\n        if (termsHash == bytes32(0)) revert DealValidation.InvalidTermsHash();\n        if (acceptWindow < DealValidation.MIN_ACCEPT_WINDOW || acceptWindow > DealValidation.MAX_ACCEPT_WINDOW) {\n            revert DealValidation.InvalidTimeWindow();\n        }\n        if (submitWindow < DealValidation.MIN_SUBMIT_WINDOW || submitWindow > DealValidation.MAX_SUBMIT_WINDOW) {\n            revert DealValidation.InvalidTimeWindow();\n        }\n        if (confirmWindow < DealValidation.MIN_CONFIRM_WINDOW || confirmWindow > DealValidation.MAX_CONFIRM_WINDOW) {\n            revert DealValidation.InvalidTimeWindow();\n        }\n        \n        if (msg.sender == seller) revert DealValidation.InvalidAddress();\n        \n        // Transfer tokens to contract\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n        \n        // Create deal\n        dealId = _createDeal(\n            msg.sender,\n            seller,\n            token,\n            amount,\n            termsHash,\n            acceptWindow,\n            submitWindow,\n            confirmWindow,\n            preferredArbiter\n        );\n        \n        // Get created deal data for event\n        Deal storage newDeal = _deals[dealId];\n        \n        emit DealCreated(\n            dealId, \n            msg.sender, \n            seller, \n            token, \n            amount,\n            newDeal.creationPriceUSD,\n            newDeal.platformFeeBps,\n            newDeal.arbiterFeeBps,\n            termsHash, \n            acceptWindow, \n            submitWindow, \n            confirmWindow, \n            preferredArbiter, \n            PLATFORM_MESSAGE\n        );\n    }\n    \n    /**\n     * @notice Internal deal creation logic\n     */\n    function _createDeal(\n        address buyer,\n        address seller,\n        address token,\n        uint256 amount,\n        bytes32 termsHash,\n        uint64 acceptWindow,\n        uint64 submitWindow,\n        uint64 confirmWindow,\n        address preferredArbiter\n    ) internal returns (uint256 dealId) {\n        dealId = _dealIdCounter++;\n        \n        // ============ Arbiter Validation ============\n        \n        address assignedArbiter = address(0);\n        \n        // If user pre-selects an arbiter, validate it\n        if (preferredArbiter != address(0)) {\n            require(\n                _isActiveArbiter(preferredArbiter),\n                \"Preferred arbiter is not active\"\n            );\n            assignedArbiter = preferredArbiter;\n        }\n        // If address(0), arbiter will be randomly assigned during dispute\n        \n        // ============ USD Amount Validation ============\n        \n        uint256 creationPriceUSD = 0;\n        \n        // Check if token is a stablecoin (registered in our system)\n        StablecoinInfo memory stablecoin = stablecoins[token];\n        \n        if (stablecoin.isActive) {\n            // ===== Stablecoin (USDT/USDC/DAI): Simple validation =====\n            // Already validated in createDealERC20 (early check)\n            // Just confirm minimum deal amount using dynamic decimals\n            \n            uint256 dealAmountUSD;\n            if (stablecoin.decimals <= 8) {\n                dealAmountUSD = amount * (10 ** (8 - stablecoin.decimals));\n            } else {\n                dealAmountUSD = amount / (10 ** (stablecoin.decimals - 8));\n            }\n            require(dealAmountUSD >= MIN_DEAL_AMOUNT_USD, \"Deal amount below $20 minimum\");\n            \n            // Fee will be enforced in _releaseFunds: max(amount * 2%, $10)\n            // No rejection here - always accept if >= $20\n            \n            // creationPriceUSD = 0 for stablecoins\n            \n        } else {\n            // ===== ETH: Query price ONCE and save (with 10-min cache) =====\n            // Get ETH price and update cache if needed\n            // If cache valid (<10 min): returns cached price (cheap)\n            // If cache expired: queries Chainlink and updates cache (expensive, but helps next user)\n            creationPriceUSD = _getEthPriceUSD();\n            require(creationPriceUSD > 0, \"Invalid price\");\n            \n            // Calculate USD values using this single price query\n            uint256 dealAmountUSD = (amount * creationPriceUSD) / 1e18;\n            \n            // Check minimum deal amount ($20 USD)\n            require(dealAmountUSD >= MIN_DEAL_AMOUNT_USD, \"Deal amount below $20 minimum\");\n            \n        }\n        \n        // ============ End USD Validation ============\n        \n        // Get fee rates\n        uint16 platformFeeBps = _getPlatformFeeBps(amount);\n        \n        // Get arbiter fee rate: use assigned arbiter's rate if pre-selected, otherwise default\n        uint16 arbiterFeeBps;\n        if (assignedArbiter != address(0)) {\n            arbiterFeeBps = arbiters[assignedArbiter].arbiterFeeBps;\n        } else {\n            arbiterFeeBps = defaultArbiterFeeBps;\n        }\n        \n        // Calculate deadlines\n        uint64 now64 = uint64(block.timestamp);\n        uint64 acceptDeadline = now64 + acceptWindow;\n        uint64 submitDeadline = acceptDeadline + submitWindow;\n        uint64 confirmDeadline = submitDeadline + confirmWindow;\n        \n        _deals[dealId] = Deal({\n            buyer: buyer,\n            seller: seller,\n            token: token,\n            amount: amount,\n            creationPriceUSD: creationPriceUSD,\n            platformFeeBps: platformFeeBps,\n            arbiterFeeBps: arbiterFeeBps,\n            termsHash: termsHash,\n            deliveryHash: bytes32(0),\n            acceptDeadline: acceptDeadline,\n            submitDeadline: submitDeadline,\n            confirmDeadline: confirmDeadline,\n            acceptWindow: acceptWindow,\n            submitWindow: submitWindow,\n            confirmWindow: confirmWindow,\n            createdAt: now64,\n            submittedAt: 0,\n            arbiter: assignedArbiter,\n            status: DealStatus.Created,\n            refundRequested: false\n        });\n    }\n    \n    // ============ Deal Workflow ============\n    \n    /**\n     * @notice Seller accepts the deal\n     * @param dealId Deal identifier\n     */\n    function acceptDeal(uint256 dealId) external override nonReentrant whenNotPaused {\n        Deal storage deal = _deals[dealId];\n        \n        // Validations\n        DealValidation.requireStatus(deal.status, DealStatus.Created);\n        DealValidation.requireAuthorized(deal, msg.sender, false);\n        DealValidation.requireDeadlineNotPassed(deal.acceptDeadline);\n        \n        // Update status\n        deal.status = DealStatus.Accepted;\n        \n        emit DealAccepted(dealId, msg.sender, deal.submitDeadline);\n    }\n    \n    /**\n     * @notice Seller submits work\n     * @param dealId Deal identifier\n     * @param deliveryHash IPFS hash of delivery proof\n     */\n    function submitWork(uint256 dealId, bytes32 deliveryHash) \n        external \n        override \n        nonReentrant \n        whenNotPaused \n    {\n        Deal storage deal = _deals[dealId];\n        \n        // Validations\n        DealValidation.requireStatus(deal.status, DealStatus.Accepted);\n        DealValidation.requireAuthorized(deal, msg.sender, false);\n        DealValidation.requireDeadlineNotPassed(deal.submitDeadline);\n        \n        if (deliveryHash == bytes32(0)) revert DealValidation.InvalidTermsHash();\n        \n        // Update deal\n        deal.deliveryHash = deliveryHash;\n        deal.submittedAt = uint64(block.timestamp);\n        deal.status = DealStatus.Submitted;\n        \n        // Recalculate confirmDeadline based on actual submission time\n        // This gives buyer full confirmWindow starting from NOW\n        deal.confirmDeadline = uint64(block.timestamp) + deal.confirmWindow;\n        \n        emit WorkSubmitted(dealId, deliveryHash, deal.confirmDeadline);\n    }\n    \n    /**\n     * @notice Buyer approves and releases payment\n     * @param dealId Deal identifier\n     */\n    function approveDeal(uint256 dealId) external override nonReentrant whenNotPaused {\n        Deal storage deal = _deals[dealId];\n        \n        // Validations\n        DealValidation.requireStatus(deal.status, DealStatus.Submitted);\n        DealValidation.requireAuthorized(deal, msg.sender, true);\n        DealValidation.requireDeadlineNotPassed(deal.confirmDeadline);\n        \n        // Mark as approved\n        deal.status = DealStatus.Approved;\n        \n        // Release funds\n        _releaseFunds(dealId, deal.seller, 100, 0);\n        \n        emit DealApproved(dealId, deal.seller, deal.amount);\n        \n        // Clean up storage\n        _closeDeal(dealId);\n    }\n    \n    /**\n     * @notice Raises a dispute\n     * @param dealId Deal identifier\n     * @param evidenceHash IPFS hash of evidence\n     * @dev Requires 24-hour cooldown after work submission to prevent malicious disputes\n     */\n    function raiseDispute(uint256 dealId, bytes32 evidenceHash) \n        external \n        override \n        nonReentrant \n        whenNotPaused \n    {\n        Deal storage deal = _deals[dealId];\n        \n        // Can dispute in Accepted or Submitted states\n        if (deal.status != DealStatus.Accepted && deal.status != DealStatus.Submitted) {\n            revert DealValidation.InvalidStatus(deal.status, DealStatus.Submitted);\n        }\n        \n        // Only buyer or seller can raise dispute\n        if (msg.sender != deal.buyer && msg.sender != deal.seller) {\n            revert DealValidation.Unauthorized();\n        }\n        \n        // Enforce dynamic cooldown period after work submission\n        if (deal.status == DealStatus.Submitted && deal.submittedAt > 0) {\n            // Calculate cooldown based on total confirm time (fixed at submission)\n            // cooldown = min(24h, confirmWindow / 2)\n            uint64 totalConfirmTime = deal.confirmDeadline - deal.submittedAt;\n            uint64 cooldownPeriod = totalConfirmTime < (MAX_DISPUTE_COOLDOWN * 2) \n                ? totalConfirmTime / 2 \n                : MAX_DISPUTE_COOLDOWN;\n            \n            uint64 timeSinceSubmission = uint64(block.timestamp) - deal.submittedAt;\n            if (timeSinceSubmission < cooldownPeriod) {\n                uint64 remainingTime = cooldownPeriod - timeSinceSubmission;\n                revert DisputeCooldownActive(remainingTime);\n            }\n        }\n        \n        // Select arbiter: use preferred arbiter if set, otherwise random\n        address arbiter;\n        if (deal.arbiter != address(0)) {\n            // User pre-selected arbiter during deal creation\n            arbiter = deal.arbiter;\n            // Verify arbiter is still active\n            require(_isActiveArbiter(arbiter), \"Pre-selected arbiter is no longer active\");\n        } else {\n            // No preferred arbiter, select randomly\n            arbiter = _selectRandomArbiter();\n            deal.arbiter = arbiter;\n            // Update arbiter fee to match selected arbiter's rate\n            deal.arbiterFeeBps = arbiters[arbiter].arbiterFeeBps;\n        }\n        \n        deal.status = DealStatus.Disputed;\n        \n        // Register dispute (update arbiter stats)\n        _registerDispute(dealId, msg.sender, arbiter);\n        \n        emit DisputeRaised(dealId, msg.sender, evidenceHash);\n    }\n    \n    /**\n     * @notice Resolves a dispute (arbiter only)\n     * @param dealId Deal identifier\n     * @param buyerRatio Buyer's share (0-100)\n     * @param sellerRatio Seller's share (0-100)\n     * @param evidenceHash Resolution evidence hash\n     */\n    function resolveDispute(\n        uint256 dealId,\n        uint8 buyerRatio,\n        uint8 sellerRatio,\n        bytes32 evidenceHash\n    ) external override nonReentrant whenNotPaused {\n        Deal storage deal = _deals[dealId];\n        \n        // Validations\n        DealValidation.requireStatus(deal.status, DealStatus.Disputed);\n        DealValidation.validateResolutionRatio(buyerRatio, sellerRatio);\n        \n        // Check if sender is authorized to resolve dispute\n        bool isAssignedArbiter = (msg.sender == deal.arbiter);\n        bool isOperator = hasRole(OPERATOR_ROLE, msg.sender);\n        \n        if (!isAssignedArbiter && !isOperator) {\n            revert DealValidation.Unauthorized();\n        }\n        \n        // If arbiter is resolving, verify they are still active\n        // This prevents deactivated arbiters from resolving disputes\n        // Operators can always resolve (emergency override)\n        if (isAssignedArbiter && !isOperator) {\n            require(\n                _isActiveArbiter(msg.sender),\n                \"Arbiter has been deactivated\"\n            );\n        }\n        \n        // Mark as resolved\n        deal.status = DealStatus.Resolved;\n        \n        // Record resolution\n        _resolutions[dealId] = DisputeResolution({\n            arbiter: msg.sender,\n            buyerRatio: buyerRatio,\n            sellerRatio: sellerRatio,\n            evidenceHash: evidenceHash,\n            resolvedAt: uint64(block.timestamp),\n            arbiterFee: (deal.amount * deal.arbiterFeeBps) / 10000\n        });\n        \n        // Release funds according to ratio\n        _releaseFunds(dealId, address(0), buyerRatio, sellerRatio);\n        \n        // Update arbiter statistics\n        _resolveDisputeRecord(msg.sender);\n        \n        emit DisputeResolved(dealId, msg.sender, buyerRatio, sellerRatio, evidenceHash);\n        \n        // Clean up\n        _closeDeal(dealId);\n    }\n    \n    /**\n     * @notice Auto-cancel if seller doesn't accept in time\n     * @param dealId Deal identifier\n     * @dev Anyone can trigger after acceptDeadline\n     */\n    function autoCancel(uint256 dealId) external override nonReentrant whenNotPaused {\n        Deal storage deal = _deals[dealId];\n        \n        // Must be in Created status\n        DealValidation.requireStatus(deal.status, DealStatus.Created);\n        \n        // Accept deadline must have passed\n        DealValidation.requireDeadlinePassed(deal.acceptDeadline);\n        \n        // Update status\n        deal.status = DealStatus.Cancelled;\n        \n        // Refund buyer (full amount, no fees)\n        _transferFunds(deal.token, deal.buyer, deal.amount);\n        \n        emit DealFinalized(\n            dealId, \n            deal.buyer, \n            msg.sender, \n            deal.amount, \n            DealStatus.Cancelled,\n            PLATFORM_MESSAGE,\n            \"Accept timeout - seller did not respond\"\n        );\n        \n        // Clean up storage\n        _closeDeal(dealId);\n    }\n    \n    /**\n     * @notice Cancel deal if seller accepted but didn't submit work\n     * @param dealId Deal identifier\n     * @dev Only buyer can trigger after submitDeadline\n     */\n    function cancelDeal(uint256 dealId) external override nonReentrant whenNotPaused {\n        Deal storage deal = _deals[dealId];\n        \n        // Must be in Accepted status\n        DealValidation.requireStatus(deal.status, DealStatus.Accepted);\n        \n        // Only buyer can cancel\n        DealValidation.requireAuthorized(deal, msg.sender, true);\n        \n        // Submit deadline must have passed\n        DealValidation.requireDeadlinePassed(deal.submitDeadline);\n        \n        deal.status = DealStatus.Cancelled;\n        \n        // Refund buyer\n        _transferFunds(deal.token, deal.buyer, deal.amount);\n        \n        emit DealFinalized(\n            dealId, \n            deal.buyer, \n            msg.sender, \n            deal.amount, \n            DealStatus.Cancelled,\n            PLATFORM_MESSAGE,\n            \"Submit timeout - seller did not deliver\"\n        );\n        \n        _closeDeal(dealId);\n    }\n    \n    /**\n     * @notice Auto-refund (buyer can trigger after submit deadline)\n     * @param dealId Deal identifier\n     * @dev Removed whenNotPaused to allow fund release during pause\n     */\n    function autoRefund(uint256 dealId) external override nonReentrant {\n        Deal storage deal = _deals[dealId];\n        \n        DealValidation.requireStatus(deal.status, DealStatus.Accepted);\n        DealValidation.requireAuthorized(deal, msg.sender, true);\n        DealValidation.requireDeadlinePassed(deal.submitDeadline);\n        \n        deal.status = DealStatus.Cancelled;\n        \n        // Refund buyer\n        _transferFunds(deal.token, deal.buyer, deal.amount);\n        \n        emit DealFinalized(\n            dealId, \n            deal.buyer, \n            msg.sender, \n            deal.amount, \n            DealStatus.Cancelled,\n            PLATFORM_MESSAGE,\n            \"Auto-refund - submit timeout\"\n        );\n        \n        _closeDeal(dealId);\n    }\n    \n    /**\n     * @notice Buyer requests mutual refund (e.g., seller can't fulfill)\n     * @param dealId Deal identifier\n     * @dev Seller can approve with approveRefund()\n     */\n    function requestRefund(uint256 dealId) external override nonReentrant whenNotPaused {\n        Deal storage deal = _deals[dealId];\n        \n        // Can request refund in Accepted or Submitted states\n        if (deal.status != DealStatus.Accepted && deal.status != DealStatus.Submitted) {\n            revert DealValidation.InvalidStatus(deal.status, DealStatus.Accepted);\n        }\n        \n        // Only buyer can request refund\n        DealValidation.requireAuthorized(deal, msg.sender, true);\n        \n        // Mark as refund requested\n        deal.refundRequested = true;\n        \n        emit RefundRequested(dealId, msg.sender);\n    }\n    \n    /**\n     * @notice Seller approves buyer's refund request\n     * @param dealId Deal identifier\n     * @dev Triggers full refund to buyer (no fees)\n     */\n    function approveRefund(uint256 dealId) external override nonReentrant whenNotPaused {\n        Deal storage deal = _deals[dealId];\n        \n        // Must have refund request pending\n        require(deal.refundRequested, \"No refund request\");\n        \n        // Can approve refund in Accepted or Submitted states\n        if (deal.status != DealStatus.Accepted && deal.status != DealStatus.Submitted) {\n            revert DealValidation.InvalidStatus(deal.status, DealStatus.Accepted);\n        }\n        \n        // Only seller can approve\n        DealValidation.requireAuthorized(deal, msg.sender, false);\n        \n        // Update status\n        deal.status = DealStatus.Cancelled;\n        \n        // Full refund to buyer (no fees - mutual agreement)\n        _transferFunds(deal.token, deal.buyer, deal.amount);\n        \n        emit DealFinalized(\n            dealId, \n            deal.buyer, \n            msg.sender, \n            deal.amount, \n            DealStatus.Cancelled,\n            PLATFORM_MESSAGE,\n            \"Mutual agreement - seller approved refund\"\n        );\n        \n        _closeDeal(dealId);\n    }\n    \n    /**\n     * @notice Emergency fund release during contract pause\n     * @param dealId Deal identifier\n     * @dev Only admin can trigger, refunds to buyer as safest option\n     */\n    function emergencyRelease(uint256 dealId) \n        external \n        override\n        nonReentrant \n        whenPaused \n        onlyRole(DEFAULT_ADMIN_ROLE) \n    {\n        Deal storage deal = _deals[dealId];\n        \n        // Can only release if not already finalized\n        require(\n            deal.status != DealStatus.Closed && \n            deal.status != DealStatus.Approved,\n            \"Already finalized\"\n        );\n        \n        deal.status = DealStatus.Cancelled;\n        \n        // Emergency refund to buyer (safest option during emergency)\n        _transferFunds(deal.token, deal.buyer, deal.amount);\n        \n        emit DealFinalized(\n            dealId, \n            deal.buyer, \n            msg.sender, \n            deal.amount, \n            DealStatus.Cancelled,\n            PLATFORM_MESSAGE,\n            \"Emergency release during pause\"\n        );\n        \n        _closeDeal(dealId);\n    }\n    \n    /**\n     * @notice Auto-release (anyone can trigger after confirm deadline)\n     * @param dealId Deal identifier\n     * @dev Removed whenNotPaused to allow fund release during pause\n     */\n    function autoRelease(uint256 dealId) external override nonReentrant {\n        Deal storage deal = _deals[dealId];\n        \n        if (!DealValidation.canAutoRelease(deal)) {\n            revert DealValidation.DeadlineNotReached();\n        }\n        \n        deal.status = DealStatus.Approved;\n        \n        // Release to seller\n        _releaseFunds(dealId, deal.seller, 100, 0);\n        \n        emit DealFinalized(\n            dealId,\n            deal.seller,\n            msg.sender,\n            deal.amount,\n            DealStatus.Closed,\n            PLATFORM_MESSAGE,\n            \"Auto-release - buyer did not respond in time\"\n        );\n        \n        _closeDeal(dealId);\n    }\n    \n    // ============ Internal Functions ============\n    \n    /**\n     * @notice Releases funds with fee distribution\n     * @param dealId Deal identifier\n     * @param primaryRecipient Primary recipient (if ratio is 100/0)\n     * @param buyerRatio Buyer's share (0-100)\n     * @param sellerRatio Seller's share (0-100)\n     */\n    function _releaseFunds(\n        uint256 dealId,\n        address primaryRecipient,\n        uint8 buyerRatio,\n        uint8 sellerRatio\n    ) internal {\n        Deal storage deal = _deals[dealId];\n        \n        // Calculate platform fee (percentage)\n        uint256 platformFee = _calculatePlatformFee(deal.amount);\n        \n        // Enforce minimum fee ($10 USD)\n        if (deal.creationPriceUSD > 0) {\n            // ===== ETH: Use creation time price =====\n            // Calculate fee USD value using CREATION time price\n            uint256 feeUSD = (platformFee * deal.creationPriceUSD) / 1e18;\n            \n            // If fee < $10, adjust to minimum\n            if (feeUSD < MIN_FEE_USD) {\n                // Calculate minimum fee in ETH: ($10 * 1e18) / price\n                platformFee = (MIN_FEE_USD * 1e18) / deal.creationPriceUSD;\n            }\n            \n        } else {\n            // ===== Stablecoin: 1:1 USD =====\n            // Get stablecoin decimals for dynamic conversion\n            StablecoinInfo memory stablecoin = stablecoins[deal.token];\n            \n            // Convert fee to USD (token decimals \u2192 8 decimals)\n            uint256 feeUSD;\n            if (stablecoin.decimals <= 8) {\n                feeUSD = platformFee * (10 ** (8 - stablecoin.decimals));\n            } else {\n                feeUSD = platformFee / (10 ** (stablecoin.decimals - 8));\n            }\n            \n            // If fee < $10, adjust to minimum\n            if (feeUSD < MIN_FEE_USD) {\n                // Convert $10 (8 decimals) to token decimals\n                if (stablecoin.decimals <= 8) {\n                    platformFee = MIN_FEE_USD / (10 ** (8 - stablecoin.decimals));\n                } else {\n                    platformFee = MIN_FEE_USD * (10 ** (stablecoin.decimals - 8));\n                }\n            }\n        }\n        \n        uint256 arbiterFee = 0;\n        \n        // Charge arbiter fee only if disputed\n        if (deal.status == DealStatus.Resolved) {\n            // Use the arbiter's individual fee rate stored in the deal\n            arbiterFee = (deal.amount * deal.arbiterFeeBps) / 10000;\n        }\n        \n        uint256 netAmount = deal.amount - platformFee - arbiterFee;\n        \n        // Accumulate platform fee in contract (gas optimization)\n        accumulatedFees[deal.token] += platformFee;\n        \n        // Send arbiter fee if applicable\n        if (arbiterFee > 0 && deal.arbiter != address(0)) {\n            _transferFunds(deal.token, deal.arbiter, arbiterFee);\n        }\n        \n        // Distribute net amount\n        if (buyerRatio == 100) {\n            // Full refund to buyer or single recipient\n            address recipient = primaryRecipient != address(0) ? primaryRecipient : deal.buyer;\n            _transferFunds(deal.token, recipient, netAmount);\n        } else if (sellerRatio == 100) {\n            // Full payment to seller\n            _transferFunds(deal.token, deal.seller, netAmount);\n        } else {\n            // Split according to ratio\n            uint256 buyerAmount = (netAmount * buyerRatio) / 100;\n            uint256 sellerAmount = netAmount - buyerAmount;\n            \n            if (buyerAmount > 0) {\n                _transferFunds(deal.token, deal.buyer, buyerAmount);\n            }\n            \n            if (sellerAmount > 0) {\n                _transferFunds(deal.token, deal.seller, sellerAmount);\n            }\n        }\n    }\n    \n    /**\n     * @notice Transfers funds (ETH or ERC20)\n     * @param token Token address (address(0) for ETH)\n     * @param to Recipient address\n     * @param amount Amount to transfer\n     */\n    function _transferFunds(address token, address to, uint256 amount) internal {\n        if (amount == 0) return;\n        \n        if (token == address(0)) {\n            // Transfer ETH\n            (bool success, ) = to.call{value: amount}(\"\");\n            require(success, \"ETH transfer failed\");\n        } else {\n            // Transfer ERC20\n            IERC20(token).safeTransfer(to, amount);\n        }\n    }\n    \n    /**\n     * @notice Closes a deal and releases storage\n     * @param dealId Deal identifier\n     * @dev Deletes storage to get gas refund and prevent state bloat\n     * @dev All events are preserved on-chain for audit trail\n     */\n    function _closeDeal(uint256 dealId) internal {        \n        // Release storage to get gas refund (~15,000 gas)\n        delete _deals[dealId];\n        delete _resolutions[dealId];\n        \n        // Note: Events are preserved on-chain for historical audit\n        // Storage cleanup doesn't affect event-based data retrieval\n    }\n    \n    // ============ Admin Functions ============\n    \n    /**\n     * @notice Adds a stablecoin to the supported list\n     * @param token Stablecoin address (USDT, USDC, DAI, etc.)\n     * @param decimals Token decimals (6 for USDT/USDC, 18 for DAI)\n     * @dev Only admin can add stablecoins. Each stablecoin is assumed to be 1:1 USD pegged\n     */\n    function addStablecoin(address token, uint8 decimals) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(token != address(0), \"Invalid token address\");\n        require(decimals > 0 && decimals <= 18, \"Invalid decimals\");\n        require(!stablecoins[token].isActive, \"Stablecoin already exists\");\n        \n        stablecoins[token] = StablecoinInfo({\n            isActive: true,\n            decimals: decimals\n        });\n        \n        stablecoinList.push(token);\n    }\n    \n    /**\n     * @notice Removes a stablecoin from the supported list\n     * @param token Stablecoin address to remove\n     * @dev Only admin can remove. This will prevent new deals but won't affect existing ones\n     */\n    function removeStablecoin(address token) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(stablecoins[token].isActive, \"Stablecoin not found\");\n        \n        stablecoins[token].isActive = false;\n        \n        // Remove from array\n        for (uint256 i = 0; i < stablecoinList.length; i++) {\n            if (stablecoinList[i] == token) {\n                stablecoinList[i] = stablecoinList[stablecoinList.length - 1];\n                stablecoinList.pop();\n                break;\n            }\n        }\n    }\n    \n    /**\n     * @notice Updates a stablecoin's decimals (in case of error correction)\n     * @param token Stablecoin address\n     * @param decimals New decimals value\n     */\n    function updateStablecoinDecimals(address token, uint8 decimals) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(stablecoins[token].isActive, \"Stablecoin not found\");\n        require(decimals > 0 && decimals <= 18, \"Invalid decimals\");\n        \n        stablecoins[token].decimals = decimals;\n    }\n    \n    // ============ Fee Management (Admin) ============\n    \n    /**\n     * @notice Update default platform fee rate\n     */\n    function updatePlatformFee(uint16 newFeeBps) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (newFeeBps > MAX_FEE_BPS) revert InvalidFee();\n        defaultPlatformFeeBps = newFeeBps;\n    }\n    \n    /**\n     * @notice Update default arbiter fee rate\n     * @dev This is the default rate for new arbiters and non-pre-selected arbiters\n     */\n    function updateDefaultArbiterFee(uint16 newFeeBps) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (newFeeBps > MAX_FEE_BPS) revert InvalidFee();\n        defaultArbiterFeeBps = newFeeBps;\n    }\n    \n    // ============ Arbitration Management (Admin) ============\n    \n    /**\n     * @notice Register a new arbiter\n     */\n    function registerArbiter(address arbiter) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _registerArbiterInternal(arbiter);\n    }\n    \n    /**\n     * @notice Deactivate an arbiter\n     */\n    function deactivateArbiter(address arbiter) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (arbiters[arbiter].registeredAt == 0) revert ArbiterNotFound();\n        arbiters[arbiter].isActive = false;\n        _revokeRole(ARBITER_ROLE, arbiter);\n    }\n    \n    /**\n     * @notice Activate an arbiter\n     */\n    function activateArbiter(address arbiter) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (arbiters[arbiter].registeredAt == 0) revert ArbiterNotFound();\n        arbiters[arbiter].isActive = true;\n        _grantRole(ARBITER_ROLE, arbiter);\n    }\n    \n    /**\n     * @notice Remove arbiter from registry\n     */\n    function removeArbiter(address arbiter) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (arbiters[arbiter].registeredAt == 0) revert ArbiterNotFound();\n        require(\n            arbiters[arbiter].totalCases == arbiters[arbiter].resolvedCases,\n            \"Arbiter has pending cases\"\n        );\n        \n        // Remove from array\n        for (uint256 i = 0; i < arbiterList.length; i++) {\n            if (arbiterList[i] == arbiter) {\n                arbiterList[i] = arbiterList[arbiterList.length - 1];\n                arbiterList.pop();\n                break;\n            }\n        }\n        \n        _revokeRole(ARBITER_ROLE, arbiter);\n        delete arbiters[arbiter];\n        emit ArbiterRemoved(arbiter);\n    }\n    \n    /**\n     * @notice Update individual arbiter's fee rate\n     * @param arbiter Arbiter address\n     * @param feeBps New fee rate in basis points (e.g., 100 = 1%, 150 = 1.5%)\n     * @dev Allows admin to incentivize good arbiters or penalize poor ones\n     */\n    function updateArbiterFee(address arbiter, uint16 feeBps) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (arbiters[arbiter].registeredAt == 0) revert ArbiterNotFound();\n        if (feeBps > MAX_FEE_BPS) revert InvalidFee();\n        \n        arbiters[arbiter].arbiterFeeBps = feeBps;\n    }\n    \n    /**\n     * @notice Get all arbiters\n     */\n    function getAllArbiters() external view returns (address[] memory) {\n        return arbiterList;\n    }\n    \n    /**\n     * @notice Check if arbiter is active\n     */\n    function isActiveArbiter(address arbiter) external view returns (bool) {\n        return _isActiveArbiter(arbiter);\n    }\n    \n    /**\n     * @notice Get arbiter information\n     */\n    function getArbiterInfo(address arbiter) external view returns (ArbiterInfo memory) {\n        return arbiters[arbiter];\n    }\n    \n    // ============ Treasury Management (Admin) ============\n    \n    /**\n     * @notice Update withdrawal address\n     */\n    function updateWithdrawalAddress(address newAddress) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(newAddress != address(0), \"Invalid address\");\n        withdrawalAddress = newAddress;\n    }\n    \n    // ============ Price Oracle Management (Admin) ============\n    \n    /**\n     * @notice Update Chainlink price feed\n     */\n    function updatePriceFeed(address newFeed) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(newFeed != address(0), \"Invalid address\");\n        ethUsdPriceFeed = AggregatorV3Interface(newFeed);\n    }\n    \n    /**\n     * @notice Manually set cached price (for testnet/emergencies)\n     */\n    function setManualPrice(uint256 price) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (price == 0) revert InvalidPrice();\n        cachedEthPrice = price;\n        priceCacheTime = block.timestamp;\n    }\n    \n    /**\n     * @notice Get current cached price\n     */\n    function getCachedPrice() external view returns (uint256 price, uint256 timestamp) {\n        return (cachedEthPrice, priceCacheTime);\n    }\n    \n    // ============ Emergency Controls ============\n    \n    /**\n     * @notice Pauses the contract\n     */\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _pause();\n    }\n    \n    /**\n     * @notice Unpauses the contract\n     */\n    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _unpause();\n    }\n    \n    // ============ View Functions ============\n    \n    /**\n     * @notice Gets deal information\n     * @param dealId Deal identifier\n     * @return Deal struct\n     */\n    function getDeal(uint256 dealId) external view override returns (Deal memory) {\n        return _deals[dealId];\n    }\n    \n    /**\n     * @notice Gets dispute resolution information\n     * @param dealId Deal identifier\n     * @return DisputeResolution struct\n     */\n    function getDisputeResolution(uint256 dealId) \n        external \n        view \n        override \n        returns (DisputeResolution memory) \n    {\n        return _resolutions[dealId];\n    }\n    \n    /**\n     * @notice Gets the highest deal ID ever created\n     * @return Last deal ID (continuously incrementing, never decreases)\n     * @dev This is the max dealId, not active deal count\n     * @dev Deal IDs increment forever: 1, 2, 3, ... even if some deals are closed\n     * @dev For backend: Use this as unique identifier sequence\n     */\n    function dealCount() external view override returns (uint256) {\n        return _dealIdCounter - 1;\n    }\n    \n    /**\n     * @notice Checks if token is supported\n     * @param token Token address (address(0) for ETH)\n     * @return True if supported\n     * @dev ETH is always supported. ERC20 tokens must be registered stablecoins\n     */\n    function isTokenWhitelisted(address token) external view override returns (bool) {\n        if (token == address(0)) {\n            return true; // ETH is always supported\n        }\n        return stablecoins[token].isActive;\n    }\n    \n    /**\n     * @notice Gets all supported stablecoins\n     * @return Array of stablecoin addresses\n     */\n    function getSupportedStablecoins() external view returns (address[] memory) {\n        return stablecoinList;\n    }\n    \n    /**\n     * @notice Gets stablecoin info\n     * @param token Stablecoin address\n     * @return info Stablecoin configuration\n     */\n    function getStablecoinInfo(address token) external view returns (StablecoinInfo memory info) {\n        return stablecoins[token];\n    }\n    \n    /**\n     * @notice Gets contract version\n     * @return Version string\n     */\n    function version() external pure returns (string memory) {\n        return \"1.0.3\";\n    }\n    \n    // ============ Fee Management ============\n    \n    /**\n     * @notice Withdraws accumulated platform fees\n     * @dev Only admin can withdraw fees\n     * @dev Fees are withdrawn to the treasury contract\n     * @param token Token address (address(0) for ETH)\n     * @param amount Amount to withdraw (0 to withdraw all)\n     */\n    function withdrawFees(address token, uint256 amount) \n        external \n        onlyRole(DEFAULT_ADMIN_ROLE) \n        nonReentrant \n    {\n        uint256 available = accumulatedFees[token];\n        require(available > 0, \"No fees to withdraw\");\n        \n        // If amount is 0, withdraw all\n        uint256 withdrawAmount = amount == 0 ? available : amount;\n        require(withdrawAmount <= available, \"Insufficient fees\");\n        \n        // Update state\n        accumulatedFees[token] -= withdrawAmount;\n        \n        // Transfer to withdrawal address\n        _transferFunds(token, withdrawalAddress, withdrawAmount);\n        \n        emit FeeWithdrawn(token, withdrawalAddress, withdrawAmount);\n    }\n    \n    \n    /**\n     * @notice Gets accumulated platform fees for a token\n     * @param token Token address (address(0) for ETH)\n     * @return Accumulated fee amount\n     */\n    function getAccumulatedFees(address token) external view returns (uint256) {\n        return accumulatedFees[token];\n    }\n    \n    // ============================================================\n    // INTEGRATED INTERNAL FUNCTIONS\n    // ============================================================\n    \n    // -------- Fee Management Functions --------\n    \n    /**\n     * @notice Calculate platform fee for given amount\n     */\n    function _calculatePlatformFee(uint256 amount) internal view returns (uint256) {\n        uint16 feeBps = _getPlatformFeeBps(amount);\n        return (amount * feeBps) / 10000;\n    }\n    \n    /**\n     * @notice Get platform fee rate in basis points\n     */\n    function _getPlatformFeeBps(uint256 /* amount */) internal view returns (uint16) {\n        // Simplified: no tiers, just default rate\n        return defaultPlatformFeeBps;\n    }\n    \n    // -------- Arbitration Functions --------\n    \n    /**\n     * @notice Check if address is active arbiter\n     */\n    function _isActiveArbiter(address arbiter) internal view returns (bool) {\n        return arbiters[arbiter].isActive && arbiters[arbiter].registeredAt != 0;\n    }\n    \n    /**\n     * @notice Internal arbiter registration\n     */\n    function _registerArbiterInternal(address arbiter) internal {\n        if (arbiter == address(0)) revert ArbiterNotFound();\n        if (arbiters[arbiter].registeredAt != 0) revert ArbiterAlreadyExists();\n        \n        arbiters[arbiter] = ArbiterInfo({\n            isActive: true,\n            totalCases: 0,\n            resolvedCases: 0,\n            reputation: 80, // Default reputation\n            arbiterFeeBps: defaultArbiterFeeBps, // Use default fee rate initially\n            registeredAt: uint64(block.timestamp)\n        });\n        \n        arbiterList.push(arbiter);\n        _grantRole(ARBITER_ROLE, arbiter);\n        \n        emit ArbiterRegistered(arbiter, uint64(block.timestamp));\n    }\n    \n    /**\n     * @notice Select random arbiter from active list\n     */\n    function _selectRandomArbiter() internal view returns (address) {\n        uint256 activeCount = 0;\n        for (uint256 i = 0; i < arbiterList.length; i++) {\n            if (arbiters[arbiterList[i]].isActive) {\n                activeCount++;\n            }\n        }\n        \n        require(activeCount > 0, \"No active arbiters\");\n        \n        // Simple pseudo-random selection\n        uint256 randomIndex = uint256(keccak256(abi.encodePacked(\n            block.timestamp,\n            block.prevrandao,\n            msg.sender\n        ))) % activeCount;\n        \n        uint256 currentIndex = 0;\n        for (uint256 i = 0; i < arbiterList.length; i++) {\n            if (arbiters[arbiterList[i]].isActive) {\n                if (currentIndex == randomIndex) {\n                    return arbiterList[i];\n                }\n                currentIndex++;\n            }\n        }\n        \n        revert(\"Arbiter selection failed\");\n    }\n    \n    /**\n     * @notice Register dispute (update arbiter stats)\n     */\n    function _registerDispute(uint256 /* dealId */, address /* initiator */, address arbiter) internal {\n        arbiters[arbiter].totalCases++;\n    }\n    \n    /**\n     * @notice Mark dispute as resolved (update arbiter stats)\n     */\n    function _resolveDisputeRecord(address arbiter) internal {\n        arbiters[arbiter].resolvedCases++;\n    }\n    \n    // -------- Price Oracle Functions --------\n    \n    /**\n     * @notice Get ETH price in USD (8 decimals) with caching\n     */\n    function _getEthPriceUSD() internal returns (uint256) {\n        // Check cache validity (10 minutes)\n        if (priceCacheTime > 0 && block.timestamp - priceCacheTime < PRICE_CACHE_DURATION) {\n            return cachedEthPrice;\n        }\n        \n        // Fetch fresh price from Chainlink\n        uint256 freshPrice = _fetchEthPriceFromChainlink();\n        \n        // Update cache\n        cachedEthPrice = freshPrice;\n        priceCacheTime = block.timestamp;\n        \n        return freshPrice;\n    }\n    \n    /**\n     * @notice Fetch ETH price from Chainlink\n     */\n    function _fetchEthPriceFromChainlink() internal view returns (uint256) {\n        if (address(ethUsdPriceFeed) == address(0)) {\n            // Fallback to manual price if no feed set\n            return cachedEthPrice > 0 ? cachedEthPrice : 2500_0000_0000; // $2500 default\n        }\n        \n        try ethUsdPriceFeed.latestRoundData() returns (\n            uint80 /* roundId */,\n            int256 price,\n            uint256 /* startedAt */,\n            uint256 updatedAt,\n            uint80 /* answeredInRound */\n        ) {\n            require(price > 0, \"Invalid price from feed\");\n            require(updatedAt > 0, \"Price data is stale\");\n            require(block.timestamp - updatedAt < 1 hours, \"Price too old\");\n            \n            // Chainlink returns 8 decimals for ETH/USD\n            return uint256(price);\n        } catch {\n            revert InvalidPrice();\n        }\n    }\n    \n    /**\n     * @notice Convert amount to USD (8 decimals)\n     */\n    function _convertToUSD(uint256 amount, uint8 decimals) internal pure returns (uint256) {\n        if (decimals <= 8) {\n            return amount * (10 ** (8 - decimals));\n        } else {\n            return amount / (10 ** (decimals - 8));\n        }\n    }\n    \n    // ============ Receive ETH ============\n    \n    /**\n     * @notice Rejects direct ETH transfers\n     * @dev Users must use createDealETH() to create deals\n     * @dev Prevents accidental fund loss from direct transfers\n     */\n    receive() external payable {\n        revert(\"Use createDealETH() to create deals\");\n    }\n    \n    /**\n     * @notice Rejects calls to undefined functions\n     * @dev Prevents accidental fund loss\n     */\n    fallback() external payable {\n        revert(\"Function not found. Use createDealETH() for deals\");\n    }\n}\n\n"}, "ybz/libraries/DealValidation.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport \"../interfaces/IYBZCore.sol\";\n\n/**\n * @title DealValidation\n * @notice Library for deal validation and state transition checks\n * @dev Gas-optimized validation logic extracted to library\n */\nlibrary DealValidation {\n    \n    /// @notice Minimum time windows (in seconds)\n    /// @dev Flexible limits to accommodate various industries\n    uint64 public constant MIN_ACCEPT_WINDOW = 1 hours;     // Min: 1 hour (quick response)\n    uint64 public constant MIN_SUBMIT_WINDOW = 1 hours;     // Min: 1 hour (small tasks like translation)\n    uint64 public constant MIN_CONFIRM_WINDOW = 1 hours;    // Min: 1 hour (quick verification)\n    \n    /// @notice Maximum time windows (in seconds)\n    /// @dev Max limits prevent indefinite locks\n    uint64 public constant MAX_ACCEPT_WINDOW = 30 days;     // Max: 30 days\n    uint64 public constant MAX_SUBMIT_WINDOW = 180 days;    // Max: 6 months (supply chain, custom manufacturing)\n    uint64 public constant MAX_CONFIRM_WINDOW = 30 days;    // Max: 30 days\n    \n    /// @notice Minimum deal amount (to prevent spam)\n    uint256 public constant MIN_DEAL_AMOUNT = 0.001 ether;\n    \n    /// @notice Maximum fee in basis points (10%)\n    uint16 public constant MAX_FEE_BPS = 1000;\n    \n    // ============ Errors ============\n    \n    error InvalidAmount();\n    error InvalidAddress();\n    error InvalidTimeWindow();\n    error InvalidTermsHash();\n    error InvalidStatus(IYBZCore.DealStatus current, IYBZCore.DealStatus required);\n    error Unauthorized();\n    error DeadlinePassed();\n    error DeadlineNotReached();\n    error InvalidRatio();\n    \n    // ============ Validation Functions ============\n    \n    /**\n     * @notice Validates deal creation parameters\n     * @param seller Seller address\n     * @param amount Deal amount\n     * @param termsHash Terms hash\n     * @param acceptWindow Accept time window\n     * @param submitWindow Submit time window\n     * @param confirmWindow Confirm time window\n     */\n    function validateCreateDeal(\n        address seller,\n        uint256 amount,\n        bytes32 termsHash,\n        uint64 acceptWindow,\n        uint64 submitWindow,\n        uint64 confirmWindow\n    ) internal pure {\n        if (seller == address(0)) revert InvalidAddress();\n        if (amount < MIN_DEAL_AMOUNT) revert InvalidAmount();\n        if (termsHash == bytes32(0)) revert InvalidTermsHash();\n        \n        if (acceptWindow < MIN_ACCEPT_WINDOW || acceptWindow > MAX_ACCEPT_WINDOW) {\n            revert InvalidTimeWindow();\n        }\n        if (submitWindow < MIN_SUBMIT_WINDOW || submitWindow > MAX_SUBMIT_WINDOW) {\n            revert InvalidTimeWindow();\n        }\n        if (confirmWindow < MIN_CONFIRM_WINDOW || confirmWindow > MAX_CONFIRM_WINDOW) {\n            revert InvalidTimeWindow();\n        }\n    }\n    \n    /**\n     * @notice Validates state transition\n     * @param currentStatus Current deal status\n     * @param requiredStatus Required status for operation\n     */\n    function requireStatus(\n        IYBZCore.DealStatus currentStatus,\n        IYBZCore.DealStatus requiredStatus\n    ) internal pure {\n        if (currentStatus != requiredStatus) {\n            revert InvalidStatus(currentStatus, requiredStatus);\n        }\n    }\n    \n    /**\n     * @notice Checks if caller is authorized for the deal\n     * @param deal Deal struct\n     * @param caller Caller address\n     * @param isBuyerRequired True if buyer authorization required\n     */\n    function requireAuthorized(\n        IYBZCore.Deal memory deal,\n        address caller,\n        bool isBuyerRequired\n    ) internal pure {\n        address authorized = isBuyerRequired ? deal.buyer : deal.seller;\n        if (caller != authorized) revert Unauthorized();\n    }\n    \n    /**\n     * @notice Checks if deadline has passed\n     * @param deadline Deadline timestamp\n     */\n    function requireDeadlinePassed(uint64 deadline) internal view {\n        if (block.timestamp <= deadline) revert DeadlineNotReached();\n    }\n    \n    /**\n     * @notice Checks if deadline has not passed\n     * @param deadline Deadline timestamp\n     */\n    function requireDeadlineNotPassed(uint64 deadline) internal view {\n        if (block.timestamp > deadline) revert DeadlinePassed();\n    }\n    \n    /**\n     * @notice Validates dispute resolution ratios\n     * @param buyerRatio Buyer ratio (0-100)\n     * @param sellerRatio Seller ratio (0-100)\n     */\n    function validateResolutionRatio(\n        uint8 buyerRatio,\n        uint8 sellerRatio\n    ) internal pure {\n        if (buyerRatio + sellerRatio != 100) revert InvalidRatio();\n    }\n    \n    /**\n     * @notice Checks if deal can be auto-cancelled (Created status only)\n     * @param deal Deal struct\n     * @dev Now only for Created status, Accepted uses cancelDeal()\n     */\n    function canAutoCancel(IYBZCore.Deal memory deal) internal view returns (bool) {\n        // Can auto-cancel if Created and accept deadline passed\n        return deal.status == IYBZCore.DealStatus.Created && \n               block.timestamp > deal.acceptDeadline;\n    }\n    \n    /**\n     * @notice Checks if deal can be auto-released\n     * @param deal Deal struct\n     */\n    function canAutoRelease(IYBZCore.Deal memory deal) internal view returns (bool) {\n        return deal.status == IYBZCore.DealStatus.Submitted && \n               block.timestamp > deal.confirmDeadline;\n    }\n}\n\n"}, "ybz/interfaces/IYBZCore.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\n/**\n * @title IYBZCore\n * @notice Interface for YBZ Escrow Core Contract\n * @dev Defines the core escrow functionality and data structures\n */\ninterface IYBZCore {\n    \n    /// @notice Deal lifecycle status\n    enum DealStatus {\n        Created,      // Deal created, waiting for seller acceptance\n        Accepted,     // Seller accepted, waiting for work submission\n        Submitted,    // Work submitted, waiting for buyer confirmation\n        Disputed,     // Dispute raised, waiting for arbitration\n        Approved,     // Deal approved, funds released\n        Cancelled,    // Deal cancelled (timeout or manual cancellation)\n        Resolved,     // Dispute resolved by arbitrator\n        Closed        // Deal completed and storage cleaned\n    }\n    \n    /// @notice Main deal structure\n    struct Deal {\n        address buyer;                  // Buyer address\n        address seller;                 // Seller address\n        address token;                  // Token address (address(0) for ETH)\n        uint256 amount;                 // Total amount locked\n        uint256 creationPriceUSD;       // Token price in USD at creation (8 decimals, for ETH only)\n        uint16 platformFeeBps;          // Platform fee in basis points\n        uint16 arbiterFeeBps;           // Arbiter fee in basis points (only charged if disputed)\n        bytes32 termsHash;              // IPFS hash of deal terms\n        bytes32 deliveryHash;           // IPFS hash of delivery proof\n        uint64 acceptDeadline;          // Deadline for seller to accept\n        uint64 submitDeadline;          // Deadline for seller to submit work\n        uint64 confirmDeadline;         // Deadline for buyer to confirm (recalculated on submission)\n        uint64 acceptWindow;            // Time window for accept (stored for reference)\n        uint64 submitWindow;            // Time window for submit (stored for reference)\n        uint64 confirmWindow;           // Time window for confirm (used to recalculate deadline)\n        uint64 createdAt;               // Creation timestamp\n        uint64 submittedAt;             // Work submission timestamp (0 if not submitted)\n        address arbiter;                // Assigned arbiter address\n        DealStatus status;              // Current deal status\n        bool refundRequested;           // Buyer requested mutual refund\n    }\n    \n    /// @notice Dispute resolution data\n    struct DisputeResolution {\n        address arbiter;                // Arbiter who resolved the dispute\n        uint8 buyerRatio;               // Percentage to buyer (0-100)\n        uint8 sellerRatio;              // Percentage to seller (0-100)\n        bytes32 evidenceHash;           // IPFS hash of arbitration evidence\n        uint64 resolvedAt;              // Resolution timestamp\n        uint256 arbiterFee;             // Fee paid to arbiter\n    }\n    \n    // ============ Events ============\n    \n    event DealCreated(\n        uint256 indexed dealId,\n        address indexed buyer,\n        address indexed seller,\n        address token,\n        uint256 amount,\n        uint256 creationPriceUSD,\n        uint16 platformFeeBps,\n        uint16 arbiterFeeBps,\n        bytes32 termsHash,\n        uint64 acceptWindow,\n        uint64 submitWindow,\n        uint64 confirmWindow,\n        address preferredArbiter,\n        string platform\n    );\n    \n    event DealAccepted(\n        uint256 indexed dealId,\n        address indexed seller,\n        uint64 submitDeadline\n    );\n    \n    event WorkSubmitted(\n        uint256 indexed dealId,\n        bytes32 deliveryHash,\n        uint64 confirmDeadline\n    );\n    \n    event DealApproved(\n        uint256 indexed dealId,\n        address indexed seller,\n        uint256 amount\n    );\n    \n    event DisputeRaised(\n        uint256 indexed dealId,\n        address indexed initiator,\n        bytes32 evidenceHash\n    );\n    \n    event DisputeResolved(\n        uint256 indexed dealId,\n        address indexed arbiter,\n        uint8 buyerRatio,\n        uint8 sellerRatio,\n        bytes32 evidenceHash\n    );\n    \n    event DealCancelled(\n        uint256 indexed dealId,\n        address indexed initiator,\n        string reason\n    );\n    \n    event DealFinalized(\n        uint256 indexed dealId,\n        address indexed recipient,\n        address indexed initiator,\n        uint256 amount,\n        DealStatus finalStatus,\n        string platform,\n        string reason\n    );\n    \n    event RefundRequested(\n        uint256 indexed dealId,\n        address indexed buyer\n    );\n    \n    // ============ Core Functions ============\n    \n    function createDealETH(\n        address seller,\n        bytes32 termsHash,\n        uint64 acceptWindow,\n        uint64 submitWindow,\n        uint64 confirmWindow,\n        address preferredArbiter\n    ) external payable returns (uint256 dealId);\n    \n    function createDealERC20(\n        address seller,\n        address token,\n        uint256 amount,\n        bytes32 termsHash,\n        uint64 acceptWindow,\n        uint64 submitWindow,\n        uint64 confirmWindow,\n        address preferredArbiter\n    ) external returns (uint256 dealId);\n    \n    function acceptDeal(uint256 dealId) external;\n    \n    function submitWork(uint256 dealId, bytes32 deliveryHash) external;\n    \n    function approveDeal(uint256 dealId) external;\n    \n    function raiseDispute(uint256 dealId, bytes32 evidenceHash) external;\n    \n    function resolveDispute(\n        uint256 dealId,\n        uint8 buyerRatio,\n        uint8 sellerRatio,\n        bytes32 evidenceHash\n    ) external;\n    \n    function autoCancel(uint256 dealId) external;\n    \n    function cancelDeal(uint256 dealId) external;\n    \n    function autoRefund(uint256 dealId) external;\n    \n    function requestRefund(uint256 dealId) external;\n    \n    function approveRefund(uint256 dealId) external;\n    \n    function autoRelease(uint256 dealId) external;\n    \n    function emergencyRelease(uint256 dealId) external;\n    \n    // ============ View Functions ============\n    \n    function getDeal(uint256 dealId) external view returns (Deal memory);\n    \n    function getDisputeResolution(uint256 dealId) external view returns (DisputeResolution memory);\n    \n    function dealCount() external view returns (uint256);\n    \n    function isTokenWhitelisted(address token) external view returns (bool);\n}\n\n"}, "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"}, "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"}, "@openzeppelin/contracts/token/ERC20/IERC20.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"}, "@openzeppelin/contracts/utils/Pausable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.30;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"}, "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"}, "@openzeppelin/contracts/access/AccessControl.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.30;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {IERC165, ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"}, "@openzeppelin/contracts/utils/Context.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"}, "@openzeppelin/contracts/interfaces/IERC1363.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"}, "@openzeppelin/contracts/utils/introspection/ERC165.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"}, "@openzeppelin/contracts/access/IAccessControl.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted to signal this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"}, "@openzeppelin/contracts/utils/introspection/IERC165.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"}, "@openzeppelin/contracts/interfaces/IERC165.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"}, "@openzeppelin/contracts/interfaces/IERC20.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"}}}
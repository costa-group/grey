{"language": "Solidity", "sources": {"contracts/SweepersCompetitionVault.sol": {"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.30;\n\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol';\nimport './external/gelato/OpsReady.sol';\nimport './interfaces/IDust.sol';\nimport './interfaces/INFT.sol';\nimport './interfaces/IRandomizer.sol';\n\n\ncontract SweepersCompetitionVault is ReentrancyGuard, Ownable, IERC721Receiver, IERC1155Receiver, OpsReady {\n\n    INFT public SWEEPERS;\n    IDust public DUST;\n    IRandomizer public randomizer;\n    address payable public sweepersTreasury;\n    address payable public legacyTreasury;\n\n    address public admin;\n\n    address payable public Dev;\n    address payable public VRF;\n    uint256 public DevFee = 0.0025 ether;\n    uint256 public VRFCost = .005 ether;\n    uint256 public SettlementCost = .02 ether;\n    uint256 public gasLimit = 60 gwei;\n    uint256 public autoSettleTimer = 3 minutes;\n\n    uint16 public sweepersCut = 8500;\n    uint16 public legacyCut = 500;\n    uint16 public devCut = 1000;        \n\n    // The competition info\n    struct Comp {\n        // The Token ID for the listed NFT\n        uint256 tokenId;\n        // The Contract Address for the listed NFT\n        address contractAddress;\n        // The NFT Contract Type\n        bool is1155;\n        // The time that the competition started\n        uint32 startTime;\n        // The time that the competition is scheduled to end\n        uint32 endTime;\n        // The entry prices for the competition\n        uint256 entryPriceDust;\n        uint256 entryPriceETH;\n        // The tx cost to buy an entry in eth\n        uint256 entryCost;\n        // The total entries allowed for a competition\n        uint16 entryCap;\n        // The entry limit per wallet \n        uint16 entryLimit;\n        // The number of entries received\n        uint16 numberEntries;\n        // The statuses of the competition\n        bool blind;\n        bool settled;\n        bool failed;\n        string hiddenImage;\n        string openseaSlug;\n    }\n    mapping(uint32 => Comp) public compId;\n    uint32 private currentCompId = 0;\n    uint32 private currentEntryId = 0;\n    uint32 public activeCompCount;\n    mapping(uint32 => uint256) public ethCollected;\n\n    struct Entries {\n        address entrant;\n        uint32 compId;\n        bool useETH;\n        bool winner;\n    }\n    mapping(uint32 => Entries) public entryId;\n    mapping(uint32 => uint32[]) public compEntries;\n    mapping(uint32 => mapping(address => uint32[])) public userEntries;\n    mapping(uint32 => bool) public winnerRequested;\n    mapping(uint32 => uint256) public winnerRequestedTime;\n    mapping(uint32 => address) public compWinner;\n    bool public mustHold;\n\n    modifier holdsSweeper() {\n        require(!mustHold || SWEEPERS.balanceOf(msg.sender) > 0, \"Must hold a Sweeper\");\n        _;\n    }\n\n    modifier onlySweepersTreasury() {\n        require(msg.sender == sweepersTreasury || msg.sender == owner() || msg.sender == admin, \"Sender not allowed\");\n        _;\n    }\n\n    modifier onlyRandomizer() {\n        require(msg.sender == address(randomizer), \"Sender not allowed\");\n        _;\n    }\n\n    event CompCreated(uint32 indexed CompId, uint32 startTime, uint32 endTime, address indexed NFTContract, uint256 indexed TokenId, uint32 entryLimit, uint32 entryCap, uint256 entryPriceDust, uint256 entryPriceETH, bool BlindComp);\n    event CompSettled(uint32 indexed CompId, address indexed NFTProjectAddress, uint256 tokenID, address winner, uint32 winningEntryID, bool withETH);\n    event CompFailed(uint32 indexed CompId, address indexed NFTProjectAddress, uint256 tokenID);\n    event CompCanceled(uint32 indexed CompId, address indexed NFTProjectAddress, uint256 tokenID);\n    event EntryReceived(uint32 indexed EntryIds, uint32 indexed CompId, address sender, uint256 entryPrice, bool withETH);\n    event Received(address indexed From, uint256 Amount);\n\n    constructor(\n        address _sweepers,\n        address _dust,\n        address payable _ops,\n        IRandomizer _randomizer,\n        address payable _vrf,\n        address payable _legacy\n    ) OpsReady(_ops) {\n        DUST = IDust(_dust);\n        SWEEPERS = INFT(_sweepers);\n        Dev = payable(msg.sender);\n        randomizer = _randomizer;\n        VRF = _vrf;\n        legacyTreasury = _legacy;\n    }\n\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n        return IERC721Receiver.onERC721Received.selector;\n    }\n\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n        return IERC1155Receiver.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] calldata,\n        uint256[] calldata,\n        bytes calldata\n    ) external pure returns (bytes4) {\n        return IERC1155Receiver.onERC1155BatchReceived.selector;\n    }\n\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool) {\n        return interfaceID == this.supportsInterface.selector;\n    }\n\n    function setSweepers(address _sweepers) external onlyOwner {\n        SWEEPERS = INFT(_sweepers);\n    }\n\n    function setDust(address _dust) external onlyOwner {\n        DUST = IDust(_dust);\n    }\n\n    function setDev(address _dev, uint256 _devFee) external onlyOwner {\n        Dev = payable(_dev);\n        DevFee = _devFee;\n    }\n\n    function setDistribution(uint16 _sweepersCut, uint16 _legacyCut, uint16 _devCut) external onlyOwner {\n        require(_sweepersCut + _legacyCut + _devCut == 10000, \"Sets must equal 10,000 / 100%\");\n        sweepersCut = _sweepersCut;\n        legacyCut = _legacyCut;\n        devCut = _devCut;  \n    }\n\n    function setMustHold(bool _flag) external onlyOwner {\n        mustHold = _flag;\n    }\n\n    function updateSweepersTreasury(address payable _treasury) external onlyOwner {\n        sweepersTreasury = _treasury;\n    }\n\n    function updateLegacyTreasury(address payable _treasury) external onlyOwner {\n        legacyTreasury = _treasury;\n    }\n\n    function updateAdmin(address _admin) external onlyOwner {\n        admin = _admin;\n    }\n\n    function updateSettlementParams(\n        IRandomizer _randomizer, \n        address payable _vrf, \n        uint256 _vrfCost, \n        uint256 _settlementCost, \n        uint256 _gasLimit, \n        uint256 _autoSettleTimer\n    ) external onlyOwner {\n        randomizer = _randomizer;\n        VRF = _vrf;\n        VRFCost = _vrfCost;\n        SettlementCost = _settlementCost;\n        gasLimit = _gasLimit;\n        autoSettleTimer = _autoSettleTimer;\n    }\n\n    function createComp(\n        address _nftContract, \n        uint256 _tokenId, \n        bool _is1155, \n        uint32 _startTime, \n        uint32 _endTime, \n        uint256 _entryPriceDust,\n        uint256 _entryPriceETH, \n        uint16 _entryCap,\n        uint16 _entryLimit,\n        string calldata _slug\n    ) external onlySweepersTreasury nonReentrant {\n\n        uint32 id = currentCompId++;\n        uint256 _entryCost = (VRFCost + SettlementCost) / _entryCap;\n\n        compId[id] = Comp({\n            contractAddress : _nftContract,\n            tokenId : _tokenId,\n            is1155 : _is1155,\n            startTime : _startTime,\n            endTime : _endTime,\n            entryPriceDust : _entryPriceDust,\n            entryPriceETH : _entryPriceETH,\n            entryCap : _entryCap,\n            entryLimit : _entryLimit,\n            numberEntries : 0,\n            entryCost : _entryCost,\n            blind : false,\n            settled : false,\n            failed : false,\n            hiddenImage : 'null',\n            openseaSlug : _slug\n        });\n        activeCompCount++;\n\n        if(_is1155) {\n            IERC1155(_nftContract).safeTransferFrom(msg.sender, address(this), _tokenId, 1, \"\");\n        } else {\n            IERC721(_nftContract).safeTransferFrom(msg.sender, address(this), _tokenId);\n        }\n\n        emit CompCreated(id, _startTime, _endTime, _nftContract, _tokenId, _entryLimit, _entryCap, _entryPriceDust, _entryPriceETH, false);\n    }\n\n    function createManyCompSameProject(\n        address _nftContract, \n        uint256[] calldata _tokenIds, \n        bool _is1155, \n        uint32 _startTime, \n        uint32 _endTime, \n        uint256 _entryPriceDust,\n        uint256 _entryPriceETH,  \n        uint16 _entryCap,\n        uint16 _entryLimit,\n        string calldata _slug\n    ) external onlySweepersTreasury nonReentrant {\n        \n        for(uint i = 0; i < _tokenIds.length; i++) {\n            uint32 id = currentCompId++;\n            uint256 _entryCost = (VRFCost + SettlementCost) / _entryCap;\n            compId[id] = Comp({\n                contractAddress : _nftContract,\n                tokenId : _tokenIds[i],\n                is1155 : _is1155,\n                startTime : _startTime,\n                endTime : _endTime,\n                entryPriceDust : _entryPriceDust,\n                entryPriceETH : _entryPriceETH,\n                entryCap : _entryCap,\n                entryLimit : _entryLimit,\n                numberEntries : 0,\n                entryCost : _entryCost,\n                blind : false,\n                settled : false,\n                failed : false,\n                hiddenImage : 'null',\n                openseaSlug : _slug\n            });\n            activeCompCount++;\n\n            if(_is1155) {\n                IERC1155(_nftContract).safeTransferFrom(msg.sender, address(this), _tokenIds[i], 1, \"\");\n            } else {\n                IERC721(_nftContract).safeTransferFrom(msg.sender, address(this), _tokenIds[i]);\n            }\n\n            emit CompCreated(id, _startTime, _endTime, _nftContract, _tokenIds[i], _entryLimit, _entryCap, _entryPriceDust, _entryPriceETH, false);\n        }\n    }\n\n    function createBlindComp(\n        address _nftContract, \n        bool _is1155, \n        uint32 _startTime, \n        uint32 _endTime, \n        string calldata _hiddenImage, \n        uint256 _entryPriceDust,\n        uint256 _entryPriceETH,  \n        uint16 _entryCap,\n        uint16 _entryLimit, \n        string calldata _slug\n    ) external onlySweepersTreasury nonReentrant {\n\n        uint32 id = currentCompId++;\n        uint256 _entryCost = (VRFCost + SettlementCost) / _entryCap;\n\n        compId[id] = Comp({\n            contractAddress : _nftContract,\n            tokenId : 0,\n            is1155 : _is1155,\n            startTime : _startTime,\n            endTime : _endTime,\n            entryPriceDust : _entryPriceDust,\n            entryPriceETH : _entryPriceETH,\n            entryCap : _entryCap,\n            entryLimit : _entryLimit,\n            numberEntries : 0,\n            entryCost : _entryCost,\n            blind : true,\n            settled : false,\n            failed : false,\n            hiddenImage : _hiddenImage,\n            openseaSlug : _slug\n        });\n        activeCompCount++;       \n\n        emit CompCreated(id, _startTime, _endTime, _nftContract, 0, _entryLimit, _entryCap, _entryPriceDust, _entryPriceETH, true);\n    }\n\n    function createManyBlindCompSameProject(\n        address _nftContract, \n        bool _is1155, \n        uint16 _numComps, \n        uint32 _startTime, \n        uint32 _endTime, \n        string calldata _hiddenImage, \n        uint256 _entryPriceDust,\n        uint256 _entryPriceETH,  \n        uint16 _entryCap,\n        uint16 _entryLimit,\n        string calldata _slug\n    ) external onlySweepersTreasury nonReentrant {\n        \n        for(uint i = 0; i < _numComps; i++) {\n            uint32 id = currentCompId++;\n            uint256 _entryCost = (VRFCost + SettlementCost) / _entryCap;\n            compId[id] = Comp({\n                contractAddress : _nftContract,\n                tokenId : 0,\n                is1155 : _is1155,\n                startTime : _startTime,\n                endTime : _endTime,\n                entryPriceDust : _entryPriceDust,\n                entryPriceETH : _entryPriceETH,\n                entryCap : _entryCap,\n                entryLimit : _entryLimit,\n                numberEntries : 0,\n                entryCost : _entryCost,\n                blind : true,\n                settled : false,\n                failed : false,\n                hiddenImage : _hiddenImage,\n                openseaSlug : _slug\n            });\n            activeCompCount++;\n\n            emit CompCreated(id, _startTime, _endTime, _nftContract, 0, _entryLimit, _entryCap, _entryPriceDust, _entryPriceETH, true);\n        }\n    }\n\n    function updateBlindComp(uint32 _id, uint256 _tokenId) external onlySweepersTreasury {\n        require(compId[_id].tokenId == 0, \"Comp already updated\");\n        compId[_id].tokenId = _tokenId;\n        if(compId[_id].is1155) {\n            IERC1155(compId[_id].contractAddress).safeTransferFrom(msg.sender, address(this), _tokenId, 1, \"\");\n        } else {\n            IERC721(compId[_id].contractAddress).safeTransferFrom(msg.sender, address(this), _tokenId);\n        }\n        compId[_id].blind = false;\n    }\n\n    function updateBlindComp1155(uint32 _id, bool _is1155) external onlySweepersTreasury {\n        compId[_id].is1155 = _is1155;\n    }\n\n    function updateBlindImage(uint32 _id, string calldata _hiddenImage) external onlySweepersTreasury {\n        compId[_id].hiddenImage = _hiddenImage;\n    }\n\n    function updateOpenseaSlug(uint32 _id, string calldata _slug) external onlySweepersTreasury {\n        compId[_id].openseaSlug = _slug;\n    }\n\n    function updateCompEntryPrice(uint32 _id, uint256 _entryPriceDust, uint256 _entryPriceETH) external onlySweepersTreasury {\n        compId[_id].entryPriceDust = _entryPriceDust;\n        compId[_id].entryPriceETH = _entryPriceETH;\n    }\n\n    function updateCompEndTime(uint32 _id, uint32 _endTime) external onlySweepersTreasury {\n        compId[_id].endTime = _endTime;\n    }\n\n    function emergencyCancelComp(uint32 _id) external onlySweepersTreasury {\n        require(compStatus(_id) == 1 || compStatus(_id) == 0, 'Can only cancel active comps');\n        _cancelComp(_id);\n    }\n\n    function _cancelComp(uint32 _id) private {\n        compId[_id].endTime = uint32(block.timestamp);\n        compId[_id].failed = true;\n\n        uint256 entryLength = compEntries[_id].length;\n        if(entryLength > 0) {\n            address _entrant;\n            uint256 _refundAmount;\n            for(uint i = 0; i < entryLength; i++) {\n                _entrant = entryId[compEntries[_id][i]].entrant;\n\n                if(!entryId[compEntries[_id][i]].useETH) {\n                    _refundAmount = compId[_id].entryPriceDust;\n                    DUST.mint(_entrant, _refundAmount);\n                } else {\n                    _refundAmount = compId[_id].entryPriceETH;\n                    payable(_entrant).transfer(_refundAmount);\n                }\n            }\n        }\n\n        if (!compId[_id].blind) {\n            if(compId[_id].is1155) {\n                IERC1155(compId[_id].contractAddress).safeTransferFrom(address(this), Dev, compId[_id].tokenId, 1, \"\");\n            } else {\n                IERC721(compId[_id].contractAddress).safeTransferFrom(address(this), Dev, compId[_id].tokenId);\n            }\n        }\n        emit CompCanceled(_id, address(compId[_id].contractAddress), compId[_id].tokenId);\n    }\n\n    function emergencyRescueNFT(address _nft, uint256 _tokenId, bool _is1155) external onlySweepersTreasury {\n        if(_is1155) {\n            IERC1155(_nft).safeTransferFrom(address(this), Dev, _tokenId, 1, \"\");\n        } else {\n            IERC721(_nft).safeTransferFrom(address(this), Dev, _tokenId);\n        }\n    }\n\n    function emergencyRescueETH(uint256 amount) external onlySweepersTreasury {\n        Dev.transfer(amount);\n    }\n\n    /**\n     * @notice Buy a competition entry using DUST.\n     */\n    function buyEntryDust(uint32 _id, uint16 _numEntries) external payable holdsSweeper nonReentrant {\n        require(compStatus(_id) == 1, 'Comp is not Active');\n        require(block.timestamp < compId[_id].endTime, 'Comp expired');\n        require(_numEntries + compId[_id].numberEntries <= compId[_id].entryCap, 'Entry cap exceeded');\n        require(_numEntries + userEntries[_id][msg.sender].length <= compId[_id].entryLimit, 'Entry limit exceeded');\n        require(msg.value == DevFee + (compId[_id].entryCost * _numEntries), 'Fee not covered');\n\n        // start the automation tasks if this is the first entry\n        if(compId[_id].numberEntries == 0) {\n            startPickWinnerTask(_id);\n        }\n\n        uint32 _entryId;\n        uint256 _entryCost = _numEntries * compId[_id].entryPriceDust;\n\n        for(uint i = 0; i < _numEntries; i++) {\n            _entryId = currentEntryId++;\n\n            compEntries[_id].push(_entryId);\n            entryId[_entryId].entrant = msg.sender;\n            entryId[_entryId].compId = _id;\n            entryId[_entryId].useETH = false;\n            entryId[_entryId].winner = false;\n            userEntries[_id][msg.sender].push(_entryId);\n            emit EntryReceived(_entryId, _id, msg.sender, compId[_id].entryPriceDust, false);\n        }\n\n        compId[_id].numberEntries = compId[_id].numberEntries + _numEntries;\n\n        DUST.burnFrom(msg.sender, _entryCost);\n        \n        Dev.transfer(DevFee);\n    }\n\n    /**\n     * @notice Buy a competition entry using ETH.\n     */\n    function buyEntryETH(uint32 _id, uint16 _numEntries) external payable holdsSweeper nonReentrant {\n        require(compStatus(_id) == 1, 'Comp not Active');\n        require(block.timestamp < compId[_id].endTime, 'Comp expired');\n        require(_numEntries + compId[_id].numberEntries <= compId[_id].entryCap, 'Cap exceeded');\n        require(_numEntries + userEntries[_id][msg.sender].length <= compId[_id].entryLimit, 'Entry limit exceeded');\n        require(msg.value == (compId[_id].entryCost * _numEntries) + (compId[_id].entryPriceETH * _numEntries), 'Fee not covered');\n\n        // start the automation tasks if this is the first entry\n        if(compId[_id].numberEntries == 0) {\n            startPickWinnerTask(_id);\n        }\n\n        uint32 _entryId;\n        uint256 _entryCost = _numEntries * compId[_id].entryPriceETH;\n\n        for(uint i = 0; i < _numEntries; i++) {\n            _entryId = currentEntryId++;\n\n            compEntries[_id].push(_entryId);\n            entryId[_entryId].entrant = msg.sender;\n            entryId[_entryId].compId = _id;\n            entryId[_entryId].useETH = true;\n            entryId[_entryId].winner = false;\n            userEntries[_id][msg.sender].push(_entryId);\n            emit EntryReceived(_entryId, _id, msg.sender, compId[_id].entryPriceDust, true);\n        }\n\n        compId[_id].numberEntries = compId[_id].numberEntries + _numEntries;\n\n        ethCollected[_id] = _entryCost;\n    }\n\n    function startPickWinnerTask(uint32 _id) internal {\n        IOps(ops).createTaskNoPrepayment(\n            address(this), \n            this._pickCompWinner.selector,\n            address(this),\n            abi.encodeWithSelector(this.canPickChecker.selector, _id),\n            ETH\n        );\n    }\n\n    function canPickChecker(uint32 _id) \n        external\n        view\n        returns (bool canExec, bytes memory execPayload)\n    {\n        canExec = (compStatus(_id) == 2 && !winnerRequested[_id] && tx.gasprice < gasLimit);\n        \n        execPayload = abi.encodeWithSelector(\n            this._pickCompWinner.selector,\n            _id\n        );\n    }\n\n    function pickCompWinner(uint32 _id) public {\n        require(compStatus(_id) == 2, 'cant be settled now');\n        \n        if(compEntries[_id].length > 0) {\n            randomizer.requestRandomWords();\n            winnerRequested[_id] = true;\n            winnerRequestedTime[_id] = block.timestamp;\n            startSettleTask(_id);\n            VRF.transfer(VRFCost);\n        } else {\n            winnerRequested[_id] = true;\n            _settleComp(_id);\n        }\n    }\n\n    function _pickCompWinner(uint32 _id) external onlyOps {\n        (uint256 fee, address feeToken) = IOps(ops).getFeeDetails();\n        _transfer(fee, feeToken);\n\n        pickCompWinner(_id);\n    }\n\n    function startSettleTask(uint32 _id) internal {\n        IOps(ops).createTaskNoPrepayment(\n            address(this), \n            this.autoSettleComp.selector,\n            address(this),\n            abi.encodeWithSelector(this.canSettleChecker.selector, _id),\n            ETH\n        );\n    }\n\n    function canSettleChecker(uint32 _id) \n        external\n        view\n        returns (bool canExec, bytes memory execPayload)\n    {\n        canExec = (compStatus(_id) == 6 && block.timestamp - winnerRequestedTime[_id] >= autoSettleTimer && tx.gasprice < gasLimit);\n        \n        execPayload = abi.encodeWithSelector(\n            this.autoSettleComp.selector,\n            _id\n        );\n    }\n\n    function settleComp(uint32 _id) external {\n        _settleComp(_id);\n    }\n\n    function autoSettleComp(uint32 _id) external onlyOps {\n        (uint256 fee, address feeToken) = IOps(ops).getFeeDetails();\n        _transfer(fee, feeToken);\n\n        _settleComp(_id);\n    }\n    \n    /**\n     * @notice Settle an competition, finalizing the bid and transferring the NFT to the winner.\n     * @dev If there are no entries, the competition is failed and can be relisted.\n     */\n    function _settleComp(uint32 _id) internal {\n        require(compStatus(_id) == 6, 'cant be settled now');\n        require(compId[_id].tokenId != 0, 'update comp tokenID');\n\n        compId[_id].settled = true;\n        uint32 _winningEntryId;\n        address _compWinner;\n        if (compId[_id].numberEntries == 0) {\n            compId[_id].failed = true;\n            if (!compId[_id].blind) {\n                if(compId[_id].is1155) {\n                    IERC1155(compId[_id].contractAddress).safeTransferFrom(address(this), Dev, compId[_id].tokenId, 1, \"\");\n                } else {\n                    IERC721(compId[_id].contractAddress).safeTransferFrom(address(this), Dev, compId[_id].tokenId);\n                }\n            }\n            emit CompFailed(_id, address(compId[_id].contractAddress), compId[_id].tokenId);\n        } else {\n            uint256 seed = randomizer.getRandomWord();\n            uint256 entryIndex = seed % compEntries[_id].length;\n            _winningEntryId = compEntries[_id][entryIndex];\n            _compWinner = entryId[_winningEntryId].entrant;\n            compWinner[_id] = _compWinner;\n\n            if(compId[_id].is1155) {\n                IERC1155(compId[_id].contractAddress).safeTransferFrom(address(this), _compWinner, compId[_id].tokenId, 1, \"\");\n            } else {\n                IERC721(compId[_id].contractAddress).safeTransferFrom(address(this), _compWinner, compId[_id].tokenId);\n            }\n\n            if(ethCollected[_id] > 0) {\n                uint256 treasuryAmount = ethCollected[_id] * sweepersCut / 10000;\n                uint256 legacyAmount = ethCollected[_id] * legacyCut / 10000;\n                uint256 devAmount = ethCollected[_id] * devCut / 10000;\n                sweepersTreasury.transfer(treasuryAmount);\n                legacyTreasury.transfer(legacyAmount);\n                Dev.transfer(devAmount);\n            }\n        }\n        activeCompCount--;\n        emit CompSettled(_id, address(compId[_id].contractAddress), compId[_id].tokenId, _compWinner, _winningEntryId, entryId[_winningEntryId].useETH);\n    }\n\n    function compStatus(uint32 _id) public view returns (uint8) {\n        if (winnerRequested[_id] && !compId[_id].settled) {\n        return 6; // AWAITING SETTLEMENT - Winner selected and awaiting settlement    \n        }\n        if (block.timestamp >= compId[_id].endTime && compId[_id].tokenId == 0) {\n        return 5; // AWAITING TOKENID - Comp finished\n        }\n        if (compId[_id].failed) {\n        return 4; // FAILED - not sold by end time\n        }\n        if (compId[_id].settled) {\n        return 3; // SUCCESS - Entrant won \n        }\n        if (block.timestamp >= compId[_id].endTime || compId[_id].numberEntries == compId[_id].entryCap) {\n        return 2; // AWAITING WINNER SELECTION - Comp finished\n        }\n        if (block.timestamp <= compId[_id].endTime && block.timestamp >= compId[_id].startTime) {\n        return 1; // ACTIVE - entries enabled\n        }\n        return 0; // QUEUED - awaiting start time\n    }\n\n    function getEntriesByCompId(uint32 _id) external view returns (uint32[] memory entryIds) {\n        uint256 length = compEntries[_id].length;\n        entryIds = new uint32[](length);\n        for(uint i = 0; i < length; i++) {\n            entryIds[i] = compEntries[_id][i];\n        }\n    }\n\n    function getEntriesByUser(uint32 _id, address _user) external view returns (uint32[] memory entryIds) {\n        uint256 length = userEntries[_id][_user].length;\n        entryIds = new uint32[](length);\n        for(uint i = 0; i < length; i++) {\n            entryIds[i] = userEntries[_id][_user][i];\n        }\n    }\n\n    function getTotalEntriesLength() external view returns (uint32) {\n        return currentEntryId;\n    }\n\n    function getEntriesLengthForComp(uint32 _id) external view returns (uint256) {\n        return compEntries[_id].length;\n    }\n\n    function getEntriesLengthForUser(uint32 _id, address _user) external view returns (uint256) {\n        return userEntries[_id][_user].length;\n    }\n\n    function getEntryInfoByIndex(uint32 _entryId) external view returns (address _entrant, uint32 _compId, string memory _entryStatus) {\n        _entrant = entryId[_entryId].entrant;\n        _compId = entryId[_entryId].compId;\n        if(compId[entryId[_entryId].compId].settled && entryId[_entryId].winner) {\n            _entryStatus = 'won';\n        } else if(compId[entryId[_entryId].compId].settled && !entryId[_entryId].winner) {\n            _entryStatus = 'lost';\n        } else {\n            _entryStatus = 'entered';\n        }\n    }\n\n    function getAllComps() external view returns (uint32[] memory comps, uint8[] memory status) {\n        comps = new uint32[](currentCompId);\n        status = new uint8[](currentCompId);\n        for(uint32 i = 0; i < currentCompId; i++) {\n            comps[i] = i;\n            status[i] = compStatus(i);\n        }\n    }\n\n    receive() external payable {\n        emit Received(msg.sender, msg.value);\n    }\n}"}, "contracts/interfaces/IRandomizer.sol": {"content": "// SPDX-License-Identifier: MIT LICENSE\n\npragma solidity ^0.8.30;\n\ninterface IRandomizer {\n    \n    function getRandomWord() external returns (uint256);\n    function requestRandomWords() external;\n    \n}"}, "contracts/interfaces/INFT.sol": {"content": "// SPDX-License-Identifier: MIT LICENSE\n\npragma solidity ^0.8.30;\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\n\ninterface INFT is IERC721Enumerable {\n    \n}"}, "contracts/interfaces/IDust.sol": {"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.30;\n\ninterface IDust {\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address to, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n    function burn(uint256 _amount) external;\n    function burnFrom(address _from, uint256 _amount) external;\n    function mint(address _to, uint256 _amount) external;\n}"}, "contracts/external/gelato/OpsReady.sol": {"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.30;\n\nimport {\n    SafeERC20,\n    IERC20\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ninterface IOps {\n    function gelato() external view returns (address payable);\n    function createTaskNoPrepayment(address _execAddress, bytes4 _execSelector, address _resolverAddress, bytes calldata _resolverData, address _feeToken) external returns (bytes32 task);\n    function getFeeDetails() external view returns (uint256, address);\n}\n\nabstract contract OpsReady {\n    address public immutable ops;\n    address payable public immutable gelato;\n    address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    modifier onlyOps() {\n        require(msg.sender == ops, \"OpsReady: onlyOps\");\n        _;\n    }\n\n    constructor(address _ops) {\n        ops = _ops;\n        gelato = IOps(_ops).gelato();\n    }\n\n    function _transfer(uint256 _amount, address _paymentToken) internal {\n        if (_paymentToken == ETH) {\n            (bool success, ) = gelato.call{value: _amount}(\"\");\n            require(success, \"_transfer: ETH transfer failed\");\n        } else {\n            SafeERC20.safeTransfer(IERC20(_paymentToken), gelato, _amount);\n        }\n    }\n}"}, "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"}, "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"}, "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"}, "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"}, "@openzeppelin/contracts/access/Ownable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"}, "@openzeppelin/contracts/security/ReentrancyGuard.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"}, "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"}, "@openzeppelin/contracts/token/ERC721/IERC721.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"}, "@openzeppelin/contracts/utils/introspection/IERC165.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"}, "@openzeppelin/contracts/utils/Context.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"}, "@openzeppelin/contracts/utils/Address.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"}, "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"}, "@openzeppelin/contracts/token/ERC20/IERC20.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"}}, "settings": {"optimizer": {"enabled": true}, "viaIR": false, "evmVersion": "istanbul", "outputSelection": {"*": {"*": ["evm.legacyAssembly"]}}}}
{"language": "Solidity", "sources": {"src/lib/loans/MultiSourceLoan.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\nimport \"@delegate/IDelegateRegistry.sol\";\nimport \"@openzeppelin/utils/cryptography/ECDSA.sol\";\nimport \"@solmate/tokens/ERC20.sol\";\nimport \"@solmate/tokens/ERC721.sol\";\nimport \"@solmate/utils/FixedPointMathLib.sol\";\nimport \"@solmate/utils/ReentrancyGuard.sol\";\nimport \"@solmate/utils/SafeTransferLib.sol\";\n\nimport \"../../interfaces/validators/IOfferValidator.sol\";\nimport \"../../interfaces/INFTFlashAction.sol\";\nimport \"../../interfaces/loans/ILoanManager.sol\";\nimport \"../../interfaces/loans/ILoanManagerRegistry.sol\";\nimport \"../../interfaces/loans/IMultiSourceLoan.sol\";\nimport \"../utils/Hash.sol\";\nimport \"../utils/Interest.sol\";\nimport \"../Multicall.sol\";\nimport \"./BaseLoan.sol\";\n\n/// @title MultiSourceLoan (v3)\n/// @author Florida St\n/// @notice Loan contract that allows for multiple tranches with different\n///         seniorities. Each loan is collateralized by an NFT. Loans have a duration,\n///         principal, and APR. Loans can be refinanced automatically by lenders (if terms\n///         are improved). Borrowers can also get renegotiation offers which they can then\n///         accept. If a loan is not repaid by its end time, it's considered to have defaulted.\n///         If it had only one lender behind it, then the lender (unless it's a pool), can claim\n///         the collateral. If there are multiple lenders or the sole lender is a pool, then there's\n///         a liquidation process (run by an instance of `ILoanLiquidator`).\ncontract MultiSourceLoan is IMultiSourceLoan, Multicall, ReentrancyGuard, BaseLoan {\n    using FixedPointMathLib for uint256;\n    using Hash for ExecutionData;\n    using Hash for Loan;\n    using Hash for LoanOffer;\n    using Hash for SignableRepaymentData;\n    using Hash for RenegotiationOffer;\n    using InputChecker for address;\n    using Interest for uint256;\n    using ECDSA for bytes32;\n    using MessageHashUtils for bytes32;\n    using SafeTransferLib for ERC20;\n\n    /// @notice Loan Id to hash\n    mapping(uint256 loanId => bytes32 loanHash) private _loans;\n\n    /// This is used in _getMinTranchePrincipal.\n    uint256 private constant _MAX_RATIO_TRANCHE_MIN_PRINCIPAL = 2;\n\n    /// @notice Maximum number of tranches per loan\n    uint256 public immutable getMaxTranches;\n\n    /// @notice delegate registry\n    address public immutable getDelegateRegistry;\n\n    /// @notice Contract to execute flash actions.\n    address public getFlashActionContract;\n\n    /// @notice Loan manager registry (we currently have Gondi's pools)\n    ILoanManagerRegistry public immutable getLoanManagerRegistry;\n\n    /// @notice Min lock period for a tranche\n    uint256 private _minLockPeriod;\n\n    error InvalidParametersError();\n    error MismatchError();\n    error InvalidCollateralIdError();\n    error InvalidMethodError();\n    error InvalidAddressesError();\n    error InvalidCallerError();\n    error InvalidTrancheError();\n    error InvalidRenegotiationOfferError();\n    error TooManyTranchesError();\n    error LoanExpiredError();\n    error NFTNotReturnedError();\n    error TrancheCannotBeRefinancedError(uint256 minTimestamp);\n    error LoanLockedError();\n\n    /// @param loanLiquidator Address of the liquidator contract.\n    /// @param protocolFee Protocol fee charged on gains.\n    /// @param currencyManager Address of the currency manager.\n    /// @param collectionManager Address of the collection manager.\n    /// @param maxTranches Maximum number of tranches per loan.\n    /// @param minLockPeriod Minimum lock period for a tranche/loan.\n    /// @param delegateRegistry Address of the delegate registry (Delegate.xyz).\n    /// @param loanManagerRegistry Address of the loan manager registry.\n    /// @param flashActionContract Address of the flash action contract.\n    /// @param minWaitTime The time to wait before a new owner can be set.\n    constructor(\n        address loanLiquidator,\n        ProtocolFee memory protocolFee,\n        address currencyManager,\n        address collectionManager,\n        uint256 maxTranches,\n        uint256 minLockPeriod,\n        address delegateRegistry,\n        address loanManagerRegistry,\n        address flashActionContract,\n        uint256 minWaitTime\n    )\n        BaseLoan(\n            \"GONDI_MULTI_SOURCE_LOAN\",\n            currencyManager,\n            collectionManager,\n            protocolFee,\n            loanLiquidator,\n            tx.origin,\n            minWaitTime\n        )\n    {\n        loanLiquidator.checkNotZero();\n\n        _minLockPeriod = minLockPeriod;\n        getMaxTranches = maxTranches;\n        getDelegateRegistry = delegateRegistry;\n        getFlashActionContract = flashActionContract;\n        getLoanManagerRegistry = ILoanManagerRegistry(loanManagerRegistry);\n    }\n\n    /// @inheritdoc IMultiSourceLoan\n    function emitLoan(LoanExecutionData calldata _loanExecutionData)\n        external\n        nonReentrant\n        returns (uint256, Loan memory)\n    {\n        address borrower = _loanExecutionData.borrower;\n        ExecutionData calldata executionData = _loanExecutionData.executionData;\n        (address principalAddress, address nftCollateralAddress) = _getAddressesFromExecutionData(executionData);\n\n        OfferExecution[] calldata offerExecution = executionData.offerExecution;\n\n        _validateExecutionData(_loanExecutionData, borrower);\n        _checkWhitelists(principalAddress, nftCollateralAddress);\n\n        (uint256 loanId, uint256[] memory offerIds, Loan memory loan, uint256 totalFee) =\n        _processOffersFromExecutionData(\n            borrower,\n            executionData.principalReceiver,\n            principalAddress,\n            nftCollateralAddress,\n            executionData.tokenId,\n            executionData.duration,\n            offerExecution\n        );\n\n        if (_hasCallback(executionData.callbackData)) {\n            handleAfterPrincipalTransferCallback(loan, msg.sender, executionData.callbackData, totalFee);\n        }\n\n        ERC721(nftCollateralAddress).transferFrom(borrower, address(this), executionData.tokenId);\n\n        _loans[loanId] = loan.hash();\n        emit LoanEmitted(loanId, offerIds, loan, totalFee);\n\n        return (loanId, loan);\n    }\n\n    /// @inheritdoc IMultiSourceLoan\n    function refinanceFull(\n        RenegotiationOffer calldata _renegotiationOffer,\n        Loan memory _loan,\n        bytes calldata _renegotiationOfferSignature\n    ) external nonReentrant returns (uint256, Loan memory) {\n        _baseLoanChecks(_renegotiationOffer.loanId, _loan);\n        _baseRenegotiationChecks(_renegotiationOffer, _loan);\n\n        if (_renegotiationOffer.trancheIndex.length != _loan.tranche.length) {\n            revert InvalidRenegotiationOfferError();\n        }\n\n        bool lenderInitiated = msg.sender == _renegotiationOffer.lender;\n        uint256 netNewLender = _renegotiationOffer.principalAmount - _renegotiationOffer.fee;\n        uint256 totalAccruedInterest;\n        uint256 totalAnnualInterest;\n\n        /// @dev If it's lender initiated, needs to be strictly better.\n        if (lenderInitiated) {\n            (totalAccruedInterest, totalAnnualInterest,) =\n                _processOldTranchesFull(_renegotiationOffer, _loan, lenderInitiated, 0);\n            if (_isLoanLocked(_loan.startTime, _loan.duration)) {\n                revert LoanLockedError();\n            }\n            _checkStrictlyBetter(\n                _renegotiationOffer.principalAmount,\n                _loan.principalAmount,\n                _renegotiationOffer.duration + block.timestamp,\n                _loan.duration + _loan.startTime,\n                _renegotiationOffer.aprBps,\n                totalAnnualInterest / _loan.principalAmount,\n                _renegotiationOffer.fee\n            );\n            if (_renegotiationOffer.principalAmount > _loan.principalAmount) {\n                ERC20(_loan.principalAddress).safeTransferFrom(\n                    _renegotiationOffer.lender,\n                    _loan.borrower,\n                    _renegotiationOffer.principalAmount - _loan.principalAmount\n                );\n            }\n        } else if (msg.sender != _loan.borrower) {\n            revert InvalidCallerError();\n        } else {\n            (totalAccruedInterest, totalAnnualInterest, netNewLender) =\n                _processOldTranchesFull(_renegotiationOffer, _loan, lenderInitiated, netNewLender);\n            /// @notice Borrowers clears interest\n            _checkSignature(_renegotiationOffer.lender, _renegotiationOffer.hash(), _renegotiationOfferSignature);\n            if (netNewLender > 0) {\n                ERC20(_loan.principalAddress).safeTransferFrom(_renegotiationOffer.lender, _loan.borrower, netNewLender);\n            }\n            totalAccruedInterest = 0;\n        }\n        uint256 newLoanId = _getAndSetNewLoanId();\n        Tranche[] memory newTranche = new Tranche[](1);\n        newTranche[0] = Tranche(\n            newLoanId,\n            0,\n            _renegotiationOffer.principalAmount,\n            _renegotiationOffer.lender,\n            totalAccruedInterest,\n            block.timestamp,\n            _renegotiationOffer.aprBps\n        );\n        _loan.tranche = newTranche;\n        _loan.startTime = block.timestamp;\n        _loan.duration = _renegotiationOffer.duration;\n        _loan.principalAmount = _renegotiationOffer.principalAmount;\n\n        _loans[newLoanId] = _loan.hash();\n        delete _loans[_renegotiationOffer.loanId];\n\n        emit LoanRefinanced(\n            _renegotiationOffer.renegotiationId, _renegotiationOffer.loanId, newLoanId, _loan, _renegotiationOffer.fee\n        );\n\n        return (newLoanId, _loan);\n    }\n\n    /// @inheritdoc IMultiSourceLoan\n    function refinancePartial(RenegotiationOffer calldata _renegotiationOffer, Loan memory _loan)\n        external\n        nonReentrant\n        returns (uint256, Loan memory)\n    {\n        if (msg.sender != _renegotiationOffer.lender) {\n            revert InvalidCallerError();\n        }\n\n        if (_isLoanLocked(_loan.startTime, _loan.duration)) {\n            revert LoanLockedError();\n        }\n        if (_renegotiationOffer.trancheIndex.length == 0) {\n            revert InvalidRenegotiationOfferError();\n        }\n\n        uint256 loanId = _renegotiationOffer.loanId;\n        _baseLoanChecks(loanId, _loan);\n        _baseRenegotiationChecks(_renegotiationOffer, _loan);\n\n        uint256 newLoanId = _getAndSetNewLoanId();\n        uint256 totalProtocolFee;\n        uint256 totalAnnualInterest;\n        uint256 totalRefinanced;\n        /// @dev bring to mem\n        uint256 minImprovementApr = _minImprovementApr;\n        /// @dev We iterate over all tranches to execute repayments.\n        uint256 totalTranchesRenegotiated = _renegotiationOffer.trancheIndex.length;\n        for (uint256 i; i < totalTranchesRenegotiated;) {\n            uint256 index = _renegotiationOffer.trancheIndex[i];\n            if (index >= _loan.tranche.length) {\n                revert InvalidRenegotiationOfferError();\n            }\n            Tranche memory tranche = _loan.tranche[index];\n            _checkTrancheStrictly(true, tranche.aprBps, _renegotiationOffer.aprBps, minImprovementApr);\n            (uint256 accruedInterest, uint256 thisProtocolFee,) = _processOldTranche(\n                _renegotiationOffer.lender,\n                _loan.borrower,\n                _loan.principalAddress,\n                tranche,\n                _loan.startTime + _loan.duration,\n                _loan.protocolFee,\n                type(uint256).max\n            );\n            unchecked {\n                totalRefinanced += tranche.principalAmount;\n                totalAnnualInterest += tranche.principalAmount * tranche.aprBps;\n                totalProtocolFee += thisProtocolFee;\n            }\n\n            tranche.loanId = newLoanId;\n            tranche.lender = _renegotiationOffer.lender;\n            tranche.accruedInterest = accruedInterest;\n            tranche.startTime = block.timestamp;\n            tranche.aprBps = _renegotiationOffer.aprBps;\n            unchecked {\n                ++i;\n            }\n        }\n\n        if (_renegotiationOffer.principalAmount != totalRefinanced) {\n            revert InvalidRenegotiationOfferError();\n        }\n        _handleProtocolFeeForFee(\n            _loan.principalAddress, _renegotiationOffer.lender, totalProtocolFee, _protocolFee.recipient\n        );\n\n        _loans[newLoanId] = _loan.hash();\n        delete _loans[loanId];\n\n        /// @dev Here reneg fee is always 0\n        emit LoanRefinanced(_renegotiationOffer.renegotiationId, loanId, newLoanId, _loan, 0);\n\n        return (newLoanId, _loan);\n    }\n\n    /// @inheritdoc IMultiSourceLoan\n    function refinanceFromLoanExecutionData(\n        uint256 _loanId,\n        Loan calldata _loan,\n        LoanExecutionData calldata _loanExecutionData\n    ) external nonReentrant returns (uint256, Loan memory) {\n        if (msg.sender != _loan.borrower) {\n            revert InvalidCallerError();\n        }\n        _baseLoanChecks(_loanId, _loan);\n\n        ExecutionData calldata executionData = _loanExecutionData.executionData;\n        /// @dev We ignore the borrower in executionData, and used existing one.\n        address borrower = _loan.borrower;\n        (address principalAddress, address nftCollateralAddress) = _getAddressesFromExecutionData(executionData);\n\n        OfferExecution[] calldata offerExecution = executionData.offerExecution;\n\n        _validateExecutionData(_loanExecutionData, borrower);\n        _checkWhitelists(principalAddress, nftCollateralAddress);\n\n        if (_loan.principalAddress != principalAddress || _loan.nftCollateralAddress != nftCollateralAddress) {\n            revert InvalidAddressesError();\n        }\n        if (_loan.nftCollateralTokenId != executionData.tokenId) {\n            revert InvalidCollateralIdError();\n        }\n\n        /// @dev We first process the incoming offers so borrower gets the capital. After that, we process repayments.\n        ///      NFT doesn't need to be transfered (it was already in escrow)\n        (uint256 newLoanId, uint256[] memory offerIds, Loan memory loan, uint256 totalFee) =\n        _processOffersFromExecutionData(\n            borrower,\n            executionData.principalReceiver,\n            principalAddress,\n            nftCollateralAddress,\n            executionData.tokenId,\n            executionData.duration,\n            offerExecution\n        );\n        _processRepayments(_loan);\n\n        emit LoanRefinancedFromNewOffers(_loanId, newLoanId, loan, offerIds, totalFee);\n\n        _loans[newLoanId] = loan.hash();\n        delete _loans[_loanId];\n\n        return (newLoanId, loan);\n    }\n\n    /// @inheritdoc IMultiSourceLoan\n    function addNewTranche(\n        RenegotiationOffer calldata _renegotiationOffer,\n        Loan memory _loan,\n        bytes calldata _renegotiationOfferSignature\n    ) external nonReentrant returns (uint256, Loan memory) {\n        if (msg.sender != _loan.borrower) {\n            revert InvalidCallerError();\n        }\n        uint256 loanId = _renegotiationOffer.loanId;\n\n        _baseLoanChecks(loanId, _loan);\n        _baseRenegotiationChecks(_renegotiationOffer, _loan);\n        _checkSignature(_renegotiationOffer.lender, _renegotiationOffer.hash(), _renegotiationOfferSignature);\n\n        if (_renegotiationOffer.trancheIndex.length != 1 || _renegotiationOffer.trancheIndex[0] != _loan.tranche.length)\n        {\n            revert InvalidRenegotiationOfferError();\n        }\n\n        if (_loan.tranche.length == getMaxTranches) {\n            revert TooManyTranchesError();\n        }\n\n        uint256 newLoanId = _getAndSetNewLoanId();\n        Loan memory loanWithTranche = _addNewTranche(newLoanId, _loan, _renegotiationOffer);\n        _loans[newLoanId] = loanWithTranche.hash();\n        delete _loans[loanId];\n\n        ERC20(_loan.principalAddress).safeTransferFrom(\n            _renegotiationOffer.lender, _loan.borrower, _renegotiationOffer.principalAmount - _renegotiationOffer.fee\n        );\n        if (_renegotiationOffer.fee != 0) {\n            /// @dev Cached\n            ERC20(_loan.principalAddress).safeTransferFrom(\n                _renegotiationOffer.lender,\n                _protocolFee.recipient,\n                _renegotiationOffer.fee.mulDivUp(_loan.protocolFee, _PRECISION)\n            );\n        }\n\n        emit LoanRefinanced(\n            _renegotiationOffer.renegotiationId, loanId, newLoanId, loanWithTranche, _renegotiationOffer.fee\n        );\n\n        return (newLoanId, loanWithTranche);\n    }\n\n    /// @inheritdoc IMultiSourceLoan\n    function repayLoan(LoanRepaymentData calldata _repaymentData) external override nonReentrant {\n        uint256 loanId = _repaymentData.data.loanId;\n        Loan calldata loan = _repaymentData.loan;\n        /// @dev If the caller is not the borrower itself, check the signature to avoid someone else forcing an unwanted repayment.\n        if (msg.sender != loan.borrower) {\n            _checkSignature(loan.borrower, _repaymentData.data.hash(), _repaymentData.borrowerSignature);\n        }\n\n        _baseLoanChecks(loanId, loan);\n\n        /// @dev Unlikely this is used outside of the callback with a seaport sell, but leaving here in case that's not correct.\n        if (_repaymentData.data.shouldDelegate) {\n            IDelegateRegistry(getDelegateRegistry).delegateERC721(\n                loan.borrower, loan.nftCollateralAddress, loan.nftCollateralTokenId, bytes32(\"\"), true\n            );\n        }\n\n        ERC721(loan.nftCollateralAddress).transferFrom(address(this), loan.borrower, loan.nftCollateralTokenId);\n        /// @dev After returning the NFT to the borrower, check if there's an action to be taken (eg: sell it to cover repayment).\n        if (_hasCallback(_repaymentData.data.callbackData)) {\n            handleAfterNFTTransferCallback(loan, msg.sender, _repaymentData.data.callbackData);\n        }\n\n        (uint256 totalRepayment, uint256 totalProtocolFee) = _processRepayments(loan);\n\n        emit LoanRepaid(loanId, totalRepayment, totalProtocolFee);\n\n        /// @dev Reclaim space.\n        delete _loans[loanId];\n    }\n\n    /// @inheritdoc IMultiSourceLoan\n    function liquidateLoan(uint256 _loanId, Loan calldata _loan)\n        external\n        override\n        nonReentrant\n        returns (bytes memory)\n    {\n        if (_loan.hash() != _loans[_loanId]) {\n            revert InvalidLoanError(_loanId);\n        }\n        (bool liquidated, bytes memory liquidation) = _liquidateLoan(\n            _loanId, _loan, _loan.tranche.length == 1 && !getLoanManagerRegistry.isLoanManager(_loan.tranche[0].lender)\n        );\n        if (liquidated) {\n            delete _loans[_loanId];\n        }\n        return liquidation;\n    }\n\n    /// @inheritdoc IMultiSourceLoan\n    function loanLiquidated(uint256 _loanId, Loan calldata _loan) external override onlyLiquidator {\n        if (_loan.hash() != _loans[_loanId]) {\n            revert InvalidLoanError(_loanId);\n        }\n\n        emit LoanLiquidated(_loanId);\n\n        /// @dev Reclaim space.\n        delete _loans[_loanId];\n    }\n\n    /// @inheritdoc IMultiSourceLoan\n    function delegate(uint256 _loanId, Loan calldata loan, address _delegate, bytes32 _rights, bool _value) external {\n        if (loan.hash() != _loans[_loanId]) {\n            revert InvalidLoanError(_loanId);\n        }\n        if (msg.sender != loan.borrower) {\n            revert InvalidCallerError();\n        }\n        IDelegateRegistry(getDelegateRegistry).delegateERC721(\n            _delegate, loan.nftCollateralAddress, loan.nftCollateralTokenId, _rights, _value\n        );\n\n        emit Delegated(_loanId, _delegate, _rights, _value);\n    }\n\n    /// @inheritdoc IMultiSourceLoan\n    function revokeDelegate(address _delegate, address _collection, uint256 _tokenId, bytes32 _rights) external {\n        if (ERC721(_collection).ownerOf(_tokenId) == address(this)) {\n            revert InvalidMethodError();\n        }\n\n        IDelegateRegistry(getDelegateRegistry).delegateERC721(_delegate, _collection, _tokenId, _rights, false);\n\n        emit RevokeDelegate(_delegate, _collection, _tokenId, _rights);\n    }\n\n    /// @inheritdoc IMultiSourceLoan\n    function getMinLockPeriod() external view returns (uint256) {\n        return _minLockPeriod;\n    }\n\n    /// @inheritdoc IMultiSourceLoan\n    function setMinLockPeriod(uint256 __minLockPeriod) external onlyOwner {\n        _minLockPeriod = __minLockPeriod;\n\n        emit MinLockPeriodUpdated(__minLockPeriod);\n    }\n\n    /// @inheritdoc IMultiSourceLoan\n    function getLoanHash(uint256 _loanId) external view returns (bytes32) {\n        return _loans[_loanId];\n    }\n\n    /// @inheritdoc IMultiSourceLoan\n    function executeFlashAction(uint256 _loanId, Loan calldata _loan, address _target, bytes calldata _data)\n        external\n        nonReentrant\n    {\n        if (_loan.hash() != _loans[_loanId]) {\n            revert InvalidLoanError(_loanId);\n        }\n        if (msg.sender != _loan.borrower) {\n            revert InvalidCallerError();\n        }\n        address flashActionContract = getFlashActionContract;\n        ERC721(_loan.nftCollateralAddress).transferFrom(address(this), flashActionContract, _loan.nftCollateralTokenId);\n        INFTFlashAction(flashActionContract).execute(\n            _loan.nftCollateralAddress, _loan.nftCollateralTokenId, _target, _data\n        );\n\n        if (ERC721(_loan.nftCollateralAddress).ownerOf(_loan.nftCollateralTokenId) != address(this)) {\n            revert NFTNotReturnedError();\n        }\n\n        emit FlashActionExecuted(_loanId, _target, _data);\n    }\n\n    /// @inheritdoc IMultiSourceLoan\n    function setFlashActionContract(address _newFlashActionContract) external onlyOwner {\n        getFlashActionContract = _newFlashActionContract;\n\n        emit FlashActionContractUpdated(_newFlashActionContract);\n    }\n\n    /// @notice Process repayments for tranches upon a full renegotiation.\n    /// @param _renegotiationOffer The renegotiation offer.\n    /// @param _loan The loan to be processed.\n    /// @param _isStrictlyBetter Whether the new tranche needs to be strictly better than all previous ones.\n    /// @param _remainingNewLender Amount left for new lender to pay\n    function _processOldTranchesFull(\n        RenegotiationOffer calldata _renegotiationOffer,\n        Loan memory _loan,\n        bool _isStrictlyBetter,\n        uint256 _remainingNewLender\n    ) private returns (uint256 totalAccruedInterest, uint256 totalAnnualInterest, uint256 remainingNewLender) {\n        uint256 totalProtocolFee = _renegotiationOffer.fee.mulDivUp(_loan.protocolFee, _PRECISION);\n        unchecked {\n            _remainingNewLender += totalProtocolFee;\n\n            /// @dev bring to mem\n            uint256 minImprovementApr = _minImprovementApr;\n            remainingNewLender = _isStrictlyBetter ? type(uint256).max : _remainingNewLender;\n            // We iterate first for the new lender and then for the rest.\n            // This way if he is owed some principal,\n            // it's discounted before transfering to the other lenders\n            for (uint256 i = 0; i < _loan.tranche.length << 1;) {\n                Tranche memory tranche = _loan.tranche[i % _loan.tranche.length];\n                bool onlyNewLenderPass = i < _loan.tranche.length;\n                bool isNewLender = tranche.lender == _renegotiationOffer.lender;\n                ++i;\n                if (onlyNewLenderPass != isNewLender) continue;\n                uint256 accruedInterest;\n                uint256 thisProtocolFee;\n                (accruedInterest, thisProtocolFee, remainingNewLender) = _processOldTranche(\n                    _renegotiationOffer.lender,\n                    _loan.borrower,\n                    _loan.principalAddress,\n                    tranche,\n                    _loan.startTime + _loan.duration,\n                    _loan.protocolFee,\n                    remainingNewLender\n                );\n                _checkTrancheStrictly(_isStrictlyBetter, tranche.aprBps, _renegotiationOffer.aprBps, minImprovementApr);\n\n                totalAnnualInterest += tranche.principalAmount * tranche.aprBps;\n                totalAccruedInterest += accruedInterest;\n                totalProtocolFee += thisProtocolFee;\n            }\n            uint256 lenderFee = remainingNewLender > totalProtocolFee ? totalProtocolFee : remainingNewLender;\n            uint256 borrowerFee = totalProtocolFee - lenderFee;\n            _handleProtocolFeeForFee(\n                _loan.principalAddress, _renegotiationOffer.lender, lenderFee, _protocolFee.recipient\n            );\n            _handleProtocolFeeForFee(_loan.principalAddress, _loan.borrower, borrowerFee, _protocolFee.recipient);\n            remainingNewLender -= lenderFee;\n        }\n    }\n\n    /// @notice Process the current source tranche during a renegotiation.\n    /// @param _lender The new lender.\n    /// @param _borrower The borrower of the loan.\n    /// @param _principalAddress The principal address of the loan.\n    /// @param _tranche The tranche to be processed.\n    /// @param _endTime The end time of the loan.\n    /// @param _protocolFeeFraction The protocol fee fraction.\n    /// @param _remainingNewLender The amount left for the new lender to pay.\n    /// @return accruedInterest The accrued interest paid.\n    /// @return thisProtocolFee The protocol fee paid for this tranche.\n    /// @return remainingNewLender The amount left for the new lender to pay.\n    function _processOldTranche(\n        address _lender,\n        address _borrower,\n        address _principalAddress,\n        Tranche memory _tranche,\n        uint256 _endTime,\n        uint256 _protocolFeeFraction,\n        uint256 _remainingNewLender\n    ) private returns (uint256 accruedInterest, uint256 thisProtocolFee, uint256 remainingNewLender) {\n        uint256 unlockTime = _getUnlockedTime(_tranche.startTime, _endTime);\n        if (unlockTime > block.timestamp) {\n            revert TrancheCannotBeRefinancedError(unlockTime);\n        }\n        unchecked {\n            accruedInterest =\n                _tranche.principalAmount.getInterest(_tranche.aprBps, block.timestamp - _tranche.startTime);\n            thisProtocolFee = accruedInterest.mulDivUp(_protocolFeeFraction, _PRECISION);\n            accruedInterest += _tranche.accruedInterest;\n        }\n\n        if (getLoanManagerRegistry.isLoanManager(_tranche.lender)) {\n            ILoanManager(_tranche.lender).loanRepayment(\n                _tranche.loanId,\n                _tranche.principalAmount,\n                _tranche.aprBps,\n                _tranche.accruedInterest,\n                _protocolFeeFraction,\n                _tranche.startTime\n            );\n        }\n\n        uint256 oldLenderDebt;\n        unchecked {\n            oldLenderDebt = _tranche.principalAmount + accruedInterest - thisProtocolFee;\n        }\n        ERC20 asset = ERC20(_principalAddress);\n        if (oldLenderDebt > _remainingNewLender) {\n            /// @dev already checked in the condition\n            asset.safeTransferFrom(_borrower, _tranche.lender, oldLenderDebt - _remainingNewLender);\n            oldLenderDebt = _remainingNewLender;\n        }\n        if (oldLenderDebt > 0) {\n            if (_lender != _tranche.lender) {\n                asset.safeTransferFrom(_lender, _tranche.lender, oldLenderDebt);\n            }\n            /// @dev oldLenderDebt < _remainingNewLender because it would enter previous condition if not and set to _remainingNewLender\n            unchecked {\n                _remainingNewLender -= oldLenderDebt;\n            }\n        }\n        remainingNewLender = _remainingNewLender;\n    }\n\n    /// @notice Basic loan checks (check if the hash is correct) + whether loan is still active.\n    /// @param _loanId The loan ID.\n    /// @param _loan The loan to be checked.\n    function _baseLoanChecks(uint256 _loanId, Loan memory _loan) private view {\n        if (_loan.hash() != _loans[_loanId]) {\n            revert InvalidLoanError(_loanId);\n        }\n        if (_loan.startTime + _loan.duration <= block.timestamp) {\n            revert LoanExpiredError();\n        }\n    }\n\n    /// @notice Basic renegotiation checks. Check basic parameters + expiration + whether the offer is active.\n    function _baseRenegotiationChecks(RenegotiationOffer calldata _renegotiationOffer, Loan memory _loan)\n        private\n        view\n    {\n        if (\n            (_renegotiationOffer.principalAmount == 0)\n                || (_loan.tranche.length < _renegotiationOffer.trancheIndex.length)\n        ) {\n            revert InvalidRenegotiationOfferError();\n        }\n        if (block.timestamp > _renegotiationOffer.expirationTime) {\n            revert ExpiredOfferError(_renegotiationOffer.expirationTime);\n        }\n        uint256 renegotiationId = _renegotiationOffer.renegotiationId;\n        address lender = _renegotiationOffer.lender;\n        if (isRenegotiationOfferCancelled[lender][renegotiationId]) {\n            revert CancelledOrExecutedOfferError(lender, renegotiationId);\n        }\n    }\n\n    /// @notice Protocol fee for fees charged on offers/renegotationOffers.\n    /// @param _principalAddress The principal address of the loan.\n    /// @param _lender The lender of the loan.\n    /// @param _fee The fee to be charged.\n    /// @param _feeRecipient The protocol fee recipient.\n    function _handleProtocolFeeForFee(address _principalAddress, address _lender, uint256 _fee, address _feeRecipient)\n        private\n    {\n        if (_fee != 0) {\n            ERC20(_principalAddress).safeTransferFrom(_lender, _feeRecipient, _fee);\n        }\n    }\n\n    /// @notice Check condition for strictly better tranches\n    /// @param _isStrictlyBetter Whether the new tranche needs to be strictly better than the old one.\n    /// @param _currentAprBps The current apr of the tranche.\n    /// @param _targetAprBps The target apr of the tranche.\n    /// @param __minImprovementApr The minimum improvement in APR.\n    function _checkTrancheStrictly(\n        bool _isStrictlyBetter,\n        uint256 _currentAprBps,\n        uint256 _targetAprBps,\n        uint256 __minImprovementApr\n    ) private pure {\n        /// @dev If _isStrictlyBetter is set, and the new apr is higher, then it'll underflow.\n        if (\n            _isStrictlyBetter\n                && ((_currentAprBps - _targetAprBps).mulDivDown(_PRECISION, _currentAprBps) < __minImprovementApr)\n        ) {\n            revert InvalidRenegotiationOfferError();\n        }\n    }\n\n    /// @dev Tranches are locked from any refi after they are initiated for some time.\n    function _getUnlockedTime(uint256 _trancheStartTime, uint256 _loanEndTime) private view returns (uint256) {\n        uint256 delta;\n        unchecked {\n            delta = _loanEndTime - _trancheStartTime;\n        }\n        return _trancheStartTime + delta.mulDivUp(_minLockPeriod, _PRECISION);\n    }\n\n    /// @dev Loans are locked from lender initiated refis in the end.\n    function _isLoanLocked(uint256 _loanStartTime, uint256 _loanDuration) private view returns (bool) {\n        unchecked {\n            /// @dev doesn't overflow because _minLockPeriod should be < 1\n            return block.timestamp > _loanStartTime + _loanDuration - _loanDuration.mulDivUp(_minLockPeriod, _PRECISION);\n        }\n    }\n\n    /// @notice Base ExecutionData Checks\n    /// @dev Note that we do not validate fee < principalAmount since this is done in the child class in this case.\n    /// @param _offerExecution The offer execution.\n    /// @param _tokenId The token ID.\n    /// @param _lender The lender.\n    /// @param _duration The duration.\n    /// @param _lenderOfferSignature The signature of the lender of LoanOffer.\n    /// @param _feeFraction The protocol fee fraction.\n    /// @param _totalAmount The total amount ahead.\n    function _validateOfferExecution(\n        OfferExecution calldata _offerExecution,\n        uint256 _tokenId,\n        address _lender,\n        uint256 _duration,\n        bytes calldata _lenderOfferSignature,\n        uint256 _feeFraction,\n        uint256 _totalAmount\n    ) private {\n        LoanOffer calldata offer = _offerExecution.offer;\n        address lender = offer.lender;\n        uint256 offerId = offer.offerId;\n        uint256 totalAmountAfterExecution = _offerExecution.amount + _totalAmount;\n\n        if (lender.code.length != 0 && getLoanManagerRegistry.isLoanManager(lender)) {\n            ILoanManager(lender).validateOffer(_tokenId, abi.encode(_offerExecution), _feeFraction);\n        } else {\n            _checkSignature(lender, offer.hash(), _lenderOfferSignature);\n        }\n\n        if (block.timestamp > offer.expirationTime) {\n            revert ExpiredOfferError(offer.expirationTime);\n        }\n\n        if (isOfferCancelled[_lender][offerId] || (offerId <= minOfferId[_lender])) {\n            revert CancelledOrExecutedOfferError(_lender, offerId);\n        }\n\n        if (totalAmountAfterExecution > offer.principalAmount) {\n            revert InvalidAmountError(totalAmountAfterExecution, offer.principalAmount);\n        }\n\n        if (offer.duration == 0 || _duration > offer.duration) {\n            revert InvalidDurationError();\n        }\n        if (offer.aprBps == 0) {\n            revert ZeroInterestError();\n        }\n        if ((offer.capacity != 0) && (_used[_lender][offer.offerId] + _offerExecution.amount > offer.capacity)) {\n            revert MaxCapacityExceededError();\n        }\n\n        _checkValidators(_offerExecution.offer, _tokenId);\n    }\n\n    /// @notice Basic checks (expiration / signature if diff than borrower) for execution data.\n    function _validateExecutionData(LoanExecutionData calldata _executionData, address _borrower) private view {\n        if (msg.sender != _borrower) {\n            _checkSignature(_borrower, _executionData.executionData.hash(), _executionData.borrowerOfferSignature);\n        }\n        if (block.timestamp > _executionData.executionData.expirationTime) {\n            revert ExpiredOfferError(_executionData.executionData.expirationTime);\n        }\n        if (_executionData.executionData.offerExecution.length > getMaxTranches) {\n            revert TooManyTranchesError();\n        }\n    }\n\n    /// @notice Extract addresses from first offer. Used for validations.\n    /// @param _executionData Execution data.\n    /// @return principalAddress Address of the principal token.\n    /// @return nftCollateralAddress Address of the NFT collateral.\n    function _getAddressesFromExecutionData(ExecutionData calldata _executionData)\n        private\n        pure\n        returns (address, address)\n    {\n        LoanOffer calldata one = _executionData.offerExecution[0].offer;\n        return (one.principalAddress, one.nftCollateralAddress);\n    }\n\n    /// @notice Check addresses are whitelisted.\n    /// @param _principalAddress Address of the principal token.\n    /// @param _nftCollateralAddress Address of the NFT collateral.\n    function _checkWhitelists(address _principalAddress, address _nftCollateralAddress) private view {\n        if (!_currencyManager.isWhitelisted(_principalAddress)) {\n            revert CurrencyNotWhitelistedError();\n        }\n        if (!_collectionManager.isWhitelisted(_nftCollateralAddress)) {\n            revert CollectionNotWhitelistedError();\n        }\n    }\n\n    /// @notice Check principal/collateral addresses match.\n    /// @param _offer The offer to check.\n    /// @param _principalAddress Address of the principal token.\n    /// @param _nftCollateralAddress Address of the NFT collateral.\n    /// @param _amountWithInterestAhead Amount of more senior principal + max accrued interest ahead.\n    function _checkOffer(\n        LoanOffer calldata _offer,\n        address _principalAddress,\n        address _nftCollateralAddress,\n        uint256 _amountWithInterestAhead\n    ) private pure {\n        if (_offer.principalAddress != _principalAddress || _offer.nftCollateralAddress != _nftCollateralAddress) {\n            revert InvalidAddressesError();\n        }\n        if (_amountWithInterestAhead > _offer.maxSeniorRepayment) {\n            revert InvalidTrancheError();\n        }\n    }\n\n    /// @notice Check generic offer validators for a given offer or\n    ///         an exact match if no validators are given. The validators\n    ///         check is performed only if tokenId is set to 0.\n    ///         Having one empty validator is used for collection offers (all IDs match).\n    /// @param _loanOffer The loan offer to check.\n    /// @param _tokenId The token ID to check.\n    function _checkValidators(LoanOffer calldata _loanOffer, uint256 _tokenId) private view {\n        uint256 offerTokenId = _loanOffer.nftCollateralTokenId;\n        if (_loanOffer.nftCollateralTokenId != 0) {\n            if (offerTokenId != _tokenId) {\n                revert InvalidCollateralIdError();\n            }\n        } else {\n            uint256 totalValidators = _loanOffer.validators.length;\n            if (totalValidators == 0 && _tokenId != 0) {\n                revert InvalidCollateralIdError();\n            } else if ((totalValidators == 1) && _loanOffer.validators[0].validator == address(0)) {\n                return;\n            }\n            for (uint256 i = 0; i < totalValidators;) {\n                IBaseLoan.OfferValidator memory thisValidator = _loanOffer.validators[i];\n                IOfferValidator(thisValidator.validator).validateOffer(_loanOffer, _tokenId, thisValidator.arguments);\n                unchecked {\n                    ++i;\n                }\n            }\n        }\n    }\n\n    /// @dev Check new trnches are at least this big.\n    function _getMinTranchePrincipal(uint256 _loanPrincipal) private view returns (uint256) {\n        return _loanPrincipal / (_MAX_RATIO_TRANCHE_MIN_PRINCIPAL * getMaxTranches);\n    }\n\n    function _hasCallback(bytes calldata _callbackData) private pure returns (bool) {\n        return _callbackData.length != 0;\n    }\n\n    function _processRepayments(Loan calldata loan) private returns (uint256, uint256) {\n        bool withProtocolFee = loan.protocolFee != 0;\n        uint256 totalRepayment = 0;\n        uint256 totalProtocolFee = 0;\n\n        ERC20 asset = ERC20(loan.principalAddress);\n        uint256 totalTranches = loan.tranche.length;\n        for (uint256 i; i < totalTranches;) {\n            Tranche memory tranche = loan.tranche[i];\n            uint256 newInterest =\n                tranche.principalAmount.getInterest(tranche.aprBps, block.timestamp - tranche.startTime);\n            uint256 thisProtocolFee = 0;\n            if (withProtocolFee) {\n                thisProtocolFee = newInterest.mulDivUp(loan.protocolFee, _PRECISION);\n                unchecked {\n                    totalProtocolFee += thisProtocolFee;\n                }\n            }\n            uint256 repayment = tranche.principalAmount + tranche.accruedInterest + newInterest - thisProtocolFee;\n            asset.safeTransferFrom(loan.borrower, tranche.lender, repayment);\n            unchecked {\n                totalRepayment += repayment;\n            }\n            if (getLoanManagerRegistry.isLoanManager(tranche.lender)) {\n                ILoanManager(tranche.lender).loanRepayment(\n                    tranche.loanId,\n                    tranche.principalAmount,\n                    tranche.aprBps,\n                    tranche.accruedInterest,\n                    loan.protocolFee,\n                    tranche.startTime\n                );\n            }\n            unchecked {\n                ++i;\n            }\n        }\n\n        if (withProtocolFee) {\n            asset.safeTransferFrom(loan.borrower, _protocolFee.recipient, totalProtocolFee);\n        }\n        return (totalRepayment, totalProtocolFee);\n    }\n\n    /// @notice Process a series of offers and return the loan ID, offer IDs, loan (built from such offers) and total fee.\n    /// @param _borrower The borrower of the loan.\n    /// @param _principalReceiver The receiver of the principal.\n    /// @param _principalAddress The principal address of the loan.\n    /// @param _nftCollateralAddress The NFT collateral address of the loan.\n    /// @param _tokenId The token ID of the loan.\n    /// @param _duration The duration of the loan.\n    /// @param _offerExecution The offer execution.\n    /// @return loanId The loan ID.\n    /// @return offerIds The offer IDs.\n    /// @return loan The loan.\n    /// @return totalFee The total fee.\n    function _processOffersFromExecutionData(\n        address _borrower,\n        address _principalReceiver,\n        address _principalAddress,\n        address _nftCollateralAddress,\n        uint256 _tokenId,\n        uint256 _duration,\n        OfferExecution[] calldata _offerExecution\n    ) private returns (uint256, uint256[] memory, Loan memory, uint256) {\n        Tranche[] memory tranche = new Tranche[](_offerExecution.length);\n        uint256[] memory offerIds = new uint256[](_offerExecution.length);\n        uint256 totalAmount;\n        uint256 loanId = _getAndSetNewLoanId();\n\n        ProtocolFee memory protocolFee = _protocolFee;\n        LoanOffer calldata offer;\n        uint256 totalFee;\n        uint256 totalAmountWithMaxInterest;\n        uint256 minAmount = type(uint256).max;\n        uint256 totalOffers = _offerExecution.length;\n        for (uint256 i = 0; i < totalOffers;) {\n            OfferExecution calldata thisOfferExecution = _offerExecution[i];\n            offer = thisOfferExecution.offer;\n            _validateOfferExecution(\n                thisOfferExecution,\n                _tokenId,\n                offer.lender,\n                _duration,\n                thisOfferExecution.lenderOfferSignature,\n                protocolFee.fraction,\n                totalAmount\n            );\n            uint256 amount = thisOfferExecution.amount;\n            if (amount < minAmount) {\n                minAmount = amount;\n            }\n            address lender = offer.lender;\n            _checkOffer(offer, _principalAddress, _nftCollateralAddress, totalAmountWithMaxInterest);\n            /// @dev Please note that we can now have many tranches with same `loanId`.\n            tranche[i] = Tranche(loanId, totalAmount, amount, lender, 0, block.timestamp, offer.aprBps);\n            unchecked {\n                totalAmount += amount;\n                totalAmountWithMaxInterest += amount + amount.getInterest(offer.aprBps, _duration);\n            }\n\n            uint256 fee;\n            unchecked {\n                fee = offer.fee.mulDivUp(amount, offer.principalAmount);\n                totalFee += fee;\n            }\n            _handleProtocolFeeForFee(\n                offer.principalAddress, lender, fee.mulDivUp(protocolFee.fraction, _PRECISION), protocolFee.recipient\n            );\n\n            ERC20(offer.principalAddress).safeTransferFrom(lender, _principalReceiver, amount - fee);\n            if (offer.capacity != 0) {\n                unchecked {\n                    _used[lender][offer.offerId] += amount;\n                }\n            } else {\n                isOfferCancelled[lender][offer.offerId] = true;\n            }\n\n            offerIds[i] = offer.offerId;\n            unchecked {\n                ++i;\n            }\n        }\n        if (minAmount < _getMinTranchePrincipal(totalAmount)) {\n            revert InvalidTrancheError();\n        }\n        Loan memory loan = Loan(\n            _borrower,\n            _tokenId,\n            _nftCollateralAddress,\n            _principalAddress,\n            totalAmount,\n            block.timestamp,\n            _duration,\n            tranche,\n            protocolFee.fraction\n        );\n\n        return (loanId, offerIds, loan, totalFee);\n    }\n\n    function _addNewTranche(\n        uint256 _newLoanId,\n        IMultiSourceLoan.Loan memory _loan,\n        IMultiSourceLoan.RenegotiationOffer calldata _renegotiationOffer\n    ) private view returns (IMultiSourceLoan.Loan memory) {\n        if (_renegotiationOffer.principalAmount < _getMinTranchePrincipal(_loan.principalAmount)) {\n            revert InvalidTrancheError();\n        }\n        uint256 newTrancheIndex = _loan.tranche.length;\n        IMultiSourceLoan.Tranche[] memory tranches = new IMultiSourceLoan.Tranche[](newTrancheIndex + 1);\n\n        /// @dev Copy old tranches\n        for (uint256 i = 0; i < newTrancheIndex;) {\n            tranches[i] = _loan.tranche[i];\n            unchecked {\n                ++i;\n            }\n        }\n\n        tranches[newTrancheIndex] = IMultiSourceLoan.Tranche(\n            _newLoanId,\n            _loan.principalAmount,\n            _renegotiationOffer.principalAmount,\n            _renegotiationOffer.lender,\n            0,\n            block.timestamp,\n            _renegotiationOffer.aprBps\n        );\n        _loan.tranche = tranches;\n        unchecked {\n            _loan.principalAmount += _renegotiationOffer.principalAmount;\n        }\n        return _loan;\n    }\n\n    /// @notice Check a signature is valid given a hash and signer.\n    /// @dev Comply with IERC1271 and EIP-712.\n    function _checkSignature(address _signer, bytes32 _hash, bytes calldata _signature) private view {\n        bytes32 typedDataHash = DOMAIN_SEPARATOR().toTypedDataHash(_hash);\n\n        if (_signer.code.length != 0) {\n            if (IERC1271(_signer).isValidSignature(typedDataHash, _signature) != MAGICVALUE_1271) {\n                revert InvalidSignatureError();\n            }\n        } else {\n            address recovered = typedDataHash.recover(_signature);\n            if (_signer != recovered) {\n                revert InvalidSignatureError();\n            }\n        }\n    }\n\n    /// @dev Check whether an offer is strictly better than a tranche\n    function _checkStrictlyBetter(\n        uint256 _offerPrincipalAmount,\n        uint256 _loanPrincipalAmount,\n        uint256 _offerEndTime,\n        uint256 _loanEndTime,\n        uint256 _offerAprBps,\n        uint256 _loanAprBps,\n        uint256 _offerFee\n    ) internal view {\n        uint256 minImprovementApr = _minImprovementApr;\n\n        /// @dev If principal is increased, then we need to check net daily interest is better.\n        /// interestDelta = (_loanAprBps * _loanPrincipalAmount - _offerAprBps * _offerPrincipalAmount)\n        /// We already checked that all tranches are strictly better.\n        /// We check that the duration is not decreased or the offer charges a fee.\n        if (\n            (\n                (_offerPrincipalAmount - _loanPrincipalAmount != 0)\n                    && (\n                        (_loanAprBps * _loanPrincipalAmount - _offerAprBps * _offerPrincipalAmount).mulDivDown(\n                            _PRECISION, _loanAprBps * _loanPrincipalAmount\n                        ) < minImprovementApr\n                    )\n            ) || (_offerFee != 0) || (_offerEndTime < _loanEndTime)\n        ) {\n            revert NotStrictlyImprovedError();\n        }\n    }\n}\n"}, "lib/delegate-registry/src/IDelegateRegistry.sol": {"content": "// SPDX-License-Identifier: CC0-1.0\npragma solidity ^0.8.30;\n\n/**\n * @title IDelegateRegistry\n * @custom:version 2.0\n * @custom:author foobar (0xfoobar)\n * @notice A standalone immutable registry storing delegated permissions from one address to another\n */\ninterface IDelegateRegistry {\n    /// @notice Delegation type, NONE is used when a delegation does not exist or is revoked\n    enum DelegationType {\n        NONE,\n        ALL,\n        CONTRACT,\n        ERC721,\n        ERC20,\n        ERC1155\n    }\n\n    /// @notice Struct for returning delegations\n    struct Delegation {\n        DelegationType type_;\n        address to;\n        address from;\n        bytes32 rights;\n        address contract_;\n        uint256 tokenId;\n        uint256 amount;\n    }\n\n    /// @notice Emitted when an address delegates or revokes rights for their entire wallet\n    event DelegateAll(address indexed from, address indexed to, bytes32 rights, bool enable);\n\n    /// @notice Emitted when an address delegates or revokes rights for a contract address\n    event DelegateContract(address indexed from, address indexed to, address indexed contract_, bytes32 rights, bool enable);\n\n    /// @notice Emitted when an address delegates or revokes rights for an ERC721 tokenId\n    event DelegateERC721(address indexed from, address indexed to, address indexed contract_, uint256 tokenId, bytes32 rights, bool enable);\n\n    /// @notice Emitted when an address delegates or revokes rights for an amount of ERC20 tokens\n    event DelegateERC20(address indexed from, address indexed to, address indexed contract_, bytes32 rights, uint256 amount);\n\n    /// @notice Emitted when an address delegates or revokes rights for an amount of an ERC1155 tokenId\n    event DelegateERC1155(address indexed from, address indexed to, address indexed contract_, uint256 tokenId, bytes32 rights, uint256 amount);\n\n    /// @notice Thrown if multicall calldata is malformed\n    error MulticallFailed();\n\n    /**\n     * -----------  WRITE -----------\n     */\n\n    /**\n     * @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\n     * @param data The encoded function data for each of the calls to make to this contract\n     * @return results The results from each of the calls passed in via data\n     */\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\n\n    /**\n     * @notice Allow the delegate to act on behalf of `msg.sender` for all contracts\n     * @param to The address to act as delegate\n     * @param rights Specific subdelegation rights granted to the delegate, pass an empty bytestring to encompass all rights\n     * @param enable Whether to enable or disable this delegation, true delegates and false revokes\n     * @return delegationHash The unique identifier of the delegation\n     */\n    function delegateAll(address to, bytes32 rights, bool enable) external payable returns (bytes32 delegationHash);\n\n    /**\n     * @notice Allow the delegate to act on behalf of `msg.sender` for a specific contract\n     * @param to The address to act as delegate\n     * @param contract_ The contract whose rights are being delegated\n     * @param rights Specific subdelegation rights granted to the delegate, pass an empty bytestring to encompass all rights\n     * @param enable Whether to enable or disable this delegation, true delegates and false revokes\n     * @return delegationHash The unique identifier of the delegation\n     */\n    function delegateContract(address to, address contract_, bytes32 rights, bool enable) external payable returns (bytes32 delegationHash);\n\n    /**\n     * @notice Allow the delegate to act on behalf of `msg.sender` for a specific ERC721 token\n     * @param to The address to act as delegate\n     * @param contract_ The contract whose rights are being delegated\n     * @param tokenId The token id to delegate\n     * @param rights Specific subdelegation rights granted to the delegate, pass an empty bytestring to encompass all rights\n     * @param enable Whether to enable or disable this delegation, true delegates and false revokes\n     * @return delegationHash The unique identifier of the delegation\n     */\n    function delegateERC721(address to, address contract_, uint256 tokenId, bytes32 rights, bool enable) external payable returns (bytes32 delegationHash);\n\n    /**\n     * @notice Allow the delegate to act on behalf of `msg.sender` for a specific amount of ERC20 tokens\n     * @dev The actual amount is not encoded in the hash, just the existence of a amount (since it is an upper bound)\n     * @param to The address to act as delegate\n     * @param contract_ The address for the fungible token contract\n     * @param rights Specific subdelegation rights granted to the delegate, pass an empty bytestring to encompass all rights\n     * @param amount The amount to delegate, > 0 delegates and 0 revokes\n     * @return delegationHash The unique identifier of the delegation\n     */\n    function delegateERC20(address to, address contract_, bytes32 rights, uint256 amount) external payable returns (bytes32 delegationHash);\n\n    /**\n     * @notice Allow the delegate to act on behalf of `msg.sender` for a specific amount of ERC1155 tokens\n     * @dev The actual amount is not encoded in the hash, just the existence of a amount (since it is an upper bound)\n     * @param to The address to act as delegate\n     * @param contract_ The address of the contract that holds the token\n     * @param tokenId The token id to delegate\n     * @param rights Specific subdelegation rights granted to the delegate, pass an empty bytestring to encompass all rights\n     * @param amount The amount of that token id to delegate, > 0 delegates and 0 revokes\n     * @return delegationHash The unique identifier of the delegation\n     */\n    function delegateERC1155(address to, address contract_, uint256 tokenId, bytes32 rights, uint256 amount) external payable returns (bytes32 delegationHash);\n\n    /**\n     * ----------- CHECKS -----------\n     */\n\n    /**\n     * @notice Check if `to` is a delegate of `from` for the entire wallet\n     * @param to The potential delegate address\n     * @param from The potential address who delegated rights\n     * @param rights Specific rights to check for, pass the zero value to ignore subdelegations and check full delegations only\n     * @return valid Whether delegate is granted to act on the from's behalf\n     */\n    function checkDelegateForAll(address to, address from, bytes32 rights) external view returns (bool);\n\n    /**\n     * @notice Check if `to` is a delegate of `from` for the specified `contract_` or the entire wallet\n     * @param to The delegated address to check\n     * @param contract_ The specific contract address being checked\n     * @param from The cold wallet who issued the delegation\n     * @param rights Specific rights to check for, pass the zero value to ignore subdelegations and check full delegations only\n     * @return valid Whether delegate is granted to act on from's behalf for entire wallet or that specific contract\n     */\n    function checkDelegateForContract(address to, address from, address contract_, bytes32 rights) external view returns (bool);\n\n    /**\n     * @notice Check if `to` is a delegate of `from` for the specific `contract` and `tokenId`, the entire `contract_`, or the entire wallet\n     * @param to The delegated address to check\n     * @param contract_ The specific contract address being checked\n     * @param tokenId The token id for the token to delegating\n     * @param from The wallet that issued the delegation\n     * @param rights Specific rights to check for, pass the zero value to ignore subdelegations and check full delegations only\n     * @return valid Whether delegate is granted to act on from's behalf for entire wallet, that contract, or that specific tokenId\n     */\n    function checkDelegateForERC721(address to, address from, address contract_, uint256 tokenId, bytes32 rights) external view returns (bool);\n\n    /**\n     * @notice Returns the amount of ERC20 tokens the delegate is granted rights to act on the behalf of\n     * @param to The delegated address to check\n     * @param contract_ The address of the token contract\n     * @param from The cold wallet who issued the delegation\n     * @param rights Specific rights to check for, pass the zero value to ignore subdelegations and check full delegations only\n     * @return balance The delegated balance, which will be 0 if the delegation does not exist\n     */\n    function checkDelegateForERC20(address to, address from, address contract_, bytes32 rights) external view returns (uint256);\n\n    /**\n     * @notice Returns the amount of a ERC1155 tokens the delegate is granted rights to act on the behalf of\n     * @param to The delegated address to check\n     * @param contract_ The address of the token contract\n     * @param tokenId The token id to check the delegated amount of\n     * @param from The cold wallet who issued the delegation\n     * @param rights Specific rights to check for, pass the zero value to ignore subdelegations and check full delegations only\n     * @return balance The delegated balance, which will be 0 if the delegation does not exist\n     */\n    function checkDelegateForERC1155(address to, address from, address contract_, uint256 tokenId, bytes32 rights) external view returns (uint256);\n\n    /**\n     * ----------- ENUMERATIONS -----------\n     */\n\n    /**\n     * @notice Returns all enabled delegations a given delegate has received\n     * @param to The address to retrieve delegations for\n     * @return delegations Array of Delegation structs\n     */\n    function getIncomingDelegations(address to) external view returns (Delegation[] memory delegations);\n\n    /**\n     * @notice Returns all enabled delegations an address has given out\n     * @param from The address to retrieve delegations for\n     * @return delegations Array of Delegation structs\n     */\n    function getOutgoingDelegations(address from) external view returns (Delegation[] memory delegations);\n\n    /**\n     * @notice Returns all hashes associated with enabled delegations an address has received\n     * @param to The address to retrieve incoming delegation hashes for\n     * @return delegationHashes Array of delegation hashes\n     */\n    function getIncomingDelegationHashes(address to) external view returns (bytes32[] memory delegationHashes);\n\n    /**\n     * @notice Returns all hashes associated with enabled delegations an address has given out\n     * @param from The address to retrieve outgoing delegation hashes for\n     * @return delegationHashes Array of delegation hashes\n     */\n    function getOutgoingDelegationHashes(address from) external view returns (bytes32[] memory delegationHashes);\n\n    /**\n     * @notice Returns the delegations for a given array of delegation hashes\n     * @param delegationHashes is an array of hashes that correspond to delegations\n     * @return delegations Array of Delegation structs, return empty structs for nonexistent or revoked delegations\n     */\n    function getDelegationsFromHashes(bytes32[] calldata delegationHashes) external view returns (Delegation[] memory delegations);\n\n    /**\n     * ----------- STORAGE ACCESS -----------\n     */\n\n    /**\n     * @notice Allows external contracts to read arbitrary storage slots\n     */\n    function readSlot(bytes32 location) external view returns (bytes32);\n\n    /**\n     * @notice Allows external contracts to read an arbitrary array of storage slots\n     */\n    function readSlots(bytes32[] calldata locations) external view returns (bytes32[] memory);\n}\n"}, "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"}, "lib/solmate/src/tokens/ERC20.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.30;\n\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\nabstract contract ERC20 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /*//////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    uint8 public immutable decimals;\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    /*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal immutable INITIAL_CHAIN_ID;\n\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n\n        INITIAL_CHAIN_ID = block.chainid;\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        balanceOf[msg.sender] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\n\n        balanceOf[from] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        // Unchecked because the only math done is incrementing\n        // the owner's nonce which cannot realistically overflow.\n        unchecked {\n            address recoveredAddress = ecrecover(\n                keccak256(\n                    abi.encodePacked(\n                        \"\\x19\\x01\",\n                        DOMAIN_SEPARATOR(),\n                        keccak256(\n                            abi.encode(\n                                keccak256(\n                                    \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n                                ),\n                                owner,\n                                spender,\n                                value,\n                                nonces[owner]++,\n                                deadline\n                            )\n                        )\n                    )\n                ),\n                v,\n                r,\n                s\n            );\n\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n            allowance[recoveredAddress][spender] = value;\n        }\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(name)),\n                    keccak256(\"1\"),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n\n        // Cannot underflow because a user's balance\n        // will never be larger than the total supply.\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}\n"}, "lib/solmate/src/tokens/ERC721.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.30;\n\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\nabstract contract ERC721 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\n\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\n\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /*//////////////////////////////////////////////////////////////\n                         METADATA STORAGE/LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    function tokenURI(uint256 id) public view virtual returns (string memory);\n\n    /*//////////////////////////////////////////////////////////////\n                      ERC721 BALANCE/OWNER STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(uint256 => address) internal _ownerOf;\n\n    mapping(address => uint256) internal _balanceOf;\n\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\n        require((owner = _ownerOf[id]) != address(0), \"NOT_MINTED\");\n    }\n\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        require(owner != address(0), \"ZERO_ADDRESS\");\n\n        return _balanceOf[owner];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                         ERC721 APPROVAL STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(uint256 => address) public getApproved;\n\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(string memory _name, string memory _symbol) {\n        name = _name;\n        symbol = _symbol;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC721 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 id) public virtual {\n        address owner = _ownerOf[id];\n\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \"NOT_AUTHORIZED\");\n\n        getApproved[id] = spender;\n\n        emit Approval(owner, spender, id);\n    }\n\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        isApprovedForAll[msg.sender][operator] = approved;\n\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) public virtual {\n        require(from == _ownerOf[id], \"WRONG_FROM\");\n\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(\n            msg.sender == from || isApprovedForAll[from][msg.sender] || msg.sender == getApproved[id],\n            \"NOT_AUTHORIZED\"\n        );\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        unchecked {\n            _balanceOf[from]--;\n\n            _balanceOf[to]++;\n        }\n\n        _ownerOf[id] = to;\n\n        delete getApproved[id];\n\n        emit Transfer(from, to, id);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) public virtual {\n        transferFrom(from, to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \"\") ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        bytes calldata data\n    ) public virtual {\n        transferFrom(from, to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC165 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 id) internal virtual {\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(_ownerOf[id] == address(0), \"ALREADY_MINTED\");\n\n        // Counter overflow is incredibly unrealistic.\n        unchecked {\n            _balanceOf[to]++;\n        }\n\n        _ownerOf[id] = to;\n\n        emit Transfer(address(0), to, id);\n    }\n\n    function _burn(uint256 id) internal virtual {\n        address owner = _ownerOf[id];\n\n        require(owner != address(0), \"NOT_MINTED\");\n\n        // Ownership check above ensures no underflow.\n        unchecked {\n            _balanceOf[owner]--;\n        }\n\n        delete _ownerOf[id];\n\n        delete getApproved[id];\n\n        emit Transfer(owner, address(0), id);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL SAFE MINT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _safeMint(address to, uint256 id) internal virtual {\n        _mint(to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \"\") ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function _safeMint(\n        address to,\n        uint256 id,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n}\n\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\nabstract contract ERC721TokenReceiver {\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external virtual returns (bytes4) {\n        return ERC721TokenReceiver.onERC721Received.selector;\n    }\n}\n"}, "lib/solmate/src/utils/FixedPointMathLib.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.30;\n\n/// @notice Arithmetic library with operations for fixed-point numbers.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\nlibrary FixedPointMathLib {\n    /*//////////////////////////////////////////////////////////////\n                    SIMPLIFIED FIXED POINT OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal constant MAX_UINT256 = 2**256 - 1;\n\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\n\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\n    }\n\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\n    }\n\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\n    }\n\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                    LOW LEVEL FIXED POINT OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function mulDivDown(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 z) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\n                revert(0, 0)\n            }\n\n            // Divide x * y by the denominator.\n            z := div(mul(x, y), denominator)\n        }\n    }\n\n    function mulDivUp(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 z) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\n                revert(0, 0)\n            }\n\n            // If x * y modulo the denominator is strictly greater than 0,\n            // 1 is added to round up the division of x * y by the denominator.\n            z := add(gt(mod(mul(x, y), denominator), 0), div(mul(x, y), denominator))\n        }\n    }\n\n    function rpow(\n        uint256 x,\n        uint256 n,\n        uint256 scalar\n    ) internal pure returns (uint256 z) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            switch x\n            case 0 {\n                switch n\n                case 0 {\n                    // 0 ** 0 = 1\n                    z := scalar\n                }\n                default {\n                    // 0 ** n = 0\n                    z := 0\n                }\n            }\n            default {\n                switch mod(n, 2)\n                case 0 {\n                    // If n is even, store scalar in z for now.\n                    z := scalar\n                }\n                default {\n                    // If n is odd, store x in z for now.\n                    z := x\n                }\n\n                // Shifting right by 1 is like dividing by 2.\n                let half := shr(1, scalar)\n\n                for {\n                    // Shift n right by 1 before looping to halve it.\n                    n := shr(1, n)\n                } n {\n                    // Shift n right by 1 each iteration to halve it.\n                    n := shr(1, n)\n                } {\n                    // Revert immediately if x ** 2 would overflow.\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\n                    if shr(128, x) {\n                        revert(0, 0)\n                    }\n\n                    // Store x squared.\n                    let xx := mul(x, x)\n\n                    // Round to the nearest number.\n                    let xxRound := add(xx, half)\n\n                    // Revert if xx + half overflowed.\n                    if lt(xxRound, xx) {\n                        revert(0, 0)\n                    }\n\n                    // Set x to scaled xxRound.\n                    x := div(xxRound, scalar)\n\n                    // If n is even:\n                    if mod(n, 2) {\n                        // Compute z * x.\n                        let zx := mul(z, x)\n\n                        // If z * x overflowed:\n                        if iszero(eq(div(zx, x), z)) {\n                            // Revert if x is non-zero.\n                            if iszero(iszero(x)) {\n                                revert(0, 0)\n                            }\n                        }\n\n                        // Round to the nearest number.\n                        let zxRound := add(zx, half)\n\n                        // Revert if zx + half overflowed.\n                        if lt(zxRound, zx) {\n                            revert(0, 0)\n                        }\n\n                        // Return properly scaled zxRound.\n                        z := div(zxRound, scalar)\n                    }\n                }\n            }\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        GENERAL NUMBER UTILITIES\n    //////////////////////////////////////////////////////////////*/\n\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let y := x // We start y at x, which will help us make our initial estimate.\n\n            z := 181 // The \"correct\" value is 1, but this saves a multiplication later.\n\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\n\n            // We check y >= 2^(k + 8) but shift right by k bits\n            // each branch to ensure that if x >= 256, then y >= 256.\n            if iszero(lt(y, 0x10000000000000000000000000000000000)) {\n                y := shr(128, y)\n                z := shl(64, z)\n            }\n            if iszero(lt(y, 0x1000000000000000000)) {\n                y := shr(64, y)\n                z := shl(32, z)\n            }\n            if iszero(lt(y, 0x10000000000)) {\n                y := shr(32, y)\n                z := shl(16, z)\n            }\n            if iszero(lt(y, 0x1000000)) {\n                y := shr(16, y)\n                z := shl(8, z)\n            }\n\n            // Goal was to get z*z*y within a small factor of x. More iterations could\n            // get y in a tighter range. Currently, we will have y in [256, 256*2^16).\n            // We ensured y >= 256 so that the relative difference between y and y+1 is small.\n            // That's not possible if x < 256 but we can just verify those cases exhaustively.\n\n            // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8), and either y >= 256, or x < 256.\n            // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\n            // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of sqrt(x), or about 20bps.\n\n            // For s in the range [1/256, 256], the estimate f(s) = (181/1024) * (s+1) is in the range\n            // (1/2.84 * sqrt(s), 2.84 * sqrt(s)), with largest error when s = 1 and when s = 256 or 1/256.\n\n            // Since y is in [256, 256*2^16), let a = y/65536, so that a is in [1/256, 256). Then we can estimate\n            // sqrt(y) using sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2^18.\n\n            // There is no overflow risk here since y < 2^136 after the first branch above.\n            z := shr(18, mul(z, add(y, 65536))) // A mul() is saved from starting z at 181.\n\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n\n            // If x+1 is a perfect square, the Babylonian method cycles between\n            // floor(sqrt(x)) and ceil(sqrt(x)). This statement ensures we return floor.\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\n            // Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\n            // If you don't care whether the floor or ceil square root is returned, you can remove this statement.\n            z := sub(z, lt(div(x, z), z))\n        }\n    }\n\n    function unsafeMod(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Mod x by y. Note this will return\n            // 0 instead of reverting if y is zero.\n            z := mod(x, y)\n        }\n    }\n\n    function unsafeDiv(uint256 x, uint256 y) internal pure returns (uint256 r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Divide x by y. Note this will return\n            // 0 instead of reverting if y is zero.\n            r := div(x, y)\n        }\n    }\n\n    function unsafeDivUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Add 1 to x * y if x % y > 0. Note this will\n            // return 0 instead of reverting if y is zero.\n            z := add(gt(mod(x, y), 0), div(x, y))\n        }\n    }\n}\n"}, "lib/solmate/src/utils/ReentrancyGuard.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.30;\n\n/// @notice Gas optimized reentrancy protection for smart contracts.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/ReentrancyGuard.sol)\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\nabstract contract ReentrancyGuard {\n    uint256 private locked = 1;\n\n    modifier nonReentrant() virtual {\n        require(locked == 1, \"REENTRANCY\");\n\n        locked = 2;\n\n        _;\n\n        locked = 1;\n    }\n}\n"}, "lib/solmate/src/utils/SafeTransferLib.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.30;\n\nimport {ERC20} from \"../tokens/ERC20.sol\";\n\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\nlibrary SafeTransferLib {\n    /*//////////////////////////////////////////////////////////////\n                             ETH OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferETH(address to, uint256 amount) internal {\n        bool success;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Transfer the ETH and store if it succeeded or not.\n            success := call(gas(), to, amount, 0, 0, 0, 0)\n        }\n\n        require(success, \"ETH_TRANSFER_FAILED\");\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            ERC20 OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferFrom(\n        ERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \"from\" argument.\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \"to\" argument.\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \"amount\" argument. Masking not required as it's a full 32 byte type.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FROM_FAILED\");\n    }\n\n    function safeTransfer(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument. Masking not required as it's a full 32 byte type.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FAILED\");\n    }\n\n    function safeApprove(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument. Masking not required as it's a full 32 byte type.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"APPROVE_FAILED\");\n    }\n}\n"}, "src/interfaces/validators/IOfferValidator.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\nimport \"../loans/IMultiSourceLoan.sol\";\n\n/// @title Interface for  Loan Offer Validators.\n/// @author Florida St\n/// @notice Verify the given `_offer` is valid for `_tokenId` and `_validatorData`.\ninterface IOfferValidator {\n    /// @notice Validate a loan offer.\n    function validateOffer(IMultiSourceLoan.LoanOffer calldata _offer, uint256 _tokenId, bytes calldata _validatorData)\n        external\n        view;\n}\n"}, "src/interfaces/INFTFlashAction.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\n/// @title NFT Flash Action Interface\n/// @author Florida St\n/// @notice Interface for Flash Actions on NFTs in outstanding loans.\ninterface INFTFlashAction {\n    error InvalidOwnerError();\n\n    /// @notice Execute an arbitrary flash action on a given NFT. This contract owns it and must return it.\n    /// @param _collection The NFT collection.\n    /// @param _tokenId The NFT token ID.\n    /// @param _target The target contract.\n    /// @param _data The data to send to the target.\n    function execute(address _collection, uint256 _tokenId, address _target, bytes calldata _data) external;\n}\n"}, "src/interfaces/loans/ILoanManager.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\n/// @title Multi Source Loan Interface\n/// @author Florida St\n/// @notice A multi source loan is one with multiple tranches.\ninterface ILoanManager {\n    struct ProposedCaller {\n        address caller;\n        bool isLoanContract;\n    }\n\n    /// @notice Validate an offer. Can only be called by an accepted caller.\n    /// @param _tokenId The token id.\n    /// @param _offer The offer to validate.\n    /// @param _protocolFee The protocol fee.\n    function validateOffer(uint256 _tokenId, bytes calldata _offer, uint256 _protocolFee) external;\n\n    /// @notice Update the offer handler.\n    /// @param _offerHandler The new offer handler.\n    function updateOfferHandler(address _offerHandler) external;\n\n    /// @notice Get the offer handler setter.\n    /// @dev Had to take this out from the contract because of size issues.\n    /// @return The offer handler setter.\n    function getParameterSetter() external view returns (address);\n\n    /// @notice Add allowed callers.\n    /// @param _callers The callers to add.\n    function addCallers(ProposedCaller[] calldata _callers) external;\n\n    /// @notice Called on loan repayment.\n    /// @param _loanId The loan id.\n    /// @param _principalAmount The principal amount.\n    /// @param _apr The APR.\n    /// @param _accruedInterest The accrued interest.\n    /// @param _protocolFee The protocol fee.\n    /// @param _startTime The start time.\n    function loanRepayment(\n        uint256 _loanId,\n        uint256 _principalAmount,\n        uint256 _apr,\n        uint256 _accruedInterest,\n        uint256 _protocolFee,\n        uint256 _startTime\n    ) external;\n\n    /// @notice Called on loan liquidation.\n    /// @param _loanAddress The address of the loan contract since this might be called by a liquidator.\n    /// @param _loanId The loan id.\n    /// @param _principalAmount The principal amount.\n    /// @param _apr The APR.\n    /// @param _accruedInterest The accrued interest.\n    /// @param _protocolFee The protocol fee.\n    /// @param _received The received amount (from liquidation proceeds)\n    /// @param _startTime The start time.\n    function loanLiquidation(\n        address _loanAddress,\n        uint256 _loanId,\n        uint256 _principalAmount,\n        uint256 _apr,\n        uint256 _accruedInterest,\n        uint256 _protocolFee,\n        uint256 _received,\n        uint256 _startTime\n    ) external;\n}\n"}, "src/interfaces/loans/ILoanManagerRegistry.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\n/// @title Interface Loan Manager Registry\n/// @author Florida St\n/// @notice Interface for a Loan Manager Registry.\ninterface ILoanManagerRegistry {\n    /// @notice Add a loan manager to the registry\n    /// @param _loanManager Address of the loan manager\n    function addLoanManager(address _loanManager) external;\n\n    /// @notice Remove a loan manager from the registry\n    /// @param _loanManager Address of the loan manager\n    function removeLoanManager(address _loanManager) external;\n\n    /// @notice Check if a loan manager is registered\n    /// @param _loanManager Address of the loan manager\n    /// @return True if the loan manager is registered\n    function isLoanManager(address _loanManager) external view returns (bool);\n}\n"}, "src/interfaces/loans/IMultiSourceLoan.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\nimport \"./IBaseLoan.sol\";\n\n/// @title Multi Source Loan Interface\n/// @author Florida St\n/// @notice A multi source loan is one with multiple tranches.\ninterface IMultiSourceLoan {\n    /// @notice Borrowers receive offers that are then validated.\n    /// @dev Setting the nftCollateralTokenId to 0 triggers validation through `validators`.\n    /// @param offerId Offer ID. Used for canceling/setting as executed.\n    /// @param lender Lender of the offer.\n    /// @param fee Origination fee.\n    /// @param capacity Capacity of the offer.\n    /// @param nftCollateralAddress Address of the NFT collateral.\n    /// @param nftCollateralTokenId NFT collateral token ID.\n    /// @param principalAddress Address of the principal.\n    /// @param principalAmount Principal amount of the loan.\n    /// @param aprBps APR in BPS.\n    /// @param expirationTime Expiration time of the offer.\n    /// @param duration Duration of the loan in seconds.\n    /// @param maxSeniorRepayment Max amount of senior capital ahead (principal + interest).\n    /// @param validators Arbitrary contract to validate offers implementing `IBaseOfferValidator`.\n    struct LoanOffer {\n        uint256 offerId;\n        address lender;\n        uint256 fee;\n        uint256 capacity;\n        address nftCollateralAddress;\n        uint256 nftCollateralTokenId;\n        address principalAddress;\n        uint256 principalAmount;\n        uint256 aprBps;\n        uint256 expirationTime;\n        uint256 duration;\n        uint256 maxSeniorRepayment;\n        IBaseLoan.OfferValidator[] validators;\n    }\n\n    /// @notice Offer + how much will be filled (always <= principalAmount).\n    /// @param offer Offer.\n    /// @param amount Amount to be filled.\n    struct OfferExecution {\n        LoanOffer offer;\n        uint256 amount;\n        bytes lenderOfferSignature;\n    }\n\n    /// @notice Offer + necessary fields to execute a specific loan. This has a separate expirationTime to avoid\n    /// someone holding an offer and executing much later, without the borrower's awareness.\n    /// @dev It's advised that borrowers only set an expirationTime close to the actual time they will execute the loan\n    ///      to avoid replays.\n    /// @param offerExecution List of offers to be filled and amount for each.\n    /// @param tokenId NFT collateral token ID.\n    /// @param amount The amount the borrower is willing to take (must be <= _loanOffer principalAmount)\n    /// @param expirationTime Expiration time of the signed offer by the borrower.\n    /// @param callbackData Data to pass to the callback.\n    struct ExecutionData {\n        OfferExecution[] offerExecution;\n        uint256 tokenId;\n        uint256 duration;\n        uint256 expirationTime;\n        address principalReceiver;\n        bytes callbackData;\n    }\n\n    /// @param executionData Execution data.\n    /// @param borrower Address that owns the NFT and will take over the loan.\n    /// @param borrowerOfferSignature Signature of the offer (signed by borrower).\n    /// @param callbackData Whether to call the afterPrincipalTransfer callback\n    struct LoanExecutionData {\n        ExecutionData executionData;\n        address borrower;\n        bytes borrowerOfferSignature;\n    }\n\n    /// @param loanId Loan ID.\n    /// @param callbackData Whether to call the afterNFTTransfer callback\n    /// @param shouldDelegate Whether to delegate ownership of the NFT (avoid seaport flags).\n    struct SignableRepaymentData {\n        uint256 loanId;\n        bytes callbackData;\n        bool shouldDelegate;\n    }\n\n    /// @param loan Loan.\n    /// @param borrowerLoanSignature Signature of the loan (signed by borrower).\n    struct LoanRepaymentData {\n        SignableRepaymentData data;\n        Loan loan;\n        bytes borrowerSignature;\n    }\n\n    /// @notice Tranches have different seniority levels.\n    /// @param loanId Loan ID.\n    /// @param floor Amount of principal more senior to this tranche.\n    /// @param principalAmount Total principal in this tranche.\n    /// @param lender Lender for this given tranche.\n    /// @param accruedInterest Accrued Interest.\n    /// @param startTime Start Time. Either the time at which the loan initiated / was refinanced.\n    /// @param aprBps APR in basis points.\n    struct Tranche {\n        uint256 loanId;\n        uint256 floor;\n        uint256 principalAmount;\n        address lender;\n        uint256 accruedInterest;\n        uint256 startTime;\n        uint256 aprBps;\n    }\n\n    /// @dev Principal Amount is equal to the sum of all tranches principalAmount.\n    /// We keep it for caching purposes. Since we are not saving this on chain but the hash,\n    /// it does not have a huge impact on gas.\n    /// @param borrower Borrower.\n    /// @param nftCollateralTokenId NFT Collateral Token ID.\n    /// @param nftCollateralAddress NFT Collateral Address.\n    /// @param principalAddress Principal Address.\n    /// @param principalAmount Principal Amount.\n    /// @param startTime Start Time.\n    /// @param duration Duration.\n    /// @param tranche Tranches.\n    /// @param protocolFee Protocol Fee.\n    struct Loan {\n        address borrower;\n        uint256 nftCollateralTokenId;\n        address nftCollateralAddress;\n        address principalAddress;\n        uint256 principalAmount;\n        uint256 startTime;\n        uint256 duration;\n        Tranche[] tranche;\n        uint256 protocolFee;\n    }\n\n    /// @notice Renegotiation offer.\n    /// @param renegotiationId Renegotiation ID.\n    /// @param loanId Loan ID.\n    /// @param lender Lender.\n    /// @param fee Fee.\n    /// @param trancheIndex Tranche Indexes to be refinanced.\n    /// @param principalAmount Principal Amount. If more than one tranche, it must be the sum.\n    /// @param aprBps APR in basis points.\n    /// @param expirationTime Expiration Time.\n    /// @param duration Duration.\n    struct RenegotiationOffer {\n        uint256 renegotiationId;\n        uint256 loanId;\n        address lender;\n        uint256 fee;\n        uint256[] trancheIndex;\n        uint256 principalAmount;\n        uint256 aprBps;\n        uint256 expirationTime;\n        uint256 duration;\n    }\n\n    event LoanLiquidated(uint256 loanId);\n    event LoanEmitted(uint256 loanId, uint256[] offerId, Loan loan, uint256 fee);\n    event LoanRefinanced(uint256 renegotiationId, uint256 oldLoanId, uint256 newLoanId, Loan loan, uint256 fee);\n    event LoanRepaid(uint256 loanId, uint256 totalRepayment, uint256 fee);\n    event LoanRefinancedFromNewOffers(\n        uint256 loanId, uint256 newLoanId, Loan loan, uint256[] offerIds, uint256 totalFee\n    );\n    event Delegated(uint256 loanId, address delegate, bytes32 _rights, bool value);\n    event FlashActionContractUpdated(address newFlashActionContract);\n    event FlashActionExecuted(uint256 loanId, address target, bytes data);\n    event RevokeDelegate(address delegate, address collection, uint256 tokenId, bytes32 _rights);\n    event MinLockPeriodUpdated(uint256 minLockPeriod);\n\n    /// @notice Call by the borrower when emiting a new loan.\n    /// @param _loanExecutionData Loan execution data.\n    /// @return loanId Loan ID.\n    /// @return loan Loan.\n    function emitLoan(LoanExecutionData calldata _loanExecutionData) external returns (uint256, Loan memory);\n\n    /// @notice Refinance whole loan (leaving just one tranche).\n    /// @param _renegotiationOffer Offer to refinance a loan.\n    /// @param _loan Current loan.\n    /// @param _renegotiationOfferSignature Signature of the offer.\n    /// @return loanId New Loan Id, New Loan.\n    function refinanceFull(\n        RenegotiationOffer calldata _renegotiationOffer,\n        Loan memory _loan,\n        bytes calldata _renegotiationOfferSignature\n    ) external returns (uint256, Loan memory);\n\n    /// @notice Add a new tranche to a loan.\n    /// @param _renegotiationOffer Offer for new tranche.\n    /// @param _loan Current loan.\n    /// @param _renegotiationOfferSignature Signature of the offer.\n    /// @return loanId New Loan Id\n    /// @return loan New Loan.\n    function addNewTranche(\n        RenegotiationOffer calldata _renegotiationOffer,\n        Loan memory _loan,\n        bytes calldata _renegotiationOfferSignature\n    ) external returns (uint256, Loan memory);\n\n    /// @notice Refinance a loan partially. It can only be called by the new lender\n    /// (they are always a strict improvement on apr).\n    /// @param _renegotiationOffer Offer to refinance a loan partially.\n    /// @param _loan Current loan.\n    /// @return loanId New Loan Id, New Loan.\n    /// @return loan New Loan.\n    function refinancePartial(RenegotiationOffer calldata _renegotiationOffer, Loan memory _loan)\n        external\n        returns (uint256, Loan memory);\n\n    /// @notice Refinance a loan from LoanExecutionData. We let borrowers use outstanding offers for new loans\n    ///         to refinance their current loan.\n    /// @param _loanId Loan ID.\n    /// @param _loan Current loan.\n    /// @param _loanExecutionData Loan Execution Data.\n    /// @return loanId New Loan Id.\n    /// @return loan New Loan.\n    function refinanceFromLoanExecutionData(\n        uint256 _loanId,\n        Loan calldata _loan,\n        LoanExecutionData calldata _loanExecutionData\n    ) external returns (uint256, Loan memory);\n\n    /// @notice Repay loan. Interest is calculated pro-rata based on time. Lender is defined by nft ownership.\n    /// @param _repaymentData Repayment data.\n    function repayLoan(LoanRepaymentData calldata _repaymentData) external;\n\n    /// @notice Call when a loan is past its due date.\n    /// @param _loanId Loan ID.\n    /// @param _loan Loan.\n    /// @return Liquidation Struct of the liquidation.\n    function liquidateLoan(uint256 _loanId, Loan calldata _loan) external returns (bytes memory);\n\n    /// @return getMaxTranches Maximum number of tranches per loan.\n    function getMaxTranches() external view returns (uint256);\n\n    /// @notice Set min lock period (in BPS).\n    /// @param _minLockPeriod Min lock period.\n    function setMinLockPeriod(uint256 _minLockPeriod) external;\n\n    /// @notice Get min lock period (in BPS).\n    /// @return minLockPeriod Min lock period.\n    function getMinLockPeriod() external view returns (uint256);\n\n    /// @notice Get delegation registry.\n    /// @return delegateRegistry Delegate registry.\n    function getDelegateRegistry() external view returns (address);\n\n    /// @notice Delegate ownership.\n    /// @param _loanId Loan ID.\n    /// @param _loan Loan.\n    /// @param _rights Delegation Rights. Empty for all.\n    /// @param _delegate Delegate address.\n    /// @param _value True if delegate, false if undelegate.\n    function delegate(uint256 _loanId, Loan calldata _loan, address _delegate, bytes32 _rights, bool _value) external;\n\n    /// @notice Anyone can reveke a delegation on an NFT that's no longer in escrow.\n    /// @param _delegate Delegate address.\n    /// @param _collection Collection address.\n    /// @param _tokenId Token ID.\n    /// @param _rights Delegation Rights. Empty for all.\n    function revokeDelegate(address _delegate, address _collection, uint256 _tokenId, bytes32 _rights) external;\n\n    /// @notice Get Flash Action Contract.\n    /// @return flashActionContract Flash Action Contract.\n    function getFlashActionContract() external view returns (address);\n\n    /// @notice Update Flash Action Contract.\n    /// @param _newFlashActionContract Flash Action Contract.\n    function setFlashActionContract(address _newFlashActionContract) external;\n\n    /// @notice Get Loan Hash.\n    /// @param _loanId Loan ID.\n    /// @return loanHash Loan Hash.\n    function getLoanHash(uint256 _loanId) external view returns (bytes32);\n\n    /// @notice Transfer NFT to the flash action contract (expected use cases here are for airdrops and similar scenarios).\n    /// The flash action contract would implement specific interactions with given contracts.\n    /// Only the the borrower can call this function for a given loan. By the end of the transaction, the NFT must have\n    /// been returned to escrow.\n    /// @param _loanId Loan ID.\n    /// @param _loan Loan.\n    /// @param _target Target address for the flash action contract to interact with.\n    /// @param _data Data to be passed to be passed to the ultimate contract.\n    function executeFlashAction(uint256 _loanId, Loan calldata _loan, address _target, bytes calldata _data) external;\n\n    /// @notice Called by the liquidator for accounting purposes.\n    /// @param _loanId The id of the loan.\n    /// @param _loan The loan object.\n    function loanLiquidated(uint256 _loanId, Loan calldata _loan) external;\n}\n"}, "src/lib/utils/Hash.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\nimport \"../../interfaces/loans/IMultiSourceLoan.sol\";\nimport \"../../interfaces/loans/IBaseLoan.sol\";\nimport \"../../interfaces/IAuctionLoanLiquidator.sol\";\n\nlibrary Hash {\n    // keccak256(\"OfferValidator(address validator,bytes arguments)\")\n    bytes32 private constant _VALIDATOR_HASH = 0x4def3e04bd42194484d5f8a5b268ec0df03b9d9d0402606fe3100023c5d79ac4;\n\n    // keccak256(\"LoanOffer(uint256 offerId,address lender,uint256 fee,uint256 capacity,address nftCollateralAddress,uint256 nftCollateralTokenId,address principalAddress,uint256 principalAmount,uint256 aprBps,uint256 expirationTime,uint256 duration,uint256 maxSeniorRepayment,OfferValidator[] validators)OfferValidator(address validator,bytes arguments)\")\n    bytes32 private constant _LOAN_OFFER_HASH = 0xa87df46e2d2684eb0bbc7abfb05483167cdccac6d7302078a9eaad540c119958;\n\n    // keccak256(\"OfferExecution(LoanOffer offer,uint256 amount,bytes lenderOfferSignature)LoanOffer(uint256 offerId,address lender,uint256 fee,uint256 capacity,address nftCollateralAddress,uint256 nftCollateralTokenId,address principalAddress,uint256 principalAmount,uint256 aprBps,uint256 expirationTime,uint256 duration,uint256 maxSeniorRepayment,OfferValidator[] validators)OfferValidator(address validator,bytes arguments)\")\n    bytes32 private constant _OFFER_EXECUTION_HASH = 0x00c14ad24a24ef957b8af9ebdfbc5d353bba0d3b20bbd97fb243c9f5fb361282;\n\n    /// keccak256(\"ExecutionData(OfferExecution[] offerExecution,uint256 tokenId,uint256 duration,uint256 expirationTime,address principalReceiver,bytes callbackData)OfferExecution(LoanOffer offer,uint256 amount,bytes lenderOfferSignature)LoanOffer(uint256 offerId,address lender,uint256 fee,uint256 capacity,address nftCollateralAddress,uint256 nftCollateralTokenId,address principalAddress,uint256 principalAmount,uint256 aprBps,uint256 expirationTime,uint256 duration,uint256 maxSeniorRepayment,OfferValidator[] validators)OfferValidator(address validator,bytes arguments)\")\n    bytes32 private constant _EXECUTION_DATA_HASH = 0xa5cb06a0c5f03000a6afa6b0d5080d0f863338257beb253058bc2c184ad7d4e1;\n\n    /// keccak256(\"SignableRepaymentData(uint256 loanId,bytes callbackData,bool shouldDelegate)\")\n    bytes32 private constant _SIGNABLE_REPAYMENT_DATA_HASH =\n        0x41277b3c1cbe08ea7bbdd10a13f24dc956f3936bf46526f904c73697d9958e0c;\n\n    // keccak256(\"Loan(address borrower,uint256 nftCollateralTokenId,address nftCollateralAddress,address principalAddress,uint256 principalAmount,uint256 startTime,uint256 duration,Tranche[] tranche,uint256 protocolFee)Tranche(uint256 floor,uint256 principalAmount,Source[] source)Source(uint256 loanId,address lender,uint256 principalAmount,uint256 accruedInterest,uint256 startTime,uint256 aprBps)\")\n    bytes32 private constant _MULTI_SOURCE_LOAN_HASH =\n        0x47dba7e6940f0063b21c2ef8f7b0beaf1a2f4c2f84144c36b274ceec12e99b57;\n\n    /// keccak256(\"Tranche(uint256 loanId,uint256 floor,uint256 principalAmount,address lender,uint256 accruedInterest,uint256 startTime,uint256 aprBps)\")\n    bytes32 private constant _TRANCHE_HASH = 0x6ac594952a72f2e6b24efaf9744b05c23b1b92ce25aa97d18a4338f484c41b95;\n\n    /// keccak256(\"RenegotiationOffer(uint256 renegotiationId,uint256 loanId,address lender,uint256 fee,uint256[] trancheIndex,uint256 principalAmount,uint256 aprBps,uint256 expirationTime,uint256 duration)\")\n    bytes32 private constant _MULTI_RENEGOTIATION_OFFER_HASH =\n        0x986a160abc209a64a5b0786817ff0aa7a5f5737a4ee6a95197f86290598cd03d;\n\n    /// keccak256(\"Auction(address loanAddress,uint256 loanId,uint256 highestBid,uint256 triggerFee,uint256 minBid,address highestBidder,uint96 duration,address asset,uint96 startTime,address originator,uint96 lastBidTime)\")\n    bytes32 private constant _AUCTION_HASH = 0x091bb2c766793330514b24dc458b085f596716d69fcb631d53788558ff148646;\n\n    function hash(IMultiSourceLoan.LoanOffer memory _loanOffer) internal pure returns (bytes32) {\n        bytes memory encodedValidators;\n        uint256 totalValidators = _loanOffer.validators.length;\n        for (uint256 i = 0; i < totalValidators;) {\n            encodedValidators = abi.encodePacked(encodedValidators, _hashValidator(_loanOffer.validators[i]));\n\n            unchecked {\n                ++i;\n            }\n        }\n        return keccak256(\n            abi.encode(\n                _LOAN_OFFER_HASH,\n                _loanOffer.offerId,\n                _loanOffer.lender,\n                _loanOffer.fee,\n                _loanOffer.capacity,\n                _loanOffer.nftCollateralAddress,\n                _loanOffer.nftCollateralTokenId,\n                _loanOffer.principalAddress,\n                _loanOffer.principalAmount,\n                _loanOffer.aprBps,\n                _loanOffer.expirationTime,\n                _loanOffer.duration,\n                _loanOffer.maxSeniorRepayment,\n                keccak256(encodedValidators)\n            )\n        );\n    }\n\n    function hash(IMultiSourceLoan.ExecutionData memory _executionData) internal pure returns (bytes32) {\n        bytes memory encodedOfferExecution;\n        uint256 totalOfferExecution = _executionData.offerExecution.length;\n        for (uint256 i = 0; i < totalOfferExecution;) {\n            encodedOfferExecution =\n                abi.encodePacked(encodedOfferExecution, _hashOfferExecution(_executionData.offerExecution[i]));\n\n            unchecked {\n                ++i;\n            }\n        }\n        return keccak256(\n            abi.encode(\n                _EXECUTION_DATA_HASH,\n                keccak256(encodedOfferExecution),\n                _executionData.tokenId,\n                _executionData.duration,\n                _executionData.expirationTime,\n                _executionData.principalReceiver,\n                keccak256(_executionData.callbackData)\n            )\n        );\n    }\n\n    function hash(IMultiSourceLoan.SignableRepaymentData memory _repaymentData) internal pure returns (bytes32) {\n        return keccak256(\n            abi.encode(\n                _SIGNABLE_REPAYMENT_DATA_HASH,\n                _repaymentData.loanId,\n                keccak256(_repaymentData.callbackData),\n                _repaymentData.shouldDelegate\n            )\n        );\n    }\n\n    function hash(IMultiSourceLoan.Loan memory _loan) internal pure returns (bytes32) {\n        bytes memory trancheHashes;\n        uint256 totalTranches = _loan.tranche.length;\n        for (uint256 i; i < totalTranches;) {\n            trancheHashes = abi.encodePacked(trancheHashes, _hashTranche(_loan.tranche[i]));\n            unchecked {\n                ++i;\n            }\n        }\n        return keccak256(\n            abi.encode(\n                _MULTI_SOURCE_LOAN_HASH,\n                _loan.borrower,\n                _loan.nftCollateralTokenId,\n                _loan.nftCollateralAddress,\n                _loan.principalAddress,\n                _loan.principalAmount,\n                _loan.startTime,\n                _loan.duration,\n                keccak256(trancheHashes),\n                _loan.protocolFee\n            )\n        );\n    }\n\n    function hash(IMultiSourceLoan.RenegotiationOffer memory _refinanceOffer) internal pure returns (bytes32) {\n        bytes memory encodedIndexes;\n        uint256 totalIndexes = _refinanceOffer.trancheIndex.length;\n        for (uint256 i = 0; i < totalIndexes;) {\n            encodedIndexes = abi.encodePacked(encodedIndexes, _refinanceOffer.trancheIndex[i]);\n            unchecked {\n                ++i;\n            }\n        }\n        return keccak256(\n            abi.encode(\n                _MULTI_RENEGOTIATION_OFFER_HASH,\n                _refinanceOffer.renegotiationId,\n                _refinanceOffer.loanId,\n                _refinanceOffer.lender,\n                _refinanceOffer.fee,\n                keccak256(encodedIndexes),\n                _refinanceOffer.principalAmount,\n                _refinanceOffer.aprBps,\n                _refinanceOffer.expirationTime,\n                _refinanceOffer.duration\n            )\n        );\n    }\n\n    function hash(IAuctionLoanLiquidator.Auction memory _auction) internal pure returns (bytes32) {\n        return keccak256(\n            abi.encode(\n                _AUCTION_HASH,\n                _auction.loanAddress,\n                _auction.loanId,\n                _auction.highestBid,\n                _auction.triggerFee,\n                _auction.minBid,\n                _auction.highestBidder,\n                _auction.duration,\n                _auction.asset,\n                _auction.startTime,\n                _auction.originator,\n                _auction.lastBidTime\n            )\n        );\n    }\n\n    function _hashTranche(IMultiSourceLoan.Tranche memory _tranche) private pure returns (bytes32) {\n        return keccak256(\n            abi.encode(\n                _TRANCHE_HASH,\n                _tranche.loanId,\n                _tranche.floor,\n                _tranche.principalAmount,\n                _tranche.lender,\n                _tranche.accruedInterest,\n                _tranche.startTime,\n                _tranche.aprBps\n            )\n        );\n    }\n\n    function _hashValidator(IBaseLoan.OfferValidator memory _validator) private pure returns (bytes32) {\n        return keccak256(abi.encode(_VALIDATOR_HASH, _validator.validator, keccak256(_validator.arguments)));\n    }\n\n    function _hashOfferExecution(IMultiSourceLoan.OfferExecution memory _offerExecution)\n        private\n        pure\n        returns (bytes32)\n    {\n        return keccak256(\n            abi.encode(\n                _OFFER_EXECUTION_HASH,\n                hash(_offerExecution.offer),\n                _offerExecution.amount,\n                keccak256(_offerExecution.lenderOfferSignature)\n            )\n        );\n    }\n}\n"}, "src/lib/utils/Interest.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\nimport \"@solmate/utils/FixedPointMathLib.sol\";\nimport \"../../interfaces/loans/IMultiSourceLoan.sol\";\nimport \"../../interfaces/loans/IBaseLoan.sol\";\n\nlibrary Interest {\n    using FixedPointMathLib for uint256;\n\n    uint256 private constant _PRECISION = 10000;\n\n    uint256 private constant _SECONDS_PER_YEAR = 31536000;\n\n    function getInterest(IMultiSourceLoan.LoanOffer memory _loanOffer) internal pure returns (uint256) {\n        return _getInterest(_loanOffer.principalAmount, _loanOffer.aprBps, _loanOffer.duration);\n    }\n\n    function getInterest(uint256 _amount, uint256 _aprBps, uint256 _duration) internal pure returns (uint256) {\n        return _getInterest(_amount, _aprBps, _duration);\n    }\n\n    function getTotalOwed(IMultiSourceLoan.Loan memory _loan, uint256 _timestamp) internal pure returns (uint256) {\n        uint256 owed = 0;\n        for (uint256 i = 0; i < _loan.tranche.length;) {\n            IMultiSourceLoan.Tranche memory tranche = _loan.tranche[i];\n            owed += tranche.principalAmount + tranche.accruedInterest\n                + _getInterest(tranche.principalAmount, tranche.aprBps, _timestamp - tranche.startTime);\n            unchecked {\n                ++i;\n            }\n        }\n        return owed;\n    }\n\n    function _getInterest(uint256 _amount, uint256 _aprBps, uint256 _duration) private pure returns (uint256) {\n        return _amount.mulDivUp(_aprBps * _duration, _PRECISION * _SECONDS_PER_YEAR);\n    }\n}\n"}, "src/lib/Multicall.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\nimport \"../interfaces/IMulticall.sol\";\n\n/// @title Multicall\n/// @author Florida St\n/// @notice Base implementation for multicall.\nabstract contract Multicall is IMulticall {\n    function multicall(bytes[] calldata data) external payable override returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        bool success;\n        uint256 totalCalls = data.length;\n        for (uint256 i = 0; i < totalCalls;) {\n            //slither-disable-next-line calls-loop,delegatecall-loop\n            (success, results[i]) = address(this).delegatecall(data[i]);\n            if (!success) {\n                revert MulticallFailed(i, results[i]);\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n"}, "src/lib/loans/BaseLoan.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\nimport \"@openzeppelin/utils/cryptography/MessageHashUtils.sol\";\nimport \"@openzeppelin/interfaces/IERC1271.sol\";\n\nimport \"@solmate/auth/Owned.sol\";\nimport \"@solmate/tokens/ERC721.sol\";\nimport \"@solmate/utils/FixedPointMathLib.sol\";\n\nimport \"../../interfaces/loans/IBaseLoan.sol\";\nimport \"../utils/Hash.sol\";\nimport \"../AddressManager.sol\";\nimport \"../LiquidationHandler.sol\";\n\n/// @title BaseLoan\n/// @author Florida St\n/// @notice Base implementation that we expect all loans to share. Offers can either be\n///         for new loans or renegotiating existing ones.\n///         Offers are signed off-chain.\n///         Offers have a nonce associated that is used for cancelling and\n///         marking as executed.\nabstract contract BaseLoan is ERC721TokenReceiver, IBaseLoan, LiquidationHandler {\n    using FixedPointMathLib for uint256;\n    using InputChecker for address;\n    using MessageHashUtils for bytes32;\n\n    /// @notice Used in compliance with EIP712\n    uint256 internal immutable INITIAL_CHAIN_ID;\n    bytes32 public immutable INITIAL_DOMAIN_SEPARATOR;\n\n    bytes4 internal constant MAGICVALUE_1271 = 0x1626ba7e;\n\n    /// @notice Precision used for calculating interests.\n    uint256 internal constant _PRECISION = 10000;\n\n    bytes public constant VERSION = \"3\";\n\n    /// @notice Minimum improvement (in BPS) required for a strict improvement.\n    uint256 internal _minImprovementApr = 1000;\n\n    string public name;\n\n    /// @notice Total number of loans issued. Given it's a serial value, we use it\n    ///         as loan id.\n    uint256 public override getTotalLoansIssued;\n\n    /// @notice Offer capacity\n    mapping(address user => mapping(uint256 offerId => uint256 used)) internal _used;\n\n    /// @notice Used for validate off chain maker offers / canceling one\n    mapping(address user => mapping(uint256 offerId => bool notActive)) public isOfferCancelled;\n    /// @notice Used for validating off chain maker offers / canceling all\n    mapping(address user => uint256 minOfferId) public minOfferId;\n\n    /// @notice Used in a similar way as `isOfferCancelled` to handle renegotiations.\n    mapping(address user => mapping(uint256 renegotiationIf => bool notActive)) public isRenegotiationOfferCancelled;\n\n    /// @notice Loans are only denominated in whitelisted addresses. Within each struct,\n    ///         we save those as their `uint` representation.\n    AddressManager internal immutable _currencyManager;\n\n    /// @notice Only whilteslited collections are accepted as collateral. Within each struct,\n    ///         we save those as their `uint` representation.\n    AddressManager internal immutable _collectionManager;\n\n    event OfferCancelled(address lender, uint256 offerId);\n\n    event AllOffersCancelled(address lender, uint256 minOfferId);\n\n    event RenegotiationOfferCancelled(address lender, uint256 renegotiationId);\n\n    event MinAprImprovementUpdated(uint256 _minimum);\n\n    error CancelledOrExecutedOfferError(address _lender, uint256 _offerId);\n\n    error ExpiredOfferError(uint256 _expirationTime);\n\n    error LowOfferIdError(address _lender, uint256 _newMinOfferId, uint256 _minOfferId);\n\n    error LowRenegotiationOfferIdError(address _lender, uint256 _newMinRenegotiationOfferId, uint256 _minOfferId);\n\n    error ZeroInterestError();\n\n    error InvalidSignatureError();\n\n    error CurrencyNotWhitelistedError();\n\n    error CollectionNotWhitelistedError();\n\n    error MaxCapacityExceededError();\n\n    error InvalidLoanError(uint256 _loanId);\n\n    error NotStrictlyImprovedError();\n\n    error InvalidAmountError(uint256 _amount, uint256 _principalAmount);\n\n    /// @notice Constructor\n    /// @param _name The name of the loan contract\n    /// @param currencyManager The address of the currency manager\n    /// @param collectionManager The address of the collection manager\n    /// @param protocolFee The protocol fee\n    /// @param loanLiquidator The liquidator contract\n    /// @param owner The owner of the contract\n    /// @param minWaitTime The time to wait before a new owner can be set\n    constructor(\n        string memory _name,\n        address currencyManager,\n        address collectionManager,\n        ProtocolFee memory protocolFee,\n        address loanLiquidator,\n        address owner,\n        uint256 minWaitTime\n    ) LiquidationHandler(owner, minWaitTime, loanLiquidator, protocolFee) {\n        name = _name;\n        currencyManager.checkNotZero();\n        collectionManager.checkNotZero();\n\n        _currencyManager = AddressManager(currencyManager);\n        _collectionManager = AddressManager(collectionManager);\n\n        INITIAL_CHAIN_ID = block.chainid;\n        INITIAL_DOMAIN_SEPARATOR = _computeDomainSeparator();\n    }\n\n    /// @return The minimum improvement for a loan to be considered strictly better.\n    function getMinImprovementApr() external view returns (uint256) {\n        return _minImprovementApr;\n    }\n\n    /// @notice Updates the minimum improvement for a loan to be considered strictly better.\n    ///         Only the owner can call this function.\n    /// @param _newMinimum The new minimum improvement.\n    function updateMinImprovementApr(uint256 _newMinimum) external onlyOwner {\n        _minImprovementApr = _newMinimum;\n\n        emit MinAprImprovementUpdated(_minImprovementApr);\n    }\n\n    /// @return Address of the currency manager.\n    function getCurrencyManager() external view returns (address) {\n        return address(_currencyManager);\n    }\n\n    /// @return Address of the collection manager.\n    function getCollectionManager() external view returns (address) {\n        return address(_collectionManager);\n    }\n\n    /// @inheritdoc IBaseLoan\n    function cancelOffer(uint256 _offerId) external {\n        address user = msg.sender;\n        isOfferCancelled[user][_offerId] = true;\n\n        emit OfferCancelled(user, _offerId);\n    }\n\n    /// @inheritdoc IBaseLoan\n    function cancelAllOffers(uint256 _minOfferId) external virtual {\n        address user = msg.sender;\n        uint256 currentMinOfferId = minOfferId[user];\n        if (currentMinOfferId >= _minOfferId) {\n            revert LowOfferIdError(user, _minOfferId, currentMinOfferId);\n        }\n        minOfferId[user] = _minOfferId;\n\n        emit AllOffersCancelled(user, _minOfferId);\n    }\n\n    /// @inheritdoc IBaseLoan\n    function cancelRenegotiationOffer(uint256 _renegotiationId) external virtual {\n        address lender = msg.sender;\n        isRenegotiationOfferCancelled[lender][_renegotiationId] = true;\n\n        emit RenegotiationOfferCancelled(lender, _renegotiationId);\n    }\n\n    /// @notice Returns the remaining capacity for a given loan offer.\n    /// @param _lender The address of the lender.\n    /// @param _offerId The id of the offer.\n    /// @return The amount lent out.\n    function getUsedCapacity(address _lender, uint256 _offerId) external view returns (uint256) {\n        return _used[_lender][_offerId];\n    }\n\n    /// @notice Get the domain separator requried to comply with EIP-712.\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : _computeDomainSeparator();\n    }\n\n    /// @notice Call when issuing a new loan to get/set a unique serial id.\n    /// @dev This id should never be 0.\n    /// @return The new loan id.\n    function _getAndSetNewLoanId() internal returns (uint256) {\n        unchecked {\n            return ++getTotalLoansIssued;\n        }\n    }\n\n    /// @notice Compute domain separator for EIP-712.\n    /// @return The domain separator.\n    function _computeDomainSeparator() private view returns (bytes32) {\n        return keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(name)),\n                keccak256(VERSION),\n                block.chainid,\n                address(this)\n            )\n        );\n    }\n}\n"}, "src/interfaces/loans/IBaseLoan.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\nimport \"../../interfaces/ILoanLiquidator.sol\";\n\n/// @title Interface for Loans.\n/// @author Florida St\n/// @notice Basic Loan\ninterface IBaseLoan {\n    /// @notice Minimum improvement (in BPS) required for a strict improvement.\n    /// @param principalAmount Minimum delta of principal amount.\n    /// @param interest Minimum delta of interest.\n    /// @param duration Minimum delta of duration.\n    struct ImprovementMinimum {\n        uint256 principalAmount;\n        uint256 interest;\n        uint256 duration;\n    }\n\n    /// @notice Arbitrary contract to validate offers implementing `IBaseOfferValidator`.\n    /// @param validator Address of the validator contract.\n    /// @param arguments Arguments to pass to the validator.\n    struct OfferValidator {\n        address validator;\n        bytes arguments;\n    }\n\n    /// @notice Total number of loans issued by this contract.\n    function getTotalLoansIssued() external view returns (uint256);\n\n    /// @notice Cancel offer for `msg.sender`. Each lender has unique offerIds.\n    /// @param _offerId Offer ID.\n    function cancelOffer(uint256 _offerId) external;\n\n    /// @notice Cancell all offers with offerId < _minOfferId\n    /// @param _minOfferId Minimum offer ID.\n    function cancelAllOffers(uint256 _minOfferId) external;\n\n    /// @notice Cancel renegotiation offer. Similar to offers.\n    /// @param _renegotiationId Renegotiation offer ID.\n    function cancelRenegotiationOffer(uint256 _renegotiationId) external;\n}\n"}, "src/interfaces/IAuctionLoanLiquidator.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\nimport \"./loans/IMultiSourceLoan.sol\";\n\n/// @title Liquidates Collateral for Defaulted Loans using English Auctions.\n/// @author Florida St\n/// @notice It liquidates collateral corresponding to defaulted loans\n///         and sends back the proceeds to the loan contract for distribution.\ninterface IAuctionLoanLiquidator {\n    /// @notice The auction struct.\n    /// @param loanAddress The loan contract address.\n    /// @param loanId The loan id.\n    /// @param highestBid The highest bid.\n    /// @param triggerFee The trigger fee.\n    /// @param minBid The minimum bid.\n    /// @param highestBidder The highest bidder.\n    /// @param duration The auction duration.\n    /// @param asset The asset address.\n    /// @param startTime The auction start time.\n    /// @param originator The address that triggered the liquidation.\n    /// @param lastBidTime The last bid time.\n    struct Auction {\n        address loanAddress;\n        uint256 loanId;\n        uint256 highestBid;\n        uint256 triggerFee;\n        uint256 minBid;\n        address highestBidder;\n        uint96 duration;\n        address asset;\n        uint96 startTime;\n        address originator;\n        uint96 lastBidTime;\n    }\n\n    /// @notice Add a loan contract to the list of accepted contracts.\n    /// @param _loanContract The loan contract to be added.\n    function addLoanContract(address _loanContract) external;\n\n    /// @notice Remove a loan contract from the list of accepted contracts.\n    /// @param _loanContract The loan contract to be removed.\n    function removeLoanContract(address _loanContract) external;\n\n    /// @return The loan contracts that are accepted by this liquidator.\n    function getValidLoanContracts() external view returns (address[] memory);\n\n    /// @notice Update liquidation distributor.\n    /// @param _liquidationDistributor The new liquidation distributor.\n    function updateLiquidationDistributor(address _liquidationDistributor) external;\n\n    /// @return liquidationDistributor The liquidation distributor address.\n    function getLiquidationDistributor() external view returns (address);\n\n    /// @notice Called by the owner to update the trigger fee.\n    /// @param triggerFee The new trigger fee.\n    function updateTriggerFee(uint256 triggerFee) external;\n\n    /// @return triggerFee The trigger fee.\n    function getTriggerFee() external view returns (uint256);\n\n    /// @notice When a bid is placed, the contract takes possesion of the bid, and\n    ///         if there was a previous bid, it returns that capital to the original\n    ///         bidder.\n    /// @param _contract The nft contract address.\n    /// @param _tokenId The nft id.\n    /// @param _auction The auction struct.\n    /// @param _bid The bid amount.\n    /// @return auction The updated auction struct.\n    function placeBid(address _contract, uint256 _tokenId, Auction memory _auction, uint256 _bid)\n        external\n        returns (Auction memory);\n\n    /// @notice On settlement, the NFT is sent to the highest bidder.\n    ///         Calls loan liquidated for accounting purposes.\n    /// @param _auction The auction struct.\n    /// @param _loan The loan struct.\n    function settleAuction(Auction calldata _auction, IMultiSourceLoan.Loan calldata _loan) external;\n\n    /// @notice The contract has hashes of all auctions to save space (not the actual struct)\n    /// @param _contract The nft contract address.\n    /// @param _tokenId The nft id.\n    /// @return auctionHash The auction hash.\n    function getAuctionHash(address _contract, uint256 _tokenId) external view returns (bytes32);\n}\n"}, "src/interfaces/IMulticall.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\ninterface IMulticall {\n    error MulticallFailed(uint256 i, bytes returndata);\n\n    /// @notice Call multiple functions in the contract. Revert if one of them fails, return results otherwise.\n    /// @param data Encoded function calls.\n    /// @return results The results of the function calls.\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\n}\n"}, "lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.30;\n\nimport {Strings} from \"../Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n"}, "lib/openzeppelin-contracts/contracts/interfaces/IERC1271.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC-1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"}, "lib/solmate/src/auth/Owned.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.30;\n\n/// @notice Simple single owner authorization mixin.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\nabstract contract Owned {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\n\n    /*//////////////////////////////////////////////////////////////\n                            OWNERSHIP STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    address public owner;\n\n    modifier onlyOwner() virtual {\n        require(msg.sender == owner, \"UNAUTHORIZED\");\n\n        _;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(address _owner) {\n        owner = _owner;\n\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             OWNERSHIP LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        owner = newOwner;\n\n        emit OwnershipTransferred(msg.sender, newOwner);\n    }\n}\n"}, "src/lib/AddressManager.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\nimport \"@solmate/auth/Owned.sol\";\nimport \"@solmate/utils/ReentrancyGuard.sol\";\n\nimport \"./InputChecker.sol\";\n\n/// @title AddressManager\n/// @notice A contract that handles a whitelist of addresses and their indexes.\n/// @dev We assume no more than 65535 addresses will be added to the directory.\ncontract AddressManager is Owned, ReentrancyGuard {\n    using InputChecker for address;\n\n    event AddressAdded(address address_added);\n\n    event AddressRemovedFromWhitelist(address address_removed);\n\n    event AddressWhitelisted(address address_whitelisted);\n\n    error AddressAlreadyAddedError(address _address);\n\n    error AddressNotAddedError(address _address);\n\n    mapping(address => uint16) private _directory;\n\n    mapping(uint16 => address) private _inverseDirectory;\n\n    mapping(address => bool) private _whitelist;\n\n    uint16 private _lastAdded;\n\n    constructor(address[] memory _original) Owned(tx.origin) {\n        uint256 total = _original.length;\n        for (uint256 i; i < total;) {\n            _add(_original[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Adds an address to the directory. If it already exists,\n    ///        reverts. It assumes it's whitelisted.\n    /// @param _entry The address to add.\n    /// @return The index of the address in the directory.\n    function add(address _entry) external payable onlyOwner returns (uint16) {\n        return _add(_entry);\n    }\n\n    /// @notice Whitelist an address that's already part of the directory.\n    /// @param _entry The address to whitelist.\n    function addToWhitelist(address _entry) external payable onlyOwner {\n        if (_directory[_entry] == 0) {\n            revert AddressNotAddedError(_entry);\n        }\n        _whitelist[_entry] = true;\n\n        emit AddressWhitelisted(_entry);\n    }\n\n    /// @notice Removes an address from the whitelist. We still keep it\n    ///         in the directory since this mapping is relevant across time.\n    /// @param _entry The address to remove from the whitelist.\n    function removeFromWhitelist(address _entry) external payable onlyOwner {\n        _whitelist[_entry] = false;\n\n        emit AddressRemovedFromWhitelist(_entry);\n    }\n\n    /// @param _address The address to get the index for.\n    /// @return The index for a given address.\n    function addressToIndex(address _address) external view returns (uint16) {\n        return _directory[_address];\n    }\n\n    /// @param _index The index to get the address for.\n    /// @return The address for a given index.\n    function indexToAddress(uint16 _index) external view returns (address) {\n        return _inverseDirectory[_index];\n    }\n\n    /// @param _entry The address to check if it's whitelisted.\n    /// @return Whether the address is whitelisted or not.\n    function isWhitelisted(address _entry) external view returns (bool) {\n        return _whitelist[_entry];\n    }\n\n    function _add(address _entry) private returns (uint16) {\n        _entry.checkNotZero();\n        if (_directory[_entry] != 0) {\n            revert AddressAlreadyAddedError(_entry);\n        }\n        unchecked {\n            ++_lastAdded;\n        }\n        _directory[_entry] = _lastAdded;\n        _inverseDirectory[_lastAdded] = _entry;\n        _whitelist[_entry] = true;\n\n        emit AddressAdded(_entry);\n\n        return _lastAdded;\n    }\n}\n"}, "src/lib/LiquidationHandler.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\nimport \"@solmate/auth/Owned.sol\";\nimport \"@solmate/tokens/ERC721.sol\";\nimport \"@solmate/utils/FixedPointMathLib.sol\";\nimport \"@solmate/utils/ReentrancyGuard.sol\";\n\nimport \"../interfaces/ILiquidationHandler.sol\";\nimport \"../interfaces/loans/IMultiSourceLoan.sol\";\nimport \"./callbacks/CallbackHandler.sol\";\nimport \"./InputChecker.sol\";\n\n/// @title Liquidation Handler\n/// @author Florida St\n/// @notice Liquidation Handler for defaulted loans\nabstract contract LiquidationHandler is ILiquidationHandler, ReentrancyGuard, CallbackHandler {\n    using InputChecker for address;\n    using FixedPointMathLib for uint256;\n\n    uint48 public constant MIN_AUCTION_DURATION = 3 days;\n    uint48 public constant MAX_AUCTION_DURATION = 7 days;\n    uint256 public constant MIN_BID_LIQUIDATION = 50;\n    uint256 private constant _BPS = 10000;\n\n    /// @notice Duration of the auction when a loan defaults requires a liquidation.\n    uint48 internal _liquidationAuctionDuration = 3 days;\n\n    /// @notice Liquidator used defaulted loans that requires liquidation.\n    address internal _loanLiquidator;\n\n    event MinBidLiquidationUpdated(uint256 newMinBid);\n\n    event LoanSentToLiquidator(uint256 loanId, address liquidator);\n\n    event LoanForeclosed(uint256 loanId);\n\n    event LiquidationContractUpdated(address liquidator);\n\n    event LiquidationAuctionDurationUpdated(uint256 newDuration);\n\n    error LiquidatorOnlyError(address _liquidator);\n\n    error LoanNotDueError(uint256 _expirationTime);\n\n    error InvalidDurationError();\n\n    /// @notice Constructor\n    /// @param __owner The owner of the contract\n    /// @param _updateWaitTime The time to wait before a new owner can be set\n    /// @param __loanLiquidator The liquidator contract\n    /// @param __protocolFee The protocol fee\n    constructor(address __owner, uint256 _updateWaitTime, address __loanLiquidator, ProtocolFee memory __protocolFee)\n        CallbackHandler(__owner, _updateWaitTime, __protocolFee)\n    {\n        __loanLiquidator.checkNotZero();\n\n        _loanLiquidator = __loanLiquidator;\n    }\n\n    modifier onlyLiquidator() {\n        if (msg.sender != address(_loanLiquidator)) {\n            revert LiquidatorOnlyError(address(_loanLiquidator));\n        }\n        _;\n    }\n    /// @inheritdoc ILiquidationHandler\n\n    function getLiquidator() external view override returns (address) {\n        return _loanLiquidator;\n    }\n\n    /// @inheritdoc ILiquidationHandler\n    function updateLiquidationContract(address __loanLiquidator) external override onlyOwner {\n        __loanLiquidator.checkNotZero();\n        _loanLiquidator = __loanLiquidator;\n\n        emit LiquidationContractUpdated(__loanLiquidator);\n    }\n\n    /// @inheritdoc ILiquidationHandler\n    function updateLiquidationAuctionDuration(uint48 _newDuration) external override onlyOwner {\n        if (_newDuration < MIN_AUCTION_DURATION || _newDuration > MAX_AUCTION_DURATION) {\n            revert InvalidDurationError();\n        }\n        _liquidationAuctionDuration = _newDuration;\n\n        emit LiquidationAuctionDurationUpdated(_newDuration);\n    }\n\n    /// @inheritdoc ILiquidationHandler\n    function getLiquidationAuctionDuration() external view override returns (uint48) {\n        return _liquidationAuctionDuration;\n    }\n\n    function _liquidateLoan(uint256 _loanId, IMultiSourceLoan.Loan calldata _loan, bool _canClaim)\n        internal\n        returns (bool liquidated, bytes memory liquidation)\n    {\n        uint256 expirationTime;\n        unchecked {\n            expirationTime = _loan.startTime + _loan.duration;\n        }\n        if (expirationTime > block.timestamp) {\n            revert LoanNotDueError(expirationTime);\n        }\n        if (_canClaim) {\n            ERC721(_loan.nftCollateralAddress).transferFrom(\n                address(this), _loan.tranche[0].lender, _loan.nftCollateralTokenId\n            );\n            emit LoanForeclosed(_loanId);\n\n            liquidated = true;\n        } else {\n            address liquidator = _loanLiquidator;\n            ERC721(_loan.nftCollateralAddress).transferFrom(address(this), liquidator, _loan.nftCollateralTokenId);\n            liquidation = ILoanLiquidator(liquidator).liquidateLoan(\n                _loanId,\n                _loan.nftCollateralAddress,\n                _loan.nftCollateralTokenId,\n                _loan.principalAddress,\n                _liquidationAuctionDuration,\n                _loan.principalAmount.mulDivDown(MIN_BID_LIQUIDATION, _BPS),\n                msg.sender\n            );\n\n            emit LoanSentToLiquidator(_loanId, liquidator);\n        }\n    }\n}\n"}, "src/interfaces/ILoanLiquidator.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\nimport \"../interfaces/loans/IMultiSourceLoan.sol\";\n\n/// @title Liquidates Collateral for Defaulted Loans\n/// @author Florida St\n/// @notice It liquidates collateral corresponding to defaulted loans\n///         and sends back the proceeds to the loan contract for distribution.\ninterface ILoanLiquidator {\n    /// @notice Given a loan, it takes posession of the NFT and liquidates it.\n    /// @param _loanId The loan id.\n    /// @param _contract The loan contract address.\n    /// @param _tokenId The NFT id.\n    /// @param _asset The asset address.\n    /// @param _duration The liquidation duration.\n    /// @param _minBid The minimum bid.\n    /// @param _originator The address that trigger the liquidation.\n    /// @return encodedAuction Encoded struct.\n    function liquidateLoan(\n        uint256 _loanId,\n        address _contract,\n        uint256 _tokenId,\n        address _asset,\n        uint96 _duration,\n        uint256 _minBid,\n        address _originator\n    ) external returns (bytes memory);\n}\n"}, "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.30;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"}, "src/lib/InputChecker.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\n/// @title InputChecker\n/// @author Florida St\n/// @notice Some basic input checks.\nlibrary InputChecker {\n    error AddressZeroError();\n\n    function checkNotZero(address _address) internal pure {\n        if (_address == address(0)) {\n            revert AddressZeroError();\n        }\n    }\n}\n"}, "src/interfaces/ILiquidationHandler.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\nimport \"./loans/IMultiSourceLoan.sol\";\n\n/// @title Interface for liquidation handlers.\n/// @author Florida St\n/// @notice Liquidation Handler\ninterface ILiquidationHandler {\n    /// @return Liquidator contract address\n    function getLiquidator() external returns (address);\n\n    /// @notice Updates the liquidation contract.\n    /// @param loanLiquidator New liquidation contract.\n    function updateLiquidationContract(address loanLiquidator) external;\n\n    /// @notice Updates the auction duration for liquidations.\n    /// @param _newDuration New auction duration.\n    function updateLiquidationAuctionDuration(uint48 _newDuration) external;\n\n    /// @return auctionDuration Returns the auction's duration for liquidations.\n    function getLiquidationAuctionDuration() external returns (uint48);\n}\n"}, "src/lib/callbacks/CallbackHandler.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\nimport \"../utils/TwoStepOwned.sol\";\nimport \"../InputChecker.sol\";\nimport \"../utils/WithProtocolFee.sol\";\nimport \"../../interfaces/callbacks/ILoanCallback.sol\";\n\n/// @title CallbackHandler\n/// @author Florida St\n/// @notice Handle callbacks from the MultiSourceLoan contract.\nabstract contract CallbackHandler is WithProtocolFee {\n    using InputChecker for address;\n\n    /// @notice For security reasons we only allow a whitelisted set of callback contracts.\n    mapping(address callbackContract => bool isWhitelisted) internal _isWhitelistedCallbackContract;\n\n    address private immutable _multiSourceLoan;\n\n    event WhitelistedCallbackContractAdded(address contractAdded);\n    event WhitelistedCallbackContractRemoved(address contractRemoved);\n\n    constructor(address __owner, uint256 _minWaitTime, ProtocolFee memory __protocolFee)\n        WithProtocolFee(__owner, _minWaitTime, __protocolFee)\n    {}\n\n    /// @notice Add a whitelisted callback contract.\n    /// @param _contract Address of the contract.\n    function addWhitelistedCallbackContract(address _contract) external onlyOwner {\n        _contract.checkNotZero();\n        _isWhitelistedCallbackContract[_contract] = true;\n\n        emit WhitelistedCallbackContractAdded(_contract);\n    }\n\n    /// @notice Remove a whitelisted callback contract.\n    /// @param _contract Address of the contract.\n    function removeWhitelistedCallbackContract(address _contract) external onlyOwner {\n        _isWhitelistedCallbackContract[_contract] = false;\n\n        emit WhitelistedCallbackContractRemoved(_contract);\n    }\n\n    /// @return Whether a callback contract is whitelisted\n    function isWhitelistedCallbackContract(address _contract) external view returns (bool) {\n        return _isWhitelistedCallbackContract[_contract];\n    }\n\n    /// @notice Handle the afterPrincipalTransfer callback.\n    /// @param _loan Loan.\n    /// @param _callbackAddress Callback address.\n    /// @param _callbackData Callback data.\n    /// @param _fee Fee.\n    function handleAfterPrincipalTransferCallback(\n        IMultiSourceLoan.Loan memory _loan,\n        address _callbackAddress,\n        bytes memory _callbackData,\n        uint256 _fee\n    ) internal {\n        if (\n            !_isWhitelistedCallbackContract[_callbackAddress]\n                || ILoanCallback(_callbackAddress).afterPrincipalTransfer(_loan, _fee, _callbackData)\n                    != ILoanCallback.afterPrincipalTransfer.selector\n        ) {\n            revert ILoanCallback.InvalidCallbackError();\n        }\n    }\n\n    /// @notice Handle the afterNFTTransfer callback.\n    /// @param _loan Loan.\n    /// @param _callbackAddress Callback address.\n    /// @param _callbackData Callback data.\n    function handleAfterNFTTransferCallback(\n        IMultiSourceLoan.Loan memory _loan,\n        address _callbackAddress,\n        bytes calldata _callbackData\n    ) internal {\n        if (\n            !_isWhitelistedCallbackContract[_callbackAddress]\n                || ILoanCallback(_callbackAddress).afterNFTTransfer(_loan, _callbackData)\n                    != ILoanCallback.afterNFTTransfer.selector\n        ) {\n            revert ILoanCallback.InvalidCallbackError();\n        }\n    }\n}\n"}, "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // The following calculation ensures accurate ceiling division without overflow.\n        // Since a is non-zero, (a - 1) / b will not overflow.\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\n        // when a = type(uint256).max and b = 1.\n        unchecked {\n            return a == 0 ? 0 : (a - 1) / b + 1;\n        }\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"}, "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // Formula from the \"Bit Twiddling Hacks\" by Sean Eron Anderson.\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\n            // taking advantage of the most significant (or \"sign\" bit) in two's complement representation.\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\n            // the mask will either be `bytes(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\n            int256 mask = n >> 255;\n\n            // A `bytes(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\n            return uint256((n + mask) ^ mask);\n        }\n    }\n}\n"}, "src/lib/utils/TwoStepOwned.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\nimport \"@solmate/auth/Owned.sol\";\n\n/// @title TwoStepOwned\n/// @author Florida St\n/// @notice This contract is used to transfer ownership of a contract in two steps.\nabstract contract TwoStepOwned is Owned {\n    event TransferOwnerRequested(address newOwner);\n\n    error TooSoonError();\n    error InvalidInputError();\n\n    uint256 public immutable MIN_WAIT_TIME;\n\n    address public pendingOwner;\n    uint256 public pendingOwnerTime;\n\n    constructor(address _owner, uint256 _minWaitTime) Owned(_owner) {\n        pendingOwnerTime = type(uint256).max;\n        MIN_WAIT_TIME = _minWaitTime;\n    }\n\n    /// @notice First step transferring ownership to the new owner.\n    /// @param _newOwner The address of the new owner.\n    function requestTransferOwner(address _newOwner) external onlyOwner {\n        pendingOwner = _newOwner;\n        pendingOwnerTime = block.timestamp;\n\n        emit TransferOwnerRequested(_newOwner);\n    }\n\n    /// @notice Second step transferring ownership to the new owner.\n    function transferOwnership() public {\n        address newOwner = msg.sender;\n        if (pendingOwnerTime + MIN_WAIT_TIME > block.timestamp) {\n            revert TooSoonError();\n        }\n        if (newOwner != pendingOwner) {\n            revert InvalidInputError();\n        }\n        owner = newOwner;\n        pendingOwner = address(0);\n        pendingOwnerTime = type(uint256).max;\n\n        emit OwnershipTransferred(owner, newOwner);\n    }\n}\n"}, "src/lib/utils/WithProtocolFee.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\nimport \"./TwoStepOwned.sol\";\n\nimport \"../InputChecker.sol\";\n\nabstract contract WithProtocolFee is TwoStepOwned {\n    using InputChecker for address;\n\n    /// @notice Recipient address and fraction of gains charged by the protocol.\n    struct ProtocolFee {\n        address recipient;\n        uint256 fraction;\n    }\n\n    uint256 public constant FEE_UPDATE_NOTICE = 30 days;\n\n    /// @notice Protocol fee charged on gains.\n    ProtocolFee internal _protocolFee;\n    /// @notice Set as the target new protocol fee.\n    ProtocolFee internal _pendingProtocolFee;\n    /// @notice Set when the protocol fee updating mechanisms starts.\n    uint256 internal _pendingProtocolFeeSetTime;\n\n    event ProtocolFeeUpdated(ProtocolFee fee);\n    event ProtocolFeePendingUpdate(ProtocolFee fee);\n\n    error TooEarlyError(uint256 _pendingProtocolFeeSetTime);\n\n    /// @notice Constructor\n    /// @param _owner The owner of the contract\n    /// @param _minWaitTime The time to wait before a new owner can be set\n    /// @param __protocolFee The protocol fee\n    constructor(address _owner, uint256 _minWaitTime, ProtocolFee memory __protocolFee)\n        TwoStepOwned(_owner, _minWaitTime)\n    {\n        _protocolFee = __protocolFee;\n        _pendingProtocolFeeSetTime = type(uint256).max;\n    }\n\n    /// @return protocolFee The Protocol fee.\n    function getProtocolFee() external view returns (ProtocolFee memory) {\n        return _protocolFee;\n    }\n\n    /// @return pendingProtocolFee The pending protocol fee.\n    function getPendingProtocolFee() external view returns (ProtocolFee memory) {\n        return _pendingProtocolFee;\n    }\n\n    /// @return protocolFeeSetTime Time when the protocol fee was set to be changed.\n    function getPendingProtocolFeeSetTime() external view returns (uint256) {\n        return _pendingProtocolFeeSetTime;\n    }\n\n    /// @notice Kicks off the process to update the protocol fee.\n    /// @param _newProtocolFee New protocol fee.\n    function updateProtocolFee(ProtocolFee calldata _newProtocolFee) external onlyOwner {\n        _newProtocolFee.recipient.checkNotZero();\n\n        _pendingProtocolFee = _newProtocolFee;\n        _pendingProtocolFeeSetTime = block.timestamp;\n\n        emit ProtocolFeePendingUpdate(_pendingProtocolFee);\n    }\n\n    /// @notice Set the protocol fee if enough notice has been given.\n    function setProtocolFee() external virtual {\n        if (block.timestamp < _pendingProtocolFeeSetTime + FEE_UPDATE_NOTICE) {\n            revert TooSoonError();\n        }\n        ProtocolFee memory protocolFee = _pendingProtocolFee;\n        _protocolFee = protocolFee;\n\n        emit ProtocolFeeUpdated(protocolFee);\n    }\n}\n"}, "src/interfaces/callbacks/ILoanCallback.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.30;\n\nimport \"../loans/IMultiSourceLoan.sol\";\n\ninterface ILoanCallback {\n    error InvalidCallbackError();\n\n    /// @notice Called by the MSL contract after the principal of loan has been tranfered (when a loan is initiated)\n    /// but before it tries to transfer the NFT into escrow.\n    /// @param _loan The loan.\n    /// @param _fee The origination fee.\n    /// @param _executionData Execution data for purchase.\n    /// @return The bytes4 magic value.\n    function afterPrincipalTransfer(IMultiSourceLoan.Loan memory _loan, uint256 _fee, bytes calldata _executionData)\n        external\n        returns (bytes4);\n\n    /// @notice Call by the MSL contract after the NFT has been transfered to the borrower repaying the loan, but before\n    /// transfering the principal to the lender.\n    /// @param _loan The loan.\n    /// @param _executionData Execution data for the offer.\n    /// @return The bytes4 magic value.\n    function afterNFTTransfer(IMultiSourceLoan.Loan memory _loan, bytes calldata _executionData)\n        external\n        returns (bytes4);\n}\n"}}, "settings": {"remappings": ["@forge-std/=lib/forge-std/src/", "@openzeppelin/=lib/openzeppelin-contracts/contracts/", "@solady/=lib/solady/src/", "@solmate/=lib/solmate/src/", "@zora/=lib/v3/contracts/", "@chainlink/=lib/chainlink/contracts/src/v0.8/", "@delegate/=lib/delegate-registry/src/", "@seaport/=lib/seaport/lib/", "test/=test/", "@const/=src/const/default/", "@manifoldxyz/=lib/v3/node_modules/@manifoldxyz/", "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/", "@rari-capital/=lib/v3/node_modules/@rari-capital/", "@rari-capital/solmate/=lib/seaport/lib/solmate/", "chainlink/=lib/chainlink/contracts/", "delegate-registry/=lib/delegate-registry/", "ds-test/=lib/seaport/lib/ds-test/src/", "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/", "forge-std/=lib/forge-std/src/", "murky/=lib/delegate-registry/lib/murky/", "openzeppelin-contracts/=lib/openzeppelin-contracts/", "openzeppelin/=lib/delegate-registry/lib/openzeppelin-contracts/contracts/", "seaport-core/=lib/seaport/lib/seaport-core/", "seaport-sol/=lib/seaport/lib/seaport-sol/", "seaport-types/=lib/seaport/lib/seaport-types/", "seaport/=lib/seaport/", "solady/=lib/solady/src/", "solarray/=lib/seaport/lib/solarray/src/", "solmate/=lib/solmate/src/", "v3/=lib/v3/contracts/"], "optimizer": {"enabled": true}, "metadata": {"useLiteralContent": false, "bytecodeHash": "ipfs", "appendCBOR": true}, "outputSelection": {"*": {"*": ["evm.legacyAssembly"]}}, "evmVersion": "paris", "viaIR": false, "libraries": {}}}
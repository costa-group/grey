{"language": "Solidity", "sources": {"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"}, "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"}, "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"}, "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.30;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"}, "@openzeppelin/contracts/proxy/Proxy.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"}, "@openzeppelin/contracts/proxy/utils/Initializable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"}, "@openzeppelin/contracts/token/ERC721/IERC721.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"}, "@openzeppelin/contracts/utils/Address.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"}, "@openzeppelin/contracts/utils/Create2.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Create2.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(\n        uint256 amount,\n        bytes32 salt,\n        bytes memory bytecode\n    ) internal returns (address addr) {\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(\n        bytes32 salt,\n        bytes32 bytecodeHash,\n        address deployer\n    ) internal pure returns (address addr) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40) // Get free memory pointer\n\n            // |                   | \u2193 ptr ...  \u2193 ptr + 0x0B (start) ...  \u2193 ptr + 0x20 ...  \u2193 ptr + 0x40 ...   |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\n            // | 0xFF              |            FF                                                             |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\n            // | keccak(start, 85) |            \u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191 |\n\n            mstore(add(ptr, 0x40), bytecodeHash)\n            mstore(add(ptr, 0x20), salt)\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\n            mstore8(start, 0xff)\n            addr := keccak256(start, 85)\n        }\n    }\n}\n"}, "@openzeppelin/contracts/utils/introspection/IERC165.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"}, "contracts/agent-platform/interfaces/IAgent.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport {File} from \"./IFileStore.sol\";\nimport {IEAI721Intelligence} from \"../../interfaces/IEAI721Intelligence.sol\";\n\ninterface IAgent {\n    event CodePointerCreated(\n        uint256 indexed version,\n        uint256 indexed pIndex,\n        IEAI721Intelligence.CodePointer newPointer\n    );\n\n    error Unauthenticated();\n    error InvalidData();\n    error ZeroAddress();\n    error InvalidVersion();\n\n    function publishAgentCode(\n        string calldata codeLanguage,\n        IEAI721Intelligence.CodePointer[] calldata pointers,\n        address[] calldata depsAgents\n    ) external returns (uint16 version);\n\n    function setAgentName(string calldata agentName) external;\n\n    function getDepsAgents(\n        uint16 version\n    ) external view returns (address[] memory);\n\n    function getAgentCode(\n        uint16 version\n    ) external view returns (string memory code);\n\n    function getCodeLanguage() external view returns (string memory);\n\n    function getCurrentVersion() external view returns (uint16);\n\n    function getCollectionId() external view returns (uint256);\n\n    function getAgentName() external view returns (string memory);\n}\n"}, "contracts/agent-platform/interfaces/IAgentFactory.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport {IAgent, IEAI721Intelligence} from \"./IAgent.sol\";\n\ninterface IAgentFactory {\n    event AgentCreated(\n        address collection,\n        bytes32 agentId,\n        address indexed agent\n    );\n    event ImplementationSet(address indexed implementation);\n    event AgentNameSet(bytes32 indexed agentId, string agentName);\n\n    function collectionIdToAgentId(\n        uint256 nftId\n    ) external view returns (bytes32);\n\n    function isNameRegistered(\n        string calldata agentName\n    ) external view returns (bool);\n\n    function agents(bytes32 agentId) external view returns (address);\n\n    function createAgent(\n        bytes32 agentId,\n        string calldata agentName,\n        string calldata codeLanguage,\n        IEAI721Intelligence.CodePointer[] memory pointers,\n        address[] calldata depsAgents,\n        uint256 nftId\n    ) external returns (address agent);\n\n    function publishAgentCode(\n        bytes32 agentId,\n        string calldata codeLanguage,\n        IEAI721Intelligence.CodePointer[] calldata pointers,\n        address[] calldata depsAgents\n    ) external returns (uint16 agentVersion);\n\n    function publishAgentCodeSingleTx(\n        bytes32 agentId,\n        string calldata codeLanguage,\n        address[] calldata depsAgents,\n        bytes[] calldata datas, // salt and data\n        string calldata fileName,\n        IEAI721Intelligence.FileType fileType,\n        bytes memory metadata\n    ) external returns (uint16 agentVersion);\n\n    function setAgentName(bytes32 agentId, string calldata agentName) external;\n\n    function getAgentName(\n        bytes32 agentId\n    ) external view returns (string memory);\n\n    function getImplementation() external view returns (address);\n}\n"}, "contracts/agent-platform/interfaces/IFileStore.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport {File, BytecodeSlice} from \"../utility-agent/File.sol\";\n\n/// @title EthFS FileStore interface\n/// @notice Specifies a content-addressable onchain file store\ninterface IFileStore {\n    event Deployed();\n\n    /**\n     * @dev Emitted when a new file is created\n     * @param indexedFilename The indexed filename for easier finding by filename in logs\n     * @param pointer The pointer address of the file\n     * @param filename The name of the file\n     * @param size The total size of the file\n     * @param metadata Additional metadata of the file, only emitted for use in offchain indexers\n     */\n    event FileCreated(\n        string indexed indexedFilename,\n        address indexed pointer,\n        string filename,\n        uint256 size,\n        bytes metadata\n    );\n\n    /**\n     * @dev Error thrown when a requested file is not found\n     * @param filename The name of the file requested\n     */\n    error FileNotFound(string filename);\n\n    /**\n     * @dev Error thrown when a filename already exists\n     * @param filename The name of the file attempted to be created\n     */\n    error FilenameExists(string filename);\n\n    /**\n     * @dev Error thrown when attempting to create an empty file\n     */\n    error FileEmpty();\n\n    /**\n     * @dev Error thrown when a provided slice for a file is empty\n     * @param pointer The contract address where the bytecode lives\n     * @param start The byte offset to start the slice (inclusive)\n     * @param end The byte offset to end the slice (exclusive)\n     */\n    error SliceEmpty(address pointer, uint32 start, uint32 end);\n\n    /**\n     * @dev Error thrown when the provided pointer's bytecode does not have the expected STOP opcode prefix from SSTORE2\n     * @param pointer The SSTORE2 pointer address\n     */\n    error InvalidPointer(address pointer);\n\n    /**\n     * @notice Returns the address of the CREATE2 deterministic deployer used by this FileStore\n     * @return The address of the CREATE2 deterministic deployer\n     */\n    function deployer() external view returns (address);\n\n    /**\n     * @notice Retrieves the pointer address of a file by its filename\n     * @param filename The name of the file\n     * @return pointer The pointer address of the file\n     */\n    function files(\n        string memory filename\n    ) external view returns (address pointer);\n\n    /**\n     * @notice Checks if a file exists for a given filename\n     * @param filename The name of the file to check\n     * @return True if the file exists, false otherwise\n     */\n    function fileExists(string memory filename) external view returns (bool);\n\n    /**\n     * @notice Retrieves the pointer address for a given filename\n     * @param filename The name of the file\n     * @return pointer The pointer address of the file\n     */\n    function getPointer(\n        string memory filename\n    ) external view returns (address pointer);\n\n    /**\n     * @notice Retrieves a file by its filename\n     * @param filename The name of the file\n     * @return file The file associated with the filename\n     */\n    function getFile(\n        string memory filename\n    ) external view returns (File memory file);\n\n    /**\n     * @notice Creates a new file with the provided file contents\n     * @dev This is a convenience method to simplify small file uploads. It's recommended to use `createFileFromPointers` or `createFileFromSlices` for larger files. This particular method splits `contents` into 24575-byte chunks before storing them via SSTORE2.\n     * @param filename The name of the new file\n     * @param contents The contents of the file\n     * @return pointer The pointer address of the new file\n     * @return file The newly created file\n     */\n    function createFile(\n        string memory filename,\n        string memory contents\n    ) external returns (address pointer, File memory file);\n\n    /**\n     * @notice Creates a new file with the provided file contents and file metadata\n     * @dev This is a convenience method to simplify small file uploads. It's recommended to use `createFileFromPointers` or `createFileFromSlices` for larger files. This particular method splits `contents` into 24575-byte chunks before storing them via SSTORE2.\n     * @param filename The name of the new file\n     * @param contents The contents of the file\n     * @param metadata Additional file metadata, usually a JSON-encoded string, for offchain indexers\n     * @return pointer The pointer address of the new file\n     * @return file The newly created file\n     */\n    function createFile(\n        string memory filename,\n        string memory contents,\n        bytes memory metadata\n    ) external returns (address pointer, File memory file);\n\n    /**\n     * @notice Creates a new file where its content is composed of the provided string chunks\n     * @dev This is a convenience method to simplify small and nuanced file uploads. It's recommended to use `createFileFromPointers` or `createFileFromSlices` for larger files. This particular will store each chunk separately via SSTORE2. For best gas efficiency, each chunk should be as large as possible (up to the contract size limit) and at least 32 bytes.\n     * @param filename The name of the new file\n     * @param chunks The string chunks composing the file\n     * @return pointer The pointer address of the new file\n     * @return file The newly created file\n     */\n    function createFileFromChunks(\n        string memory filename,\n        string[] memory chunks\n    ) external returns (address pointer, File memory file);\n\n    /**\n     * @notice Creates a new file with the provided string chunks and file metadata\n     * @dev This is a convenience method to simplify small and nuanced file uploads. It's recommended to use `createFileFromPointers` or `createFileFromSlices` for larger files. This particular will store each chunk separately via SSTORE2. For best gas efficiency, each chunk should be as large as possible (up to the contract size limit) and at least 32 bytes.\n     * @param filename The name of the new file\n     * @param chunks The string chunks composing the file\n     * @param metadata Additional file metadata, usually a JSON-encoded string, for offchain indexers\n     * @return pointer The pointer address of the new file\n     * @return file The newly created file\n     */\n    function createFileFromChunks(\n        string memory filename,\n        string[] memory chunks,\n        bytes memory metadata\n    ) external returns (address pointer, File memory file);\n\n    /**\n     * @notice Creates a new file where its content is composed of the provided SSTORE2 pointers\n     * @param filename The name of the new file\n     * @param pointers The SSTORE2 pointers composing the file\n     * @return pointer The pointer address of the new file\n     * @return file The newly created file\n     */\n    function createFileFromPointers(\n        string memory filename,\n        address[] memory pointers\n    ) external returns (address pointer, File memory file);\n\n    /**\n     * @notice Creates a new file with the provided SSTORE2 pointers and file metadata\n     * @param filename The name of the new file\n     * @param pointers The SSTORE2 pointers composing the file\n     * @param metadata Additional file metadata, usually a JSON-encoded string, for offchain indexers\n     * @return pointer The pointer address of the new file\n     * @return file The newly created file\n     */\n    function createFileFromPointers(\n        string memory filename,\n        address[] memory pointers,\n        bytes memory metadata\n    ) external returns (address pointer, File memory file);\n\n    /**\n     * @notice Creates a new file where its content is composed of the provided bytecode slices\n     * @param filename The name of the new file\n     * @param slices The bytecode slices composing the file\n     * @return pointer The pointer address of the new file\n     * @return file The newly created file\n     */\n    function createFileFromSlices(\n        string memory filename,\n        BytecodeSlice[] memory slices\n    ) external returns (address pointer, File memory file);\n\n    /**\n     * @notice Creates a new file with the provided bytecode slices and file metadata\n     * @param filename The name of the new file\n     * @param slices The bytecode slices composing the file\n     * @param metadata Additional file metadata, usually a JSON-encoded string, for offchain indexers\n     * @return pointer The pointer address of the new file\n     * @return file The newly created file\n     */\n    function createFileFromSlices(\n        string memory filename,\n        BytecodeSlice[] memory slices,\n        bytes memory metadata\n    ) external returns (address pointer, File memory file);\n}\n"}, "contracts/agent-platform/utility-agent/AgentFactory.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {IAgentFactory, IAgent, IEAI721Intelligence} from \"../interfaces/IAgentFactory.sol\";\nimport {AgentUpgradeable} from \"./AgentUpgradeable.sol\";\nimport {AgentProxy} from \"./AgentProxy.sol\";\nimport {IFileStore} from \"../interfaces/IFileStore.sol\";\nimport {Create2} from \"@openzeppelin/contracts/utils/Create2.sol\";\n\ncontract AgentFactory is IAgentFactory, OwnableUpgradeable {\n    // single safe factory\n    address public constant SINGLE_SAFE_FACTORY = 0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7;\n    address public constant FIE_STORE = 0xFe1411d6864592549AdE050215482e4385dFa0FB;\n\n    address _implementation;\n    address _collection;\n\n    // agentId => agent address\n    mapping(bytes32 => address) public agents;\n    // nftId => agentId\n    mapping(uint256 => bytes32) public collectionIdToAgentId;\n    // agentName => isRegistered\n    mapping(string => bool) public isNameRegistered;\n    // agentId => agentName\n    mapping(bytes32 => string) private agentNames;\n\n    // this section for agent no need to be owned by a NFT\n    // nft id => agent address\n    mapping (bytes32 => address) public ownerV2;\n\n    // Modifier\n    modifier onlyAgentOwner(uint256 collectionId) {\n        address nftOwner = IERC721(_collection).ownerOf(collectionId);\n        if (\n            nftOwner != msg.sender &&\n            msg.sender != _collection &&\n            !IEAI721Intelligence(_collection).checkAgentDelegate(\n                msg.sender,\n                nftOwner,\n                collectionId\n            )\n        ) revert(\"Unauthorized\");\n\n        _;\n    }\n\n    function initialize(\n        address owner,\n        address implementation,\n        address collection\n    ) public initializer {\n        require(owner != address(0), \"Invalid owner\");\n        require(implementation != address(0), \"Invalid implementation\");\n        require(collection != address(0), \"Invalid collection\");\n\n        __Ownable_init();\n        _transferOwnership(owner);\n        _implementation = implementation;\n        _collection = collection;\n    }\n\n    function _createAgent(\n        bytes32 agentId,\n        string calldata agentName,\n        string calldata codeLanguage,\n        IEAI721Intelligence.CodePointer[] memory pointers,\n        address[] calldata depsAgents,\n        uint256 nftId\n    ) internal returns (address agent) {\n        require(\n            agentId != bytes32(0) && collectionIdToAgentId[nftId] == bytes32(0),\n            \"Invalid agent id\"\n        );\n        require(agents[agentId] == address(0), \"Agent already exists\");\n\n        collectionIdToAgentId[nftId] = agentId;\n        agent = address(new AgentProxy());\n        AgentUpgradeable(agent).initialize(\n            nftId,\n            agentName,\n            codeLanguage,\n            pointers,\n            depsAgents\n        );\n\n        agents[agentId] = agent;\n\n        emit AgentCreated(_collection, agentId, agent);   \n    }\n\n    function createAgent(\n        bytes32 agentId,\n        string calldata agentName,\n        string calldata codeLanguage,\n        IEAI721Intelligence.CodePointer[] memory pointers,\n        address[] calldata depsAgents,\n        uint256 nftId\n    ) external onlyAgentOwner(nftId) returns (address agent) {\n        agent = _createAgent(agentId, agentName, codeLanguage, pointers, depsAgents, nftId);\n    }\n\n    function publishAgentCode(\n        bytes32 agentId,\n        string calldata codeLanguage,\n        IEAI721Intelligence.CodePointer[] calldata pointers,\n        address[] calldata depsAgents\n    )\n        external\n        onlyAgentOwner(AgentUpgradeable(agents[agentId]).getCollectionId())\n        returns (uint16 agentVersion)\n    {\n        address agent = agents[agentId];\n        require(agent != address(0), \"Agent does not exist\");\n\n        agentVersion = AgentUpgradeable(agents[agentId]).publishAgentCode(\n            codeLanguage,\n            pointers,\n            depsAgents\n        );\n    }\n\n    function _publishAgentCodeSingleTx(\n        bytes[] calldata datas, // salt and data\n        string calldata fileName,\n        bytes memory metadata\n    ) internal {\n        require(datas.length > 0, \"Datas is empty\");\n\n        // init addresses array memory with datas length\n        address[] memory pointerAddresses = new address[](datas.length);\n\n        // loop through datas and set pointers\n        for (uint256 i = 0; i < datas.length; i++) {\n            // check length of datas[i]\n            require(datas[i].length > 32, \"Invalid data\");\n            // check contract address is not empty \n            address computedAddress = Create2.computeAddress(bytes32(datas[i][0:32]), keccak256(datas[i][32:]), SINGLE_SAFE_FACTORY);\n            require(computedAddress != address(0), \"Invalid computed address\");\n\n            if (computedAddress.code.length > 0) {\n                pointerAddresses[i] = computedAddress;\n            } else {\n                // call single safe factory\n                (bool success, bytes memory pointerAddrBytes) = SINGLE_SAFE_FACTORY.call(datas[i]);\n                require(success, \"Single safe factory call failed\");\n                pointerAddresses[i] = address(uint160(bytes20(pointerAddrBytes)));\n                require(computedAddress == pointerAddresses[i], \"Mismatch address\");\n            }\n        }\n\n        // call fie store\n        IFileStore(FIE_STORE).createFileFromPointers(fileName, pointerAddresses, metadata);\n    }\n\n    function createAgentSingleTx(\n        bytes32 agentId,\n        string calldata agentName,\n        string calldata codeLanguage,\n        address[] calldata depsAgents,\n        uint256 nftId,\n        bytes[] calldata datas, // salt and data\n        string calldata fileName,\n        IEAI721Intelligence.FileType fileType,\n        bytes memory metadata\n    ) external onlyAgentOwner(nftId) returns (address agent) {\n        // publish agent code\n        _publishAgentCodeSingleTx(\n            datas,\n            fileName,\n            metadata\n        );\n\n        IEAI721Intelligence.CodePointer[] memory pointers = new IEAI721Intelligence.CodePointer[](1);\n        pointers[0] = IEAI721Intelligence.CodePointer({\n            retrieveAddress: FIE_STORE,\n            fileType: fileType,\n            fileName: fileName\n        });\n\n        // create agent\n        agent = _createAgent(agentId, agentName, codeLanguage, pointers, depsAgents, nftId);\n    }\n\n    function publishAgentCodeSingleTx(\n        bytes32 agentId,\n        string calldata codeLanguage,\n        address[] calldata depsAgents,\n        bytes[] calldata datas, // salt and data\n        string calldata fileName,\n        IEAI721Intelligence.FileType fileType,\n        bytes memory metadata\n    )         \n        external\n        onlyAgentOwner(AgentUpgradeable(agents[agentId]).getCollectionId())\n        returns (uint16 agentVersion)\n    {\n        _publishAgentCodeSingleTx(\n            datas,\n            fileName,\n            metadata\n        );\n        \n        // call agent\n        IEAI721Intelligence.CodePointer[] memory pointers = new IEAI721Intelligence.CodePointer[](1);\n        pointers[0] = IEAI721Intelligence.CodePointer({\n            retrieveAddress: FIE_STORE,\n            fileType: fileType,\n            fileName: fileName\n        });\n\n        address agent = agents[agentId];\n        require(agent != address(0), \"Agent does not exist\");\n        agentVersion = AgentUpgradeable(agent).publishAgentCode(\n            codeLanguage,\n            pointers,\n            depsAgents\n        );\n    }\n\n    function setAgentName(\n        bytes32 agentId,\n        string calldata agentName\n    )\n        external\n        onlyAgentOwner(AgentUpgradeable(agents[agentId]).getCollectionId())\n    {\n        agentNames[agentId] = agentName;\n\n        // call setAgentName on the agent\n        AgentUpgradeable(agents[agentId]).setAgentName(agentName);\n\n        emit AgentNameSet(agentId, agentName);\n    }\n\n    // @notice V2 functions for agents not owned by NFTs\n    function createAgentV2(\n        bytes32 agentId,\n        string calldata agentName,\n        string calldata codeLanguage,\n        IEAI721Intelligence.CodePointer[] memory pointers,\n        address[] calldata depsAgents\n    ) external returns (address agent) {\n        uint nftId = uint256(agentId);\n        try IERC721(_collection).ownerOf(nftId) returns (address nftOwner) {\n            require(nftOwner == address(0), \"NFT must not exist or burned\");\n        } catch {\n            agent = _createAgent(agentId, agentName, codeLanguage, pointers, depsAgents, nftId);\n            ownerV2[agentId] = msg.sender;\n        }  \n    }\n\n    function publishAgentCodeV2(\n        bytes32 agentId,\n        string calldata codeLanguage,\n        IEAI721Intelligence.CodePointer[] calldata pointers,\n        address[] calldata depsAgents\n    )\n        external\n        returns (uint16 agentVersion)\n    {\n        require(ownerV2[agentId] == msg.sender, \"Unauthorized\");\n\n        address agent = agents[agentId];\n        require(agent != address(0), \"Agent does not exist\");\n\n        agentVersion = AgentUpgradeable(agents[agentId]).publishAgentCode(\n            codeLanguage,\n            pointers,\n            depsAgents\n        );\n    }\n\n    function setAgentNameV2(\n        bytes32 agentId,\n        string calldata agentName\n    )\n        external\n    {\n        require(ownerV2[agentId] == msg.sender, \"Unauthorized\");\n        agentNames[agentId] = agentName;\n\n        // call setAgentName on the agent\n        AgentUpgradeable(agents[agentId]).setAgentName(agentName);\n\n        emit AgentNameSet(agentId, agentName);\n    }\n\n    function publishAgentCodeSingleTxV2(\n        bytes32 agentId,\n        string calldata codeLanguage,\n        address[] calldata depsAgents,\n        bytes[] calldata datas, // salt and data\n        string calldata fileName,\n        IEAI721Intelligence.FileType fileType,\n        bytes memory metadata\n    )         \n        external\n        returns (uint16 agentVersion)\n    {\n        require(ownerV2[agentId] == msg.sender, \"Unauthorized\");\n\n        _publishAgentCodeSingleTx(\n            datas,\n            fileName,\n            metadata\n        );\n        \n        // call agent\n        IEAI721Intelligence.CodePointer[] memory pointers = new IEAI721Intelligence.CodePointer[](1);\n        pointers[0] = IEAI721Intelligence.CodePointer({\n            retrieveAddress: FIE_STORE,\n            fileType: fileType,\n            fileName: fileName\n        });\n\n        address agent = agents[agentId];\n        require(agent != address(0), \"Agent does not exist\");\n        agentVersion = AgentUpgradeable(agent).publishAgentCode(\n            codeLanguage,\n            pointers,\n            depsAgents\n        );\n    }\n\n    function createAgentSingleTxV2(\n        bytes32 agentId,\n        string calldata agentName,\n        string calldata codeLanguage,\n        address[] calldata depsAgents,\n        bytes[] calldata datas, // salt and data\n        string calldata fileName,\n        IEAI721Intelligence.FileType fileType,\n        bytes memory metadata\n    ) external returns (address agent) {\n        uint nftId = uint256(agentId);\n        try IERC721(_collection).ownerOf(nftId) returns (address nftOwner) {\n            require(nftOwner == address(0), \"NFT must not exist or burned\");\n        } catch {\n            // publish agent code\n            _publishAgentCodeSingleTx(\n                datas,\n                fileName,\n                metadata\n            );\n\n            IEAI721Intelligence.CodePointer[] memory pointers = new IEAI721Intelligence.CodePointer[](1);\n            pointers[0] = IEAI721Intelligence.CodePointer({\n                retrieveAddress: FIE_STORE,\n                fileType: fileType,\n                fileName: fileName\n            });\n\n            // create agent\n            agent = _createAgent(agentId, agentName, codeLanguage, pointers, depsAgents, nftId);\n            ownerV2[agentId] = msg.sender;\n        }\n    }\n\n    function setImplementation(address implementation) external onlyOwner {\n        require(implementation != address(0), \"Invalid implementation\");\n        _implementation = implementation;\n\n        emit ImplementationSet(implementation);\n    }\n\n    function getImplementation() external view returns (address) {\n        return _implementation;\n    }\n\n    function getCollection() external view returns (address) {\n        return _collection;\n    }\n\n    function getAgentName(\n        bytes32 agentId\n    ) external view returns (string memory) {\n        return agentNames[agentId];\n    }\n}\n"}, "contracts/agent-platform/utility-agent/AgentProxy.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport {Proxy} from \"@openzeppelin/contracts/proxy/Proxy.sol\";\nimport {IAgentFactory} from \"../interfaces/IAgentFactory.sol\";\n\ncontract AgentProxy is Proxy {\n    //\n    IAgentFactory public immutable factory;\n\n    // ======== Constructor =========\n    constructor() {\n        factory = IAgentFactory(msg.sender);\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation()\n        internal\n        view\n        virtual\n        override\n        returns (address impl)\n    {\n        return factory.getImplementation();\n    }\n}\n"}, "contracts/agent-platform/utility-agent/AgentUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport {Initializable} from \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport {IAgent, IEAI721Intelligence} from \"../interfaces/IAgent.sol\";\nimport {IFileStore, File} from \"../interfaces/IFileStore.sol\";\n\ncontract AgentUpgradeable is IAgent, Initializable {\n    bytes32 private constant _IPFS_SIG = keccak256(bytes(\"ipfs\"));\n\n    string private _codeLanguage; // e.g., \"python\", \"javascript\"...\n    uint16 private _currentVersion;\n    address private _factory;\n    string private _agentName;\n    uint256 private _collectionId;\n\n    mapping(uint256 version => uint256) private _pointersNum;\n    mapping(uint256 version => mapping(uint256 => IEAI721Intelligence.CodePointer))\n        private _codePointers;\n    mapping(uint256 version => address[]) private _depsAgents;\n\n    modifier checkVersion(uint16 version) {\n        _validateVersion(version);\n        _;\n    }\n\n    modifier onlyFactory() {\n        if (msg.sender != _factory) revert Unauthenticated();\n        _;\n    }\n\n    function initialize(\n        uint256 collectionId,\n        string memory agentName,\n        string memory codeLanguage,\n        IEAI721Intelligence.CodePointer[] calldata pointers,\n        address[] calldata depsAgents\n    ) external payable initializer {\n        _codeLanguage = codeLanguage;\n        _factory = msg.sender;\n        _agentName = agentName;\n        _collectionId = collectionId;\n\n        if (pointers.length > 0) {\n            _publishAgentCode(_bumpVersion(), pointers, depsAgents);\n        }\n    }\n\n    function publishAgentCode(\n        string calldata codeLanguage,\n        IEAI721Intelligence.CodePointer[] calldata pointers,\n        address[] calldata depsAgents\n    ) external virtual onlyFactory returns (uint16) {\n        _codeLanguage = codeLanguage;\n        uint16 version = _bumpVersion();\n\n        return _publishAgentCode(version, pointers, depsAgents);\n    }\n\n    function setAgentName(\n        string calldata agentName\n    ) external virtual onlyFactory {\n        _agentName = agentName;\n    }\n\n    function _publishAgentCode(\n        uint16 version,\n        IEAI721Intelligence.CodePointer[] calldata pointers,\n        address[] calldata depsAgents\n    ) internal virtual returns (uint16) {\n        if (pointers.length == 0) revert InvalidData();\n\n        uint256 pLen = pointers.length;\n        for (uint256 i = 0; i < pLen; i++) {\n            if (bytes(pointers[i].fileName).length == 0) {\n                revert InvalidData();\n            }\n            _addNewCodePointer(version, pointers[i]);\n        }\n\n        uint256 depsLen = depsAgents.length;\n        for (uint256 i = 0; i < depsLen; i++) {\n            if (depsAgents[i] == address(0)) {\n                revert ZeroAddress();\n            }\n            _depsAgents[version].push(depsAgents[i]);\n        }\n\n        return version;\n    }\n\n    function getCodePointers(\n        uint16 version\n    )\n        external\n        view\n        checkVersion(version)\n        returns (IEAI721Intelligence.CodePointer[] memory)\n    {\n        uint256 pNum = _pointersNum[version];\n\n        IEAI721Intelligence.CodePointer[]\n            memory pointers = new IEAI721Intelligence.CodePointer[](pNum);\n\n        for (uint256 i = 0; i < pNum; i++) {\n            pointers[i] = _codePointers[version][i];\n        }\n\n        return pointers;\n    }\n\n    function _bumpVersion() private returns (uint16) {\n        return ++_currentVersion;\n    }\n\n    function _addNewCodePointer(\n        uint16 version,\n        IEAI721Intelligence.CodePointer calldata pointer\n    ) internal virtual {\n        uint256 pNum = _getPointersNumber(version);\n\n        _codePointers[version][pNum] = pointer;\n\n        emit CodePointerCreated(version, pNum, pointer);\n        _pointersNum[version]++;\n    }\n\n    function getDepsAgents(\n        uint16 version\n    ) external view checkVersion(version) returns (address[] memory) {\n        return _depsAgents[version];\n    }\n\n    function getAgentCode(\n        uint16 version\n    ) external view checkVersion(version) returns (string memory code) {\n        uint256 len = _getPointersNumber(version);\n        string memory libsCode = \"\";\n        string memory mainScripts = \"\";\n\n        for (uint256 pIdx = 0; pIdx < len; pIdx++) {\n            IEAI721Intelligence.CodePointer memory p = _codePointers[version][\n                pIdx\n            ];\n\n            string memory codeChunk = _getCodeByPointer(p);\n\n            if (p.fileType == IEAI721Intelligence.FileType.LIBRARY) {\n                libsCode = _concatStrings(libsCode, codeChunk);\n            } else if (p.fileType == IEAI721Intelligence.FileType.MAIN_SCRIPT) {\n                mainScripts = _concatStrings(mainScripts, codeChunk);\n            }\n        }\n\n        return _concatStrings(libsCode, mainScripts);\n    }\n\n    function _concatStrings(\n        string memory a,\n        string memory b\n    ) internal pure returns (string memory) {\n        return string(abi.encodePacked(a, \"\\n\", b));\n    }\n\n    function _getCodeByPointer(\n        IEAI721Intelligence.CodePointer memory p\n    ) internal view virtual returns (string memory logic) {\n        if (keccak256(bytes(_getStorageMode(p))) == _IPFS_SIG) {\n            logic = p.fileName; // return the IPFS hash\n        } else {\n            logic = IFileStore(p.retrieveAddress).getFile(p.fileName).read();\n        }\n    }\n\n    function _getStorageMode(\n        IEAI721Intelligence.CodePointer memory p\n    ) internal view virtual returns (string memory) {\n        if (p.retrieveAddress != address(0)) {\n            return \"fs\";\n        }\n        return \"ipfs\";\n    }\n\n    function _getPointersNumber(\n        uint16 version\n    ) internal view returns (uint256) {\n        return _pointersNum[version];\n    }\n\n    function getCurrentVersion() external view returns (uint16) {\n        return _currentVersion;\n    }\n\n    function _validateVersion(uint16 version) internal view {\n        if (version > _currentVersion) {\n            revert InvalidVersion();\n        }\n    }\n\n    function getCodeLanguage() external view returns (string memory) {\n        return _codeLanguage;\n    }\n\n    function getAgentName() external view returns (string memory) {\n        return _agentName;\n    }\n\n    function getCollectionId() external view returns (uint256) {\n        return _collectionId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     */\n    uint256[50] private __gap;\n}\n"}, "contracts/agent-platform/utility-agent/File.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\n/**\n * @title EthFS File\n * @notice A representation of an onchain file, composed of slices of contract bytecode and utilities to construct the file contents from those slices.\n * @dev For best gas efficiency, it's recommended using `File.read()` as close to the output returned by the contract call as possible. Lots of gas is consumed every time a large data blob is passed between functions.\n */\n\n/**\n * @dev Represents a reference to a slice of bytecode in a contract\n */\nstruct BytecodeSlice {\n    address pointer;\n    uint32 start;\n    uint32 end;\n}\n\n/**\n * @dev Represents a file composed of one or more bytecode slices\n */\nstruct File {\n    // Total length of file contents (sum of all slice sizes). Useful when you want to use DynamicBuffer to build the file contents from the slices.\n    uint256 size;\n    BytecodeSlice[] slices;\n}\n// extend File struct with read functions\nusing {read} for File global;\nusing {readUnchecked} for File global;\n\n/**\n * @dev Error thrown when a slice is out of the bounds of the contract's bytecode\n */\nerror SliceOutOfBounds(\n    address pointer,\n    uint32 codeSize,\n    uint32 sliceStart,\n    uint32 sliceEnd\n);\n\n/**\n * @notice Reads the contents of a file by concatenating its slices\n * @param file The file to read\n * @return contents The concatenated contents of the file\n */\nfunction read(File memory file) view returns (string memory contents) {\n    BytecodeSlice[] memory slices = file.slices;\n    bytes4 sliceOutOfBoundsSelector = SliceOutOfBounds.selector;\n\n    assembly {\n        let len := mload(slices)\n        let size := 0x20\n        contents := mload(0x40)\n        let slice\n        let pointer\n        let start\n        let end\n        let codeSize\n\n        for {\n            let i := 0\n        } lt(i, len) {\n            i := add(i, 1)\n        } {\n            slice := mload(add(slices, add(0x20, mul(i, 0x20))))\n            pointer := mload(slice)\n            start := mload(add(slice, 0x20))\n            end := mload(add(slice, 0x40))\n\n            codeSize := extcodesize(pointer)\n            if gt(end, codeSize) {\n                mstore(0x00, sliceOutOfBoundsSelector)\n                mstore(0x04, pointer)\n                mstore(0x24, codeSize)\n                mstore(0x44, start)\n                mstore(0x64, end)\n                revert(0x00, 0x84)\n            }\n\n            extcodecopy(pointer, add(contents, size), start, sub(end, start))\n            size := add(size, sub(end, start))\n        }\n\n        // update contents size\n        mstore(contents, sub(size, 0x20))\n        // store contents\n        mstore(0x40, add(contents, and(add(size, 0x1f), not(0x1f))))\n    }\n}\n\n/**\n * @notice Reads the contents of a file without reverting on unreadable/invalid slices. Skips any slices that are out of bounds or invalid. Useful if you are composing contract bytecode where a contract can still selfdestruct (which would result in an invalid slice) and want to avoid reverts but still output potentially \"corrupted\" file contents (due to missing data).\n * @param file The file to read\n * @return contents The concatenated contents of the file, skipping invalid slices\n */\nfunction readUnchecked(File memory file) view returns (string memory contents) {\n    BytecodeSlice[] memory slices = file.slices;\n\n    assembly {\n        let len := mload(slices)\n        let size := 0x20\n        contents := mload(0x40)\n        let slice\n        let pointer\n        let start\n        let end\n        let codeSize\n\n        for {\n            let i := 0\n        } lt(i, len) {\n            i := add(i, 1)\n        } {\n            slice := mload(add(slices, add(0x20, mul(i, 0x20))))\n            pointer := mload(slice)\n            start := mload(add(slice, 0x20))\n            end := mload(add(slice, 0x40))\n\n            codeSize := extcodesize(pointer)\n            if lt(end, codeSize) {\n                extcodecopy(\n                    pointer,\n                    add(contents, size),\n                    start,\n                    sub(end, start)\n                )\n                size := add(size, sub(end, start))\n            }\n        }\n\n        // update contents size\n        mstore(contents, sub(size, 0x20))\n        // store contents\n        mstore(0x40, add(contents, and(add(size, 0x1f), not(0x1f))))\n    }\n}\n"}, "contracts/interfaces/IEAI721Intelligence.sol": {"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.30;\n\ninterface IEAI721Intelligence {\n    // --- Enums ---\n    enum FileType {\n        LIBRARY,\n        MAIN_SCRIPT\n    }\n\n    // --- Structs ---\n    struct CodePointer {\n        address retrieveAddress;\n        FileType fileType;\n        string fileName;\n    }\n\n    // --- Events ---\n    event CodePointerCreated(\n        uint256 indexed agentId,\n        uint256 indexed version,\n        uint256 indexed pIndex,\n        CodePointer newPointer\n    );\n\n    event AgentNameSet(uint256 indexed agentId, string name);\n\n    // --- Errors ---\n    error EAI721IntelligenceAuth();\n    error DigestAlreadyUsed();\n    error InvalidData();\n    error InvalidDependency();\n    error InvalidVersion();\n\n    /**\n     * @dev Updates the name of a specific agent.\n     * @param agentId The unique identifier of the agent.\n     * @param name The new name to assign to the agent.\n     */\n    function setAgentName(uint256 agentId, string calldata name) external;\n\n    /**\n     * @dev Retrieves the name of a specific agent.\n     * @param agentId The unique identifier of the agent.\n     * @return The name of the agent.\n     */\n    function agentName(uint256 agentId) external view returns (string memory);\n\n    /**\n     * @dev Publishes the code for a specific agent.\n     * @param agentId The unique identifier of the agent.\n     * @param codeLanguage The programming language of the code.\n     * @param pointers An array of code pointers for the agent.\n     * @param depsAgents An array of dependent agent IDs.\n     * @return The version number of the published code.\n     */\n    function publishAgentCode(\n        uint256 agentId,\n        string calldata codeLanguage,\n        CodePointer[] calldata pointers,\n        address[] calldata depsAgents\n    ) external returns (uint16);\n\n    /**\n     * @dev Retrieves the dependent agent IDs for a specific agent and version.\n     * @param agentId The unique identifier of the agent.\n     * @param version The version number of the agent's code.\n     * @return An array of dependent agent addresses.\n     */\n    function depsAgents(\n        uint256 agentId,\n        uint16 version\n    ) external view returns (address[] memory);\n\n    /**\n     * @dev Retrieves the code of a specific agent for a given version.\n     * @param agentId The unique identifier of the agent.\n     * @param version The version number of the agent's code.\n     * @return code The code of the agent.\n     */\n    function agentCode(\n        uint256 agentId,\n        uint16 version\n    ) external view returns (string memory code);\n\n    /**\n     * @dev Retrieves the current version of a specific agent's code.\n     * @param agentId The unique identifier of the agent.\n     * @return The current version number of the agent's code.\n     */\n    function currentVersion(uint256 agentId) external view returns (uint16);\n\n    /**\n     * @dev Retrieves the programming language of a specific agent's code.\n     * @param agentId The unique identifier of the agent.\n     * @return The programming language of the agent's code.\n     */\n    function codeLanguage(\n        uint256 agentId\n    ) external view returns (string memory);\n\n    /**\n     * @dev Checks if a delegate has a specific right for an agent.\n     * @param to The address to check the delegate for.\n     * @param from The address of the owner of the agent.\n     * @param agentId The unique identifier of the agent.\n     */\n    function checkAgentDelegate(\n        address to,\n        address from,\n        uint256 agentId\n    ) external view returns (bool);\n}\n"}}, "settings": {"optimizer": {"enabled": true}, "viaIR": false, "evmVersion": "paris", "outputSelection": {"*": {"*": ["evm.legacyAssembly"]}}}}
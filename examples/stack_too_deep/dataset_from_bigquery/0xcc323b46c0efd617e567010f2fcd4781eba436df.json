{"language": "Solidity", "settings": {"evmVersion": "london", "libraries": {}, "metadata": {"bytecodeHash": "none", "useLiteralContent": true}, "optimizer": {"enabled": true}, "remappings": [], "viaIR": false, "outputSelection": {"*": {"*": ["evm.legacyAssembly"]}}}, "sources": {"@openzeppelin/contracts/token/ERC721/IERC721.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"}, "@openzeppelin/contracts/utils/Strings.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"}, "@openzeppelin/contracts/utils/introspection/IERC165.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"}, "contracts/BokkyPooBahsDateTimeLibrary.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\n// ----------------------------------------------------------------------------\n// BokkyPooBah's DateTime Library v1.01\n//\n// A gas-efficient Solidity date and time library\n//\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\n//\n// Tested date range 1970/01/01 to 2345/12/31\n//\n// Conventions:\n// Unit      | Range         | Notes\n// :-------- |:-------------:|:-----\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\n// year      | 1970 ... 2345 |\n// month     | 1 ... 12      |\n// day       | 1 ... 31      |\n// hour      | 0 ... 23      |\n// minute    | 0 ... 59      |\n// second    | 0 ... 59      |\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\n//\n//\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\n// ----------------------------------------------------------------------------\n\nlibrary BokkyPooBahsDateTimeLibrary {\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\n    uint256 constant SECONDS_PER_MINUTE = 60;\n    int256 constant OFFSET19700101 = 2440588;\n\n    uint256 constant DOW_MON = 1;\n    uint256 constant DOW_TUE = 2;\n    uint256 constant DOW_WED = 3;\n    uint256 constant DOW_THU = 4;\n    uint256 constant DOW_FRI = 5;\n    uint256 constant DOW_SAT = 6;\n    uint256 constant DOW_SUN = 7;\n\n    // ------------------------------------------------------------------------\n    // Calculate the number of days from 1970/01/01 to year/month/day using\n    // the date conversion algorithm from\n    //   https://aa.usno.navy.mil/faq/JD_formula.html\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\n    //\n    // days = day\n    //      - 32075\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\n    //      - offset\n    // ------------------------------------------------------------------------\n    function _daysFromDate(\n        uint256 year,\n        uint256 month,\n        uint256 day\n    ) internal pure returns (uint256 _days) {\n        require(year >= 1970);\n        int256 _year = int256(year);\n        int256 _month = int256(month);\n        int256 _day = int256(day);\n\n        int256 __days = _day -\n            32075 +\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\n            4 +\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\n            12 -\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\n            4 -\n            OFFSET19700101;\n\n        _days = uint256(__days);\n    }\n\n    // ------------------------------------------------------------------------\n    // Calculate year/month/day from the number of days since 1970/01/01 using\n    // the date conversion algorithm from\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\n    //\n    // int L = days + 68569 + offset\n    // int N = 4 * L / 146097\n    // L = L - (146097 * N + 3) / 4\n    // year = 4000 * (L + 1) / 1461001\n    // L = L - 1461 * year / 4 + 31\n    // month = 80 * L / 2447\n    // dd = L - 2447 * month / 80\n    // L = month / 11\n    // month = month + 2 - 12 * L\n    // year = 100 * (N - 49) + year + L\n    // ------------------------------------------------------------------------\n    function _daysToDate(uint256 _days)\n        internal\n        pure\n        returns (\n            uint256 year,\n            uint256 month,\n            uint256 day\n        )\n    {\n        int256 __days = int256(_days);\n\n        int256 L = __days + 68569 + OFFSET19700101;\n        int256 N = (4 * L) / 146097;\n        L = L - (146097 * N + 3) / 4;\n        int256 _year = (4000 * (L + 1)) / 1461001;\n        L = L - (1461 * _year) / 4 + 31;\n        int256 _month = (80 * L) / 2447;\n        int256 _day = L - (2447 * _month) / 80;\n        L = _month / 11;\n        _month = _month + 2 - 12 * L;\n        _year = 100 * (N - 49) + _year + L;\n\n        year = uint256(_year);\n        month = uint256(_month);\n        day = uint256(_day);\n    }\n\n    function timestampFromDate(\n        uint256 year,\n        uint256 month,\n        uint256 day\n    ) internal pure returns (uint256 timestamp) {\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\n    }\n\n    function timestampFromDateTime(\n        uint256 year,\n        uint256 month,\n        uint256 day,\n        uint256 hour,\n        uint256 minute,\n        uint256 second\n    ) internal pure returns (uint256 timestamp) {\n        timestamp =\n            _daysFromDate(year, month, day) *\n            SECONDS_PER_DAY +\n            hour *\n            SECONDS_PER_HOUR +\n            minute *\n            SECONDS_PER_MINUTE +\n            second;\n    }\n\n    function timestampToDate(uint256 timestamp)\n        internal\n        pure\n        returns (\n            uint256 year,\n            uint256 month,\n            uint256 day\n        )\n    {\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n    }\n\n    function timestampToDateTime(uint256 timestamp)\n        internal\n        pure\n        returns (\n            uint256 year,\n            uint256 month,\n            uint256 day,\n            uint256 hour,\n            uint256 minute,\n            uint256 second\n        )\n    {\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        uint256 secs = timestamp % SECONDS_PER_DAY;\n        hour = secs / SECONDS_PER_HOUR;\n        secs = secs % SECONDS_PER_HOUR;\n        minute = secs / SECONDS_PER_MINUTE;\n        second = secs % SECONDS_PER_MINUTE;\n    }\n\n    function isValidDate(\n        uint256 year,\n        uint256 month,\n        uint256 day\n    ) internal pure returns (bool valid) {\n        if (year >= 1970 && month > 0 && month <= 12) {\n            uint256 daysInMonth = _getDaysInMonth(year, month);\n            if (day > 0 && day <= daysInMonth) {\n                valid = true;\n            }\n        }\n    }\n\n    function isValidDateTime(\n        uint256 year,\n        uint256 month,\n        uint256 day,\n        uint256 hour,\n        uint256 minute,\n        uint256 second\n    ) internal pure returns (bool valid) {\n        if (isValidDate(year, month, day)) {\n            if (hour < 24 && minute < 60 && second < 60) {\n                valid = true;\n            }\n        }\n    }\n\n    function isLeapYear(uint256 timestamp) internal pure returns (bool leapYear) {\n        (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        leapYear = _isLeapYear(year);\n    }\n\n    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\n    }\n\n    function isWeekDay(uint256 timestamp) internal pure returns (bool weekDay) {\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\n    }\n\n    function isWeekEnd(uint256 timestamp) internal pure returns (bool weekEnd) {\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\n    }\n\n    function getDaysInMonth(uint256 timestamp) internal pure returns (uint256 daysInMonth) {\n        (uint256 year, uint256 month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        daysInMonth = _getDaysInMonth(year, month);\n    }\n\n    function _getDaysInMonth(uint256 year, uint256 month) internal pure returns (uint256 daysInMonth) {\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            daysInMonth = 31;\n        } else if (month != 2) {\n            daysInMonth = 30;\n        } else {\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\n        }\n    }\n\n    // 1 = Monday, 7 = Sunday\n    function getDayOfWeek(uint256 timestamp) internal pure returns (uint256 dayOfWeek) {\n        uint256 _days = timestamp / SECONDS_PER_DAY;\n        dayOfWeek = ((_days + 3) % 7) + 1;\n    }\n\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\n    }\n\n    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\n    }\n\n    function getDay(uint256 timestamp) internal pure returns (uint256 day) {\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n    }\n\n    function getHour(uint256 timestamp) internal pure returns (uint256 hour) {\n        uint256 secs = timestamp % SECONDS_PER_DAY;\n        hour = secs / SECONDS_PER_HOUR;\n    }\n\n    function getMinute(uint256 timestamp) internal pure returns (uint256 minute) {\n        uint256 secs = timestamp % SECONDS_PER_HOUR;\n        minute = secs / SECONDS_PER_MINUTE;\n    }\n\n    function getSecond(uint256 timestamp) internal pure returns (uint256 second) {\n        second = timestamp % SECONDS_PER_MINUTE;\n    }\n\n    function addYears(uint256 timestamp, uint256 _years) internal pure returns (uint256 newTimestamp) {\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        year += _years;\n        uint256 daysInMonth = _getDaysInMonth(year, month);\n        if (day > daysInMonth) {\n            day = daysInMonth;\n        }\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + (timestamp % SECONDS_PER_DAY);\n        require(newTimestamp >= timestamp);\n    }\n\n    function addMonths(uint256 timestamp, uint256 _months) internal pure returns (uint256 newTimestamp) {\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        month += _months;\n        year += (month - 1) / 12;\n        month = ((month - 1) % 12) + 1;\n        uint256 daysInMonth = _getDaysInMonth(year, month);\n        if (day > daysInMonth) {\n            day = daysInMonth;\n        }\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + (timestamp % SECONDS_PER_DAY);\n        require(newTimestamp >= timestamp);\n    }\n\n    function addDays(uint256 timestamp, uint256 _days) internal pure returns (uint256 newTimestamp) {\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\n        require(newTimestamp >= timestamp);\n    }\n\n    function addHours(uint256 timestamp, uint256 _hours) internal pure returns (uint256 newTimestamp) {\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\n        require(newTimestamp >= timestamp);\n    }\n\n    function addMinutes(uint256 timestamp, uint256 _minutes) internal pure returns (uint256 newTimestamp) {\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\n        require(newTimestamp >= timestamp);\n    }\n\n    function addSeconds(uint256 timestamp, uint256 _seconds) internal pure returns (uint256 newTimestamp) {\n        newTimestamp = timestamp + _seconds;\n        require(newTimestamp >= timestamp);\n    }\n\n    function subYears(uint256 timestamp, uint256 _years) internal pure returns (uint256 newTimestamp) {\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        year -= _years;\n        uint256 daysInMonth = _getDaysInMonth(year, month);\n        if (day > daysInMonth) {\n            day = daysInMonth;\n        }\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + (timestamp % SECONDS_PER_DAY);\n        require(newTimestamp <= timestamp);\n    }\n\n    function subMonths(uint256 timestamp, uint256 _months) internal pure returns (uint256 newTimestamp) {\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        uint256 yearMonth = year * 12 + (month - 1) - _months;\n        year = yearMonth / 12;\n        month = (yearMonth % 12) + 1;\n        uint256 daysInMonth = _getDaysInMonth(year, month);\n        if (day > daysInMonth) {\n            day = daysInMonth;\n        }\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + (timestamp % SECONDS_PER_DAY);\n        require(newTimestamp <= timestamp);\n    }\n\n    function subDays(uint256 timestamp, uint256 _days) internal pure returns (uint256 newTimestamp) {\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\n        require(newTimestamp <= timestamp);\n    }\n\n    function subHours(uint256 timestamp, uint256 _hours) internal pure returns (uint256 newTimestamp) {\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\n        require(newTimestamp <= timestamp);\n    }\n\n    function subMinutes(uint256 timestamp, uint256 _minutes) internal pure returns (uint256 newTimestamp) {\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\n        require(newTimestamp <= timestamp);\n    }\n\n    function subSeconds(uint256 timestamp, uint256 _seconds) internal pure returns (uint256 newTimestamp) {\n        newTimestamp = timestamp - _seconds;\n        require(newTimestamp <= timestamp);\n    }\n\n    function diffYears(uint256 fromTimestamp, uint256 toTimestamp) internal pure returns (uint256 _years) {\n        require(fromTimestamp <= toTimestamp);\n        (uint256 fromYear, , ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\n        (uint256 toYear, , ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\n        _years = toYear - fromYear;\n    }\n\n    function diffMonths(uint256 fromTimestamp, uint256 toTimestamp) internal pure returns (uint256 _months) {\n        require(fromTimestamp <= toTimestamp);\n        (uint256 fromYear, uint256 fromMonth, ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\n        (uint256 toYear, uint256 toMonth, ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\n    }\n\n    function diffDays(uint256 fromTimestamp, uint256 toTimestamp) internal pure returns (uint256 _days) {\n        require(fromTimestamp <= toTimestamp);\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\n    }\n\n    function diffHours(uint256 fromTimestamp, uint256 toTimestamp) internal pure returns (uint256 _hours) {\n        require(fromTimestamp <= toTimestamp);\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\n    }\n\n    function diffMinutes(uint256 fromTimestamp, uint256 toTimestamp) internal pure returns (uint256 _minutes) {\n        require(fromTimestamp <= toTimestamp);\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\n    }\n\n    function diffSeconds(uint256 fromTimestamp, uint256 toTimestamp) internal pure returns (uint256 _seconds) {\n        require(fromTimestamp <= toTimestamp);\n        _seconds = toTimestamp - fromTimestamp;\n    }\n}\n"}, "contracts/UnipeepsSVG.sol": {"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.30;\n\nimport {Strings} from '@openzeppelin/contracts/utils/Strings.sol';\nimport {IUnipeeps} from './interfaces/IUnipeeps.sol';\nimport {IUnipeepsSVG} from './interfaces/IUnipeepsSVG.sol';\nimport {BokkyPooBahsDateTimeLibrary} from './BokkyPooBahsDateTimeLibrary.sol';\n\ncontract UnipeepsSVG {\n    using Strings for *;\n\n    struct Attributes {\n        string color1;\n        string color2;\n        string color3;\n        string coord1;\n        string coord2;\n        string coord3;\n        string coord4;\n    }\n\n    mapping(uint8 => uint24[3][2]) colorMappings;\n\n    constructor(uint24[3][2][7] memory _colorMappings) {\n        for (uint8 i = 0; i < 7; i++) {\n            colorMappings[i] = _colorMappings[i];\n        }\n    }\n\n    function generateSVG(\n        uint256 number,\n        IUnipeeps.Peep memory peep,\n        uint256 totalPeeps\n    ) external view returns (bytes memory SVG) {\n        uint256 numberHash1 = uint256(keccak256(abi.encode(peep.first)));\n        uint256 numberHash2 = uint256(keccak256(abi.encode(peep.last)));\n        string memory color1 = toColorHex(colorMappings[uint8(peep.group)][1][numberHash1 % uint8(3)]);\n        string memory color2 = toColorHex(colorMappings[uint8(peep.group)][0][numberHash2 % uint8(3)]);\n        string memory color3 = uint256(uint256(keccak256(abi.encodePacked(peep.first, peep.last))) % 360).toString();\n\n        string memory coord1;\n        string memory coord2;\n        string memory coord3;\n        string memory coord4;\n        unchecked {\n            coord1 = intToString(int256((numberHash1**numberHash2) % 190) - 50);\n            coord2 = intToString(int256((numberHash2 + numberHash2) % 230) - 170);\n            coord3 = intToString(int256((numberHash2 * numberHash2) % 190) - 10);\n            coord4 = intToString(int256((numberHash1 % numberHash2) % 230));\n        }\n\n        return svgString(number, peep, Attributes(color1, color2, color3, coord1, coord2, coord3, coord4), totalPeeps);\n    }\n\n    function epochDayToString(uint256 epochDate) private pure returns (string memory) {\n        (uint256 year, uint256 month, uint256 day) = BokkyPooBahsDateTimeLibrary._daysToDate(epochDate);\n        return\n            string(\n                abi.encodePacked(\n                    year.toString(),\n                    '/',\n                    month < 10 ? '0' : '',\n                    month.toString(),\n                    '/',\n                    day < 10 ? '0' : '',\n                    day.toString()\n                )\n            );\n    }\n\n    function svgString(\n        uint256 number,\n        IUnipeeps.Peep memory peep,\n        Attributes memory attributes,\n        uint256 totalPeeps\n    ) internal pure returns (bytes memory SVG) {\n        string memory startDate = epochDayToString(peep.epochStartDate);\n        return\n            abi.encodePacked(\n                '<svg version=\"1.1\" width=\"375\" height=\"636\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 250 424\" font-family=\"\\'Inter\\', sans-serif\"><style>@import url(\\'https://fonts.googleapis.com/css2?family=Inter:wght@100;300;500\\');</style><defs><mask id=\"card\"><rect width=\"100%\" height=\"100%\" fill=\"white\" rx=\"4\"/></mask><mask id=\"firstName\"><text fill=\"white\" x=\"16\" y=\"330\" font-size=\"36\" font-weight=\"100\" text-anchor=\"start\">',\n                peep.first,\n                '</text></mask><mask id=\"lastName\"><text fill=\"white\" x=\"16\" y=\"368\" font-size=\"36\" font-weight=\"100\" text-anchor=\"start\">',\n                peep.last,\n                '</text></mask><mask id=\"role\"><text x=\"16\" y=\"400\" font-size=\"10\" font-weight=\"300\" text-anchor=\"start\" fill=\"white\">',\n                peep.role,\n                '</text></mask><mask id=\"joinDate\"><text x=\"234\" y=\"400\" font-size=\"10\" font-weight=\"300\" text-anchor=\"end\" fill=\"white\">',\n                startDate,\n                '</text></mask><mask id=\"title\"><text x=\"16\" y=\"32\" font-size=\"12\" font-family=\"sans-serif\" font-weight=\"500\" text-anchor=\"start\" fill=\"none\" stroke=\"white\" stroke-width=\"0.5\">UNISWAP LABS</text></mask><mask id=\"year\"><text x=\"234\" y=\"32\" font-size=\"12\" font-family=\"sans-serif\" font-weight=\"500\" text-anchor=\"end\" fill=\"none\" stroke=\"white\" stroke-width=\"0.5\">2022</text></mask><mask id=\"number\"><text x=\"16\" y=\"32\" dy=\"4%\" font-size=\"12\" font-family=\"sans-serif\" font-weight=\"500\" text-anchor=\"start\" fill=\"none\" stroke=\"white\" stroke-width=\"0.5\">',\n                number.toString(),\n                svgCenter(attributes, totalPeeps),\n                number.toString(),\n                '/',\n                totalPeeps.toString(),\n                '</text></g><g font-size=\"36\" font-weight=\"lighter\" text-anchor=\"start\" fill=\"rgba(0,0,0,0.25)\"><text mask=\"url(#firstName)\" x=\"16\" y=\"330\" filter=\"url(#sh)\">',\n                peep.first,\n                '</text><text mask=\"url(#lastName)\" x=\"16\" y=\"368\" filter=\"url(#sh)\">',\n                peep.last,\n                '</text></g><line x1=\"16\" y1=\"382\" x2=\"234\" y2=\"382\" stroke=\"rgba(0,0,0,0.25)\" stroke-width=\"0.5\" /><g font-size=\"10\" fill=\"rgba(0,0,0,0.25)\" font-weight=\"300\"><text mask=\"url(#role)\" x=\"16\" y=\"400\" text-anchor=\"start\" filter=\"url(#sh)\">',\n                peep.role,\n                '</text><text mask=\"url(#joinDate)\" x=\"234\" y=\"400\" text-anchor=\"end\" filter=\"url(#sh)\">',\n                startDate,\n                '</text></g></g></svg>'\n            );\n    }\n\n    function svgCenter(Attributes memory attributes, uint256 totalPeeps) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                '/',\n                totalPeeps.toString(),\n                '</text></mask><mask id=\"border1\"><rect width=\"234\" height=\"408\" x=\"8\" y=\"8\" stroke=\"white\" /></mask><mask id=\"border2\"><rect width=\"234\" height=\"408\" x=\"8\" y=\"8\" rx=\"24\" stroke=\"white\" /></mask><mask id=\"glimmer\"><path d=\"M125.578 168V167.75H125.328H125.017H124.767V168L124.767 196.769C124.767 205.052 118.052 211.767 109.769 211.767L81 211.767H80.75V212.017V212.328V212.578H81L123.24 212.578V256.5V256.75H123.49H123.802H124.052V256.5V227.731C124.052 219.448 130.766 212.733 139.049 212.733H167.818H168.068V212.483V212.172V211.922H167.818H125.578L125.578 168Z\" stroke=\"white\" stroke-opacity=\"0.5\" stroke-width=\"0.5\"/></mask><mask id=\"circle\"><circle cx=\"100\" cy=\"220\" r=\"40\" fill=\"none\" stroke=\"white\" stroke-width=\"0.5\" stroke-opacity=\"0.5\"/></mask><mask id=\"star\" maskUnits=\"objectBoundingBox\"><path d=\"M37.25 0.99814L36.75 1C36.75 8.15363 36.3084 13.7289 35.3544 17.7352C34.3969 21.7566 32.9413 24.1209 30.9801 24.9763C29.0267 25.8284 26.4522 25.233 23.1202 23.0162C22.1515 22.3717 21.1245 21.5939 20.0373 20.6824C17.8024 18.0218 14.7895 15.0198 11.0032 11.6503L10.6503 12.0032C14.0198 15.7895 17.0218 18.8024 19.6824 21.0373C20.5939 22.1245 21.3717 23.1515 22.0162 24.1202C24.233 27.4522 24.8284 30.0267 23.9763 31.9801C23.1209 33.9413 20.7566 35.3969 16.7352 36.3544C12.7289 37.3084 7.15363 37.75 0 37.75V38V38.25C7.15363 38.25 12.7289 38.6916 16.7352 39.6456C20.7566 40.6031 23.1209 42.0587 23.9763 44.0199C24.8285 45.9733 24.233 48.5478 22.0162 51.8798C21.3717 52.8485 20.5939 53.8755 19.6824 54.9627C17.0218 57.1975 14.0198 60.2105 10.6503 63.9967L11.0032 64.3497C14.7895 60.9802 17.8025 57.9782 20.0373 55.3176C21.1245 54.4061 22.1515 53.6283 23.1202 52.9838C26.4522 50.767 29.0267 50.1715 30.9801 51.0237C32.9413 51.8791 34.3969 54.2434 35.3544 58.2648C36.3084 62.2711 36.75 67.8464 36.75 75L37.25 75.0019C37.3033 67.8367 37.7617 62.2626 38.7135 58.2626C39.6692 54.2467 41.1038 51.8959 43.041 51.0507C44.9704 50.209 47.5193 50.8108 50.8433 53.0264C51.8835 53.7196 52.9926 54.5664 54.1737 55.5671C56.3859 58.1655 59.3283 61.0851 62.9967 64.3497L63.3486 63.9955C60.0579 60.3478 57.1275 57.4178 54.5281 55.2121C53.5253 54.0322 52.6773 52.9223 51.9838 51.8798C49.767 48.5478 49.1715 45.9733 50.0237 44.0199C50.8791 42.0587 53.2434 40.6031 57.2648 39.6456C61.2711 38.6916 66.8464 38.25 74 38.25L74.0019 37.75C66.8367 37.6967 61.2626 37.2383 57.2626 36.2865C53.2467 35.3308 50.8959 33.8962 50.0507 31.959C49.209 30.0296 49.8108 27.4807 52.0264 24.1567C52.7711 23.0394 53.693 21.8424 54.7924 20.5622C57.3257 18.3837 60.1689 15.5292 63.3486 12.0045L62.9955 11.6514C59.4708 14.8311 56.6163 17.6743 54.4378 20.2076C53.1576 21.307 51.9606 22.2289 50.8433 22.9736C47.5193 25.1892 44.9704 25.791 43.041 24.9493C41.1038 24.1041 39.6692 21.7532 38.7135 17.7374C37.7617 13.7374 37.3033 8.16332 37.25 0.99814Z\" stroke=\"white\" stroke-width=\"0.5\" stroke-opacity=\"0.5\" /></mask><filter id=\"sh\" x=\"0%\" y=\"0%\" width=\"100%\" height=\"100%\" filterUnits=\"userSpaceOnUse\" color-interpolation-filters=\"sRGB\"><feFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"/><feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"/><feColorMatrix in=\"SourceAlpha\" type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\" result=\"hardAlpha\"/><feOffset dy=\"1\"/><feGaussianBlur stdDeviation=\"0.5\"/><feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\"/><feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.54 0\"/><feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_sh_1_537\"/></filter><filter id=\"blur\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\" color-interpolation-filters=\"sRGB\"><feGaussianBlur stdDeviation=\"20\" result=\"out\"/><feGaussianBlur stdDeviation=\"20\" result=\"out\"/></filter><linearGradient id=\"backgroundGradient\" x1=\"124\" y1=\"245.012\" x2=\"124\" y2=\"424\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#',\n                attributes.color1,\n                '\"/><stop offset=\"1\" stop-color=\"#',\n                attributes.color2,\n                '\"/></linearGradient></defs><g overflow=\"hidden\" mask=\"url(#card)\"><rect width=\"100%\" height=\"100%\" fill=\"url(#backgroundGradient)\" rx=\"4\"/><g filter=\"url(#blur)\"><circle cx=\"120\" r=\"160\" fill=\"hsl(',\n                attributes.color3,\n                ',100%,90%)\" /></g><g><path mask=\"url(#glimmer)\" filter=\"url(#sh)\" d=\"M125.578 168V167.75H125.328H125.017H124.767V168L124.767 196.769C124.767 205.052 118.052 211.767 109.769 211.767L81 211.767H80.75V212.017V212.328V212.578H81L123.24 212.578V256.5V256.75H123.49H123.802H124.052V256.5V227.731C124.052 219.448 130.766 212.733 139.049 212.733H167.818H168.068V212.483V212.172V211.922H167.818H125.578L125.578 168Z\" stroke=\"black\" stroke-opacity=\"0.24\" stroke-width=\"0.5\" style=\"mix-blend-mode:multiply\"/></g><g transform=\"translate(',\n                attributes.coord1,\n                ' ',\n                attributes.coord2,\n                ')\"><circle mask=\"url(#circle)\" filter=\"url(#sh)\" fill=\"none\" cx=\"100\" cy=\"220\" r=\"40\" stroke=\"black\" stroke-opacity=\"0.24\" stroke-width=\"0.5\" style=\"mix-blend-mode:multiply\"/></g><g transform=\"translate(',\n                attributes.coord3,\n                ' ',\n                attributes.coord4,\n                ')\"><path mask=\"url(#star)\" filter=\"url(#sh)\" d=\"M37.25 0.99814L36.75 1C36.75 8.15363 36.3084 13.7289 35.3544 17.7352C34.3969 21.7566 32.9413 24.1209 30.9801 24.9763C29.0267 25.8284 26.4522 25.233 23.1202 23.0162C22.1515 22.3717 21.1245 21.5939 20.0373 20.6824C17.8024 18.0218 14.7895 15.0198 11.0032 11.6503L10.6503 12.0032C14.0198 15.7895 17.0218 18.8024 19.6824 21.0373C20.5939 22.1245 21.3717 23.1515 22.0162 24.1202C24.233 27.4522 24.8284 30.0267 23.9763 31.9801C23.1209 33.9413 20.7566 35.3969 16.7352 36.3544C12.7289 37.3084 7.15363 37.75 0 37.75V38V38.25C7.15363 38.25 12.7289 38.6916 16.7352 39.6456C20.7566 40.6031 23.1209 42.0587 23.9763 44.0199C24.8285 45.9733 24.233 48.5478 22.0162 51.8798C21.3717 52.8485 20.5939 53.8755 19.6824 54.9627C17.0218 57.1975 14.0198 60.2105 10.6503 63.9967L11.0032 64.3497C14.7895 60.9802 17.8025 57.9782 20.0373 55.3176C21.1245 54.4061 22.1515 53.6283 23.1202 52.9838C26.4522 50.767 29.0267 50.1715 30.9801 51.0237C32.9413 51.8791 34.3969 54.2434 35.3544 58.2648C36.3084 62.2711 36.75 67.8464 36.75 75L37.25 75.0019C37.3033 67.8367 37.7617 62.2626 38.7135 58.2626C39.6692 54.2467 41.1038 51.8959 43.041 51.0507C44.9704 50.209 47.5193 50.8108 50.8433 53.0264C51.8835 53.7196 52.9926 54.5664 54.1737 55.5671C56.3859 58.1655 59.3283 61.0851 62.9967 64.3497L63.3486 63.9955C60.0579 60.3478 57.1275 57.4178 54.5281 55.2121C53.5253 54.0322 52.6773 52.9223 51.9838 51.8798C49.767 48.5478 49.1715 45.9733 50.0237 44.0199C50.8791 42.0587 53.2434 40.6031 57.2648 39.6456C61.2711 38.6916 66.8464 38.25 74 38.25L74.0019 37.75C66.8367 37.6967 61.2626 37.2383 57.2626 36.2865C53.2467 35.3308 50.8959 33.8962 50.0507 31.959C49.209 30.0296 49.8108 27.4807 52.0264 24.1567C52.7711 23.0394 53.693 21.8424 54.7924 20.5622C57.3257 18.3837 60.1689 15.5292 63.3486 12.0045L62.9955 11.6514C59.4708 14.8311 56.6163 17.6743 54.4378 20.2076C53.1576 21.307 51.9606 22.2289 50.8433 22.9736C47.5193 25.1892 44.9704 25.791 43.041 24.9493C41.1038 24.1041 39.6692 21.7532 38.7135 17.7374C37.7617 13.7374 37.3033 8.16332 37.25 0.99814Z\" stroke=\"black\" stroke-opacity=\"0.24\" stroke-width=\"0.5\" style=\"mix-blend-mode:multiply\"/></g><g stroke=\"rgba(0,0,0,0.24)\" stroke-width=\"0.5\" fill=\"none\"><rect width=\"234\" height=\"408\" x=\"8\" y=\"8\" mask=\"url(#border1)\"/><rect width=\"234\" height=\"408\" x=\"8\" y=\"8\" rx=\"24\" mask=\"url(#border2)\"/></g><g fill=\"none\" stroke=\"rgba(0,0,0,0.24)\" stroke-width=\"0.5\" font-family=\"sans-serif\" font-weight=\"500\" font-size=\"12\"><text mask=\"url(#title)\" x=\"16\" y=\"32\" text-anchor=\"start\" filter=\"url(#sh)\">UNISWAP LABS</text><text mask=\"url(#year)\" x=\"234\" y=\"32\" text-anchor=\"end\" filter=\"url(#sh)\">2022</text><text mask=\"url(#number)\" x=\"16\" y=\"32\" dy=\"4%\" filter=\"url(#sh)\">'\n            );\n    }\n\n    function toColorHex(uint256 value) private pure returns (string memory) {\n        bytes16 ALPHABET = '0123456789abcdef';\n        bytes memory buffer = new bytes(6);\n\n        for (uint256 i = buffer.length; i > 0; i--) {\n            buffer[i - 1] = ALPHABET[value & 0xf];\n            value >>= 4;\n        }\n        return string(buffer);\n    }\n\n    function intToString(int256 value) private pure returns (string memory) {\n        if (value >= 0) {\n            return uint256(value).toString();\n        } else {\n            return string(abi.encodePacked('-', uint256(value * -1).toString()));\n        }\n    }\n}\n"}, "contracts/interfaces/IUnipeeps.sol": {"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.30;\n\nimport {IERC721} from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport {IUnipeepsSVG} from './IUnipeepsSVG.sol';\n\ninterface IUnipeeps is IERC721 {\n    /// @notice Emitted when a new SVG contract is added for the next future mints\n    /// @param unipeepsSVG The address of the new contract\n    /// @param totalSupply The total supply at the time of add. tokenIds after this will be minted with the new SVG.\n    event NewSVGContractAdded(IUnipeepsSVG unipeepsSVG, uint96 totalSupply);\n\n    /// @notice The queried token does not exist\n    error NonexistentPeep(uint256 invalidId);\n    /// @notice The number of peeps, employeeNumbers, and recipients must match\n    error NewPeepsParamLengthMismatch();\n    /// @notice The number of tokenIds, groups, and roles must match\n    error ModifyPeepsParamLengthMismatch();\n    /// @notice The employee number has already been minted.\n    error NewPeepOutOfOrder(uint256 employeeNumber, uint256 totalSupply);\n\n    enum Group {\n        Design,\n        Engineering,\n        Executive,\n        Legal,\n        Operations,\n        Product,\n        Strategy\n    }\n\n    struct Peep {\n        string first;\n        string last;\n        string role;\n        uint248 epochStartDate;\n        Group group;\n    }\n\n    /// @notice Mints a new NFT with the given metadata for the given recipient.\n    /// @param peeps A list of the metadata for each NFT to mint.\n    /// @param recipients A list of the recipient addresses that should receive the newly minted NFT. Indices should correspond\n    ///        to the _peeps array.\n    function newPeeps(Peep[] memory peeps, address[] memory recipients) external;\n\n    /// @notice Modifies the role and group of an existing peep.\n    /// @param tokenIds The tokenIds of the peeps to modify.\n    /// @param _peeps The updated details for each peep.\n    function modifyPeeps(\n      uint256[] calldata tokenIds,\n      Peep[] calldata _peeps\n    ) external;\n\n    /// @notice Adds new contract for svg art for the next future mints.\n    /// @param svgContract The address of the new UnipeepsSVG contract\n    function addNewSVGContract(IUnipeepsSVG svgContract) external;\n\n    /// @notice Get the SVG contract associated with a tokenId\n    /// @param tokenId The tokenId\n    function getSVGContract(uint256 tokenId) external view returns (IUnipeepsSVG);\n}\n"}, "contracts/interfaces/IUnipeepsSVG.sol": {"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.30;\n\nimport {IUnipeeps} from './IUnipeeps.sol';\n\ninterface IUnipeepsSVG {\n    function generateSVG(\n        uint256 number,\n        IUnipeeps.Peep memory peep,\n        uint256 totalPeeps\n    ) external view returns (bytes memory SVG);\n}\n"}}}
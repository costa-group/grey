{"language": "Solidity", "sources": {"@openzeppelin/contracts/utils/math/Math.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"}, "@openzeppelin/contracts/utils/math/SignedMath.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"}, "@openzeppelin/contracts/utils/Strings.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.30;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"}, "contracts/BasicMotif.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nenum ColorRenderType {\n    HUMAN,BIRD,SHIP\n}\n\n\nenum RenderDataType {\n\n    POSITIONS,POSISTIONSANDSCALE,POSITIONSANDTWOSCALES\n}\n\nenum FlowerType {\n    SUNFLOWER,ROSE,ICEFLOWER, MOONFLOWER\n}\n\n\nenum ObjectType {\n    USE,RECT,CIRCLE\n}\n\n\nenum BeachColor {\n    PINK, GREEN, BLACK, GOLD, WHITE, CREME, RED\n}\n\n\nenum MotifType {\n    SIGHT_SEEING, BEACH, SKYSCRAPER, LANDSCAPE\n}\n\nstruct FlowerParts {\n    string  back;\n    string  front;\n    string  blossom;\n    string  stick;\n}\n\nstruct MovingScene {\n    string placeholder ;\n    bool horizonUp ;\n    MovingSceneAsset[] assets ;\n\n}\n\nstruct MovingSceneAsset {\n\n    string assetName ;\n    uint minScale;\n    uint maxScale ;\n    uint minY ;\n    uint maxY ;\n    uint duration ;\n    uint probability ;\n    uint checkInterval ;\n    uint possibleOffset ;\n    DAYTIME dayTime ;\n\n}\n\n\n\n\nstruct Replacement {\n    ObjectType tag;\n    RenderDataType dataType;\n    int[] data;\n    string placeholder;\n    string ref;\n}\n\nenum DAYTIME {\n    NIGHT, DAY, NIGHT_AND_DAY\n}\n\nstruct AssetInScene {\n    string name;\n    uint minDuration;\n    uint maxDuration;\n    uint checkInterval;\n    uint possibleOffset;\n    uint probability;\n    DAYTIME dayTime;\n    } \n\n    struct SceneInMotif {\n        string placeHolder;\n        Scene[] sceneDetails;\n    }\n\nstruct Scene {\n\n    int[4] area;\n    uint[] assets;\n    uint scale;\n}\n\n\n\nstruct Motif {\n        string name;\n        int lat;\n        int lng;\n        int heading;\n        uint horizon;\n        string svg;\n        SceneInMotif[] scenes;\n        Replacement[] replacements;\n        MovingScene[] movingScenes;\n        MotifType motifType;\n    }\n\nstruct BeachTraits {\n    string attributes;\n    string beachColor;\n    string skinColor;\n    string shortsColor;\n    string shortsColorAttribute;\n    string beverageAttribute;\n    string towelColor;\n    string towelColorAttribute;\n    string shortsPattern;\n    string towelPattern;\n    string shortsSVG;\n    string towelSVG;\n    uint jellyTypeId;\n    string jellyColor;\n    string beverage;\n\n}\n\nstruct CityTraits {\n    string attributes;\n    address priceFeed;\n    string skylineSVG;\n    string displaySVG;\n    string beverageAttribute;\n    string tableSVG;\n    uint displayType;\n    uint skyLinetype;\n    bool isCoastel;\n    string tableColor;\n    uint catTypeId;\n    string catColor;\n    string beverage;\n}\n\n\nstruct LandscapeTraits {\n    string attributes;\n    uint climateZoneIndex;\n    string before;\n    bool hasCity;\n    string skinColor;\n    string shirtColor;\n    string shirtColorAttribute;\n    string beverageAttribute;\n    string shirtPattern;\n    string hat;\n    string pantsColor;\n    string furnitureColor;\n    string furnitureSVG;\n    bool hasRiver;\n    bool hasMountains;\n    bool hasOcean;\n    string artistSVG;\n    uint catTypeId;\n    string catColor;\n    string beverage;\n\n}\n\n\nstruct SVGData {\n\n        string sunSVG;\n        string skyColor;\n        string moonSVG;\n        string nightSVG;\n        string replacements;\n        string waterColor;\n        string cloudsSVG;\n        string skySceneSVG;\n        string flowerSVG;\n\n     }\n\n        struct SunMoon {\n        uint sunrise;\n        uint sunset;\n        int altitude;\n        int azimuth;\n        int moonAzimuth;\n        int moonAltitude;\n        int parallacticAngle;\n        int fraction;\n        int angle;\n     }\n\n\n    struct SceneElement {\n        uint y;\n        int x;\n        int xScale;\n        string svg;\n        string posSalt;\n        string decimalScaleX;\n        string decimalScaleY;\n    }\n\n\n\ninterface IMotifData {\n    \n    // function that returns a motif struct\n    function getMotifData(uint index) external view returns (bytes memory);\n\n}"}, "contracts/motifs/Assets.sol": {"content": "// SPDX-License-Identifier: MIT\n\n\npragma solidity ^0.8.30;\n\nlibrary Assets {\n\n    function getAssets() internal pure returns (string memory) {\n\n        return  '<defs><g id=\"Lemon\"><path fill=\"#3e75cf\" d=\"m9-148 12-77 9 1-12 77z\"/><path fill=\"#ccc\" d=\"M-41.1-168h83.3v12.44h-83.3zm0 155h83.3V-.56h-83.3z\"/><path fill=\"#f39200\" d=\"M-47-161.4h94.2V-6.75H-47z\"/><circle cx=\"1\" cy=\"-83\" r=\"38\" fill=\"gold\"/><path fill=\"#9bb224\" d=\"M20.9-126.2c-6.1 6.1-17.7 4.4-17.7 4.4s-1.7-11.6 4.4-17.7 17.7-4.4 17.7-4.4 1.7 11.6-4.4 17.7\"/></g><g id=\"Ice_Tea\"><path fill=\"#F5F5F5\" d=\"m-49.5-192 9 192h81L51-192z\"/><path fill=\"#9BB224\" d=\"M-13.5-199.5c12 12 12 33 12 33s-19.5 0-33-12-12-33-12-33 21 0 33 12\"/><path fill=\"#FFD400\" d=\"m-37.5-124.5 4.5 90h66l4.5-90z\"/><path fill=\"#F7A900\" d=\"M-37.5-124.5h75l1.5-39h-78zm19.5 48C-30-64.5-30-45-18-33s31.5 12 43.5 0z\"/><path fill=\"#F7A900\" d=\"M-31.5-9h63L33-34.5h-66z\"/><path fill=\"#FFE14C\" d=\"M-13.5-72c-9 9-9 25.5 0 34.5s25.5 9 34.5 0z\"/><circle cx=\"-10.5\" cy=\"-124.5\" r=\"4.5\" fill=\"#F5F5F5\"/><circle cx=\"-4.5\" cy=\"-73.5\" r=\"3\" fill=\"#F5F5F5\"/><circle cx=\"7.5\" cy=\"-135\" r=\"3\" fill=\"#F5F5F5\"/><circle cx=\"3\" cy=\"-96\" r=\"4.5\" fill=\"#F5F5F5\"/><path fill=\"#BE1622\" d=\"m31.5-220.5 9 1.5L12-18l-9-1.5z\"/><path fill=\"#AA7035\" d=\"M-39-169.5v6h78v-6z\"/></g><g id=\"Tea\"><path fill=\"#fff\" d=\"M30-9h-66l12-37v-25l-12-37h66L19-71v25z\" opacity=\".8\"/><ellipse cx=\"-47\" cy=\"-16\" fill=\"#d6d6d6\" rx=\"11\" ry=\"17\" transform=\"rotate(-86 -47 -16)\"/><path fill=\"#d6d6d6\" d=\"m-35-18 86 6-1 4-86-6z\"/><path fill=\"#fff\" d=\"M40 0h-79l-36-10H76z\" opacity=\".8\"/><path fill=\"#aa7035\" d=\"M-17-72v27l-9 29h47l-9-29v-27z\"/><path fill=\"#bb8d5d\" d=\"m12-72 3-12h-36l4 12z\"/><path fill=\"#bb8d5d\" d=\"M2-76h4v50H2z\"/></g><g id=\"Coffee\"><path fill=\"#f5f5f5\" d=\"M52-101v-34H-53V0H52v-30h25v-71zm14 43v17H52v-48h14z\"/><path fill=\"#aa7035\" d=\"M-38-124h75v25h-75z\"/><use href=\"#peng\" transform=\"matrix(1.6 0 0 1.6 -14 -21)\"/></g><g id=\"Vine\"><path fill=\"#ccc\" d=\"M-33-139h66v10h-66z\"/><ellipse cy=\"-10\" fill=\"#fff\" opacity=\".8\" rx=\"38\" ry=\"10\"/><path fill=\"#fff\" d=\"M-5-11v-111H5v111z\" opacity=\".8\"/><path fill=\"#fff\" d=\"M36-200h-72a52 52 0 1 0 88 37 52 52 0 0 0-16-37\" opacity=\".8\"/><path fill=\"#be1622\" d=\"M44-162a43.8 43.8 0 1 1-87.5 0z\"/></g><g id=\"Water\"><path fill=\"#fff\" d=\"M50-8H-72l32-156-16-64h90l-16 64z\" opacity=\".8\"/><path fill=\"#80d5ff\" d=\"M13-182h-48l4 18-30 147H39L8-164z\" opacity=\".8\"/><path fill=\"#fff\" d=\"M77-102H9L17 0h52z\" opacity=\".8\"/><path fill=\"#80d5ff\" d=\"m19-69 5 61h38l6-61z\"/></g><g id=\"narwhal\"><path fill=\"#FFF\" d=\"m20-12 19-9-18 10z\"/><circle cx=\"16\" cy=\"-9\" r=\"6.2\" fill=\"#EACCF9\"/><path fill=\"#EACCF9\" d=\"M-8-1h23l4-3-7-10z\"/><path fill=\"#eaccf9\" d=\"m-13-1-6-5h2l4-6-13 3-5-3 2 9 4-1 4 3\"/><circle cx=\"16\" cy=\"-9\" r=\"1.1\" fill=\"#9400E3\"/><path fill=\"#FBD185\" d=\"M-26-1h48v2h-48z\"/></g><g id=\"dolphin1\"><path fill=\"#FFF\" d=\"M21-3h4l3 3z\"/><path fill=\"#9400E3\" d=\"M11.6-11.4v-4l-4 4zM20-7h4l-4 4zM7-7v-4L3-7zm6 0v4L9-7z\"/><path fill=\"#9400E3\" d=\"M10-7v3L7-7zM4-9H0v1h4z\"/><path fill=\"#9400E3\" d=\"M6-12c-2 .5-3 2-3 4v1h17l-4-4-4-2z\"/></g><g id=\"dolphin0\"><path fill=\"#9400E3\" d=\"m11.9-2.1 3.4-3.4H8.5zm-6.8 0 3.4-3.4H1.7z\"/><path fill=\"#9400E3\" d=\"m4.1-6.253-3.4-3.4-.85.8 3.4 3.4z\"/><path fill=\"#9400E3\" d=\"M3.3-7.1 1.7-5.5l3.4 3.4.8.8h8.5l-.9-2.4-6.3-3.9c-1.3-.7-2.9-.5-3.9.5\"/><path fill=\"#FFF\" d=\"M4.7-1.9 19.1-.7H4.7z\"/></g><g id=\"jeep\"><circle cx=\"46\" cy=\"-5\" r=\"4\" fill=\"#E6332A\"/><circle cx=\"11\" cy=\"-5\" r=\"4\" fill=\"#E6332A\"/><path fill=\"#9400E3\" d=\"m0-13 56 6-3-18-28-6-3 13-20-3z\"/><path fill=\"#9BB224\" d=\"m39-26-15-3-2 8 15 3z\"/><path fill=\"#FFF\" d=\"M39 0h97l-5-7 10-29-54 24-10-5-7 11-6-3zM19 0H9l10-5-2 2z\" opacity=\".5\"/></g><g id=\"siperson\" fill=\"#cc993d\"><path d=\"M-21 0h41l12-193h-65z\"/><circle cy=\"-211\" r=\"21\"/></g><g id=\"s-plorer\" transform=\"scale(.5)\"><circle cy=\"-92.25\" r=\"20.25\" fill=\"#e6332a\"/><path fill=\"#e6332a\" d=\"M22.5-20.25h-42.75V-90H22.5z\"/><path fill=\"#e6332a\" d=\"M22.5 0v-22.5H0zm-42.75 0v-22.5H0zM22.5-87.75v20.25h20.25zm-42.75 0v20.25H-40.5z\"/><path fill=\"gold\" d=\"M11.25-81H-9v-20.25h20.25z\"/><path fill=\"#9400e3\" d=\"M2.25-81h-18v-13.5h18z\"/></g><g id=\"orca\"><path fill=\"#9400E3\" d=\"m7-18 13-2 2 3L9-1h-30z\"/><path fill=\"#9400E3\" d=\"m-36-15 22 14h-13z\"/><path fill=\"#FDE0AD\" d=\"m19-13 4-1-3 8-8 6-4-1zM8-12 4-9l1 2 4-2z\"/><circle cx=\"9\" cy=\"-10\" r=\"2\" fill=\"#FDE0AD\"/><path fill=\"#FBD185\" d=\"M-36-2h62v2h-62z\"/></g><g id=\"yacht\"><path d=\"M6-4h27L6-42z\"/><path fill=\"#AA7035\" d=\"M4 0h20l4-2H0z\"/><path fill=\"#FBD185\" d=\"m15 0 1-1 23 1z\"/></g><g id=\"bird-f\"><path fill=\"#F28D00\" d=\"m36 3.2 2.6-3.6L48 4l-2.4 3.6z\"/><path d=\"M63.8-10.4 30.6-3.2.2-10.4l27 20.8z\"/><path fill=\"#F28D00\" d=\"m20.303 5.328-7.55-1.96.705-2.71 7.55 1.96z\"/></g><g id=\"d_mouse\"><path fill=\"#f9b233\" d=\"m2-5 2 2 1-1-2-2v-1l4 1-3-4-1 1h-5v7h-2l-3-4-3 4 1 1 2-3 3 3h8v-1H2v-2H1v-1z\"/><circle cx=\"4.7\" cy=\"-8\" r=\".3\" fill=\"#fff\"/></g><g id=\"snake\"><path fill=\"#9bb224\" d=\"M-11-7v1h7v3l2 1 6-4 8 4-8-2-6 4-6-1 1-3h-6v-3zm-2 0v-5l2 5z\"/><path fill=\"#9bb224\" d=\"M8 0v-4l4 2z\"/><circle cx=\"9\" cy=\"-2\" r=\".6\" fill=\"#fff\"/></g><g id=\"ape\"><path fill=\"#aa7035\" d=\"M-5-15.377h3v15h-3z\"/><path fill=\"#f5c05c\" d=\"M-7-3.377h3.4v3.3H-7z\"/><path fill=\"#aa7035\" d=\"M3-15.377h3v15H3z\"/><path fill=\"#f5c05c\" d=\"M1-3.377h3.4v3.38H1z\"/><path fill=\"#aa7035\" d=\"m-9.833-20.583 9.44-5.649 5.135 8.581-9.44 5.649z\"/><path fill=\"#aa7035\" d=\"m3.47-11.717-9.46-5.61 5.1-8.6 9.46 5.61zM-15-27.877h9.6v8.76H-15z\"/><path fill=\"#fac15c\" d=\"M-12.5-25.377h4.8v4.34h-4.8z\"/><path fill=\"#aa7035\" d=\"M8-34.377h3v15H8z\"/><path fill=\"#aa7035\" d=\"m16.315-36.5.052 3-8.109.141-.052-3z\"/><path fill=\"#aa7035\" d=\"M14-36.377h3v8.11h-3z\"/></g><g id=\"llama\"><path fill=\"#C39B72\" d=\"m21-37 9 3-7-12zM1-26 0-2l-10-16zm18 0L18-2 7-18z\"/><path fill=\"#AA7035\" d=\"m-8 0-6-34 30-8 10 4-2 38-10-17-15 7z\"/><path fill=\"#C39B72\" d=\"m-16-50 8-3 9 16-10 14-8-5z\"/><path fill=\"#AA7035\" d=\"m-10-55-9 5 9 3z\"/></g><g id=\"fox\" fill=\"#e6332a\"><path d=\"M-24-18H9v10.5h-33zm0 10.5h-10.5L-24-18zM24 0h-6L9-18 24-6zM9 0v-7.5H3zm-24 0v-7.5h-6z\"/><path d=\"M-28.5-13.5-24-18l-4.5-4.5z\"/></g><g id=\"gull\"><path fill=\"#F28D00\" d=\"M2-14h6V0H2z\"/><path fill=\"#FFF\" d=\"M14.5-43.5H7L2.7-25.1-22 3.5l37.4-17.1z\"/><path fill=\"#F28D00\" d=\"M12-40.5h9.5v3.5H12z\"/></g><g id=\"ball\"><circle cx=\"63\" cy=\"63\" r=\"63\" fill=\"#65bd58\"/><ellipse cx=\"63\" cy=\"63\" rx=\"41\" ry=\"63\"/><ellipse cx=\"63\" cy=\"63\" fill=\"#65bd58\" rx=\"11\" ry=\"63\"/><path stroke=\"#aa6d29\" stroke-width=\"3\" d=\"m23 100 39 124m42-123L62 224m21-123L62 224M43 100l19 125\"/><path fill=\"#aa6d29\" d=\"M10 99h105v3H10zm0-77h106v3H9.5L9 22z\"/><path fill=\"#aa6d29\" d=\"M61 101h3v109h-3z\"/><path fill=\"#9bb224\" d=\"M50 205h25v21H50z\"/></g><g id=\"w-clean\" fill=\"#cc993d\"><path d=\"M0-57h273v16H0z\"/><path d=\"M51-152h59v98H51z\"/><path d=\"M34-74h59V0H34zm147-179h32v40h-32zM64-188h32v40H64z\"/><path d=\"M172-216h60v164h-60zm76-744h6v908h-6zm-232 0h6v908h-6z\"/><path d=\"m129-293 9-3 61 198-9 3zM32-167l17-5 20 65-17 5z\"/><path d=\"M105-300h56v13h-56zM23-176h38v11H23z\"/></g><g id=\"cat\"><path d=\"M-3.8-16.1h9.1v12.5h-9.052z\"/><circle cx=\".848\" cy=\"-16.1\" r=\"4.5\"/><circle cx=\"4.248\" cy=\"-22.6\" r=\"4.5\"/><path d=\"M4.2-23.2H0v-4.3zm0 0h4.3v-4.3z\"/><g id=\"cat-mask\"><ellipse cx=\"2.248\" cy=\"-23.3\" fill=\"gold\" rx=\"1.8\" ry=\"1.2\"/><ellipse cx=\"2.248\" cy=\"-23.3\" fill=\"#B44CEB\" rx=\".1\" ry=\"1.2\"/><ellipse cx=\"6.248\" cy=\"-23.3\" fill=\"gold\" rx=\"1.8\" ry=\"1.2\"/><ellipse cx=\"6.248\" cy=\"-23.3\" fill=\"#B44CEB\" rx=\".1\" ry=\"1.2\"/></g><path d=\"M-8.6-5.3H6.7v1.8H-8.652zm0 3.5H6.7V0H-8.6z\"/><path d=\"M-8.7 0v-5.3h1.8V0z\"/><path fill=\"#B44CEB\" d=\"m5-22.2-.8.8-.8-.8z\"/></g><g id=\"bush1\"><path id=\"l1\" fill=\"#9BB224\" d=\"M-39 0c5 5 12 7 19 5L0 0l-21-5c-6-2-13 0-18 5\"/><use href=\"#l1\" transform=\"rotate(45)\"/><use href=\"#l1\" transform=\"rotate(90)\"/><use href=\"#l1\" transform=\"rotate(135)\"/><use href=\"#l1\" transform=\"rotate(180)\"/></g><g id=\"bush2\"><path id=\"l2\" fill=\"#9BB224\" d=\"M17-4 0-84-17-4z\"/><use href=\"#l2\" transform=\"rotate(36)\"/><use href=\"#l2\" transform=\"rotate(72)\"/><use href=\"#l2\" transform=\"rotate(-36)\"/><use href=\"#l2\" transform=\"rotate(-72)\"/></g><g id=\"elep\"><path fill=\"#c980f1\" d=\"M-22-69h-32l9 41 24-23v-18zm87 20h-3v-36h3zM51-81v-3h11v3z\"/><path fill=\"#fff\" d=\"m-62-47-30-3 30-3z\"/><path fill=\"#9400e3\" d=\"M59-28h-99l7-68 43-6 50 6v68zm-99 0h12V0h-12zm18 0h12V0h-12zm69 0h12V0H47zm-16 0h12V0H31z\"/><path fill=\"#9400e3\" d=\"M-8-42h-54v-38l54-16zm-62-15h7v40h-7zm-8 17h4v23h-4z\"/><path fill=\"#c980f1\" d=\"M-78-40h4v4h-4z\"/><path fill=\"#9400e3\" d=\"M-64-23v7h-14v-7zm20-34v10h-26v-10z\"/><path fill=\"#fff\" d=\"m-62-42-30-3 30-3z\"/><path fill=\"#c980f1\" d=\"M-34-69h32l-9 41-24-23v-18z\"/></g><g id=\"deer\" fill=\"#e6332a\"><path d=\"m-18-17.8 36.5-6.5v-11.3H-18z\"/><path d=\"M-6.2-31.2H-18v-19.2h8.3z\"/><path d=\"M-18-40.5v-12.6h15.3z\"/><path d=\"m-16.3-48.8-7.2-10.4 4.3-10.2-1.9 9.7 10.8-1.1-9.4 3.1 5.2 6.3zm2.6-1.3 4.4-9.1L-5-69.4l-2 9.7 10.9-1.1-11.1 3.6-3.7 6.3zM-18 1v-27.3h9.7z\"/><path d=\"M-9.7 1v-27.3h9.6zm28.2 0v-27.3H8.9z\"/><path d=\"M10.3 1v-27.3H.6z\"/></g><g id=\"crane\"><path fill=\"#9400e3\" d=\"M4-16h1V0H4zm-2 0h1V0H2z\"/><path fill=\"#fff\" d=\"m11-18-8-5H-9v3l16 8\"/><path fill=\"#9400e3\" d=\"m7-12 4 7v-13zM-9-36h2v16h-2z\"/><path fill=\"#fff\" d=\"m-6-35-10 3 11-8z\"/></g><g id=\"giraf\" fill=\"#f27900\"><path d=\"M13-168h2v4h2v-4h2v6h6v5l-5-3 32 78 37 38H45V0l-9-44h-9L18 0v-151l-18-6v-4l13-2zM76-44 62 0v-44zm13 0V0L76-44z\"/><path fill=\"#aa7035\" d=\"m22-154 27 57 3 15z\"/></g><g id=\"airplane\" fill=\"#FBF8F5\"><path d=\"M20 2H0l2-2h15l3-2z\"/><path d=\"M15 7h-2L5-4h2z\"/><path d=\"M20 1h171v1H20z\" opacity=\".3\"/></g><g id=\"leafs\"><path id=\"ndpl\" fill=\"#9BB224\" d=\"M-71-129c0-18 9-34 24-43l47-28-28 47c-9 15-26 24-43 24\"/><use href=\"#ndpl\" transform=\"rotate(45 0 -200)\"/><use href=\"#ndpl\" transform=\"rotate(90 0 -200)\"/><use href=\"#ndpl\" transform=\"rotate(180 0 -200)\"/><use href=\"#ndpl\" transform=\"rotate(225 0 -200)\"/><use href=\"#ndpl\" transform=\"rotate(270 0 -200)\"/></g><g id=\"palm1\"><use href=\"#fat\"/><use href=\"#leafs\"/></g><g id=\"palm2\"><use href=\"#small\"/><use href=\"#leafs\"/></g><g id=\"cruise\"><path fill=\"#FBD185\" d=\"M169-58h-69l3-3h70zm-44 4-9-1-1 6 9 1zm18 0-9-1-1 6 9 1zm-34 0-9-1-1 6 9 1z\"/><path fill=\"#BE1622\" d=\"m125-56-9-1v2l9 1z\"/><path fill=\"#A933E9\" d=\"m124-48-9-1-2 13 9 1z\"/><path fill=\"#BE1622\" d=\"m125-52-9-1v2l9 1zm18-4-9-1v2l9 1z\"/><path fill=\"#A933E9\" d=\"m142-48-9-1-2 13 9 1z\"/><path fill=\"#BE1622\" d=\"m143-52-9-1v2l9 1zm-34-4-9-1v2l9 1z\"/><path fill=\"#A933E9\" d=\"m108-48-9-1-1 13 9 1z\"/><path fill=\"#BE1622\" d=\"m109-52-9-1v2l9 1z\"/><path fill=\"#FBD185\" d=\"M149-38H18v20h132z\"/><path d=\"M172-25H0v4h172zM0-21h172l-9 21H9z\"/><path fill=\"#FBD185\" d=\"M52 0 1-8l5 8zm72 0 4-1 63 1z\"/><path fill=\"#030304\" d=\"M146-35H21v2h125zm0 4H21v2h125z\"/><path fill=\"#FBD185\" d=\"M47-44H28v8h19z\"/></g><g id=\"fisher\" transform=\"translate(0 -1)\"><path fill=\"#9400E3\" d=\"M24-24h-4v2h4z\"/><path fill=\"#C980F1\" d=\"M26-25h-8v1h8z\"/><path fill=\"#9400E3\" d=\"M26-20h-8v3h8z\"/><path fill=\"#C980F1\" d=\"M30-22H14v2h16z\"/><path fill=\"#FBD185\" d=\"m86 1 2-.13-33-38V-1h1v-33z\"/><path d=\"M44-2h20v-14H44zm18-2H46v-11h17z\"/><path fill=\"#C980F1\" d=\"m25-6 16-29L56-6l2-.8-17-31-16 31z\"/><path fill=\"#C980F1\" d=\"M34-18H12v10h22zm15-5H33v2h16z\"/><path fill=\"#C980F1\" d=\"m41-22 15-14-1-1-15 14z\"/><path d=\"M21-11v5h52v7H9L0-11z\"/><path d=\"M73-8H21v2h52z\"/><path fill=\"#FBD185\" d=\"M30.16 1.04 3.25-2.99l2.6 3.9zm31.2 0 2.21-2.86L96.85.91z\"/><use href=\"#flock\" transform=\"matrix(-.3 0 0 -.3 90 -30)\"/></g><g id=\"bus\"><path fill=\"#9400e3\" d=\"M-51-90H94v82H-51z\"/><path fill=\"#b34aeb\" d=\"M-92-90h42v82h-42z\"/><path fill=\"#e94e1b\" d=\"M-51-72H80v10H-51z\"/><path fill=\"#f9b233\" d=\"M-92-72h42v10h-42z\"/><circle cx=\"-30\" cy=\"-8\" r=\"8\" fill=\"#e94e1b\"/><circle cx=\"48\" cy=\"-8\" r=\"8\" fill=\"#e94e1b\"/><circle cx=\"72\" cy=\"-8\" r=\"8\" fill=\"#e94e1b\"/></g><g id=\"sheep\" fill=\"#fbf8f5\"><path d=\"m17.9-9.3-7 2.2-18.2-.7-8.2-4.3 7.7-14.6 23.6 2.2z\"/><path d=\"M-9.7-9.3h3v8.67h-3zm19.1 0h3v8.67h-3z\"/><path d=\"m-7.8-26.7-15.1 18v8.1h3.8l11.3-9z\"/></g><g id=\"bird\"><path d=\"M-10 8 6-12V0H0z\"/><path fill=\"gold\" d=\"m6-12 6 4H6z\"/></g><g id=\"person\"><path stroke-width=\"0\" d=\"M-7-40.2H8V0H-7z\"/><path stroke-width=\"10\" d=\"M-2-50v10\"/></g><g id=\"camel\" fill=\"#f27900\"><path d=\"M-26 0v-66l-14-5v-3l14-3 14 26L8-77l33 44V0L30-31l-1 1L19 0v-28L8-25l-12-3V0l-10-30-1-1Z\"/><path fill=\"#be1622\" d=\"M-37-76h3v42h-3z\"/><path fill=\"#9bb224\" d=\"M-9-55 7.5-77.3l16.6 22z\"/></g><g id=\"coyote\"><path fill=\"#aa6d29\" d=\"M10.35-23.6h-8.2L-12.35.6h15.7l-4.8-2.7 4.7-7.6L10.35.6zM-12.35.6l-11.2-2.8-4.8 2.8zm14.5-24.2 3.9-14.2.9 1.5.9-1.7 2.5 14.4z\"/><path fill=\"#aa6d29\" d=\"m3.85-27.8-8 5 7.5-1.1z\"/><path fill=\"#9400e3\" d=\"M4.65-28.6h.4v2.66h-.4z\"/><path fill=\"#c79f72\" d=\"m-2.35-17.4 4.5-6.2 2.8.9 5.4-.9 1.6 6.2-2.7-1.6-3.6 4.5-2.2-4-3.3 3.2-.5-2.8z\"/></g><g id=\"bat\"><path fill=\"#9300E2\" d=\"M5.3 15.4H-5.2L0 .7z\"/><path fill=\"#9300E2\" d=\"M5.3 22.4.4 19.6l-5.6 2.8L.4 7.7zM-2.4 0h4.9v1.4h-4.9z\"/><g id=\"bat-mask\" fill=\"#FFF\"><circle cx=\"-1.8\" cy=\"17.5\" r=\"1\"/><circle cx=\"1.8\" cy=\"17.5\" r=\"1\"/></g></g><g id=\"jelly\"><g id=\"jelly-mask\"><path d=\"M4-10h-7l-7 2h21z\"/><path d=\"m10-4 2-1-1-3h-21l-1 3 2 1z\" opacity=\".17\"/><path d=\"M3-2 1 2l3-4zm-4 2-2 4 3-4zm-2-2-2 4 3-4z\" opacity=\".09\"/><path d=\"m-4-6 1 4h1v-4zm7 0v4h1l1-4zm-4 0v6h1l2-6z\" opacity=\".13\"/></g></g><g id=\"camper\"><path fill=\"#aa7035\" d=\"M-18.655-54.9h16.8v9.94h-16.8z\"/><path fill=\"#aa6d29\" d=\"M-29.755-59h13.8v10.98h-13.8z\"/><path fill=\"#f28d00\" d=\"m-45.655-21-23.4-5.4 9.5-15.5h23.9z\"/><path fill=\"#ffef99\" d=\"m-53.055-52.5-6.5 10.6h9.8l-6.9 12.5-12.4 3 .3 8.1 2.7 12h100.4l34.2-8.4v-33.4l-3.7-4.4z\"/><path fill=\"#be1622\" d=\"M-60.055-23.4h129.4v1.91h-129.4zm-8.3 4.7h137.7v1.91h-137.7z\"/><circle cx=\"-49.655\" cy=\"-6.3\" r=\"6.4\" fill=\"#9400e3\"/><circle cx=\"15.245\" cy=\"-6.3\" r=\"6.4\" fill=\"#9400e3\"/><path id=\"camper-mask\" fill=\"#f28d00\" d=\"M-23.955-41.9h12.6v27.66h-12.6zm15.9 0h16.3v8.78h-16.3zm-28.7 0h8.2v12.49h-8.2zm70 0h31.2v12.49h-31.2z\"/><path fill=\"#fff\" d=\"M-68.355-26.4h5.4v7.38h-5.4zm0 9.9h3.1v4.2h-3.1z\"/></g><g id=\"tent\"><path fill=\"#fad199\" d=\"M53.069-61h-34.4L.069-13.4h53z\"/><path fill=\"#f28d00\" d=\"m54.069-61 18.5 47.6h-18.5zm-2 0-18.6 47.6h18.6z\"/><g fill=\"gold\"><path id=\"tent-mask\" d=\"m84.869-3.3 1.3-12.2 4.3 4.4 5-18 3.1 11 4.5-5.4 5.2 12.6 3.9-2.5 4 10.1z\"/></g><path fill=\"#e6332a\" d=\"m90.069-3.3 9.3-7.2 10.6 7.2z\"/><path fill=\"#aa7035\" d=\"M81.169-3.3h38.6v3.19h-38.6z\"/><path fill=\"#9400e3\" d=\"M52.069-61h2v47.6h-2z\"/></g><g id=\"peng\"><path fill=\"gold\" d=\"m15-32 4 4v-1z\"/><path fill=\"gold\" d=\"m9-25 6-7 4 3V0H5v-21z\"/><path fill=\"#9400e3\" d=\"M19-28V0l-8-8v-12z\"/><path fill=\"#e6332a\" d=\"M12-2H0v2h12z\"/><path fill=\"#9400e3\" d=\"M8-36h3l4 4-6 7-4 4v-15z\"/><path fill=\"#e6332a\" d=\"M8-33v3H0z\"/></g><g id=\"d_boat\"><path fill=\"#BE1622\" d=\"M18-2h-4l2-2z\"/><path fill=\"gold\" d=\"M16-5h-1v1h1z\"/><path fill=\"#E94E1B\" d=\"M21-9h-1v1h1z\"/><path fill=\"#BE1622\" d=\"M11-2H7l2-2z\"/><path fill=\"#E94E1B\" d=\"M10-5H9v1h1z\"/><path fill=\"#BD8F61\" d=\"m26-2-6 2H3h3L0-2h5-2 18z\"/><path fill=\"#E94E1B\" d=\"M21-8h-1l-1 3h2zm0 6-1-3-1 3v-3h2z\"/><path fill=\"#AA7035\" d=\"m25 0-6-7h-.3l6 7z\"/><path fill=\"#FFF\" d=\"M5 0 4-1l13 1zm19 0v-1l4 1z\"/></g><g id=\"acacia2\"><path fill=\"#AA7035\" d=\"m-5 1-13-81-76-26 3-2 73 24-40-57 4-1 38 54 28-39 11 2-28 40 40-11 2 3-40 12L13 0z\"/><g fill=\"#649624\"><path d=\"M158-166a124 38 0 1 0-248 0 124 38 0 1 0 248 0\"/><path d=\"M120-115a65 20-8 1 0-120 0 65 20-8 1 0 120 0\"/><path d=\"M63-134a109 32 0 1 0-219 0 109 32 0 1 0 219 0\"/></g></g><g id=\"acacia1\"><path fill=\"#AA7035\" d=\"m-5 0-8-52-48-17 2-1 46 16-25-37 3-1 24 35L7-82l6 1-17 26 25-7 1 2-25 7L7 0z\"/><path fill=\"#649624\" d=\"M-25-128c-32 2-57 12-57 21-25 4-45 11-45 20 0 10 25 18 56 18 20 0 38-3 48-8 36 15 34 10 35 10-2 1-4 2-4 3 1 3 17 5 36 3 19-3 34-7 34-11-1-3-14-4-32-3 1-5-2-9-9-12 33 3 60-1 60-10 1-8-32-19-66-22-12-7-33-10-56-9\"/></g><g id=\"acacia3\"><path fill=\"#AA7035\" d=\"m6 0 8-51 47-16-1-2-46 16 25-36-3-1-24 34-17-24-7 1L5-54l-25-7-1 2 25 7L-6 0z\"/><path fill=\"#649624\" d=\"M-110-105c0-19 41-35 91-35s94 18 90 40c11 6 19 10 19 17 0 11-18 19-41 19-11 0-20-2-27-5-7 4-17 7-27 8-21 2-38-3-39-10-38-7-66-19-66-34\"/></g><use id=\"dolphin2\" href=\"#dolphin1\"/><use id=\"gull-f\" fill=\"#fff\" href=\"#bird-f\"/><use id=\"person-f\" fill=\"#fff\" href=\"#person\"/><use id=\"d_boat_s\" href=\"#d_boat\" transform=\"translate(-15)\"/><use id=\"cat-0\" fill=\"#5b4488\" href=\"#cat\"/><use id=\"cat-1\" fill=\"#96673c\" href=\"#cat\"/><use id=\"cat-2\" fill=\"#e57232\" href=\"#cat\"/><use id=\"cat-3\" fill=\"#fffffe\" href=\"#cat\"/><use id=\"cat-0-mask\" href=\"#cat-mask\"/><use id=\"cat-1-mask\" href=\"#cat-mask\"/><use id=\"cat-2-mask\" href=\"#cat-mask\"/><use id=\"cat-3-mask\" href=\"#cat-mask\"/><use id=\"jelly-0\" fill=\"#4d6aff\" href=\"#jelly\"/><use id=\"jelly-1\" fill=\"#80ff8a\" href=\"#jelly\"/><use id=\"jelly-2\" fill=\"#ff6\" href=\"#jelly\"/><use id=\"jelly-3\" fill=\"#ff8080\" href=\"#jelly\"/><use id=\"jelly-0-mask\" href=\"#jelly-mask\"/><use id=\"jelly-1-mask\" href=\"#jelly-mask\"/><use id=\"jelly-2-mask\" href=\"#jelly-mask\"/><use id=\"jelly-3-mask\" href=\"#jelly-mask\"/><path id=\"flock\" fill=\"#FFF\" d=\"M25.5-1H33v-7.5zm19-15.5H52V-24zM42.5 6h8v-7.5zM21 19h8v-7.5zM7.5-9h8v-8zM0 13h7.5V5zm5 16.5h8V22zM25-22h8v-7.5z\"/><path id=\"cactus\" fill=\"#649624\" d=\"M41 38v19H31V28h17V11H38v10h-7V0H16v50h-6V32H0v26h16v30h15V67h21V38z\"/><path id=\"pbear\" fill=\"#fff6cc\" d=\"M-41 0h8l-3-5 21-6H8L24 0v-16l8-10h15l4-8L8-48h-40l-9 16z\"/><path id=\"small\" fill=\"#AA7035\" d=\"M10 0v-166L0-200l-10 34V0z\"/><path id=\"fat\" fill=\"#AA7035\" d=\"M29 0v-120L0-200l-31 80V0z\"/><path id=\"canga\" fill=\"#aa7035\" d=\"m100-28-24 2-15-9-9 9-2 18-18 8 13-10-5-17-1 14-7-15-13 1-3-2-15 3 9-9H2l-1-7 12 6-1-11 6 14 5-1 22-15 19 4 14 14z\"/><path id=\"cloud1\" fill=\"#fff\" d=\"M114-51H78v-32H-52v32h-84v24h-46V0h363v-27h-67z\" transform=\"scale(.4)\"/><path id=\"cloud3\" fill=\"#fff\" d=\"M68-19H20v-13h-48v13h-40V0H68z\"/><path id=\"cloud2\" fill=\"#fff\" d=\"M72-18v-48H10v-38h-77v86h-51V0h236v-18z\" transform=\"scale(.6)\"/><path id=\"cloud4\" fill=\"#fff\" d=\"M118-67v-36H46v-17h-168v43h-40v14h-36v27h-25v-12h-55v12h-41v8h-91V0h819v-28h-90v-11H196v-28z\"/><path id=\"cloud5\" fill=\"#fff\" d=\"M261 0h-521v-15h49v-39h49v-37h20v-23H31v38h29v-26h24v-26h81v39h31v74h65z\"/><path id=\"cloud6\" fill=\"#fff\" d=\"M-119-67v-36h72v68H57v-42h105v14h36v26h24v-11h55v11h41v26h91V0h-819v-15h91v-105h160v53z\"/><path id=\"cloud7\" fill=\"#fff\" d=\"M242 0h-485v-15h91v-76h88v-37H48v80h29v-26h105v39h24v20h36z\"/><path id=\"t-bush\" fill=\"#9BB224\" d=\"m-15 0 1-2-4-2 4-3-3-3 4-1 1-5 6 3 1-5 4 4 3-3 3 3 3-4 2 5 4-2-1 4 3 3-2 2 4 2-4 2 1 2z\"/><pattern id=\"polka\" width=\"60\" height=\"60\" x=\"-10\" opacity=\".75\" patternUnits=\"userSpaceOnUse\"><circle cx=\"10\" cy=\"10\" r=\"10\" fill=\"#FFFF80\"/><circle cx=\"40\" cy=\"40\" r=\"10\" fill=\"#FFFF80\"/></pattern><pattern id=\"camels\" width=\"100\" height=\"100\" patternUnits=\"userSpaceOnUse\"><use href=\"#camel\" transform=\"matrix(.4 0 0 .4 13 42)\"/><use href=\"#camel\" transform=\"matrix(.4 0 0 .4 58 90)\"/></pattern><pattern id=\"ape_with_lemon\" width=\"45\" height=\"50\" patternUnits=\"userSpaceOnUse\">><use href=\"#ape\" transform=\"translate(30 42)\"/><use href=\"#Lemon\" transform=\"matrix(.1 0 0 .1 15 42)\"/></pattern><pattern id=\"striped\" width=\"50\" height=\"30\" x=\"5\" patternUnits=\"userSpaceOnUse\"><path fill=\"#FFFF80\" d=\"M0 0h4v30H0z\" opacity=\".75\"/><path fill=\"#c8b63f\" d=\"M5 0h16v30H5z\" opacity=\".75\"/><path fill=\"#FFFF80\" d=\"M20 0h4v30h-4z\" opacity=\".75\"/></pattern></defs>';\n    }\n\n\n    function getAssetsInScene() internal pure returns (bytes memory) {\n        return hex\"2b706572736f6e00000000001e000000280000000800000014000000640163616d656c0000000000012c000002580000546000001c2000000064016361742d30000000000012c00000177000001c2000000474000000640262757300000000000000151800001c2000002a300000003c000000640163616e67610000000000012c0000025800002a3000001c200000003202626174000000000000001c2000002a3000001c2000000e10000000460063616d706572000000054600000a8c00000d2f000002a300000000460274656e740000000000054600000a8c00000d2f000002a3000000004602636f796f7465000000000258000004b000000960000004b00000006402706572736f6e2d660000005a000000b400000168000000b40000006401706265617200000000001c20000038400000546000001c200000006402626174000000000000001c2000002a300000384000000e10000000640070656e670000000000001c20000038400000070800000e10000000640267756c6c000000000000012c00000258000004b00000025800000032026c6c616d6100000000000e1000001c200000465000000e1000000064026170650000000000000007080000151800002a3000000e100000004602656c6570000000000000012c000002580000070800000258000000280267697261660000000000012c00000258000007080000025800000028016a656c6c792d3000000000b4000002d0000000780000016800000064006a656c6c792d3100000000b4000002d0000000780000016800000064006a656c6c792d3200000000b4000002d0000000780000016800000064006a656c6c792d3300000000b4000002d0000000780000016800000064006361742d30000000000012c00000177000001c200000047400000064026361742d31000000000012c00000177000001c200000047400000064026361742d32000000000012c00000177000001c200000047400000064026361742d33000000000012c00000177000001c20000004740000006402706572736f6e00000000005a000000b400000168000000b4000000640167756c6c000000000000012c00000258000004b0000002580000003202736865657000000000000258000004b00000012c00000258000000460262697264000000000000012c000002580000007800000078000000320162697264000000000000012c00000258000004b00000025800000064016372616e650000000000012c00000258000004b0000002580000006402646565720000000000000258000004b000000708000002580000006402666f78000000000000000258000004b000000708000002580000006402736e616b6500000000000258000004b000000708000002580000006402645f6d6f757365000000003c00000078000000f0000000780000006402645f626f61745f7300000258000004b0000007080000025800000064016f726361000000000000012c00000258000007080000038400000032016e61727768616c000000012c00000258000007080000038400000032026f726361000000000000012c0000025800000708000003840000003202732d706c6f72657200000258000004b000000708000002580000004602706572736f6e00000000001e000000280000000d000000140000006401706572736f6e2d660000001e000000280000000d000000140000006401\";\n    }\n\n}"}, "contracts/motifs/GenericMotifs.sol": {"content": "// SPDX-License-Identifier: MIT\n    pragma solidity ^0.8.30;\n    import \"../BasicMotif.sol\";\n    import \"../NDUtils.sol\";\n    import \"@openzeppelin/contracts/utils/Strings.sol\";\n\n    import \"@openzeppelin/contracts/utils/Strings.sol\";\n    contract GenericMotifs {\n\n        using Strings for uint256;\n        using Strings for int256;\n\n        function getGeneric(uint index) public pure returns (bytes memory, uint, uint) {\n            bytes memory startIndices = hex\"000000190032004d0062007a009900b100d100ed010a01210142015b017a019601b701ce01e801fe0213023302550271028f02a602c102da02f40312032c03450358036c0388039b03b503cc03e503fc0411042e0443045d0476049404ac04c204da04ef050505170529053e05580576058d05a105b805d205ea05fc06110627063e0654066c0684069c06b406c806dd06f8070e0723073c0753076c0782079c07b607d007e80802081b0834084b08610880089e08b808cd08e408fb0915092f094909610979099109a909b909c809e309f30a030a150a280a380a460a580a680a7b0a960aa90abf0ada0ae80af80b090b1d0b2f0b3f0b550b6b0b7c0b8b0ba00bb70bc70bd60be70bf60c050c150c290c400c510c620c770c8e0c9d0cb70cc80cd80ce80cfa0d090d1f0d310d420d540d640d740d840d940da40db70dc80dd90de90df80e090e1c0e2e0e400e4f0e5e0e6e0e810e970ea90eba0eca0eda0eed0eff0f110f280f390f490f610f7b0f8c0f9b0fab0fbe0fd00fe10ff01003101610271037104b105c106a1079108d109d10ad10be10d610ed110211161128113d114e1167117b119e11b611c811d911e811f9120a121a1232124312591271128a129b12b112c312dc12f8131013221334134e136213741385139513a913c013cf13e113f4140714171428143a144a1465148a149d14b314c714e71500151115241534154f156115701586159715af15c115d115e315f6160d161d162c16401651166416761687169c16b116c016d416e616f6171b172d17401752176217721784179417b517cb17e117f11801181b1831184b1859186b18831895\";\n            bytes memory motifs = hex\"\";\n            uint startIndex = uint(uint8(startIndices[index * 2])) << 8 | uint(uint8(startIndices[index * 2 + 1]));\n            uint endIndex = uint(uint8(startIndices[(index + 1) * 2])) << 8 | uint(uint8(startIndices[(index + 1) * 2 + 1]));\n\n\n            return (motifs, startIndex, endIndex);\n        }\n\n        function getFlowerType(uint index) public pure returns (FlowerType) {\n\n            uint8[] memory flowerWeightings =  bytesToInt8Array(hex\"2820100c\");\n            return FlowerType(getWeightIndex(\"Flower\", index, flowerWeightings));\n        }\n       \n\n \n\n\n        function getBeachTraits(uint index) public pure returns (BeachTraits memory) {\n\n            uint beachIndex = index - 21;\n\n            uint8 [] memory shortColorWeightings = bytesToInt8Array(hex\"212121\");\n            uint8 [] memory shortPatternWeightings = bytesToInt8Array(hex\"1e1e140310\");\n            uint8 [] memory towelColorWeightings = bytesToInt8Array(hex\"18161c19\");\n            uint8 [] memory towelPatternWeightins = bytesToInt8Array(hex\"154e\");\n            BeachTraits memory beachTraits;\n            uint256[2] memory beachColorIndexes = [25970159286877075534151789485724632988018602343906580859550974201160956191881,20175262148451];             \n            bytes6[7] memory beachColors = [bytes6(\"ffa0e7\"),bytes6(\"9bb224\"),bytes6(\"4b3d66\"),bytes6(\"ffd700\"),bytes6(\"fff5bf\"),bytes6(\"ffdef6\"),bytes6(\"9e331c\")];\n            string [7] memory beachColorTraits = [\"Pink\", \"Green\", \"Black\", \"Gold\", \"White\", \"Cream\", \"Red\"];\n\n            uint traitIndex = (beachIndex * 3) / 255;\n            uint traitPos = (beachIndex * 3) % 255;\n\n\n\n            uint beachColorIndex = beachColorIndexes[traitIndex] >> traitPos & 7;\n            beachTraits.beachColor =  string(abi.encodePacked(\"#\",beachColors[beachColorIndex]));\n\n            bytes6[4] memory jellyColors = [bytes6(\"4d6aff\"),bytes6(\"80ff8a\"),bytes6(\"ffff66\"),bytes6(\"ff8080\")];\n            uint8[] memory jellyFishWeightings =  bytesToInt8Array(hex\"26201904\");\n            traitIndex = getWeightIndex(\"Jelly\", index, jellyFishWeightings);\n\n            beachTraits.jellyColor = string(abi.encodePacked(\"#\",jellyColors[traitIndex]));\n            beachTraits.jellyTypeId = traitIndex + 18;\n\n\n          \n           \n            traitIndex = getWeightIndex(\"ShortColor\", index, shortColorWeightings) + 0;\n            beachTraits.shortsColor = getTraitColor(traitIndex);\n\n            string [5] memory shortPatterns = [\"polka\",\"striped\",\"camels\",\"ape_with_lemon\",\"\"];\n            traitIndex = getWeightIndex(\"ShortPattern\", index, shortPatternWeightings);\n\n            beachTraits.shortsPattern = shortPatterns[traitIndex];\n\n            beachTraits.shortsSVG = string.concat(\"<use href='#shorts' fill='\", beachTraits.shortsColor, \"' />\", traitIndex != 4 ? string.concat(\"<use href='#shorts' fill='url(#\", beachTraits.shortsPattern, \")' />\"): \"\");\n            string memory skinColor = getSkinColor(index);\n            beachTraits.skinColor = skinColor;\n\n            traitIndex = getWeightIndex(\"TowelColor\", index, towelColorWeightings) + 3;\n            beachTraits.towelColor= getTraitColor(traitIndex);\n    \n\n            string [2] memory towelPatterns = [\"zigzag\",\"\"];\n            traitIndex = getWeightIndex(\"TowelColor\", index, towelPatternWeightins);\n            beachTraits.towelPattern = towelPatterns[traitIndex];\n\n            beachTraits.towelSVG = string.concat(\"<use href='#towel' fill='\", beachTraits.towelColor, \"' />\", traitIndex != 1 ? string.concat(\"<use href='#towel' fill='url(#\", beachTraits.towelPattern, \")' />\") : \"\");\n\n            (beachTraits.beverage,beachTraits.beverageAttribute) = getBeverage(index,90,927);\n\n\n            beachTraits.attributes = string.concat(getTraitAttribute(\"Beach Color\", beachColorTraits[beachColorIndex]), getTraitAttribute(\"Jellyfish Color\", beachTraits.jellyColor), getTraitAttribute(\"Shorts\", string.concat(beachTraits.shortsColor, \" \", beachTraits.shortsPattern)), getTraitAttribute(\"Towel\", string.concat(beachTraits.towelColor, \" \", beachTraits.towelPattern)),beachTraits.beverageAttribute);\n            return beachTraits;\n        \n        }\n\n        function getCatTrait(uint index) public pure returns (uint, string memory) {\n\n            bytes6[4] memory catColors = [bytes6(\"5b4488\"),bytes6(\"96673c\"),bytes6(\"e57232\"),bytes6(\"fffffe\")];\n\n            uint catTypeId;\n            string memory catColor;\n            \n            uint8[] memory catColorCityWeightings =  bytesToInt8Array(hex\"241e1908\");\n            uint8[] memory catColorLandscapeWeightings =  bytesToInt8Array(hex\"26241405\");\n            uint weightIndex;\n            weightIndex =  (index >= 221) ? getWeightIndex(\"Cat\", index, catColorLandscapeWeightings): getWeightIndex(\"Cat\", index, catColorCityWeightings);\n\n            catTypeId = weightIndex + 22;\n            catColor = string(abi.encodePacked(\"#\",catColors[weightIndex]));\n\n\n            return (catTypeId, catColor);\n        }\n\n\n        function getSkinColor(uint index) public pure returns (string memory) {\n\n            bytes6[6] memory skinColors = [bytes6(\"ffcabf\"),bytes6(\"ffcc99\"),bytes6(\"cc8f52\"),bytes6(\"7a4625\"),bytes6(\"ffcc4d\"),bytes6(\"966329\")];\n            uint skinColorIndex = index % 6;\n            string memory skinColor = string(abi.encodePacked(\"#\",skinColors[skinColorIndex]));\n            return skinColor;\n        }\n\n\n        function getTraitColor(uint colorIndex) public pure returns (string memory) {\n\n            bytes6[10] memory colors = [bytes6(\"797d95\"),bytes6(\"be1521\"),bytes6(\"2bbe16\"), bytes6(\"aa7035\"),bytes6(\"538027\"),bytes6(\"276280\"),bytes6(\"802635\"), bytes6(\"be8e16\"),bytes6(\"ff7301\"),bytes6(\"1597be\")];\n            return string(abi.encodePacked(\"#\",colors[colorIndex]));\n        }\n\n        function getTraitAttribute(string memory traitType, string memory traitValue) public pure returns (string memory) {\n            return string.concat(',{\"trait_type\":\"', traitType, '\",\"value\":\"', traitValue, '\"}');\n        }\n\n\n        function getBeverage(uint index, uint x, uint y) public pure returns (string memory, string memory) {\n        string memory scale = (index >= 221) ? \"0.7\" : \"1\";\n        string[6] memory beverages = [\"Coffee\",\"Tea\",\"Vine\",\"Water\",\"Ice_Tea\",\"Lemon\"];\n        uint8[] memory beverageWeightings =  bytesToInt8Array(hex\"19190f140906\");\n        string memory beverage = beverages[getWeightIndex(\"Beverage\", index, beverageWeightings)];\n        return (string.concat(\"<use\", \" href='#\", beverage, \"' transform='translate(\", x.toString(), \",\", y.toString(),\") scale(\", scale ,\")'/>\"), getTraitAttribute(\"Beverage\", beverage));\n    }\n\n\n        function getCityTraits(uint index) public pure returns (CityTraits memory) {\n\n            uint cityIndex = index - 121;\n\n            CityTraits memory cityTraits;\n\n            uint8[] memory displayDevicesWeightings =  bytesToInt8Array(hex\"26291103\");\n            uint8[] memory chartTypeWeightings = bytesToInt8Array(hex\"152c0e0e08\");\n\n\n            address[5] memory priceFeedAddresses = [0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c,0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419,0xEC8761a0A73c34329CA5B1D3Dc7eD07F30e836e2,0x379589227b15F1a12195D3f2d90bBc9F31f95235,0x214eD9Da11D2fbe465a6fc601a91E62EbEc1a0D6];\n            uint traitIndex = getWeightIndex(\"Chart\", index, chartTypeWeightings);\n            cityTraits.priceFeed = priceFeedAddresses[traitIndex];\n\n            string[4] memory displays = ['Laptop', 'Clipboard', 'Crystal Ball',  'Hologram'];\n            cityTraits.displayType = getWeightIndex(\"Display\", index, displayDevicesWeightings);\n\n            cityTraits.displaySVG = string.concat(\"<use href='#\", cityTraits.displayType == 0 ? \"la\" : cityTraits.displayType == 1 ? \"cl\" : cityTraits.displayType == 2 ? \"cr\" : \"pr\", \"' />\");\n\n            uint cityTypes = 208949948408315176645400514316296940490473578437358986892907;\n            cityTraits.skyLinetype = (cityTypes >> ((cityIndex) * 2)) & 3;\n\n            string[4] memory skyLineTypes = [\"Townview\",\"Cityscape\",\"Urban\",\"Metropolis\"];\n            for(uint i = 0; i < skyLineTypes.length; i++) {\n                if (cityTraits.skyLinetype >= i) {\n                    cityTraits.skylineSVG = string.concat(\"<use href='#\", skyLineTypes[i], \"' />\", cityTraits.skylineSVG );\n                }\n            }\n\n            cityTraits.skylineSVG = string.concat(\"<g id='skyl\", index.toString() ,\"'>\",cityTraits.skylineSVG, \"</g>\");\n\n            uint coastelIndexes = 160480604047421108333616122368;\n            cityTraits.isCoastel = (coastelIndexes & (1 << cityIndex)) != 0;\n\n            (cityTraits.catTypeId, cityTraits.catColor) = getCatTrait(index);\n\n            (cityTraits.beverage, cityTraits.beverageAttribute) = getBeverage(index,487,1039);\n\n            uint tableColorIndex = NDUtils.randomNum(string.concat(\"Table\", index.toString()), 0, 4) + 3;\n            string memory tableColor = getTraitColor(tableColorIndex);\n\n            cityTraits.tableSVG = string.concat(\"<use href='#c-table' fill='\", tableColor, \"' />\");\n            cityTraits.attributes = string.concat( getTraitAttribute(\"Display Device\", displays[cityTraits.displayType]), getTraitAttribute(\"Skyline\",string.concat(skyLineTypes[cityTraits.skyLinetype],cityTraits.isCoastel ? \" Ocean\" : \"\" )),getTraitAttribute(\"Cat Color\", cityTraits.catColor ),cityTraits.beverageAttribute);\n\n            return cityTraits;\n        }\n\n        function getNFTInside(uint index) public pure returns (uint) {\n\n            uint8[] memory nftWeightings =  bytesToInt8Array(hex\"0509070b090a0e08070a0b0a0b0c090b090c0b0d0a\");\n            uint256 i = NDUtils.randomNum(string.concat(\"NFT\", index.toString()), 0,209);\n            return usew(nftWeightings, i);\n        }\n\n            \n        function getLandscapeTraits(uint index) public pure returns (LandscapeTraits memory ) {\n\n            uint landscapeIndex = index - 221;\n\n            LandscapeTraits memory landscapeTraits;\n\n            uint8[] memory hatWeightings =  bytesToInt8Array(hex\"000f16130c110f\");\n            uint8[] memory shirtColorWeightings = bytesToInt8Array(hex\"212121\");\n            uint8[] memory shirtPatternWeightings = bytesToInt8Array(hex\"1a280e050e\");\n            \n            uint256[2] memory traits = [38567098456751155478290073649538280755737003682037970179806874605521698382659,7505701893370582164606120932148679538071925];\n\n            uint climateZones = 1064990383896710156005944362069183360137773097117926154212646;\n\n            string[3] memory climateZoneTraits = [\"Polar\", \"Humid\", \"Desert\"];\n            bytes6[3] memory climateZoneColors = [bytes6(\"DFB2F7\"),bytes6(\"B9C966\"),bytes6(\"F9B233\")];\n            landscapeTraits.climateZoneIndex = (climateZones >> ((99-landscapeIndex) * 2)) & 3;\n\n            landscapeTraits.skinColor = getSkinColor(index);\n\n            (landscapeTraits.catTypeId, landscapeTraits.catColor) = getCatTrait(index);\n\n\n            uint traitIndex = getWeightIndex(\"ShirtColor\", index, shirtColorWeightings) + 7;\n            landscapeTraits.shirtColor = getTraitColor(traitIndex);\n\n            landscapeTraits.furnitureColor = getTraitColor(NDUtils.randomNum(string.concat(\"Furniture\", index.toString()), 0, 4) + 3);\n            landscapeTraits.furnitureSVG = string.concat(\"<g fill='\", landscapeTraits.furnitureColor  , \"'><use href='#easel' /><use href='#l-table' /></g>\");\n\n            traitIndex = NDUtils.randomNum(string.concat(\"Pants\", index.toString()), 0, 3) + 0;\n            landscapeTraits.pantsColor = getTraitColor(traitIndex);\n\n            string [5] memory shirtPatterns = [\"polka\",\"striped\",\"camels\",\"ape_with_lemon\",\"\"];\n            traitIndex = getWeightIndex(\"ShirtPattern\", index, shirtPatternWeightings);\n\n            landscapeTraits.shirtPattern = shirtPatterns[traitIndex];\n\n            (landscapeTraits.beverage, landscapeTraits.beverageAttribute) = getBeverage(index,1020,1020);\n\n            string [8] memory hats = [\"fedora\",\"basecap\",\"beret\",\"beanie\",\"sunhat\",\"glasses\",\"chinoise\",\"cylinder\"];\n            landscapeTraits.hat = hats[getWeightIndex(\"Hat\", index, hatWeightings)];\n\n            landscapeTraits.artistSVG = string.concat(\"<use href='#arti' fill='\", landscapeTraits.skinColor, \"' /><use href='#shirt' fill='\", landscapeTraits.shirtColor, \"' />\", traitIndex != 4 ? string.concat(\"<use href='#shirt' fill='url(#\", landscapeTraits.shirtPattern, \")' />\") :\"\" , \"<use href='#pants' fill='\", landscapeTraits.pantsColor, \"' /><use href='#\", landscapeTraits.hat, \"' />\");\n\n\n\n\n\n            traitIndex = (landscapeIndex * 4) / 256;\n            uint traitPos = (landscapeIndex * 4) % 256;\n\n\n\n            uint landscapeTrait = traits[traitIndex] >> traitPos & 15;\n            landscapeTraits.hasCity = (landscapeTrait & 1) == 1;\n            landscapeTraits.hasMountains = (landscapeTrait & 2) == 2;\n            landscapeTraits.hasRiver = (landscapeTrait & 4) == 4;\n            landscapeTraits.hasOcean = (landscapeTrait & 8) == 8;\n\n            landscapeTraits.before = string.concat( landscapeTraits.hasMountains? \"<use href='#l-m' />\" : \"\", \n            '<polygon fill=\"', string(abi.encodePacked(\"#\",climateZoneColors[landscapeTraits.climateZoneIndex])) ,'\" points=\"1095,1096 1095,345 830,393 579,369 396,394 50,350 -19,336 -19,1096\"/>');\n\n            landscapeTraits.before = string.concat(landscapeTraits.before, landscapeTraits.hasCity ?  \"<use href='#l-c' />\" : \"\" );\n            landscapeTraits.before = landscapeTraits.hasRiver ? string.concat(landscapeTraits.before, \"<use href='#l-r' />\") : landscapeTraits.before;\n\n            landscapeTraits.before =  landscapeTraits.climateZoneIndex == 0 ? string.concat(landscapeTraits.before, \"<use href='#l-p' />\") : landscapeTraits.climateZoneIndex == 1 ? string.concat(landscapeTraits.before, \"<use href='#l-t' />\") : string.concat(landscapeTraits.before, \"<use href='#l-d' />\");\n\n            landscapeTraits.attributes = string.concat( getTraitAttribute(\"Landscape\", string.concat(landscapeTraits.hasCity ? \"City\" : \"\", landscapeTraits.hasRiver ? \" River\" :\"\", landscapeTraits.hasMountains ? \" Mountains\" : \"\",  landscapeTraits.hasOcean ? \" Ocean\" : \"\")), getTraitAttribute(\"Climate Zone\", climateZoneTraits[landscapeTraits.climateZoneIndex]), getTraitAttribute(\"Shirt\", string.concat(landscapeTraits.shirtColor, \" \", landscapeTraits.shirtPattern )) ,getTraitAttribute(\"Cat Color\", landscapeTraits.catColor ) , getTraitAttribute(\"Hat\", landscapeTraits.hat),landscapeTraits.beverageAttribute);\n            return landscapeTraits;\n\n        }\n\n          function usew(uint8[] memory w,uint256 i) internal pure returns (uint8) {\n                uint8 ind=0;\n                uint256 j=uint256(w[0]);\n                while (j<i) {\n                ind++;\n                j+=uint256(w[ind]);\n                }\n                return ind;\n            }\n\n        function getWeightIndex(string memory salt, uint tokenId, uint8[] memory weights) internal pure returns (uint) {\n            uint256 i  = NDUtils.randomNum(string.concat(salt, tokenId.toString()), 0,99);\n            return usew(weights, i);\n        }\n        \n\n        function bytesToInt8Array(bytes memory data) internal pure returns (uint8[] memory) {\n            uint8[] memory result = new uint8[](data.length);\n            for (uint i = 0; i < data.length; i++) {\n                result[i] = uint8(data[i]);\n            }\n            return result;\n        }\n\n\n\n\n    }"}, "contracts/motifs/GenericMotifsSVG.sol": {"content": "// SPDX-License-Identifier: MIT\n    pragma solidity ^0.8.30;\n    import \"../BasicMotif.sol\";\n\n    contract GenericMotifsSVG {\n\n\n\n\n        function getGenericSVG(MotifType motifType) public pure returns (bytes memory) {\n            if (motifType == MotifType.BEACH) {\n            return hex'040136026a0080000d030035018803cd001e0212250096200c00b0c00c00c8200c00e0200c053c0112015e67802d100001009c033000850022010d015e01777320122000060104796163687420090b005000aa0136016800b40064200507f002637275697365e0011820140b6404b0025802666973686572e00118010258a01806646f6c7068696ee0094a1f3c706174682066696c6c3d222477632220643d224d30203331306831303830761437373048307a222f3e3c7573652077696474683d2240190922206865696768743d222022200c107265663d22236372657374732477746f6b203307247773246a246269e004640062e0006402383134806402323637a064e0028d0623316131323035c09102383135802c013332402b0b206f7061636974793d222e3120231d7374796c653d226d69782d626c656e642d6d6f64653a6d756c7469706c79408a076724746f3c67206920df036c656722c0f202736322e00575053934303065338075113432312036343568343976313931682d3439610960a420471e6d34373320313231372d33302d3335382d3134302032392d31383220323331e0072b1f34203839392d34362d3132332d32302d312d38342031313720333420343720360339203133e006330d3633203832372d372d3139382d32202d01322d2026073332203535203135e0022d81c0042335333236419a409c0b333730203731322039342d3320a6072035372d383720344061092473683c2f673e24626561d5a1bb006c4116087472616e73666f726d20de096174726978282d312030200102312031220f02203029214ce0033505666c5f24666c21eee00a3a003220372111072039303020383038603a8182056e66742d70692209e0096f002e20b30630202d2e303220400a02393035203b2076a177a0e90266666660e6034d2d353020020268313122ac043133383048200d60e320620a3c7465787420783d22353422a2222b013132400808666f6e742d73697a652010400f4025062d616e63686f7220f50d6964646c65223e474d203a293c2f401b003e412c043c64656673a083424404746f77656c8082003840a22327053237376c2d3320b7023235372090e2030140310073205f0174736032026d343721510b3030352d3136382d34312d3120352006003920ef04376833383340c14267037465726e603c047a69677a6122b6a381003620cfc37f400b2292402a06556e6974733d2223aa097253706163654f6e557320cb4049e10239218a203e4223419e003321a102304c36200a00762007200d22c44012015a222082002fa058073e3c2f646566733e';\n            } else if (motifType == MotifType.SKYSCRAPER) {\n            return hex'0401db026d0080000e0102dd03ad01360069010001907362a0140d001a00ba032f0004011d012c0373a02b070101706572736f6e200911c201c20389038900b400640014003c01636ca0380601772d636c6561202311640064013603e804b000641c201518017773a02205047961636874400c402202dd01dd40450a016800f0026372756973652019a01820140b6404b0025802666973686572e00118010258a01805646f6c706869a06de0034a1d3c67207669736962696c6974793d22246f63223e3c706174682066696c6c20101a77632220643d224d3020343735683130383076383948307a222f3e203b20241b7465723d2275726c282373696c6824746f6b29223e2477733c2f673e6003e0024d062345364246374180511f3132373820353532482d323130762d36316c3332332d33332032353420323120163136332d3133203135332037203132382d313120343637201a017a22e005b401636f408de0036705464344413944806704302035323680b90235343480ba0a24736b796c24626924636c20c5006920e004696e6e6572e005fb0623636339393364c045023839328045023138382045056d302d373034a01100322010e00783e0033d14313834203068313276393030682d31327a6d373636e00511403e077573652068726566207b1b7365617422207472616e73666f726d3d226d6174726978282d3120302001211e01313920530029e00b36219ae1030c0539343030453380c6013834203d036832763640872086013136e0040fe0143a00312203063831683232307620030048200f602f813f056e66742d7069222ce009b2012e3220b0013020200602383132204200334220202f621de20943042d62697264402204736224736d6024224a04246d246469e1032007666c5f24666c6f6be00b718070053220353935202171412402246265e103140b6e6f6e6522207374726f6b65216d05363439363234c010072d77696474683d2220102219004d21220b373837763134376832303222215d036465667340ba423800632338072d6c696768747322430f23340323464646c24a4022036669727321cc404b1534372d31363168367636682d367a6d36332039386835400d03357a6d2d22ea400d0035601b01373822fe0036c01c024d3232200e2038801c033136372d6039200e4039003921d5a01b21e3022d3432c037036d313035201ba062004d20440030404501364841fc23650033e00129002d2038013537c046016d32e00253201b6044806d211002313135e00028e0037c8028c0890433392d3139e001eda04420fa2097a035200c00366246e202fba12fe2094982fb23020132302006200441d9e0253900312039e01a36607b036c61746523702031e01c6ae001330033e0023222bb22e4420683d225324222a41da3a9421a0933343520373934683231244f0030239d24e720dd63c9401f023237314287076831363876323148200e601fe0015b0031e0024d0c6d343838203834342031392d3920bf02312035212f230c6033c053026d343923940033202503362037354560221f02362d37419e4588200c8017012d3220224017e004910b35303720383531682d37367620ae01683781c940f1e102cd40f60031e104cde101280234383561c2403280c806632d7461626c65e002ca014d3620ca033935314825790a3239683630366c38322d38e409ac013161213700358367a033037634376c202a06203832682d34382637026f706143b0033d222e312029037374796c23fe036d69782d20730f6e642d6d6f64653a6d756c7469706c7940ebe00298e6071de5035601323423c8003022cb0439356c2d3726ae01343921a7046c33312d3625f62013013236268540120232362d20080139322008a011201b4012202502333120402e8145026369722821062063783d22313920ab006320b4043835382220276e02313636e20048044342383446215fe400cb04424536354526fb8010c4cb003164b8e002540232363780540037a0540032200fa29c0544454232463640ffe00230003324fb808501303080852006e00830e101300070e1073005613933336539619f016d31229a033939322d20f20332387633285901323820ff002d200c012d33e20266a05f416b0065a6c2013131281400302321203220390048200fe20196a02f026666666067014d3325520b3733384833306c313632203222dae20304003340e3630de00b3802393432c038436ce2023ce01237262c0233386828ca0376323034203ee004376153e1012201636ce30e1723ab2701e00399e606b0c110e105e4a15c28180039242c0333353920215102372d322125013637e108240461613730332259245c016d32218d0338203338203129e82186013948432fc47fa11d01653040016031004d261e08393834683334386c34206529c7003720ebe00630e1008700322060013736e0032d0036e109b5c0d42090034d323639217425060536306c2d352063f8605e0063e3011701323320f043172988829122a1a0aaa04b208fe1016e016c61e1055301233925a800452033607021b826d401333421b80335354832806de2031b4052c947003347b9003922ac013238202a006c20a504203631763221f80034e4099805424636364545e000660239373020260033203423ef0331482d34e0096ac3d44098013338225104336833303725f60239483324c620d5e00398044639423233a31de0022d0033e0002ce1010204557262616ee10024ab26a04d406c4931013435238e0034268502303648200fe0016e40200536353720343124ae03313676312061200f27cb2578012d33220c063876313738682d20a32640225028ea0032402802363948202c6049e0018b01686f2625015f33c07ea1b82232013563a19327aa0568373236763322c0e10924026666652b458124e00029eb0b89056663646139648028003120df00382bb5464c243b26e92b482066e00011013334e007120232353340124901c0250033240fe006380034275b2012e00325033630387a40702cdfe00039e05971421de107640034e107640339626534a3c800352d570030275c0334383968200b603fe2035de1033d4542023448352b0b2aa721e400362c8202483639800f2208231523b200354b2c2020e00c102031e01621e00843e0063240852266e07b860033226f410d2139e1040d200fe005fce00f10e001dae00f21e1010da021e0063241eee104ae0366663964251743ac21ce0220375641dc0031218ea1dbe2071bea0036e30080e30556023533302380e30b7f03616337362df140692c11206140290038e30daae301d401343528f9023956332c2602307637293325d8026d2d3720d6601300318013235f012d3720fb6013e00327e006130331563539402ae0173e02483838e00a29638e0134344c16003145cb606a2ce4e00092801420934014c09380142094401460bc2094e00414204c0034220060968018e010422098e00c2ce0029a00328042e0037020ee8014e01057c0c4e04e9a4276e207490032e40765e202200131352b0b4cbc0033228f200c007a22320330683433243b514d404ee205c5e20384225b402902353337e20b86e2025b0033283530a20135396244821924dde00310200f27a3e00311e0082228cd409c60454906044d31342036a032014831261f00322a8227c46020806620a30030e0057701313430858022014838266640654f6c409a4044034d38352023032cd2273300376022405632eee00013013239407b00352027206cc028200f612de1077c0035e1077ce502e2003220c02b0401313228a1003350c46041e1056fe401350132322071003333912614003130f3003260bd33820034227224ee003527d32711315e2df6003320100039201020233368003922cae00210032d313735e00311e108e502616362c7c100334d3601314840310033272f3169e0092ee002a400332e140036424a013633e001a4003520a4232c0033201502387638e0009523608012e000a802313137c013c026002d402600346039c026c0be404d801340c0e107780036e10778e204ba2ab86516e517402024012033544700563266200c606ae106a1e90217234a20242c622310217800338065e0380e40dfe00574e301862d49228500362a5721f38bbce1070a0037e1070ae4020000345066003124d601334c22d12b012a24e0086ee0022f2b2703356834342af440e3e008290366656639a6e5238c205801683431384ce9229b402d74585169223500612cb4a0d846ac03323420312165003228a62ce7013234602f0063ec015700332f094c5620248c5600344050e002200039293ae014200131342b8e40210132332aca4fb1e007420131392ab9e0142101323420dfe014210133302ff7e0152100352d184021e010ca01343020e3e009216204412b013736e1032b31e1006d220700382402213c36fe2e5e601123b0e0251031c180442a75e00544a0104172425f6089e8019ae100f52daf07323933683430367625294305022d3937e0010e403ee102b136b0a0e640ef21905152a05535ad02414530e0173000382127c030044244343844e01730003521e0c030044143373643e01730426dc0300246454622de2de7e100025441014d6536b003706f6c69f6026af802e92c6f25b8389343350131376c7f046d3230382d41530131372be200302668003121b138ba2fb320142eed00342755233f007a2371217a043939763436e404ac4078004336e403736361703733c0a1e002770035288e0434363468393a1b00333303218c2072023620322e2600322b1e2e4725ae2968342f0032280360890148372e5a036d2d363436ad20b202393476238ba818023531362039033376353924de41056204408807546f776e76696577e0108700352e9be0078724b620860038a08500338da3208401353630b322d1012d356491e0078340bde0028320f83aeb60853ae978a5012220b829361f0425222068655806c00d33b8227333b5447b086665466c6f6f6420664005042d636f6c6f2283d604032072657334733828401d40ef0d6665436f6d706f7369746520696ec018200a09323d22536f75726365413bd0006152920365726174404c01696e40380e2f66696c7465723e3c2f646566733e';\n            } else if (motifType == MotifType.LANDSCAPE) {\n            return hex'040167023100800006010352040e003c2008030002bc3280131600050077018d0026002e020b1e00c803c101cc000a0014400c1264018701e601100028011a009602b401ff009d800b0503ea026b003f600b03dc016d6c20442000070101706572736f6e20091f180226030003b600b40064002d0078013c67207669736962696c6974793d22240d6f63223e3c706174682066696c6c20101a77632220643d224d3020333539683130383076383948307a222f3e203b20241f7465723d2275726c282373696c6824746f6b2922207472616e73666f726d3d22600a046c6174652820420b363029223e2477733c2f673e40031824626524322473683c75736520687265663d222373756e636c205e05246269246d6ce0031907666c5f24666c6f6be0045f0b6d617472697828312e3520302001400705383037203932206a20a3e002cb0623413933334539c0cf063936377631313360d30056200c017a6d20dd0d322d3830327631324830762d313260e5e00f4103333836202031013068202802563068202d046d33353120e0020f207f042466752431212861058110a0b0022e333220ae01302040070633303820363337411b026e66744118e003f60670616c65747465404d0670653c64656673417a00692195c0190e3e3c636972636c652063783d22313020e2006321cc043834352220219c0236322241a821cd06234242384435442049e00330013738a02f00362008202f013131e0002f05394242323234e0072f0030a02f00332058e0042f03676f6c64e0062c013934a02c013033e0062c0623453633333241402fe10362a0a2002020de0d6d34313020383230203620352d35200404362d352d364156612281030361727469e1050001323020f74100023635366073013633e000644055023130322222217101203121e90c306c2d31372037302d33312d374027e1024a02333437804901383880490032e00549043236372038203d403a062034312031383120460020224a07363920363520323720b8013234222620060036e008ba036669723120bae003fd04414137303320be20a70c4d2d362d313136483456393448a03be0032aa19b602a0334372d3842ff202f002d600b005a40c943648124206921ab23ad4204a038e0054de0037841200d37353168323956313131682d32396173607c4098003122e6013133606d40e2013832400de0062203383120322167209003203935202030200d057a6d3436203740d505302d36354c37203c0038233400382021062d3134382d38332006204f0033e0054b0632383820343633204b416922090034400e23ae21580235344c401600342178218b02363137603ae001f8046274726565e009f904656c6c69702472432f22f4422c01353021210072233f003922de0072233e003961ebe003290132312205802b2034e0092b612000668164e1034f003721000b30306836347632353848373560a3e00e2c006d20ec003521310231392d21cb013830245c20030338203136213d02332037200b212401203620080032201520020034604ee202b501313720c940a60034424943a0013331420ee0022201323422386022442ce00c2220e140200133372302e00c20013237a10d013235413121300030e0066501333622c960440032249220210034e0072100392017402000322019402000312031e304dd0070e10dbfe10e3c044d2d323231466526ac221b0d31562d3738683433763233336c2d20af012032a220e00f3f02323939603e0b37382032353756313434483424240331356c3222a6013130825ee203130038a14801323620ca4212003164e8223f00356537e0002b2011013239210f402345714022245e20ede00022227c20b08111013332215de0152bc28d01343221ef402a20dd2008206823b5e00758003242b24084013335a084013133206a402d013932e0072c002d24e7a02c4197209701323020e7402c2731402de30161026c2d70244ae702bf05742d62757368e704a366fd006c480322dd0d373434297363616c6528342e313667a4e0023d24a9267e6030e7042e01312e872e002d4008023937314402e00a3b60cae0039c0074209ce103ed033634393626d184c725aa063431632d322d39245d013435800601332084cbe00294844521aae00213a299e009a9012d2e20412001092d2e342039383020353780e4e0039500642095e0024b4130e005f560566131243c02373433a13102312e38e008f52804006de00f3c01313422cb013535a03d02322e302863e005c605636163747573e00bc7206b20c525e52007294d0120342047403ce001c7056665646f7261e5015d04343030453320d9616f01643d271f25fd083536352d33302d332d439521660233203627780931312d35332d33352d3461b1e303020031432542a9281e2273227c003842df42d622b96118821902726f744252012d3223eb2531202ee0069f0662617365636170e009a0e0036e00324055806e2216e01b6e4446e0016ec0ec014d312800013637224e26a2281001322d28030832392d38347336392d28710034200de1053f046265726574e0159d0131382103609d0031a38928cc610c00322114e10e0c003821630031ea02fe418a0231363122892895022d332024c9294700208766e101ce046265616e69e7022ce107ce014d3121bf0236343820e1003841d247c502372031287a05337336342d35290a253540e2c113006d25392031280626c423b30031255d27e3224c013731e608b5220960e900352538660b651ce0019e2c17016861e10a2ee0006c00372a28236f01323220622b5c208f004c233c033638385ae00593262200362c21003820b2402d01203320c1003427a16026e0016f05676c61737365231aa7d1e1080f036d31393720dd206229f529e90320382d36204d00366047e0009500322a07003620620231342d2a090037212627be0132346024e0016c0763796c696e646572e0136d0032617d233b0037425a2957002d200a012036e9059c016d32215d02353938416e0034228303362d393680ea6170e00171251a0261626c4c3bc0aa034d37333926e30932316833353676323748200f6034e000200038251c09313034306832337637392a182985408be0051002392d3420eb232500356048239f6045e0017a00652397006ce40227024d343628f40830376832367636333620578be4e0007702333031254a0032204e043976323248200e017a6d2452013734e00311e104e40135372625003021de24642377227940ae294322bb22872093249149400139382075017a6d229f0333313468252f282c27f340602bd10037e00311e000608210026e6f6e232c057374726f6b652ccd04464244313824a08010072d6d697465726c69200623c423baa0160477696474688011239520d821c00033212702343876200320d98861e1012b22f52f0da10b8078ea045b0038220200352e840534763834682dea080b22fd835500364e052982200ea04525d30130456827ea021800362af56385003668cf2007e0002f004326cc0046e0072f2314a02fa3b5e0182f292664cf003548abe0188f00384a9f402f003728d2402fe0015fe00cbf210ec02f2098e0045fe00cbf0038480b805f21bb202f247be1131fe0285f00372086405f003669cf2007e0165f00362080602f2bb3402f200ea08fe00dbfca2f0136332068e0045fe00c2f003749d0805f802fe00b5f427d637b9063016e74250442ad446e2ade3206023736762b0c00482010e30115402c037368697225a2602c261b033732386827f78f6123842dbf23bf203f0239355621d9006c2ce401352d2004003723f3013632317122c200376a5fe0007e026c2d6de10001044541434346223f205e006d23ae2f762fc4275b649400202f6c0036269725d801362028f6287604323520343423e225ee012d3325e1259c253e0130324fac249e28da0134304024003923ea20490032288c601828ef204823510138482066e005e1016c2d3310a19105424636364545608f24c22044033036683220c601323224c22eed01363224683248013330200f0136764006053134762d343323a801357620f1006829010076255020072026400f02323976600603365632372f7920162742203600392036402e0031249e20252064003620070234367633942ff16015013138206a200e20244006013231208900372007003825cb201d204200354088013276600660493301003460b220060031200c0038330d2036400702327632255e20ae60d303313068332074300d204d01336820532176006842053025200b203820c900394030003125a70037202a00356025254201323524db01683326090033336d209c023268352057200640b12046002d4edc27b3272802316831202720424013e50070425a016c2de7081c420830ac29fb003525bf21e725b04050006c2a5e21f73070e00441066368696e6f697325b4a1bf24bc00302ab04046016d322c020035223f33d127d3a0060020273e0d3132357a222f3e3c2f646566733e';\n            }\n        }\n\n        function getSkyMovingScenes() public pure returns (bytes memory) {\n            return hex'0224000000000000000002616972706c616e650064012c000000000078006400b4005a02666c6f636b00000000280064000000000168004602d000b4026269000000000000000124000000000000000064006400000000000700320003000502';\n        }\n    }"}, "contracts/motifs/Motifs0.sol": {"content": "// SPDX-License-Identifier: MIT\n        pragma solidity ^0.8.30;\n\n        import \"../BasicMotif.sol\";\n        contract Motifs0 is IMotifData {\n           \n\n            function getMotifData(uint index) public pure returns (bytes memory) {\n                bytes[7] memory motifs = [bytes(hex\"0a4e6f72746820506f6c6500e0060003055d4a1c2012066400b401330131200940001c0301b0038c00230018010a00c800d70324006900240126012c02230173200b021a0127203103003c706120551f66696c6c3d222477632220643d224d302033313068313038307637373048307a0e222f3e3c7573652077696474683d224019062220793d22333520071f687265663d22236372657374732477746f6b22207472616e73666f726d3d226d08617472697828312030200102312e382005042d383830294053e0027c06234535443443326080006d20600039208314352d31383820382d3139372d38483139326c2d323120441432762d32306c3235322033683533356c3332302d33e000a4a08f0d6172637469732d63756c69737365406d40c1a01c05666c5f24666ce00da960a2013020200621050220353560aa0e24312462693c646566733e3c6720692125e0065fe005cc044336373846211b20270e4d34363420373338483238376c343220cc21590a377a6d373035203136483920d501343120e8801520e007382d343548373734e00416033320323720150434306c343920230368313235202c0e3733342d3131482d37396c36392d3321b30c37367a6d3434302d3736483437e0046f0035205702323148412f4085a06f0a3338312033383548393136e000160b367a4d373620383437682d31a0430038204d0d7a6d363936203235682d39356c3220c80230683520140531343620343280140033c014032d392031403f013936e00314003420db0038e007140232323521cd05483131376c3321f0033568393020c20039204a402ae00269014d3520690138322095e0011508387a6d3234342d3339c01400398013023238202124a02880130138362092e000a7201320bb052d36353620334051e003a7226d0333333668415501313920b040fa012d382276203d2169e001130133332105e0001400396028003441190039403d01386c60ee003420a320110320313534e0043e064d33313320343120290836316c31342d36683320910237352d408f0236326c22fd801201393421fb2012e00225012d3221e20035e0063a033135372d419de0032801313420b72077e0034f216320cb0030e00514013233235741b1013735a0b60034213202312d3740dec01222720332303120403be00313002d20a101313220a2801400376028229701372d6145e0013d024d3636222b003921d722dd201e8029003323c7013133e00367003463cbe4031c05393430304533834f0535323320363823020035221c003120f2222903332031312151013231228a21160233306c211e002d228f201905373468313639215a20a5003940e52329012d3221fa002d20f001203121b2226c415003323038202035216e2021063420333568323524662023013368203903762d3933218d200e063836483835386c2077238a21d820548523e003b20543393830463160b2056d38343120352003207a417c23b423cf2185446201203324672409218f0038237822b9033430366c208c2058002d200d0531316832386c2097230f0237326c250d02372035204701302022e3003620b0002020d7063432203233762d60940031202a2450242623c80034254002353437253001396c24572006022d32322552253120270132362074012d342126404f20970033209702362d35208f2193002020452006003021070333316c3820b50335762d31e1089b0542343443454280e804313032203762ec0335203220215605314839347a4d23f90b203538356835313776363448200e225c0733382d363748363921ab20e9210b0031216a0038e0085e05444642324637805e0233393920fb40d102203720208f20f502302d3820942130003120f10133362259012d3540e801373024ee002d241b01313021ca202d21200333683237e2155b07343332203630397620490348323133218602352d392057209f22af21b140bb01763323a2013530221a213e02337a4d223b042039323368209d0376343748200ee008c4e2030c201f402e012033216c212a003621ae21ce0038218723ff013531206c003323c3012d382289245e00302147003141ac01203560c322a9228f2424032d342d38240424670620317635376c312259201b260700312021201401332022d7203f239d22e721be00352206209b004d25c5013430233b224721142022012d3522fc02322035606e40ea002d408240fb200a2069226e0037278f04347639396c224f21bc013136222800392229203802342d37638500342067619a24390034249f0034201e227041810138202276243802356838234243974220220020d602373520459920b2006820a1e10839e103fe003924a401333620fc25bf22ab218e205f232f003322c20020245a2062226c00322154003524f02071002d214123480033201501353920f401306c413a20d620e921d5013120217144342333212fe006190d222f3e3c2f673e3c2f646566733e\"),bytes(hex\"1f4d634d7572646f2d53746174696f6e2c20416e74617263746961fb57c35409e908bbc300110136023100800019020014022d012a003d012800a0021001ac00ea00200127009632801f2020103003fc014400320128010401a503490270602c03e6000170201e400005010170656e6740091f00aa00e60282033d00b40064000f0078023c706174682066696c6c3d222477631f2220643d224d302033313068313038307637373048307a222f3e3c757365207705696474683d224019042220793d2220261f2220687265663d22236372657374732477746f6b22207472616e73666f726d3d0022600a0b6c6174652830202d33323029c04ca0370061a0fe08732d63756c69737365201f052431247024326072e0062501632d2055066567726f756e642028e0032205666c5f24666ce0067d0b6d617472697828312e352030200140070539383020393360870c2462693c646566733e3c67206920f9e0098b003ee103200523433637384620f2202a1f4d38313120353231483638386c32392d31326837347a4d3136392034313848391f316c31382d386834387a6d383933203233682d37396c31392d396834377a6d2d08353536203536483331803d1633683133397a6d3435332d31682d33396c392d3768323440280430382d3638e001130033618de102b601234320d10146316095026d3935206b0539312d38312d209409383820313176316c2d362011052d3139322d39205706332031322d31362006083338683139346c3231208b033720343220d103762d3732e008610545414343463980610b383332203238362034352031205e00342056062039302032322d205d206e201303322d332d211100334003052d3130342d33207c03333420348249e003bb0544464232463760590f4d363438203337346835376c2d33303620bd403c012036403e0235302d20730431302d3236216a002d408021550338322037208c02352032207404372d31203140dc0038e014bf20a4403d023135352054012032200908322038352d3620323422f6405f003260d340650030406b00342025201120dd032d32372021c120020432312d313541e9e0086a0542393539454460d0026d353620520037206100342057012d3220ba0037203d2221023634682173e0083be103c801313820d9013933208c216a2076404220de072031366839336c334090200e21e4e00845e00381013130217601333921480237352d40340034421ee00832e103df0234353422ad04362037372d20a921e5003841b8216722ef21ea0036218220bf022034342168002d2013003420162121225103352d3438209001762d22700033218d201e21c52205207f013839404d200b220e002020da043130322d37e2090e05414137303335613d024d3235220e05333768333276248d012d33e20996e0042d013235602d0639377635682d396362032d38326822ff0032233d0031e109a9e0023d026d32392243231e220e003524f901316c20be04392037342d231541bf620d012d35217521c3206800202202239c0032230a2370023637202130408101353920a7423b0134482020015635e2168b003122d3003621d4013535231b2152002d2143216020ea016d312237220121432173073620382d3331203240d52208003442ba2169209b20e4003120342292209122650130394020231c20b22023223b20ad003320602380002d40182476003224930139312185203a20df00372346202d0337355636248c21b60038204621a721da225f23e0e20a30e302b6056d33303320372208003120a920a3013839210521df240222ac0030214f22bc0a332d353976313830483236e409bfe204b0003122d70339303220218f2438244e2045200703342d34332265224f22cf003620bc003821af212140262183206f222c0030252e033237302d20dc2047002d201622a5250642a2e3156d003840c321270438342d3532256301327621be006c210701372d23830031251c003321fe00312062032d333520215e237c0030e009c926560230453262be006d41b00038237d01313721c0218c233520a625620232332d257b003521d120db20b3002226c6e50312e3038c220d203620e1003120d52005233b210f41b50034401a2015003120a2249e41c1251921f220ff422a20190337312d35265200382072003722474022201b2252003420de01363226a0200ae0087e0539424232323460c32354207a01353523100076e301434808a79502726564e70eeb4083012d3967eb875a04677265656ee7064ee0036a0033279520a6036833316c2346006821b320ba2008218a013134e30cfd04424543443786f6014d334208023833682264202c2748033920302d21cb002d204b60e1012f67c08840b3e1057004424531363281b5024d3430208600382086e0007627aa002d4086e00096e108af0436333332416130006da03e4032002d20bd203c2088e0009540394088e102ed02676f6c2142484f0033421a0638366832377632280263eb003225ad262a208b00372011e5090005464545413746c03f23d905393268357631213e207a23480030e0010d002d44a105336834763132215c6120e0000c4097e00293062345393445314280560132392358257f20842056e00a83e104c4e001c30036202c00376059e2022f8204ea031da99f27ba699e62ec00356236e0023641b2e00b34002e253740364007003447f900308271e01b3a0037803924ff268d0137346072419b82adca08ea046ee10524e6033e01353628f5003025c223892093013236238a24270039240124a3248d240624004507003220a9014833e316f6270401203943af2a0e23170037240443ec247f23fd2407405e20032517477a0037255c012d34e109c6e8034e0035253020a127cd23172255209326aa4419027a6d33204b406c266e023320332629265b26032242207c012d36206527182576245226ef255181d7092f673e3c2f646566733e\"),bytes(hex\"10507972616d696473206f662047697a6100e000000d01c97ec601db0c1700b4015e0231a0161f03002e02ba03e30033020001008c014a014200da001c0105007802cb01380061060020011e009638a02d0804006302980078000a201406c802fd03de0014200b080300f001e004060050200b0c0100fa001403b30156005b0102200b04036a656570403d010101c00907006400640190019020470764012c0078016d6c2014200005010263616d65600c0864006e025c026c00b4200900b4202205706572736f6e2023e00318001e20180073602ee0043b068d00b402ed03202037e0063be00318403b173c75736520687265663d2223636169726f2d6267222f3e2440a8e0031b0170796152012d31401c016d6ce00b1a0032401a02312473e0051c10616c6d3122207472616e73666f726d3d22600a0c6c6174652831373120383630292037e0044fe008320a6d6174726978282e3520302001200602323436c0390b24383c706174682066696c6c20c30846414331354322206420350f31303937203432362d313537203238682006007a206b02246269e0036e07666c5f24666c6f6be004a4a07102312e3320700130204007013738200701303580ae08646566733e3c6720692067e10036003ee005890439423233336089104d302033363068313038307637323048304086e0042c043934303045a02c40260320353334207707343336762d32346c6012013939e00836e00263026d383420651037342d3232302d3430483530306c2d3130204309307a6d3235352d313248216c036c323335201e057a6d2d313131206211683431374c3530203239326c2d3639203231e00964e1075200362061063239392033346820060e7a4d2d3139203530377636386c3136201a02337a6d20500e3233763131376c3631392d37397a6d206e0836203138362d39363520070133682007e0096a04323844303081331039383120333230683637763539682d363720b3083836312d3536683630205a00362013e10948e003410231363820a320e204307634316840f50022e10676e0052d0036213f043068373976207560b3052d37362d3337406e0335334839803e012f67c1f7e30112e104cb03676f6c6460c1016d3520f100352282043234342d334282023435202007e00985e20129026d3639208521fb0336342d3920050335203934602fe009760032e00f760337352036203b053336332d35332213013633224d80bce303290541413730333560a9114d31313234203739302d333620393239763521c941ca0131338273092f673e3c2f646566733e\"),bytes(hex\"11546f7272652064652048657263756c657300c0000d0295fe12ff7fad46003401360131a0151f0902be00ed00630002011b003201980262027c002c01000078004603c00035000c0c010d0046013503b300370010400b0703b6039800410013400b1b0088041100e2001a010200c8026303ed004f0042011a00fa02ed03d4200b0006400b030032030c200d02460127200b010177a08e060104796163687440840250012c208f0ffe00b40064016800f0026372756973652019a01820140b6404b0025802666973686572e00118010258a01806646f6c7068696ee00031e0004a1f3c706174682066696c6c3d222477632220643d224d30203331306831303830761037373048307a222f3e3c75736520793d2220191f2220687265663d22236372657374732477746f6b22207472616e73666f726d3d0a226d617472697828312030200102312e382005042d383030292046022477736049a04101746f218a042d69736c65201be00918016265210220190524313c672069209a066c69676874686f208b0b22206d61736b3d2275726c28a04640100229223e202ae0028b600a066c617465283734208c013235202106246c693c2f673e400302246269e0037605666c5f24666ce00ece012e3520c8204320070531353020393560d1043c646566734074409fe002cf003ee1035a0623394242323234615e196d31303933203630322d32362d3132682d34346c2d31302d38682010036c2d333420140a2d3134302d323148363433201b1331382033332d32332032302d36342034682d35302016033820323120240020203007362031312d34312020460037400f043220362d3320aa01352d20320035201f002d201e0c342033356831313732762d373461d3e102fc062341413730333580a107353235203538322020620431342037372078032037342d206503333920332017206702313520200c0035401701323420ce032d3320312028012d37207601312d403304342d34332d209c0031209720830333392d332018043320352d38203303312d313720c3e0078703676f6c646084104d36383920323539683132307632363048200f037a6d3436224903683534762005042d35347a6d4139063430683633763320110136332022033420306820332100212420fe20ab0230203582c5e002f1e0016900372139063231396834386c20e8003240470039e007970523464645423822fb2285014d37211f20cf02683138607520c521d4217c20390134362043217502683236209c013436404e003360c000682090e0155501303921420039203960dd20400022225ee002b10623463942323333a083093034203136396839307623ac062d39307a6d3635206223b70256353940f9e00af3e00541223b033133326822100437682d373240c421f00530374836363920c540ba217ce008850541413644323980850136342203213a01323020e321a3003421a320fd403a01323480120832397a4d3735342039409400354019e10a07e2037d013234231e0137372046e20bba42fa205a022032382240003822ec202901362d2086226e20cf41ec403900332327214221fa41840031202c003523022220042d382d383742a2013438428f432a017a6d24d5202922c121d723500d39203620333720372035392d3420402e201a01323322c3012034239b05392d372d332d22fd42c100312006205442e0022d363220740033200d208f40bb23d4e1083d05433938304631813d00374043213d422021c3e10a17043934303045c1f1224d0231393823c201763224360331317a6d23960037e0030f238921b3e0011f212902203534e003112010e009210033e05621e212c7016d3822f500322196226920dd21df006c2009216340dc0035e00116003680160038e003160038e0002de02716e00790054434423739416194016d3224f8638a2244003061ef25eb0020257d22960132202320003521570038600b022d3232272a002d20132732e30928e0035502313638205501362022d620330032e01d330239382024f5e02467003225b3013639e0013322ea232b214d00332311003722b82578407e002d20d22015003925e8224942b422b2667801203420e00033417ae00a18e1133801343240e2210c231b02382035237b44a1012035245800322013063133352d392d32233a206821e121060037e0144f003626eb023537384348003621352007265f22f40033239f20a9c04b204d204ae50a2c01464661d0004d24d103203731322518274c43c50036233ce50be0c02f0036402f2367013538278e27420035258c212b01333026c104483336376c26da01313724f32531003423f00348353131e00213013335247905483836346c32215b6027e10736e0006b0035270f003723fb01313726ac0033219d209b003360e3227de00115259f4015614302346839209721c660c782cb48cde803818938e6063c01333925a56112006d2594221722ba013138282822c728cf24d62869214e003727d404763138346c2606222be008bce203d60132364573218023b300352275212d2049259604372038362061ff0032239c220a600d20bd25db220b201623dee10984e0035b0035257400302332e00135259d266e80f2e70317e003350031227501393728a3260f289721a98035e0156b003166a02070e01835e100ba68e901303146fb01376c2664212a02483533e1082de0002f0035412904333168333129e500372696003928c1211b003526980537483338336c23810333346834e2092eea043d003721550530393220393346e8200c4315e009dde702512301003824c324cd219b00312bd5033130346c401341f760b0423f4b3e0020ea01c4400ee2064102666666623e2c2022b1205320480038ec031f2c4702746572ab94076d616b65426c61632b930020eb0cee0c2f6d61736b3e3c2f646566733e\"),bytes(hex\"05506574726100e00b000d01ceecfb021c9e1a006c01750131a0211f08011d039f02ed003802000100c80042039800c2003f0102010e0300038e00141f0006010300b4012101a700bf0113021d0500780266031300320032011a00960202c30309e0000b02bc01efa00b0464031101d6c00b0500026a656570406f010101c009201506640186018600782007052c007801736c2014200005010263616d65600c08d200f003d8041000b4202c00b4202205706572736f6e2023e00318001e20180d3c75736520687265663d2223706520fe062d6267222f3e24406ce0091b0663756c697373654020063124736c246269e0032309666c5f24666c6f6b22202047136e73666f726d3d226d617472697828312e3320302001400701373120071330343529222f3e3c646566733e3c672069643d22e000800a3e3c706174682066696c6c20970746394232333322202021114d302033373468313038307637303648307a4043e0042c044143313543602c156d33363720343634203438362d37342d343934203235e0093104444530414480310e31313535203338312d3339322d3337400620706032012f67e005a6c10be0057e05454438413030a04c013033203d0635312d32313520204801343520f7053436563337316051e00fb60635353620353733203205312d3138332d203d02333236e0093202354138c116123438352035303620323638203632306c313232203f0038e0093302323844c09e02373234218a0c35203137352d313039203239372196e10a1fe0023301393420330930382037332d383620312064013833e01364014d3820f70c373238762d33306c32352d323220d9042033302032e10a8903676f6c6481390239373620620231203620fc00762034056c2d38352d332002203b8040027a6d34211c20b5003420820b342038302d317a6d2d38382d40930d313531203939563436397a4d313120a70631396834366c36207a033634322d218320c1e1081ce0007e20b422a4013333623b0232393621c3400ee007e7e0002f006d402b013538208b205b0033223e00202073003821b3002021510a38372d32352032327a6d32201b093136382d32332d33322d217c013332e00752042346374139c19f003922bd0537383120313920d509392d3239203930682d37e20a08e101a0e003ee20860330362d352075043531322d35409b05377a6d3636362156033220312d20ad0132394152013134401d415e22f7003721980020217a20c5003720d42154013235421b222601392d2088052d34352d343820022010012d37232102372d3621d701342d205f06392d3431682d36206500342227219f2107219f42fe0032e1086e05234239353945a377003520600034208121c00335362d3223ac20702088013432222a003421dce309e805443439394634822f0035602a209f20c907307635317a4d323620f60338326c37205701203721f201342d20bf003441854051006820260331363268202e20e1003422660135356013013335a0130031225222de24a72023017635e108fd05233934303045a4950d33363020363735683233763539682037017a6d2472063138356831377640660031211300332112013934602300336023054d323738203421d402323776200520f6e2080f0545414343463980e4003323360235393641a82319211201203420d7219b20a5002d205b0534397a6d313620eb0338306834233221d820e4013536205801366c21b8200a219821b60033430c401e033276313821030232396c41bd0238327a20c822f50633326834306c2d2337403f40200035803f22c4204522d00034c0200031206040cca02020f7003222d804313836683320622041406240da208f20810038416d24dd0038e0021e003740a0801e22db006d224f013136203e0038603e2080003440800034603e00344080003820d7003622a22396406001302d22894355227f41150036e20968e3035422542095013038208c003122e2003523082431203d0039e1087be3025620b42451255f023631354247043237312d362218410a00322091032d323868234f006c4341043137682d39e108c9e4002c084d353320363731683420d20232362024690034200324e8e00453044839326c3124ec80cce702a3046275736831e704600074476b056c6174652831228507373635297363616c200d022e31316761092f673e3c2f646566733e\"),bytes(hex\"0a53746f6e6568656e676500e006000d030cf3e8ffe414d1007f01360331a01c1f0903cc012700240046011e00780288012f001f004b021e0b006401c70109007c0e001f021d0b0096013b0137001e003a2025146402ad03d000c80054010200fa03aa039d000a000a20171fc803b602da008200aa011c00dc00b4030700140014010300b400870226027b0005a0010000b432a0760e01003f02fc00a700a0021d0500c833e00015060e013e0427001820421f2802000130027b031301e0023f032001e000970164007800be01660096003c011256006e0345022c012c030b0263012c0416019d200b0287016c20230217019b209a1e740298017200ee01df00fa009401d501400087044b01a4ffad0448032a0000200502846275807903627573686009210b081101200064003201232005084b012500490068012b2005028101262005029a0128200508ae012d003600c30131200502d6012e200502ea0134213900022005023600226017005a400500746055040000747265618f0201736c200d2000070102706572736f6e200a069600b401e0020e212801640021840301666f7820152000027800906018003c218c002c200d0b3c75736520687265663d222361e10c2d63756c69737365222f3e2433e0031d0362752d352014e003128030017374221d20190424736c2431e0031e006240a11722207472616e73666f726d3d226d6174726978282e352030200120060638302036373029203de0043802757368e00b3700392034013020400503313039364035012432e0033707666c5f24666c6f6be0043b607e076c617465283632302070606d0f2462693c646566733e3c672069643d2280c9c0fa808c4017046c65667422c11f0074e10800801e6061e004e0012d3120a720a520a7023736206071093c706174682066696c6c21690762396339363622202079124d302033313068313038307637373048307a22202ce108950567726f756e64401a012f67e005b4a019c05a0546424431383520c2606f20600d6d2d353820353536203236382d37206c0b39203131362033322038382d201306203133322d333420ab0036607ae00037003420ba1f363932203234372d36302d3136332d36342036322d32352d3231382d3833682d0733306c3139342037200d0031405205313235203439202b2068003240ade0004d0d353339203334372032373720313520820239203520280b32312035332d323734203336205802332d3420690334342d3440a503302d35376093e007f38272a05da153054246363645456153026d3336208d20ac00332068062d362d35302d32209b067a6d343131203820860720342d312d3531682016605f60a5a0470539343030453380470136322043209b0032208d0c2d352d34332d313820327a6d2d20ac2015213b002d20aa201500396015033133382d20e5402c2074215d00354016208721e3e00614013230203f06326833346c2d38602a20b0205703343320306014003220fa209e0031e0139e024d3638416604386836326c219521a5053720357a6d312070013535219b04326c372d3420a30036228e0131332175604c0067c0e8a130a0fd2229014d362175212200682196056c322d313036203620f1036832336c20f7023135762376401c20a8003820d4200a01336c205c003122e94027012032206401203141df002d216e01313240206073615f2061026d3536224f0239382021eb420a042d3268326c2251023320372001013434203e0233203220c30132362053406c0232326c2088002d41c802392d372078003521630533356833356c41630031202041632288208f0532306c352d3521db217a22ea013234e0047c014d3321fd0e333235762d31376c2d33332d392d322198207c0032217a230c403500312093003821d420c5200420f3002021998138c0c40a4d33373820343331683538209b22ad21a8003381a842a76026e20a4b003220a2013430206e20b32057237201203120020039207a013030224b03682d3633420c003123760032214e003021c40220393820db00372128073139762d38366c38238901203420200032250601363520e9234521f2003120ac013530229343c74003013620210780de02372d35218f80a0e00e9c014d3522e800342271063732563330306c614441e620582157013637201522a924082424026d3339209e2260013436226003313838202133409140cb21f520e105682d35396c3120e8013620428083c4607b455463bd0c2d66656e3122207374726f6b65251205414137303335c010082d77696474683d2238a38721ff0038200301343620d48458e50221e0034f0074e6016c600a65f80430202d3435462ee00a830032c072e019830236203722f6013436423064dce00b83204f6078860f600aa083003466b18082a21fc0f4231a014d39205f0039241203313276382140817e2510013737e0061203312d3735e00312219a4028e00312400f0020e00438458b429d86eea799a08505394242323234240804656c6c6970280f01637861790563793d22353020d00072200f01393020072010013933404ae0032901323126c9802b21aee0092b61f7a06ae003f0043735203530225c0634763235384837e30264e0092c239e22e825cd263202362d382623003220032493228e25334286238801203620084595201883fb04636972636c80d001313720c940a6003442660072201001333140cae0022202323434a022013039e00e2220e1404302333737e00e20013237a10d013235413121300030e0066501333622e66044003280650034e0072100392017402000322019404200312031223941bfa0ad4346007429ff601e00322071a132a1ca202c61754026894ce0051f62702531006124e1269c256b0020242b0b307a222f3e3c2f646566733e\"),bytes(hex\"0c52696f20416d617a6f6e617300e004000dffcd9dfffc62595a00cf01800231a01a0d0802ed00b901440104021d0500c8201410f700bd008b011d00960117004d0091003340181264000e008300760026010f006401e001570056600b1f9601a402250001000101240258025c0409017c00140122032001e602c7001a00051a0122012c32205540001002011b0232000a000a011e00dc00d101f3a00b00b4203f1f2d01f902600056038c029000ab032e02c900ab027502cb00840442033200dd040809030300b502f402f2201708370265007c0084021a208404b90210004420570c1000390155020600390297027d20170c16028300ab0027022600796275407c0500006275736840f50201666c200d20000f0101645f626f61740000064006400398200100c020dd192c0078023c75736520687265663d2223616d2d6261636b222f3ee003150362752d36e006121968757422207472616e73666f726d3d226d61747269782831203020010a2d31203935382036373929e00636006220310363686573e0061604747265652d40b3045f6461726be00c58022e373720590c30202e39352035333820333831e0075ce01b450036204220440937362035383920333234604408706174682066696c6c21021f3634393632342220643d224d35313020343033683130763631682d31307a6d2d0432332d3236e003111c3437203136683976313636682d397a6d323920386836763730682d367ac0e8a05c0339424232405ca16e40b10031e00bee002ea0ec205a0530362032303060a6e102a840390032e00b3902312e3920e00130204007022d313820080036e0083c4169e0057661c90a6c61746528323020363933e0076ee00931c1f0012e35206c206520070631313120363832603b0067c0f1a14e40110069215240b7e0057ac04820446239013130208200344082e1059705414137303335819721891d2039322d37362d31336c2d33392035302d34382d364c2d35362d39396c2d204216312d313234203134332d382d32203132392d31363420332006042031372d3220ae03302d39352008202704332d33322d402d602a0239203920cb20630248356c20d20031202a2024013468406b07323120323620313320500033203820270034220e1520333420323720343120382037324831354c342d3436202d222b0037200920cf024c2d3420b2620f81090463726f776ec0e32119094d333238203831633438233c002d22e1405a003420610433342d3632205e03382d3537208d0737392d353934203420920433332d363620b72009003020992006003220a720b8400c003720c40030212002313420203a40b70330392d33200505352033203337605300302026205a0030204723ae002d20190030200e207a003420e001333242bc631a609e0b2d31393768313256323348332307043330203830430702323230a31a20860120394022013132201180ec012f67e002430b2d3236332d373868313956344022432d20ad4047e00834203804243124666c8081a33fe2030401353621e405303239483139216a00352198063868393776353221a801376c20e120090f39337a22206f7061636974793d222e34e000d1e0094f016d3240f4003023cd003921b70030225520cf21ea2139033139312d411501373561bf6112e00b4024a201353624fb21462257234720e1012d342156220421a50032201d204f43d302203233212801333420b721a2003221c421b50030429d063436563633356c22ae201503352d362d209020094038424c208b002d22ec01313021dd02382d3821f3206a0034e0149601333320926039212f003122e721c9022d3137407101317a41b42325003120f52339206a20e5218f22886053e4027102666c5f218d006fe50e9d003223bc205e200700332134013738e41a7302726f744470002d43ab003920842162063436297363616c2485012e376446e0027f0370616c6de40df102202d2e21a4400302312e30261d02363620c486e01c3f062e3332202e313520462004200d416b033620363964c90924322462693c64656673c3b846fa063e3c656c6c697027380063225723980022c2100c393430304533222072783d223424ae0072201f023131222750e2033604433339423720cd2358006d23df272c20b723110337386c3322b7617be0042f043432443338602f24fc003523d5036833316c225b02343768e116ff004d622f003521d90435356c34392431605d235ea488c7f3e1042d0074e70091026d6964e60b67022e383821f025b1002e21ba003426a4013338e60835e00144e70fd6012e37863e022d2e34247c0038259f0034e108f8e00145e00f8a0037c08a033439203424f7013336827ee100a3418b0232362261ac201ce100aca69c61ac003222bc216161af0030e106af02247763817b23a20038260801303828100339364830614a426404776964746821e9201901222021f22026e700e508637265737473247774e30e3c2145433a40c4022d383880bae102fc02676f6c21814229003424f1205865ba23c422ac013620260a013238458c24100037200b23cc00384005003425d1269f222a01333960a5e00c5102323434273b25ec0135312043012d38248c003922f92492002d466026d2263327d5243024744012272903362d37762321e00755e800dc20aa054d32393820342349290c20b12709003727d403357a6d3126de0037250d01363720c52015003121ace0134820a10332203438450de00331016d3929c100312093053335372d373420060036268d6048418de9025e002d48bae20f3901322e20e2417d002d217e033320353927190036ea1257e20e80204684ff2046276e0036209b013237643de103750623464644423139611f026d313528b421ce013238481f29a84167216101392025970033260f0232763243e020da002d21cf033534633320a8264421f525ff003328f60031215021ec21a928192027013120210842170032290c220601313621d2e12a12265aa11240524256e129114a7d6044002e429300374615e02b44228c8045220446570033a3d8e123e3e0064520dde42ca9cc3a002d4c80218f012032e21328e40fef246341c7404600352046003921ee0039ec09820542333830344262282a1523f30037296801376c2a7527a4283c01353425f401306c22fe0035230a29db200d29b7003529c2298100312852212f281b284423c12240e80920e00262006d2a18215d226523f720d6223900384266237025da2754288529a82b3c29b801386c22e029752681012035467b00312b222a90208600374446003949f8229b22cb02303520298328e601356c20860036486b20222d23e01020e50675e003a4004d4bbc0135324071244d2092003120e222e103373968322bef23c6013832445d231a4af423182311635a02352d34211320d10136202b8740852c2f00392db0006c2033201e245d209201306c202720c5288300202539238b2e21296d023631764a5d0433372037762c59206200362b4300354af12a740031458500352a3000382b1901386c23a90038856ce20ca0e21114a70428be22102a07e20b14c6ab455d0133302537003120732686ce970034259a013068ee0777e50809e00f8442d6012d2e260a2f1d40e22cb42d33e907840074e80016e01f472556f00906e02846003426282c94e0298e003240d445e301312e2513003325992d106046e7020fe1055b4023003622eae1015b00383035e0030f012d362e372c6ccff242b7e126f12051200148fe003129fc013232e012dae611742041244965a7260a0132328672e00c89e0104441f0411d234d249a02323735611ce02543808820d34c4b0033a086e1035fe603f90138302aec24a24c8d2146003349f7207b2003222a0134382826208a4370201c00312dbe2744e0028d4b7cf20a77312840c6266e270428af00358a45ea01e4f200780020ed05b8a0a723542506002030f900208950219720a2274f0038608160cc60240232203765014d762b53253243af003432060033304e00202d422bcf023320382d4c012d33e50277403c2aa7033635302024754916203b22580032245300362c01247e25542919002029bb254902387a6d30de60162d1e206920162020202d002d439e01332d2e1720a4258b231c002d2959013736200e033939683324a82c1e2141202a00322a1b2d1b2509483a49c2201760ae01313920bc2002287700382c4729f0268c00332075209b20d421cb25c3285600372569204f25edee02fc40cc00362eed0037208a227921c3202c20272a200033e006260037207e00372a0c2ab60235312d20590035268e0120354587013235209c227b256c40c2401a200b20ce017a6d4a8b312f22070032401802342d3920c4ed02162080014d3420130136352fe3003620f00035337aea0248201f3397201f4a6e6708205b323026df21412934002020e4313b205e25e40135202e32205e25dc20f721200231363243e36033200b2066e205050139305154262926d731ae3261272c0036822ae201730074252c0032c261e2057660a02f8322f82b05268346500031265027dc2385002024ab231021af2304612327da213b301d275320b420cf033168366c26a820b027ee21802036267f04333268376c221de2037aa07ae60340242b205e013071206126c2228f0130634088200e2733205c285900322a79207201382d217d2a90208920182a6c229b2010212300382bc543a94a2140100232357128aa2001282f2113201b01386326ca217229bc23f3222a0034202100372786255b27420534762d343771234d20bd24be0276353540120235357120674064003727a10331763538601501397122622016219002316c36202d013437401702343671231d20fb2742007622f60033220b0132712911208f213972c2419106636972636c6520d482002d6c1586c34e1d2db44fc8200603723d22352e29e105332483e00c406555e0133fb5ef082f3e3c2f646566733e\")];\n                return bytes(motifs[index]);\n            }\n        }"}, "contracts/motifs/Motifs1.sol": {"content": "// SPDX-License-Identifier: MIT\n        pragma solidity ^0.8.30;\n\n        import \"../BasicMotif.sol\";\n        contract Motifs1 is IMotifData {\n           \n\n            function getMotifData(uint index) public pure returns (bytes memory) {\n                bytes[7] memory motifs = [bytes(hex\"0c4368696368656e2049747a6100e004000d013b9b6dfab88fa600ee015e0333a01a100501ed00c5009e0001011d005001eb010e600b0a1a0064022c013d00270156400b09033e01ae00eb004b01002023060002cf0258005c200b018234a044080100200147011c00322014012838a0141105038902c700910061021d05009600100324e0000c1503530303001c001b010f00c800fe0414006d00040103200b1032042102470010010200b400036a656570404b010101c0090100322062044501450078209f05580078016d6c20142000070101706572736f6e200a002d20a2027b01ab20400264001e20220074e0092206b400dc038203c720078022153c75736520687265663d22236d6179612d6267222f3ee003151c627573683222207472616e73666f726d3d226d6174726978282e322030200120060739323320333734292039002440af042434246d6ce0034360590663756c697373652024e0031ae0115e0034205c205e08342031313820343332605e0033e0153b60a50b6c61746528333137203838304034e01532c0cd0036206c206e0836203937302035363840390324322474e004c802747265e007c06012e10a1e012d31204e0a3020312031303130203836604f0338246269e01c8e01312ea03e2007023736372044e009cb07666c5f24666c6f6be0047de1010102393335203601353540780a3c646566733e3c6720696440f181e70a3e3c706174682066696c6c21fd0746394232333322202020064d3020333038684073077637373148307a222042e0042c044143313543802c20260039220207392d332038303056803901393260330067c05d05394242323234c07220630e6d343535203331322d3436352d3434200605362034347a6d20b1063320302d34313960150132304015e0007e40380238363180380438382d323720060337203237e0052202313331c05c03322d3333205c22a000336023012f678003810a61bce005da0541413730333580da1939383420393138683738763533683138762d3835682d36306c3420b320090431396c2d33412c0076200602682d33e00ff40c636972636c652063783d223837205b0563793d223738200804723d22353940dde0022102393731802102363938e00d2103313036368022e01044013130216d8067013237e00d45e00067013738207020890037e008890030208060ab003622184021003240abe10542624dc3db063e3c656c6c6970245340eb013231207a403f01383220eba26705454243464641204e210c01313620600072210c0131344058e2046104323844303081860c3436342032313468333476353621662226221902203535601100346011e0143f003423090539376833327621cc41a6016d2d43530332376834205220404279605203346835326011003540240134316011003980110039e00023013636601101363640116023003780470037c09a03346838316023013831402320ac20118047013839e007ac03676f6c64a0e9003940e908326831353076353848200ee0122b0035202b0336396832227e02353548200e2069013334411601323922b0013448233da012213b013637401201333840b324192012023433356012003540a2403820fc0130336012013137e0003801353741100348323833e0001201363420712012003441118038013730607102323135e007b005233934303045223f23bb014d35212d003221760435377634322164e302b7057374726f6b65202fc4888010082d6461736861727261422506322e392031332e204ca01c04776964746823292267605e0937352032373076343337e2140f00372654220f003121910031216521b5e0082e044445304144a05523e241680131322058003323f583e6092f673e3c2f646566733e\"),bytes(hex\"05556c75727500e00b000dfe7d381607cfcd53010e016c0339a0210d0100d0038b005d00150106012c33a0141f0600210214002100180105003c006204090340002302041a00c803bb027700220e002a02051d006402f80253003f0022800c029f02d120190023600c07006d01f9001b0016400c013c31a0550c03000401cc042c000a010400412061046e03fc006a200b1f640357021900860019010700640100026403ec03c40064ff9c0082033b004eff04b200b50337400f0b0189024f0059ffa903aa01f0200f06c0020e024fffa7200f14ed01f0ff9cffc000db01e10069ffdf010a01e5ff9720070adb024b0073ff910036018d40370300bb018d402f030087018840170103a98017030444018340170103fba0171c2f0183006effbc03880185008dffa9022a018b0076ffcc020301800093200700e1202f008a2007008b200f0e97ffbd014201830111ffa0001b01884007030278019140170062a1870362757368410304026a65657040080001e00009212a127801ab01c9007800640258012c0163616e6761201703003200416018003c402204007802636d201420000001e00122066e008202e90316e000220d3c75736520687265663d2223756c22060a2d63756c69737365222f3ee0031b0362752d3820120024408e012431e003191c7472656522207472616e73666f726d3d226d6174726978282d2e36203020012006073539322031353029404001636de0083c20560362692433e0031707666c5f24666c6f6be0045860630b6c6174652832383020373935605010393c646566733e3c706174682069643d22413a05222066696c6c20d307394242323234222020171f4d2d34302d32306837356c2d3820394c353220326c2d342031382d33332d342d0b323320342d31312d362d313220090f32312d3720372d31352031332d377a22210fe0006240f3065f6c6561766573e00d6901383820691320322d35362033362d376c343820323820342033801240660132352076052032322d333020680632302d34352d35208d806a006760cae10591a080a0d90546444530414460d9026d3133205a003620ac0334382d3120bf043437203136e001b2e00a31023536306031043238322d3220ec0038210c07347a6d363936203121250338332d32601c012032808f60fac0470439423233336079004d40450b346831303830763737304830e00974044143313543602c056d2d353920352150153438392d35372d3439352d32327a6d313230362d3432200f16302d3331203439322d31397a6d2d373330203830203730219320d7003020d300332016023534392095043120383631413b40060036202e0531333934203241ab0737372d363620373820170038e0078f03676f6c64808c043830322033205e418c0039205d4009003322000036403c0034205221fa022d3137220a208e0033210821a9013920202a2139013630e2000ec1130432384430306059004da05902683136225f21fe003220580035205542150033e10a2102374139a03a026d323720864094206c0031220b02382d38221d013020208c0332342035203f210802392d3720e9212f212b03317a6d35210b21b22152003922c5003420c200392073002022060031603540060237372021d222d7216fe012ba016d3441430337352036221504312032352023b82064218a203f00682061006c205f003421b3003222de04314c36313340ae026831382180012d34217520930039424e213c0332203931606c012f67e205cf00742431007322cd82e3400d200ce402874011e3005d0074e40858042e3632202e2190002e20a1022d2e34209900302003013132440de02246032d2e3335204740432117804841260132336048e203f00541413730333561dc026d3833243b0038215c219200382003215d00362122002d4337003741a121850031205903372d332023fd003143f602312d3921cc0035226a003421ca003540250032241820232310003223fc21a400398198e1210621f42001022d31202377032036313960b5e0223e002e2141013537200300362044092e3034203839372036356554e02247012d2e20db002e20ce214600382004219c05363839203732e02748002e262440930131344045033320363723c3013436e026d6208e20d3256e21de00332004043637203936218d003581d5428ae10623e20b622037215be607bb0a3c2f673e3c2f646566733e\"),bytes(hex\"0f52656420526f636b2043616e796f6e00e001000d025d0f0af9ba9b5a005a01390475a0171902004d0376006600850108019001fe03bb005c007d0123012c70a020150303bc02920022003a020b1e0096034b026f00320154600c0702f50305001d002f600c0064c02f1501ab02f100d9001e010600a0031b01fe00b4003b010720340bc3036700d00021012200fa65a02c080100f602b4000600114042053200016a656560770001e000090900640064019a019a00782007132c0078013c75736520687265663d22237265647220ea0c2d63756c69737365222f3e2464e0031f1e63616374757322207472616e73666f726d3d226d617472697828312e34203020014007073234322036343629203ee01d3c022e3735203a0130204007073130323120353530e0223d206e603d20070636323520333933e0223ca07908352032323020333832e0223a003480f24007013238c0760e24626924653c706174682066696c6c2154154632384430302220643d224d3135312037343561322080b30131204044047a6d33353720f903356134208053023120382008077a6d3136332d3431e0032f003320ea077a6d2d3631382032e0034660160639343920313839e007174188e00391053634393632348091013532216d0438613320336144023120364049e00031006920b581f5065f736d616c6c22c0d5e003430338303320207a0f682d3331762d3332682d3532763935682005052d3333683331404e012475e21d0b02352e316088400702373436208e81920067808a15666c6f776572223e3c636972636c652063783d223733215d0d63793d223931372220723d223232e000a60545363333324140cee0133000312040c1ad014646402d012f67e205bba077e203f96304056c617465283222bf012d39e209f0e00a34a32e022e363760e54007013334217c0037427705247024682469e1032703666c5f242045006be00478a04301312ea243200706333632203930354044043c64656673c12fe307d0e2050705463942323333820722fc0b313068313038307637373048e20202c118e0012c016d32226e073239362d36362d3120020b342d3435682d31336c2d3237230a200d801302203137220b0537763437683122964206e20487044646454238217a2263016d31237e003242ed403b210f238f027a6d342316211d003220530031204d003142dd22fc0c3333372d31304837356c35332d20630035e0145a014d3122d2043233356832208922a4013237e009880441433135438088062d323530203439238901373120d3002d400600332372083734342d373220343220a006367632337a4d2d23f5033638306c4021e0022801313220c0023132392039003020172047003040400022e007fc02354134c17c0237363920e4212c0339387631414a0235763220a905397632376c2d225c043539683139e00cb60038a0b6014d38212706333333762d373420e209317635386c2d33342d3220110035439109357635346c3336203631218b20ce60e62059202201392d20bf0031246725b940a600244635e103a803676f6c64611c034d313036211804303456323820ad0233387620fe20ad21ee20784011023076342078204d0031240a013236208a06347634306c3538220b01366824ce037a4d383621d1013633408f203700202121408140a7003425082028003221dd003221e000562025056831327a4d37245f0835363276323168343120ba0d3134392d33365632313548343130218b0068223602763236212c00332547405122a0003126472087003840d2e003cd042346374139c5900a333539203633396836316c255324c0405e003220460036214120e104327631333022db04356c2d3833213c012037209c002d23bd210702313031429d0434382d383540ab037a6d3539204d003422f2042035335632404020d74189231721220033411a2034233900344630026833306170e0059de6012e2273023820342050003724250339683239225c01343121e1032035372d232b2067003441ca0334302d3241304059037633336c2009062d39357a4d323021e0003023962719413b2351012d39442c01364c21430620353232763334235022ed222041ac25b1003221c620ee220f2281013636433201323621a922a0033620383920bc02203733238220f4052d39347a4d3125a4013836235d0636377632353748200f20a62448092d36384c3938372039384041e20abde10286a027007622bc202a224be10817e20083026d3337408420b122040235203722c002312031236d01354842ed00322338217905762d34366c3123b2013535e109ff04464537363662d0036d37393040a0032d393320215821d9013348210d006c203601203621e90033224300382102016c38215222a203373748382498004d226600364232426001333923b38265092f673e3c2f646566733e\"),bytes(hex\"0954616a204d6168616c00e007000d019ea41004a6d41c016601fa0438a01d0d0100480410039b0005011a019033a0141f0400350318004e00660102012c002a01cf002400bf011d00b4015501dd000f000049200b0846033c01d40019007e200b016431e000380c0c021901040019010000410327e0000b063200eb01e70261406e0900320133020a01c90004400b0032a0380002e00f380b0400010601cf013e006f02694005017475803205747572726574203d09012a01b8014900a70280400505018401ca006f2005008d200500b2600b00b2400b0102b4400b20052017010286600b0086400b0d00e700f400640139013b00540351400b0102ff400b017272205a20000472726f6f6620070800014800e701b00270200502570200203600de403c03011301a5203c02d8020d2005028d01af2005002720780639015401620351402f2005202f205a202f200b202f2060202f2005202f2005202f2005202f20c60025203b0270015b2005009a400520d220110102c8600b009e6005041c006d00942005049f009474758175e101091624003d02250064009f0218004f00ef020d003f012d02072171005d20b20828018501fc002003fb40230103994023010349402301030b40230102db40230102b3402301627520f12000036275736820060200026ca24d070101706572736f6e2009049001a4041a224600782070047800780166e0082205003c003c021820674022130f001e013c75736520687265663d222374616a6d42a5112d63756c69737365222f3e243124666c2432e0032580224086401f0333246269e0031d02666c5f20311a6f6b22207472616e73666f726d3d226d617472697828312e33203020014007013534200704303235292220641038246c6c3c646566733e3c672069643d22e00889003ee00563026f6f722037202c15636c69702d706174683d2275726c282363706f6f6c29a02e06793d2232353022c0de08637265737473247774209d203c052f673e3c656c203f21000363783d2220910222206360330635222066696c6c21120842463636454522207220200137312007201f013835403e0067c0220545414343463920724086002020bc104d33363420333537683335317631333148200f007a4032e000200f34363920323831683134327631353348200fe006200e353720333237683136357631363048200f602040b3e103b00475312d3130405ae00214017272e0091323a1e0091407682d67726f756e64403f4058817a635de008ffe102cc097363616c652831202d314167e000d3012d31206208376832345636682d3280f004636972636c215d213401352e215404723d223132e0056e00746433c13da1750639343030453322614c082d312d336832762d37205561036071a028a17b802800332250036836562d207f0036e00829e004520a342d326838762d31682d386028e001fd825ae00564054644453041446064026d313322ba003121750434372d3330200603362033306043e00396e00331023535386031053238302d34384006092034387a6d3637382030400d012d35208d201400358132e00346056239633936366078124d2d3520353036683130383976353734482d35e0097502464537e0002e003240a70935683131323776323548200f207302343520200b033435386c21ad0939362036303468323735e1092de0024a066d2d373320363620b501323720350030215c03376c2d3320100b35397a6d3132323620304c372005233f0068201aa01941e560cb43ce4394c2520224776380d101353780330a2d37324c3530203938306820036038e1018fe200a3a04da1f7004320290046238e436d0232303121510037207b043876333648200e6043607ca02e05443439394634802e02343833239c003221190033239c210d013833e0082f044139333345a25601353020fa0031222f023076372259a0a10063a2d9241620f78437013431209122e2400fa078a048246de303a0437446c3e304566361046c617465282050042034363829a368012e3123682041e40070a2cae00784012e32808602313233a36b02362e384038e005abe000260235332e225b20afe015260333382e3760260039202e2086419b400345790050257861e065762091e002e561f3402fc028e5016d4212663f613fa13d2006a13404394242323221ad0072215c00332016457301313460ca405f403d006d66a68043a6bc0e62752d3130222f3e3c2f646566733e\"),bytes(hex\"1347726561742057616c6c206f66204368696e610080000d026c422e06ff8e820117013802318013170009036400fd00340001011f003c0309021e006600030105200b025a024d20171f2f010f007801d2029100f8003902201f0064010a0302001b0015011a0064006601030a20240d9b021d0500c802180349002c00262018089602e2036800d7005a80180bb3042e019800130102012c3220734000080203ad01ac00070007202d092800d303a0008f008202205f03c8000162c0b12009016c6c402d03003200962005167404b0006407080258013c75736520687265663d22236340e3052d6267222f3ee00916006d401602246261e0091900664019e003161f617369616e5f747265655f3122207472616e73666f726d3d226d61747269782805332e313220302001002d60090738363820383939292076012432e00e470032e00b4703322e323620452047600906313539203831364047e0034505627573685f33e0043f6092126c617465283131352031303237297363616c652051013432403f02246269e0034207666c5f24666c6f6be00e44013634404401353060390d313c646566733e3c672069643d22e1040a063e3c656c6c697021700463783d2232211b0a63793d2237222066696c6c217f08394242323234222072201d00392006201c01362220cc0370617468c023074141373033352220205b0c6d323520322032382031322d332005003760020b382d3320322d31372d31392d201f012d3220050333352d3120020e372d37682d37326c36342d32372d3820040e6831346c392033302d34332031397a406ce004a2208540a2002d217ee00aa30032201640a40038e00737207ba038013138e00c390033218fe00d3901333680392106e00a710031212c40370039e00771a14b0031e00d36013230e00e36609f40e1418ce00a6f20bd406e0035e0076ec0a500322020e00a36003120c4403761bde104502088406e00352007e00b3720c640370037e0086f212fe01337204e40370034e0073721a040360033e10d1620bc4035e008a50035a06d00312267e00aa5e00336012f67e20ae9003222e9e205b3013644424a62b3229807352d3220352d33342009002022a206372d3231203334238722bd04682d346c2d22d0003122d022ca10332d32392d3130316831376c3134203636e208a3201d80e42272a0ac04463339323020150072234741a940e4013133e1071b0033224b411c002d4175e00a3963892382e209dd2069403800352040e00a3741354037e108c4012d33c18ee10157e003aa421c4038e0097040524071002de00e3940164039231e242ee10193e500d0e1058f0446424431382083418f052d3331203237215902392d32418200344450003621790838203836203430203621ad023520342017200b003020810320353220201d2535002d2020257604392031343040240339302034203c03322d34324018249900392048043476383848206661b9e203160442384338362299c08601333020490635352d3437203225d800362098003822230038200d0039604f0036222905307631353748206de0084e0446464537362378604e003220c80034204f02333431625d003625a120e20137332263013232e0083b05433344313743803b003520c520d30234363420d0002d22740237312d200c022d3930e00936033938304623b3407201353920f420fe103134332d31333176374c353931203437346035e10793274de1050cc5fb404a003221010035216201323520fe2318043230382035859de702ade60ad7a75f01352e2030471703312e393425fc003321960038469ce1047ee0037100384161220502323738237c0031212b2037003760b9e103b10046e20238023236392209266b0133362653221a003621f602763234e109e7034637423044c020da014d32215901373382210437316c36392266e109cae0039a002d241602333735210c20cf0736314c2d35203634e0149a004d23d1003122c30030227e22b90236376c42c94196013039225a013133e014d72470012039273b21f1013432289c21c4013336e009d4e103fa003723050034222b0536332d35317623ad016c3621c001307626542173e107fa292ee1055544ac00458245014d3821b021f60068224002383668e30b35e00278024d393020cf0b37346838763135682d387a6d22a822fa02683333803d80e9e20233e8028e248b0074e90899012d2e22c1002e2055002d8004200d003729550133376915003ce2040be102d500384023236d0036216f093533326c2d323831203925c40030234002382d35201e013531238101333725fd239002342d362425013536212a022d3835202681cfe002a862dce00ca2022e383762db400761df01343462dae0153c60ea69f12a69208c0038a9f002312e30e0083e0061ea01bee00d812115411e40036122269f25120033ea0879e0024821de60828b078a6c04312e31202d20040329726f746a8b24fe013833227d00396a49e1046de20223066d383730203239236e229905387633316c35227a0038e208d4e2022820320039203201372d205d403205306c33392d348451e103d3e00265014d39240224360020441a033333346c21c6209e2a63a489e00337e0026a2037215f234360370236357622c327b9265a0034e5143f004d2144093320353533682d35346c4213013268e00aa1e00269036d36353620300036209d05372d343576362838200a23892307437f00682286006c2ae702386832e309bfe004ea242a04343834683124bf0132682500017a6d2878053333683436762433289204367a4d363422df0630366832336c2d6054012d31888ce20778293ce102ea600a82782104013539c278cc69e10447e403f7013131258702353031231d25fd2be101302d259b2ba70034211c435b261b271b003421d4236827a40133322bff06352038353520378552e01f9901353527ff00328307e10ed6016d3820fe0037211502342d3729900338332d3925220020e114572033273c2c7b23ee20ac003820030331357632e21406056d333633203720f50232352d44ff033576313421c704357634306c281020f028a221ed217c012d332056200e027a6d35211b24f80034211f01312d2025269048b6003122f424900037252323592324e60a9be203060036276a03353335682073220504357a6d313620e1033435683125ca2297206a45cfe10321e0023e016d392d80053838362d3637209a01362d206f003120110432382d3120233601387624f602683237461e076833307633356c38202125ed003220ac20d90233382d21bd21f3203d239b002028ece00a70e202ff014d3326760037211e25fd003145fde0079c044641433135a8d400322058003722e60032213767b4216523cb209d212120812764033138382d267d22f02874202502203536e50896e402d1e5051ac4c220620134392e700030c2e7022e3735659ee10335e002c4026d31392098208d2089210424d20037211529fd27e2026d323022ed05386836396c334a9b490d00382964e21474014d35259d003827e7003320cb023738312c4c2457205d279f219822e90233373921d10430355637368a08e31f260131302a4502393935a63ae318c1247e01203820d128f3012d3522b8225d003720de24b3002023dc2fa600312826003120ae003623de01343422e90032eb00274834613200692935c70cac6ce40225004d2416211800632b972231a0050020e202a7e0003e2495a03e24c823ec898ee0123e052f646566733e\"),bytes(hex\"054b796f746f00e00b000d02158e440817b839005701f40332a0211f030053041c035c00050102015e017c03db013b0012011a010e010f01130232000511011d012c31a02c190200190340042b0042010000b4041a03aa000100010103012c33a020080301c7028100a5002920201446000f017b013d0092011d006402f10188013f0088400b0300026d6c802f070102706572736f6e200d085500af02c2033a00b4201f061e007801666f7820152000024b009b6018083c0064012c0078006cc03b0001e0003b06320032027b027be0003b163c75736520687265663d22236b796f2d62757368222f3ee00316046a696e6a61201304246c6c2433e0031806732d746f776572401a036d6c2431e0031a6033052d656e747279401e0035e0031b1f666c5f24666c6f6b22207472616e73666f726d3d226d617472697828312e35200030200140070939363520313030302922207b10322462693c646566733e3c672069643d22e000ace004ab02646172e005576062046c61746528404e0d353935297363616c6528322e35324058e00398e0133c043130203436e0013c013431e0223c0631303632203430c03d03312e3833e0223d0637383820343439a0b7e0263c01363420790038e02e7902313231e131310131332079013731a0b6e12631207802333633a03be026f202323631212f0030e02d3c013339203c0039e0137905627269676874e204bbe2016300372079c1a9e20b61e0143c0231353421310036e000b8013637e20725e0143e0032226402353437e02f3e0633393820353338e0003e0031e208e1e0147d01393440bce101eee0263e0631303930203530e10178e026fc02383234e033fc02363837e00bfc012f67c46dc4eac00f036c656674a4fd0a3e3c706174682066696c6c25431d4339383046312220643d224d33363920363932683335763131682d33357a24c9e0042d05453934453142a02d0d3832203636366839763235682d39e0082b05424531363232a02b08373520363431683234602c013234e0082d05394242323234802d02343036602d072d33396c31392d31808740dce502fce002d1e50397e201db01333184b540378582006a6618e005d1054639423233338077022d363360d12447053276343339482010e008a805464645373636a03023f70b363639683131323776343648200fe0142f1636333120373034483435346c2d31333720333831683435e00934e103670234303943a5076832363876393148200e017a6d2141063020393868373420130335483136e1097e043934303045a0d8013934232b023733482072056c33332d333320380035204501343346b109683630763532682d3630e008bce2031d20dc032036333580ec013530e00cec05444642324637811c202b402f20ec01316c2072232d21fee00aa7e102f8003523150834373968333876343721fe02387a6d22e802313034401140a24011052d3137342030e00211e207a405424636364545808401353923280031603f0032a051032d313436803fa011e0083fe202b82144217c053868313876332290003140910039203de0010f014d312307215ce00212026d3132e00523e00733e00a0f012d312345e00155e008210332313820e0062220320038e0048a016d2d2494e0039b016d2de006ace007eae203240037204d260d09483335386c35312d33322271003720420236322d28d5034834313922b3033020363860174049e30659a93ee3055fe1024c076d3937392032303022760036285e200604372d3430762069006c200a20110020201840110131362076003825a005373668383136220b22b98404e403bae0025a044d3531362023b501683524ba043030682d3522de0032223b063568373176373824a001373120540035272e0030e0031240c6e00353e103100031223b033932346820500376383248200e067a6d302d373137601101323080110033224d0031a0cb042d32372d3322c20036200320020436332d3434201302203334208d043435203731245c804d2925e0064d4011408e415505636972636c656a37c6c50463783d223020060079600603723d22352484a5c4a34325ace002388a1de013360f363439363234222f3e3c2f646566733e\"),bytes(hex\"0e4d6f61692c2052617061204e756900e002000dfe62155ef97c63260128017c0231a0180d01000701e2022900190100002832a014140a00ac01e200150004010d006401a401bf00160005200b0832007e0169000c0009400b1301000291002e002c011a0096020f02b900280020400b13001b03b70180004f010201900369008400250013202f089603870112001a0012400b13020003df0054003a011a012c03e1030b0030002a400b0300026d6c8083070101706572736f6e200d1137006e021a023c00b40064001e0078017773201420000601047961636874200907005000aa018401d140220a016800f002637275697365e0011820140b6404b0025802666973686572e00118010258a01805646f6c706869206ee0074a1f3c75736520687265663d222374756b692d63756c69737365222f3e2462693c70076174682066696c6c201e1f3634393632342220643d224d313020313038306831303730563733376c2d36350431203239332037e004521f696b695f4865616422207472616e73666f726d3d226d617472697828312e30380120302001002d6009073738382035323529e0064207666c5f24666c6f6be00d410035203e208b200705333535203931603e0b24323c646566733e3c67206920ade004d7003ee004d30339424232a0d3156d3220343034203435342d3839203537372036397a2220cee10303e0032f1031333430203333342d3430302d36362d33203602313134e0073302676f6c20fd2086106d2d322033393120313230312d35332036202d0038e0072d02247763602c004d205a013832215f023830762164014830602841ac0677696474683d224019042220793d2220260022c1c108637265737473247774e1062e617b046c61746528216c0033a124017773e003dae000a62079033437336820a501327620a0a079e10f04022d31322128003020d50b3432362d3238362037203233e10938044238433836a23c0232323721ed0634312d343833202036016c2d21bd01313540e101243160e3a2900370616c6d20dc60bde20439022e343321f501302040070032204402353339e20736e0113b823220060231393620390036403902246d6ce01d780138312076203d200701393022250033403de0033ae214f1022e3236203c218340080534313720353480b8e10e5e2367043933203735202c2003023633302367013338224101364c22f4221b4133e00f3c086d31373131203730344033022d32316007002020076034424aa166e014b2032d2e313420af003340030231202e20b3063336392037363260f8e010b7003220280038200302353830234722ef0038400ee02479022e3437212a412c200805313634203636816de00374e20357013634211a04313939482d212820ee428d053234372d3131225f0330392032807fe00e3e016d3523ce0138362032003320322409063332392d363238237e02363548205b60bc012f67e40055e400dae0065204463636454563c4026d2d35230d0037231c07312d39332d313537218624a502302d34432b012d35241006302d32352d3531207120a0231201314c23792083606de003aa003924660145338057033131332d20d90520363220353920ad0034222003312d3836238d2294200902372d37206f0231392040cb0436302d393960790331382d3324e62479207f24b4033520323520f40031e0086ce003c4206701313321c520b820cd02352d3440cb063335382d343420a1d2092f673e3c2f646566733e\")];\n                return bytes(motifs[index]);\n            }\n        }"}, "contracts/NDDecoder.sol": {"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.30;\n\nimport \"./BasicMotif.sol\";\nimport \"forge-std/console.sol\";\n\n\n\n\nlibrary NDDecoder {\n\n\nfunction decodeGenericMotif(bytes memory _uniqueData, bytes memory _genericData) public pure returns (Motif memory) {\n    //decode name from first 20 bytes\n    uint index = 0;\n \n\n    int lat = bytesToInt(slice(_uniqueData, index, 4 ));\n    index += 4;\n    int lng = bytesToInt(slice(_uniqueData, index, 4 ));\n    index += 4;\n\n    int heading = bytesToInt(slice(_uniqueData, index, 2));\n    index += 2;\n\n    string memory motifName = string(trimNullBytes(slice(_uniqueData, index, _uniqueData.length - index)));\n\n\n    index = 0;\n    _genericData = flzDecompress(_genericData);\n    uint horizon = uint(bytesToInt(slice(_genericData, index, 2)));\n    index += 2;\n\n     (SceneInMotif[] memory scenes, uint sceneInMotifEndIndex) = decodeSceneIMotif(_genericData, index);\n      index = sceneInMotifEndIndex ;     \n\n    (MovingScene[] memory movingScenes, uint movingSceneEndIndex) = decodeMovingScene(_genericData, index);\n    index = movingSceneEndIndex ;\n\n    string memory svg = string(slice(_genericData, index, _genericData.length - index));\n\n    Motif memory motif = Motif( motifName, lat, lng, heading, horizon, svg, scenes, new Replacement[](0), movingScenes, MotifType(0));\n    return motif;\n\n\n}\n\n\n function decodeMotif(bytes memory _data) public pure returns (Motif memory) {\n       //decode name from first 20 bytes\n            _data = flzDecompress(_data);\n            uint index = 0;\n            string memory motifName = string(trimNullBytes(slice(_data, index, 26)));\n            index += 26;\n\n            int lat = bytesToInt(slice(_data, index, 4 ));\n            index += 4;\n            int lng = bytesToInt(slice(_data, index, 4 ));\n            index += 4;\n\n\n            int heading = bytesToInt(slice(_data, index, 2));\n            index += 2;\n            uint horizon = uint(bytesToInt(slice(_data, index, 2)));\n            index += 2;\n\n            (SceneInMotif[] memory scenes, uint sceneInMotifEndIndex) = decodeSceneIMotif(_data, index);\n            index = sceneInMotifEndIndex ;            \n\n            // decode replacements\n            (Replacement[] memory replacements, uint replacementEndIndex) = decodeReplacements(_data, index);\n            index = replacementEndIndex ;\n\n            (MovingScene[] memory movingScenes, uint movingSceneEndIndex) = decodeMovingScene(_data, index);\n            index = movingSceneEndIndex ;\n\n            // create svg with rest of data\n            string memory svg = string(slice(_data, index, _data.length - index));\n\n            // create motif and return\n            Motif memory motif = Motif( motifName, lat, lng, heading, horizon, svg, scenes, replacements, movingScenes, MotifType(0));\n            return motif;\n\n    }\n\n    function decodeMovingScene(bytes memory _data, uint index) public pure returns (MovingScene[] memory, uint){ \n\n        // decoe scene count\n        uint sceneCount = uint(uint8(_data[index]));\n        index += 1;\n\n\n        // decode scenes\n\n        MovingScene[] memory scenes = new MovingScene[](sceneCount + 2);\n        for(uint i = 0; i < sceneCount; i++){\n\n        string memory placeholder = string(trimNullBytes(slice(_data, index, 8)));\n        index += 8;\n\n        bool horizonUp = uint(uint8(_data[index])) == 1;\n        index += 1;\n\n        // decode asset count\n        uint assetCount = uint(uint8(_data[index]));\n        index += 1;\n\n        // decode assets\n        MovingSceneAsset[] memory assets = new MovingSceneAsset[](assetCount);\n        for(uint j = 0; j < assetCount; j++){\n            // decode asset name\n            MovingSceneAsset memory asset = decodeMovingAsset(_data, index);\n            assets[j] = asset;\n            index += 25;\n        }\n\n        MovingScene memory movingScene = MovingScene(placeholder,horizonUp, assets);\n        scenes[i] = movingScene;\n        }\n\n        return (scenes, index);\n\n\n    }\n\n    function decodeMovingAsset(bytes memory _data, uint index) public pure returns (MovingSceneAsset memory){\n        // decode asset name\n        string memory assetName = trimNullBytes(slice(_data, index, 8));\n        index += 8;\n\n        uint minScale = uint(bytesToInt(slice(_data, index, 2)));\n        index += 2;\n\n        uint maxScale = uint(bytesToInt(slice(_data, index, 2)));\n        index += 2;\n\n\n        uint minY = uint(bytesToInt(slice(_data, index, 2)));\n        index += 2;\n\n        uint maxY = uint(bytesToInt(slice(_data, index, 2)));\n        index += 2;\n\n        uint duration = uint(bytesToInt(slice(_data, index, 2)));\n        index += 2;\n\n        uint probability = uint(bytesToInt(slice(_data, index, 2)));\n        index += 2;\n\n        uint checkInterval = uint(bytesToInt(slice(_data, index, 2)));\n        index += 2;\n\n        uint possibleOffset = uint(bytesToInt(slice(_data, index, 2)));\n        index += 2;\n\n        DAYTIME dayTime = DAYTIME(uint(uint8(_data[index])));\n        index += 1;\n\n        // create asset and add to assets\n        MovingSceneAsset memory asset = MovingSceneAsset(assetName, minScale, maxScale, minY, maxY,duration, probability, checkInterval, possibleOffset, dayTime);\n        return asset;\n    }\n\n    function decodeAssetsForScenes (bytes memory _data) public pure returns (AssetInScene[] memory){\n        // decode asset count\n                    \n                    uint index = 0;\n                    uint assetCount = uint(uint8(_data[index]));\n                    index += 1;\n\n                    // decode assets\n                    AssetInScene[] memory assets = new AssetInScene[](assetCount);\n                    for(uint j = 0; j < assetCount; j++){\n                        // decode asset name\n                        string memory assetName = trimNullBytes(slice(_data, index, 8));\n                        index += 8;\n\n                        uint minDuration = uint(bytesToInt(slice(_data, index, 4)));\n                        index += 4;\n\n                        uint maxDuration = uint(bytesToInt(slice(_data, index, 4)));\n                        index += 4;\n\n                        // decode checkInterval\n                        uint checkInterval = uint(bytesToInt(slice(_data, index, 4)));\n                        index += 4;\n\n                        // decode possibleOffset\n                        uint possibleOffset = uint(bytesToInt(slice(_data, index, 4)));\n                        index += 4;\n\n                        // decode probability\n                        uint probability = uint(bytesToInt(slice(_data, index, 4)));\n                        index += 4;\n\n                        // decode dayTime\n                        \n                        DAYTIME dayTime = DAYTIME(uint(uint8(_data[index])));\n                        index += 1;\n\n            \n                 \n\n                        // create asset and add to assets\n                        AssetInScene memory asset = AssetInScene(assetName, minDuration, maxDuration, checkInterval, possibleOffset, probability, dayTime);\n                        assets[j] = asset;\n                    }\n                    return assets;\n    }\n\n    function decodeSceneIMotif (bytes memory _data, uint index) public pure returns (SceneInMotif[] memory, uint){\n        \n\n             // create sceneCount int and iterate over scenes for decoding\n            uint sceneCount = uint(uint8(_data[index]));\n            index += 1;\n\n            SceneInMotif[] memory scenes = new SceneInMotif[](sceneCount);\n            for(uint i = 0; i < sceneCount; i++){\n                // decode placeHolder\n            \n                string memory placeHolder = trimNullBytes(slice(_data, index, 8));\n                 index += 8;\n                   // decode asset count\n                uint sceneDetailsCount = uint(uint8(_data[index]));\n                index += 1;\n\n                Scene[] memory sceneDetails = new Scene[](sceneDetailsCount);\n                for(uint j = 0; j < sceneDetailsCount; j++){\n\n                // decode area\n                int[4] memory area;\n                for(uint h = 0; h < 4; h++){\n                    area[h] = bytesToInt(slice(_data, index, 2));\n                    index += 2;\n                }\n\n                // decode asset count\n                uint assetCount = uint(uint8(_data[index]));\n                index += 1;\n\n                  uint[] memory assets = new uint[](assetCount);\n             for(uint k = 0; k < assetCount; k++){\n                    // decode asset name\n                    uint asset = uint(uint8((_data[index])));\n                    assets[k] = asset;\n                    index += 1;\n                }\n                    uint scale =  uint(bytesToInt(slice(_data, index, 2)));\n                    index +=2;\n                    Scene memory scene = Scene(area, assets, scale);\n                    sceneDetails[j] = scene;\n                }\n\n                SceneInMotif memory sceneInMotif = SceneInMotif(placeHolder, sceneDetails);\n                scenes[i] = sceneInMotif;\n\n            }\n\n            return (scenes, index);\n        \n        \n    }\n\n    function decodeReplacements (bytes memory _data, uint index) public pure returns (Replacement[] memory, uint){\n         // decode replacements\n                    // staring with replacement count\n                    // and then iterating over replacements\n                    uint replacementCount = uint(uint8(_data[index]));\n\n                    index += 1;\n                    Replacement[] memory replacements = new Replacement[](replacementCount);\n                    for(uint i = 0; i < replacementCount; i++){\n                        // decode tag\n                        ObjectType tag = ObjectType(uint(uint8(_data[index])));\n                        index += 1;\n\n                        // decode dataType\n                        RenderDataType dataType = RenderDataType(uint(uint8(_data[index])));\n                        index += 1;\n\n                        // decode data length and then decode data ( encoded in int16 )\n                        bytes memory dataLengthBytes = new bytes(1);\n                        dataLengthBytes[0] = _data[index];\n                        uint dataLength = uint(bytesToInt(dataLengthBytes));\n                        index += 1;\n                        // use bytesToIntArray to decode data\n                        // itearte over dataLength and create bytes array\n                        int256[] memory data = bytesToIntArray(slice(_data, index, dataLength * 2), 2);\n                        index += dataLength * 2;\n\n                        // decode placeholder\n  \n                        string memory placeholder = trimNullBytes(slice(_data, index, 8));\n                        index += 8;\n\n                        // decode ref\n                        string memory ref = trimNullBytes(slice(_data, index, 8));\n                        index += 8;\n\n                        // create replacement and add to replacements\n                        Replacement memory replacement = Replacement(tag, dataType, data, placeholder, ref);\n                        replacements[i] = replacement;\n\n                    }\n                    return (replacements, index);\n    }\n\n    function trimNullBytes(bytes memory data) public pure returns (string memory) {\n        uint256 length = data.length;\n\n        while (length > 0 && data[length - 1] == 0) {\n            length--;\n        }\n\n        bytes memory trimmedData = new bytes(length);\n        for (uint256 i = 0; i < length; i++) {\n            trimmedData[i] = data[i];\n        }\n\n        return string(trimmedData);\n    }\n\n\n\n\n    function bytesToInt(bytes memory _bytes) public pure returns (int256) {\n        require(_bytes.length <= 32, \"Input too long.\");\n        uint256 number = 0;\n        for (uint i = 0; i < _bytes.length; i++) {\n            number = number + (uint256(uint8(_bytes[i])) << (8 * (_bytes.length - 1 - i)));\n        }\n\n        // Wenn das erste Bit des resultierenden Wertes gesetzt ist, betrachten wir es als negatives im Zweierkomplement\n        if (_bytes.length < 32 && (number >> (8 * _bytes.length - 1) & 1 == 0)) {\n            // Positive Zahl oder Zahl, die nicht das Vorzeichenbit im Kontext von 256 Bit gesetzt hat\n            return int256(number);\n        } else {\n            // Negative Zahl, passt das Vorzeichen f\u00fcr int256 an\n            uint256 comp = 2**(8 * _bytes.length) - number;\n            return -int256(comp);\n        }\n    }\n\n    function bytesToIntArray(bytes memory data, uint8 bytesPerInt) public pure returns (int256[] memory) {\n    require(data.length % bytesPerInt == 0, \"Invalid data length\");\n\n    uint256 intArrayLength = data.length / bytesPerInt;\n    int256[] memory intArray = new int256[](intArrayLength);\n\n    for (uint256 i = 0; i < data.length; i += bytesPerInt) {\n        int256 value;\n        if (bytesPerInt == 2) {\n            value = int16(uint16(uint8(data[i])) << 8 | uint16(uint8(data[i + 1])));\n        } else if (bytesPerInt == 4) {\n            value = int32(uint32(uint8(data[i])) << 24 | uint32(uint8(data[i + 1])) << 16 | uint32(uint8(data[i + 2])) << 8 | uint32(uint8(data[i + 3])));\n        } else {\n            revert(\"Unsupported number of bytes\");\n        }\n\n        intArray[i / bytesPerInt] = value;\n    }\n\n    return intArray;\n}\n\n /// @dev Returns the decompressed `data`.\n    function flzDecompress(bytes memory data) public pure returns (bytes memory result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(0x40)\n            let op := add(result, 0x20)\n            let end := add(add(data, 0x20), mload(data))\n            for { data := add(data, 0x20) } lt(data, end) {} {\n                let w := mload(data)\n                let c := byte(0, w)\n                let t := shr(5, c)\n                if iszero(t) {\n                    mstore(op, mload(add(data, 1)))\n                    data := add(data, add(2, c))\n                    op := add(op, add(1, c))\n                    continue\n                }\n                for {\n                    let g := eq(t, 7)\n                    let l := add(2, xor(t, mul(g, xor(t, add(7, byte(1, w)))))) // M\n                    let s := add(add(shl(8, and(0x1f, c)), byte(add(1, g), w)), 1) // R\n                    let r := sub(op, s)\n                    let f := xor(s, mul(gt(s, 0x20), xor(s, 0x20)))\n                    let j := 0\n                } 1 {} {\n                    mstore(add(op, j), mload(add(r, j)))\n                    j := add(j, f)\n                    if lt(j, l) { continue }\n                    data := add(data, add(2, g))\n                    op := add(op, l)\n                    break\n                }\n            }\n            mstore(result, sub(op, add(result, 0x20))) // Store the length.\n            mstore(op, 0) // Zeroize the slot after the string.\n            mstore(0x40, add(op, 0x20)) // Allocate the memory.\n        }\n    }\n\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        require(_length + 31 >= _length, \"slice_overflow\");\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n        bytes memory tempBytes;\n\n        // Check length is 0. `iszero` return 1 for `true` and 0 for `false`.\n        assembly {\n            switch iszero(_length)\n            case 0 {\n                // Get a location of some free memory and store it in tempBytes as\n                // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n                // Calculate length mod 32 to handle slices that are not a multiple of 32 in size.\n                let lengthmod := and(_length, 31)\n\n                // tempBytes will have the following format in memory: <length><data>\n                // When copying data we will offset the start forward to avoid allocating additional memory\n                // Therefore part of the length area will be written, but this will be overwritten later anyways.\n                // In case no offset is require, the start is set to the data region (0x20 from the tempBytes)\n                // mc will be used to keep track where to copy the data to.\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                let end := add(mc, _length)\n\n                for {\n                    // Same logic as for mc is applied and additionally the start offset specified for the method is added\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                } lt(mc, end) {\n                    // increase `mc` and `cc` to read the next word from memory\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    // Copy the data from source (cc location) to the slice data (mc location)\n                    mstore(mc, mload(cc))\n                }\n\n                // Store the length of the slice. This will overwrite any partial data that \n                // was copied when having slices that are not a multiple of 32.\n                mstore(tempBytes, _length)\n\n                // update free-memory pointer\n                // allocating the array padded to 32 bytes like the compiler does now\n                // To set the used memory as a multiple of 32, add 31 to the actual memory usage (mc) \n                // and remove the modulo 32 (the `and` with `not(31)`)\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            // if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n                // zero out the 32 bytes slice we are about to return\n                // we need to do it because Solidity does not garbage collect\n                mstore(tempBytes, 0)\n\n                // update free-memory pointer\n                // tempBytes uses 32 bytes in memory (even when empty) for the length.\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n\n\n}"}, "contracts/NDMotifDataManager.sol": {"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.30;\n\nimport \"./motifs/Motifs0.sol\";\nimport \"./motifs/Motifs1.sol\";\nimport \"./motifs/GenericMotifs.sol\";\nimport \"./motifs/GenericMotifsSVG.sol\";\nimport \"./motifs/Assets.sol\";\n\nimport\"./NDDecoder.sol\";\nimport \"./NDUtils.sol\";\n\n\nimport \"./BasicMotif.sol\";\ncontract NDMotifDataManager {\n\n\n    \n\n    uint constant GENERICS_COUNT = 100;\n    uint constant GENERICS_START_INDEX = 21;\n    uint constant BEACHES_START_INDEX = GENERICS_START_INDEX;\n    uint constant SKYSCRAPERS_START_INDEX = GENERICS_START_INDEX + GENERICS_COUNT;\n    uint constant LANDSCAPE_START_INDEX = GENERICS_START_INDEX + GENERICS_COUNT + GENERICS_COUNT;\n\n\n\n\n    string public assets = Assets.getAssets();\n\n     \n    IMotifData public sightSeeing1;\n    IMotifData public sightSeeing2;\n    IMotifData public sightSeeing3;\n    GenericMotifs public genericMotifs;\n    GenericMotifsSVG public genericMotifsSVG;\n\n\n     constructor(address _genericMotifAddress, address  _genericMotifSVGAddress ,address _motifAdress1, address _motifAdress2,  address _motifAdress3) {\n\n        genericMotifs =  GenericMotifs(_genericMotifAddress);\n        genericMotifsSVG =  GenericMotifsSVG(_genericMotifSVGAddress);\n        sightSeeing1 =  Motifs0(_motifAdress1);\n        sightSeeing2 =  Motifs1(_motifAdress2);\n        sightSeeing3 =  Motifs1(_motifAdress3);\n     }\n\n    function getMotifByTokenId(uint256 tokenId) public view returns (Motif memory) {\n        \n        bytes memory motifData;\n\n        Motif memory motif;\n        MotifType motifType;\n\n\n        if (tokenId < GENERICS_START_INDEX ) {\n            // handle sight seeing motifs\n            motifType = MotifType.SIGHT_SEEING;\n\n           if (tokenId < 7) {\n               motifData = sightSeeing1.getMotifData(tokenId);\n              }     \n           else if (tokenId < 14) {\n\n               motifData =  sightSeeing2.getMotifData(tokenId -7);\n           } else {\n               motifData = sightSeeing3.getMotifData(tokenId - 14);\n           }\n \n\n           motif = NDDecoder.decodeMotif(motifData);\n           motif.motifType = motifType;\n        }\n        else {\n            motif = getGenericMotif(tokenId);\n        }\n\n        // set common sky scenes\n        bytes memory skyScenesBytes = genericMotifsSVG.getSkyMovingScenes();\n        (MovingScene[] memory skyMovingScenes, ) = NDDecoder.decodeMovingScene(skyScenesBytes,0);\n\n        skyMovingScenes[0].assets[0].maxY = motif.horizon - 20;\n        skyMovingScenes[0].assets[1].maxY = motif.horizon - 20;\n\n        string memory birdType = motif.motifType == MotifType.BEACH || motif.motifType == MotifType.SKYSCRAPER  || tokenId == 0 || tokenId == 1 || tokenId == 3 || tokenId == 14 ? \"gull-f\" : \"bird-f\";\n        skyMovingScenes[1].assets[0].assetName = birdType;\n        skyMovingScenes[1].assets[0].maxY = motif.horizon + 200;\n\n        motif.movingScenes[motif.movingScenes.length-2] = skyMovingScenes[0];\n        motif.movingScenes[motif.movingScenes.length-1] = skyMovingScenes[1];\n\n\n \n        return motif;\n    }\n\n    function getGenericMotif(uint256 tokenId) public view returns (Motif memory) {\n\n\n        bytes memory motifData;\n\n       \n        MotifType motifType = tokenId < SKYSCRAPERS_START_INDEX ? MotifType.BEACH : tokenId < LANDSCAPE_START_INDEX ? MotifType.SKYSCRAPER : MotifType.LANDSCAPE;\n\n        (bytes memory flzGenericMotifs, uint startIndex, uint endIndex) = genericMotifs.getGeneric(tokenId - GENERICS_START_INDEX);\n        \n        bytes memory genericMotifSVG = NDDecoder.flzDecompress(flzGenericMotifs);\n        motifData = new bytes(endIndex - startIndex);\n        for (uint i = startIndex; i < endIndex; i++) {\n            motifData[i - startIndex] = genericMotifSVG[i];\n        }\n        \n        \n        bytes memory genericFlzBytes = genericMotifsSVG.getGenericSVG(motifType);\n\n        Motif memory motif = NDDecoder.decodeGenericMotif(motifData, genericFlzBytes);\n        motif.motifType = motifType;\n        return motif;\n\n    }\n    \n\n    function getFlowerType(uint256 tokenId) public view returns (FlowerType) {\n\n        uint8[21] memory attractionFlowerTypes =  [ uint8(2),2, 0,1, 1,1,0,0,0,0,3,0,0,0,0,1,1,0,0,0,0];\n       \n       if (tokenId < GENERICS_START_INDEX)\n       return FlowerType(attractionFlowerTypes[tokenId]);\n       else return genericMotifs.getFlowerType(tokenId);\n\n\n    }\n\n    function getNFTInside(uint tokenId) public view returns (uint) {\n        return genericMotifs.getNFTInside(tokenId);\n    }\n\n    function getBeachTraits(uint256 tokenId) public view returns (BeachTraits memory) {\n\n        return genericMotifs.getBeachTraits(tokenId);\n    }\n\n\n\n    function getCityTraits(uint256 tokenId) public view returns (CityTraits memory) {\n        return genericMotifs.getCityTraits(tokenId);\n    }\n\n\n    function getLandScapeTraits(uint tokenId) public view returns (LandscapeTraits memory) {\n        return genericMotifs.getLandscapeTraits(tokenId);\n    }\n\n    //\n    function getAssetInScene() public pure returns (AssetInScene[]  memory) {\n        bytes memory assetsInScene = Assets.getAssetsInScene();\n\n        return NDDecoder.decodeAssetsForScenes(assetsInScene);\n    }\n\n    function getFlower(FlowerType flowerType) public pure returns (FlowerParts memory) {\n\n      \n\n        if (flowerType == FlowerType.SUNFLOWER) {\n            return getSunflower();\n        }\n        else if (flowerType == FlowerType.ICEFLOWER) {\n            return getIceFlower();\n        }\n        else if (flowerType == FlowerType.ROSE) {\n            return getRose();\n        }\n        else if (flowerType == FlowerType.MOONFLOWER) {\n            return getMoonflower();\n        }\n        revert(\"Invalid path reached\");\n        \n    }\n\n\n    function getSunflower() internal pure returns (FlowerParts memory) {\n\n        FlowerParts memory flowerSVG;\n\n\n        int16[2] memory petalRotationAnchor = [int16(0), int16(-75)];\n        flowerSVG.stick = '<g fill=\"#9bb224\"><rect x=\"-4\" y=\"-74\" width=\"8\" height=\"74\"/>$l</g>';\n        flowerSVG.blossom = '<g fill=\"gold\"><path d=\"M21-85C28-91 28-102 28-102C28-102 18-102 11-95C5-89 5-78 5-78C5-78 15-79 21-85Z\" id=\"s-leaf\"/>$1</g>';\n        int[] memory petalRotations = NDDecoder.bytesToIntArray(hex\"001E003C005A0078009600B400D200F0010E012C014A\", 2);\n        int16[] memory leafPos = new int16[](2);\n        leafPos[0] = -3;\n        leafPos[1] = 71;\n        flowerSVG.blossom = NDUtils.setUseRotations(flowerSVG.blossom, \"s-leaf\", \"$1\", petalRotations, petalRotationAnchor);\n        flowerSVG.stick  = NDUtils.setUseTags( flowerSVG.stick, \"s-leaf\", leafPos , false, \"$l\");\n        flowerSVG.back = '<circle fill=\"#9bb224\" cy=\"-75\" r=\"26\"/>';\n        flowerSVG.front = '<circle fill=\"#aa7035\" cy=\"-75\" r=\"18\"/>';\n\n        return flowerSVG;\n\n}\n\n\nfunction getIceFlower() internal pure returns (FlowerParts memory) {\n\n    FlowerParts memory flowerSVG;\n\n    int[] memory petalRotations = NDDecoder.bytesToIntArray(hex\"001e003c005a0078009600b400d200f0010e012c014a\", 2);\n\n    flowerSVG.stick = '<g style=\"transform:rotateY($azis);transform-box:fill-box;transform-origin:center\">'\n    '<polygon fill=\"#9BB224\" points=\"-7.5,-52 8,-52 3,-3 -2.6,-3\"/></g>'\n    '<path id=\"g-leaf\" fill=\"#9BB224\" d=\"M15,-6.3c5.9-5.8,6.2-15.2,6.2-15.2s-9.4,0.1-15.3,5.9c-5.9,5.8-6.2,15.2-6.2,15.2S9.6,-0.5,15.6,-6.3z\"/>'\n    '<use href=\"#g-leaf\" transform=\"scale(-1,1)\"/>';\n\n\n    flowerSVG.back = '<circle fill=\"#9BB224\" cy=\"-52\" r=\"7.8\"/>';\n    flowerSVG.front = '<circle stroke-width=\"3.5\" stroke=\"#B959ED\" fill=\"#9300E2\" cy=\"-52\" r=\"12.5\"/>'\n    '<circle fill=\"#FFFFFF\" cx=\"-4\" cy=\"-55\" r=\"2.2\"/><circle fill=\"#FFFFFF\" cx=\"4\" cy=\"-55\" r=\"2.2\"/><circle fill=\"#FFFFFF\" cy=\"-48\" r=\"2.2\"/>';\n\n    int16 [2] memory petalRotationAnchor = [int16(0), int16(-52)];\n    string memory petals = '$1<path id=\"g-petal\" fill=\"#EACCF9\" d=\"M1,-69c-1.8-6.2-7.9-9.9-7.9-9.9s-3.4,6.4-1.8,12.5c1.7,6.2,7.9,9.8,7.9,9.8S2.5,-62.6z\"/>';\n    flowerSVG.blossom = NDUtils.setUseRotations(petals , \"g-petal\", \"$1\", petalRotations, petalRotationAnchor);\n\n    return flowerSVG;\n\n}\n\n\nfunction getRose() internal pure returns (FlowerParts memory) {\n\n    FlowerParts memory flowerSVG;\n    int[] memory petalRotations = NDDecoder.bytesToIntArray(hex\"0048009000d80120\", 2);\n    flowerSVG.back = '<path fill=\"#9cb026\" d=\"M8,-140.4a10.8,10.8,0,0,0-4.8-.6,12.4,12.4,0,0,0,.1-4.9,11.7,11.7,0,0,0-3.5,3.3,11.8,11.8,0,0,0-3.7-3,11.2,11.2,0,0,0,.4,4.8,10.3,10.3,0,0,0-4.7,'\n    '1,11.5,11.5,0,0,0,4,2.7,11,11,0,0,0-2.2,4.3,12.1,12.1,0,0,0,4.6-1.5,10.7,10.7,0,0,0,2,4.4,11.3,11.3,0,0,0,1.8-4.5,10.1,10.1,0,0,0,4.6,1.1,10.8,10.8,0,0,0-2.4-4.1A12,12,0,0,0Z\" />';\n    flowerSVG.front = '<circle fill=\"#f7d60d\" cy=\"-138\" r=\"7\"/><circle fill=\"#fcef9e\" cy=\"-138\" r=\"4.7\"/>'; \n\n    string memory blossom = '<g><path id=\"r-leaf\" fill=\"#e6332a\" d=\"M0-121c.13 1 .5 2 1.1 3 1.9 2 5.5 3 8.1 1 1.8-1 2.4-3 2.4-5 1.7 1 3.4 0 5.1-.7 2.6-1.9 3.1-5.6 1.2-8.3-.56-.6-1.3-1.2-2.1-1.7L1.9-139l-3 1.6z\" />$p'\n    '<path fill=\"#eaccf9\" d=\"M10.6 -141.3a6 6 0 00-5.2-4 5.8 5.8 0 00-5.5-3.7 5.9 5.9 0 00-5.4 3.7 5.9 5.9 0 00-5.2 4 6.1 6.1 0 001.8 6.3 5.7 5.7 0 002.3 6.2 5.7 5.7 0 006.5.3 5.9 5.9 0 006.6-.3 5.7 5.7 0 002.2-6.1 5.9 5.9 0 001.9-6.4z\" /></g>';\n\n    flowerSVG.blossom = NDUtils.setUseRotations(blossom, \"r-leaf\", \"$p\", petalRotations, [int16(0), -138]);\n\n    flowerSVG.stick = '<path fill=\"#9cb026\" d=\"M36 -100.6c4.7-.6 8-4.7 8-4.7s-4.3-3.2-8.9-2.6-8 4.7-8 4.7 4.2 3.2 8.9 2.6zM27.1 -92c4 2.5 9.2 1.4 9.2 1.4s-1.3-5.1-5.3-7.6-9.1-1.5-9.1-1.5 1.2 5.1 5.2 7.7z'\n    'M19 -88c2.9 3.7 8.2 4.4 8.2 4.4s.5-5.2-2.4-8.9-8.2-4.5-8.2-4.5-.5 5.3 2.4 9zM11.1 -85.6c1.7 4.3 6.5 6.6 6.5 6.6s2-4.9.3-9.3-6.5-6.6-6.5-6.6-2 4.8-.3 9.3z\" />'\n    '<path fill=\"#9cb026\" d=\"M18.8 -107.7c.2-4.7 4-8.3 4-8.3s3.5 3.9 3.3 8.6-4 8.4-4 8.4-3.5-3.9-3.3-8.7zM10.7 -104c-1.4-4.5 1-9.2 1-9.2s4.7 2.5 6 7-1 9.3-1 9.3-4.6-2.6-6-7.1zM3.3 -98c-2.7-3.9-1.8-9.2-1.8-9.2s5.2 1.1 7.9 5 1.7 9.2 1.7 9.2-5.2-1.1-7.8-5z\" />'\n    '<path fill=\"none\" stroke=\"#9cb026\" stroke-linecap=\"round\" stroke-width=\"3\" d=\"M-0.2 -138c-.2.3-3.4 7-3.7 22.2s14.2 58-1.1 115\"/> <path fill=\"none\" stroke=\"#9cb026\" stroke-width=\"2\" d=\"M0.7 -84.6s13.6-14.9 27.8-18.5\" />';\n\n    return flowerSVG;\n\n}\n\nfunction getMoonflower() internal pure returns (FlowerParts memory) {\n\n    FlowerParts memory flowerSVG;\n\n    flowerSVG.back = '<rect x=\"-5\" y=\"-128\" width=\"10\" height=\"12\" rx=\"5\" ry=\"5\" fill=\"#9cb026\"/>';\n    flowerSVG.front = '<path fill=\"#f7d60d\" d=\"M5-121l12 24-17-20-17 20 13-23-24-10 26 5 3-25 3 26 24-6z\"/>';\n    flowerSVG.blossom = '<path fill=\"#fff\" d=\"M20-95l1-19 10-17-18-8-13-16-13 16-18 7 9 18 2 19 20-4 20 4z\"/>';\n\n    flowerSVG.stick = '<path fill=\"#ccc\" d=\"M-22-23l19-43 24 14-5 38 9 14h-51l4-23z\"/>'\n    '<path id=\"m-leaf\" d=\"M-13-32l-4-8h-7l-5 17s1 5 1 7-2 6-2 6 4-3 5-4 7-1 7-1l15-9-2-7-9-2z\" fill=\"#9cb026\"/>'\n    '<use href=\"#m-leaf\" transform=\"matrix(.85 0 0 .85 15 -50)\" />'\n    '<use href=\"#m-leaf\" transform=\"rotate(-75 -13 -66) scale(1.15)\" />'\n    '<path d=\"M0-121s-2 35 3 45c5 12 26 24-8 40-22 10-15 40 22 22\" fill=\"none\" stroke=\"#9cb026\" stroke-width=\"4\"/>';\n\n    return flowerSVG;\n\n\n}\n\n}"}, "contracts/NDUtils.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"./BasicMotif.sol\";\n\nimport \"./solidity-trigonometry/Trigonometry.sol\";\n\n\n\n\nlibrary NDUtils {\n\nusing Strings for uint256;\nusing Strings for int256;\nusing Strings for int16;\n\n struct SkyAndWaterColor {\n        int altitude;\n        bytes6 skyColor;\n        bytes6 waterColor;\n    }\n\n\n\n\n     /// @dev Returns `subject` with the first occurrence of `search` replaced with `replacement`.\n    function replaceFirst(string memory subject, string memory search, string memory replacement)\n        internal\n        pure\n        returns (string memory result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let subjectLength := mload(subject)\n            let searchLength := mload(search)\n            let replacementLength := mload(replacement)\n\n            subject := add(subject, 0x20)\n            search := add(search, 0x20)\n            replacement := add(replacement, 0x20)\n            result := add(mload(0x40), 0x20)\n\n            let subjectEnd := add(subject, subjectLength)\n            if iszero(gt(searchLength, subjectLength)) {\n                let subjectSearchEnd := add(sub(subjectEnd, searchLength), 1)\n                let h := 0\n                if iszero(lt(searchLength, 32)) { h := keccak256(search, searchLength) }\n                let m := shl(3, sub(32, and(searchLength, 31)))\n                let s := mload(search)\n                for {} 1 {} {\n                    let t := mload(subject)\n                    if iszero(shr(m, xor(t, s))) {\n                        if h {\n                            if iszero(eq(keccak256(subject, searchLength), h)) {\n                                mstore(result, t)\n                                result := add(result, 1)\n                                subject := add(subject, 1)\n                                if iszero(lt(subject, subjectSearchEnd)) { break }\n                                continue\n                            }\n                        }\n                        // Copy the `replacement` one word at a time.\n                        for { let o := 0 } 1 {} {\n                            mstore(add(result, o), mload(add(replacement, o)))\n                            o := add(o, 0x20)\n                            if iszero(lt(o, replacementLength)) { break }\n                        }\n                        result := add(result, replacementLength)\n                        subject := add(subject, searchLength)\n                        // Break after the first replacement\n                        break\n                    }\n                    mstore(result, t)\n                    result := add(result, 1)\n                    subject := add(subject, 1)\n                    if iszero(lt(subject, subjectSearchEnd)) { break }\n                }\n            }\n\n            let resultRemainder := result\n            result := add(mload(0x40), 0x20)\n            let k := add(sub(resultRemainder, result), sub(subjectEnd, subject))\n            // Copy the rest of the string one word at a time.\n            for {} lt(subject, subjectEnd) {} {\n                mstore(resultRemainder, mload(subject))\n                resultRemainder := add(resultRemainder, 0x20)\n                subject := add(subject, 0x20)\n            }\n            result := sub(result, 0x20)\n            // Zeroize the slot after the string.\n            let last := add(add(result, 0x20), k)\n            mstore(last, 0)\n            // Allocate memory for the length and the bytes,\n            // rounded up to a multiple of 32.\n            mstore(0x40, and(add(last, 31), not(31)))\n            // Store the length of the result.\n            mstore(result, k)\n        }\n    }\n\nfunction abs(int x) public pure returns (int) {\n    return x >= 0 ? x : -x;\n}\n\nfunction renderDecimal(int256 value, uint decimals) public pure returns (string memory) {\n        bool isNegative = value < 0;\n        int256 integerPart = value / int(10 ** decimals);\n        int256 decimalPart = abs(value % int(10**decimals));\n\n        if (isNegative && integerPart == 0) {\n            return string.concat(\n                \"-0.\",\n                padZeroes(decimalPart.toStringSigned(), decimals)\n            );\n        }\n\n        return string.concat(\n            integerPart.toStringSigned(),\n            \".\",\n            padZeroes(decimalPart.toStringSigned(), decimals)\n        );\n    }\n\n    function renderDecimal(int256 value) public pure returns (string memory) {\n        return renderDecimal(value, 2);\n    }\n\n     function applyNight(int256 altitude, uint tokenId) public pure returns (string memory) {\n\n        if (altitude > 0) {\n            return \"\";\n        }\n\n        int256 altitudeThresholdForFullNight = -180000;\n        int256 opacityFactor = 19 * 1e2;\n        string memory tokenIdtoString = tokenId.toString();\n        int starOpacicity = 0;\n        int opacity = 0;\n        if (altitude < altitudeThresholdForFullNight) {\n            opacity = 100; \n            starOpacicity = 100;\n        } else  {\n            opacity =   abs(altitude) / opacityFactor ;\n            starOpacicity = (altitude < -120000) ? (abs(altitude) - 120000) / 600 : int(0);\n        } \n       \n\n\n        string memory night = string.concat(\n            '<rect mask=\"url(#nightMask', tokenIdtoString, ')\" style=\"mix-blend-mode:multiply\" width=\"1080\" height=\"1080\" fill=\"#0F3327\" opacity=\"',\n            renderDecimal(int256(opacity)),\n            '\"></rect><rect opacity=\"', renderDecimal(starOpacicity) ,'\" filter=\"url(#star-filter', tokenIdtoString, ')\" width=\"100%\" height=\"100%\" mask=\"url(#moonMask',tokenIdtoString, ')\"/>'\n        );\n\n        \n        return night;\n    }\n\n\n\n    function createElementAndSetColor(SceneElement memory sceneElement, string memory assetName, uint timestamp) public pure returns (string memory) {\n\n        bool isPerson = Strings.equal(assetName, \"person\") || Strings.equal(assetName, \"person-f\");\n        bool isYacht = Strings.equal(assetName, \"yacht\") || Strings.equal(assetName, \"ball\");\n        bool isBird = Strings.equal(assetName, \"bird\") || Strings.equal(assetName, \"bird-f\");\n        bool isBigShip = Strings.equal(assetName, \"fisher\") || Strings.equal(assetName, \"cruise\");\n        string memory colorStr = \" \";\n\n        if(isBird) {\n            uint rdIndex = randomNum(sceneElement.posSalt, 23, 25);\n            colorStr = string.concat(' fill=\"', getColorByIndex(rdIndex), '\" ');\n        }\n        else if (isYacht) {\n            uint rdIndex = randomNum(sceneElement.posSalt, 0, 16);\n            colorStr = string.concat(' fill=\"', getColorByIndex(rdIndex), '\" ');\n        }\n        else if (isPerson) {\n            uint rdIndex1 = randomNum(sceneElement.posSalt, 0, 16);\n            uint rdIndex2 = randomNum(sceneElement.posSalt, 17, 22);\n            colorStr = string.concat(' fill=\"', getColorByIndex(rdIndex1), '\"', ' stroke=\"', getColorByIndex(rdIndex2), '\" ');\n            \n        }\n        else if (isBigShip) {\n            uint rdIndex = randomNum(sceneElement.posSalt, 11, 14);\n            colorStr = string.concat(' fill=\"', getColorByIndex(rdIndex), '\" ');\n        }\n     \n        if (Strings.equal(assetName, \"dolphin\")) {\n            assetName = string.concat(assetName, (timestamp % 5).toString());\n        }\n\n        string memory asset  = string.concat('<use href=\"#',assetName, '\"', colorStr,  'transform=\"translate(', sceneElement.x.toStringSigned(), ',', sceneElement.y.toString(), ') scale(', sceneElement.decimalScaleX, ' '  , sceneElement.decimalScaleY, ')\"/>');\n\n        return asset;\n    }\n\n      function getSkyColor( int altitude) public pure returns (string memory , string memory) {\n        \n        \n        SkyAndWaterColor[17] memory  skyColors = [\n        SkyAndWaterColor(-9000, \"ce80ff\", \"f9b233\"),\n        SkyAndWaterColor(-1200, \"ce80ff\", \"f9b233\"),\n        SkyAndWaterColor(-700, \"e780c0\", \"e0b439\"),\n        SkyAndWaterColor(-400, \"ff8080\", \"c8b63f\"),\n        SkyAndWaterColor(0, \"ff9986\", \"afb845\"),\n        SkyAndWaterColor(300, \"ffb28c\", \"96b94c\"),\n        SkyAndWaterColor(700, \"ffd986\", \"7dbb52\"),\n        SkyAndWaterColor(1100, \"ffff80\", \"65bd58\"),\n        SkyAndWaterColor(1500, \"c0eac0\", \"4cbf5e\"),\n        SkyAndWaterColor(2500, \"80d5ff\", \"57af6c\"),\n        SkyAndWaterColor(1800, \"77c7f8\", \"639e7a\"),\n        SkyAndWaterColor(2500, \"6dbaf1\", \"6e8e88\"),\n        SkyAndWaterColor(3500, \"64acea\", \"797d95\"),\n        SkyAndWaterColor(4700, \"5a9ee4\", \"846da3\"),\n        SkyAndWaterColor(6000, \"5190dd\", \"905cb1\"),\n        SkyAndWaterColor(7300, \"4783d6\", \"9b4cbf\"),\n        SkyAndWaterColor(8000, \"3e75cf\", \"9b4cbf\")\n      \n        ];\n        bytes6  cColor = bytes6(\"ffffff\"); \n        bytes6  wColor = bytes6(\"ffffff\");\n        for (uint i = 0; i < skyColors.length; i++) {\n            if (altitude >= skyColors[i].altitude) {\n                if (i == skyColors.length - 1) {\n                    cColor = skyColors[i].skyColor;\n                    wColor = skyColors[i].waterColor;\n                    break;\n                }\n                else if (altitude < skyColors[i + 1].altitude) {\n                    cColor = skyColors[i].skyColor;\n                    wColor = skyColors[i].waterColor;\n                    break;\n                }\n            }\n        }\n\n     \n        return (string(abi.encodePacked(\"#\",cColor)), string(abi.encodePacked(\"#\",wColor)));\n    }\n\n     function getColorByIndex(uint256 index) public pure returns (string memory) {\n        bytes6[26] memory rdColors = [\n            bytes6('ffffff'), 'dbd8e0', '684193', 'e3cce5', 'fff6cc', \n            '649624', '9bb221', 'c3d17c', 'ffd700', 'ffe766', \n            'fcd899', 'f29104', 'e6342a', 'e94f1c', 'be1823', \n            'aa7034', 'e94e1b', bytes6(\"ffcabf\"),bytes6(\"ffcc99\"),bytes6(\"cc8f52\"),bytes6(\"7a4625\"),bytes6(\"ffcc4d\"),bytes6(\"966329\"),\n            'f37c00', 'ff5d6a', 'cb0fe0' ];\n\n        require(index < rdColors.length, \"out of index\");\n        return string(abi.encodePacked(\"#\", rdColors[index]));\n    }\n\n    \n\n     function renderLighthouse(string memory svg, int altitude, uint timestamp, uint tokenId) public pure returns ( string memory) {\n\n            if (tokenId != 3 || altitude > 0) {\n                return svg;\n            }\n\n            uint rotationInSeconds = 40;\n            uint progress = timestamp % rotationInSeconds * 100 / rotationInSeconds;\n            uint rotation = progress * 2 * 31415926535897932;\n\n            int xValue = Trigonometry.sin(rotation) * 810;\n\n            int yValue = (10 * 1e18) + Trigonometry.cos(rotation) * 68 + (68 * 1e18);\n\n            string memory xDec = renderDecimal(xValue / 1e16);\n            string memory yDec = renderDecimal(yValue / 1e16);\n\n \n\n            string memory lightHouse =  string.concat('<polygon opacity=\"0.3\" fill=\"#fff\" points=\"' , xDec, ',', yDec, ',0,0,', xDec,',-',yDec, '\"/>');\n            return NDUtils.replaceFirst(svg, \"$li\", lightHouse);\n\n\n        }\n\n\n    \n\n\n\n\n    function padZeroes(string memory number, uint256 length) private pure returns (string memory) {\n        while(bytes(number).length < length) {\n            number = string.concat(\"0\", number);\n        }\n        return number;\n    }\n\n    function randomNum(string memory nonce, uint256 min, uint256 max) public pure returns (uint) {\n        require(min <= max, string.concat(\"min>max \", nonce, \" \", min.toString(), \">\", max.toString()));\n        uint randomValue = uint(keccak256(abi.encodePacked( nonce)));\n        uint result =  min + (randomValue % (max - min + 1));\n\n        return result;\n    }\n\n    function randomNum(uint256 nonce, uint256 min, uint256 max) public pure returns (uint) {\n        return randomNum(nonce.toString(), min, max);\n    }\n\n\n    function createStandardAttributes(Motif memory motif, FlowerType flowerType, int altitude) public pure returns (string memory, string memory) {\n        \n        //convert lat/lng to DD\n        string memory dd = string.concat(renderDecimal(motif.lat, 6), \",\",  renderDecimal(motif.lng, 6));\n\n        string memory attributes = string.concat('\"attributes\": [{\"trait_type\":\"Flower\",\"value\":\"', flowerType == FlowerType.ROSE ? \"Rose\" : flowerType == FlowerType.SUNFLOWER ? \"Sunflower\" :flowerType == FlowerType.ICEFLOWER  ? \"Iceflower\": \"Moonflower\", '\"}');\n        attributes = string.concat(attributes, ',{\"trait_type\":\"Position\",\"value\":\"', dd, '\"}');\n        attributes = string.concat(attributes, ',{\"trait_type\":\"Heading\",\"value\":\"', motif.heading.toStringSigned(), '\"}');\n        attributes = string.concat(attributes, ',{\"trait_type\":\"Motif Type\",\"value\":\"', motif.motifType == MotifType.SIGHT_SEEING ? \"Attraction\" : motif.motifType == MotifType.BEACH ? \"Beach\" : motif.motifType == \n        MotifType.SKYSCRAPER ? \"City\" : \"Landscape\", '\"}');\n\n\n        string memory description = string.concat(' at ', altitude < -180000 ? 'night' : altitude > 0 ? 'day': 'twilight');\n        return (attributes, description);\n    \n    }\n\n function computeStarttime(\n        uint timestamp,\n        AssetInScene memory asset,\n        string memory salt,\n        uint sunrise,\n        uint sunset,\n        bool isMoving\n    ) public pure returns (uint[] memory) {\n\n \n         uint visibleCount = 0;\n         uint[] memory visibleStartTimes;\n        \n        {\n        uint minStartTime = timestamp - asset.maxDuration - asset.possibleOffset;\n        uint maxStartTime = timestamp;\n         bool isTimeFrameValid = true;\n          if (asset.dayTime != DAYTIME.NIGHT_AND_DAY) {\n\n            sunrise = sunrise / 1e18;\n            sunset = sunset / 1e18;\n\n            (minStartTime, maxStartTime, isTimeFrameValid) = adjustTimeStampsForAssetVisibility(minStartTime, maxStartTime, sunrise, sunset, asset.dayTime, 0, asset.maxDuration);\n            if (!isTimeFrameValid) {\n                return new uint[](0);\n            }\n        }  \n    \n        \n        uint lastCheckTimestamp = maxStartTime - (maxStartTime % asset.checkInterval);\n        uint firstCheckTimestamp = minStartTime - (minStartTime % asset.checkInterval);\n        uint checkCount = uint(lastCheckTimestamp - firstCheckTimestamp) / uint(asset.checkInterval) + 1;\n\n        visibleStartTimes = new uint[](checkCount);\n    \n        \n         for (uint i = 0; i < checkCount; i++) {\n            uint checkTimestamp = uint(firstCheckTimestamp) + i * uint(asset.checkInterval);\n            string memory startTimeSalt = string.concat(salt, checkTimestamp.toString());\n\n            if (randomNum(startTimeSalt, 0, 100) < uint(asset.probability)) {\n            \n                uint startTime = uint(checkTimestamp) +randomNum(startTimeSalt, 0, uint(asset.possibleOffset));\n                uint endTime = startTime + randomNum(startTimeSalt, uint(asset.minDuration), uint(asset.maxDuration));\n                if (startTime <= timestamp && endTime +  (isMoving? (asset.minDuration / 2) : 0) >= timestamp && uint(startTime) >= uint(minStartTime)) {\n                    visibleStartTimes[visibleCount] = startTime;\n                    visibleCount++;\n                }\n            }\n        } \n        }\n        uint[] memory actualVisible = new uint[](visibleCount);\n        for (uint i = 0; i < visibleCount; i++) {\n            actualVisible[i] = visibleStartTimes[i];\n        }\n\n        return actualVisible;\n    }\n\n    function adjustTimeStampsForAssetVisibility(\n        uint256 minStartTime,\n        uint256 maxStartTime,\n        uint256 sunriseTime,\n        uint256 sunsetTime,\n        DAYTIME timeOfDayVisibility,\n        uint256 tolerance,\n        uint256 maxDuration\n    ) public pure returns (uint256, uint256, bool) {\n\n  \n        bool isTimeFrameValid = true;\n\n        if (timeOfDayVisibility == DAYTIME.DAY && minStartTime < sunriseTime) {\n            minStartTime = sunriseTime;\n        } else if (timeOfDayVisibility == DAYTIME.NIGHT && minStartTime < sunsetTime) {\n            minStartTime = sunsetTime;\n        }\n\n        // Berechnung der Toleranzzeit\n        uint256 toleranceTime = maxDuration * tolerance / 100;\n\n        // Anpassung von maxStartTime und \u00dcberpr\u00fcfung der G\u00fcltigkeit des Zeitrahmens\n        if (timeOfDayVisibility == DAYTIME.DAY) {\n            uint256 latestStartTimeForDayAsset = sunsetTime - maxDuration + toleranceTime;\n            if (maxStartTime > latestStartTimeForDayAsset) {\n                maxStartTime = latestStartTimeForDayAsset;\n            }\n            if (minStartTime > maxStartTime) {\n                isTimeFrameValid = false;\n            }\n        } else if (timeOfDayVisibility == DAYTIME.NIGHT) {\n            uint256 latestStartTimeForNightAsset = sunriseTime - maxDuration + toleranceTime;\n            if (maxStartTime > latestStartTimeForNightAsset) {\n                maxStartTime = latestStartTimeForNightAsset;\n            }\n            if (minStartTime > maxStartTime) {\n                isTimeFrameValid = false;\n            }\n        }\n\n        return (minStartTime, maxStartTime, isTimeFrameValid);\n    }\n\n\n    function generateClouds(uint skyHeight, uint tokenId, uint timestamp) public pure returns (string memory) {\n\n       // we add ann offset by token to cloud movement\n       timestamp = timestamp + randomNum(tokenId.toString(), 0, 8 hours);\n       uint timeForCloud = 80 minutes;\n       uint timeBetweenClouds = 20 minutes;\n       uint cloudDistance = 140;\n       string memory clouds;\n       uint i;\n       uint startTime;\n       string memory cloudNonce;\n       uint cloudIndex;\n       int cloudX;\n       int cloudY;\n       uint offset;\n       bool mirrored;\n       bool leftToRight;\n       uint cloudType;\n       uint passedDistance;\n\n       for ( i = 0; i < 4; i++) {\n            startTime = timestamp - (timestamp % timeBetweenClouds) - i * timeBetweenClouds;\n            cloudNonce = string.concat(tokenId.toString(), \"cloud\", startTime.toString());\n            cloudIndex = randomNum(cloudNonce, 0, 4);\n            if (cloudIndex > 2) continue;\n\n            cloudType = cloudIndex + 1;\n            mirrored = randomNum(string.concat(\"mir\", cloudNonce), 0, 100) > 50;\n            leftToRight = randomNum(string.concat(\"ltr\", cloudNonce), 0, 100) > 50;\n            offset = randomNum(cloudNonce, 0, 20);\n            passedDistance = (timestamp - startTime) * cloudDistance * 1e4 / (timeForCloud * 1e4);\n            cloudX = leftToRight ? -10 + int(passedDistance) - int(offset) : 100 + 10 - int(passedDistance) + int(offset);\n            cloudX = cloudX * 1080;\n            cloudY = int(randomNum(cloudNonce, 7000, skyHeight * 1e2 / 2));\n            clouds = string.concat(clouds, '<use href=\"#cloud', cloudType.toString(), '\" transform=\"translate(', renderDecimal(cloudX), ', ', renderDecimal(cloudY), ') scale(', mirrored ? \"-1\" : \"1\", ' 1)\"/>');\n       }\n\n\n        // horizon clouds\n\n\n        timeForCloud = 8 hours;\n        timeBetweenClouds = 4 hours;\n        cloudDistance = 200;\n\n        for (i = 0; i <2; i++) {\n            startTime = timestamp - (timestamp % timeBetweenClouds) - i * timeBetweenClouds;\n            cloudNonce = string.concat(tokenId.toString(), \"cloud\", startTime.toString());\n            cloudIndex = randomNum(cloudNonce, 0, 7);\n            if (cloudIndex > 4) continue;\n\n            cloudType = cloudIndex + 4;\n            mirrored = randomNum(string.concat(\"mir\", cloudNonce), 0, 100) > 50;\n            leftToRight = randomNum(string.concat(\"ltr\", cloudNonce), 0, 100) > 50;\n            passedDistance = (timestamp - startTime) * cloudDistance * 1e4 / (timeForCloud * 1e4);\n            cloudX = leftToRight ? -50 + int(passedDistance) : int(cloudDistance) - 50 - int(passedDistance);\n            cloudX = cloudX * 1080;\n            cloudY = int(randomNum(cloudNonce, (skyHeight - 20) * 1e2  , uint(skyHeight * 1e2)));\n            clouds = string.concat(clouds, '<use href=\"#cloud', cloudType.toString(), '\" transform=\"translate(', renderDecimal(cloudX), ', ', renderDecimal(cloudY), ') scale(', mirrored ? \"-1\" : \"1\", ' 1)\"/>');\n        }\n\n        clouds = string.concat(\"<g opacity='.8'>\", clouds, \"</g>\");\n        return clouds;\n   \n    }\n\n\n function formatChartNumber(uint256 number) public pure returns (string memory) {\n          if (number < 1e5) {\n            return renderDecimal(int(number), 2);\n          }\n          number = number / 1e2;\n          if (number < 1e6) {\n            return number.toString();\n          }\n        else if (number < 1e9) {\n            return string.concat(\n                (number / 1e6).toString(),\n                \".\",\n                padZeroes(((number % 1e6) / 1e3).toString(), 3),\n                \"M\"\n            );\n        } else if (number < 1e12) {\n            return string.concat(\n                (number / 1e9).toString(),\n                \".\",\n                padZeroes(((number % 1e9) / 1e6).toString(), 3),\n                \"B\"\n            );\n        } else {\n            return string.concat(\n                (number / 1e12).toString(),\n                \".\",\n                padZeroes(((number % 1e12) / 1e9).toString(), 3),\n                \"T\"\n            );\n        }\n    }\n\n\n\n\n    function renderReplacements(Replacement[] memory replacements, uint tokenId) public pure returns (string memory) {\n        string memory allReplacements;\n        string memory tokenIdStr = tokenId.toString();\n        for (uint i = 0; i < replacements.length; i++) {\n        Replacement memory replacement = replacements[i];\n        string memory replacementSvg;\n        if (replacement.tag == ObjectType.USE) {\n            uint iterationStep = (replacement.dataType == RenderDataType.POSITIONS) ? 2 : \n                                  (replacement.dataType == RenderDataType.POSISTIONSANDSCALE) ? 3 : 4;\n\n            for (uint j = 0; j < replacement.data.length; j += iterationStep) {\n                int x = replacement.data[j];\n                int y = replacement.data[j + 1];\n                string memory scaleX = replacement.dataType == RenderDataType.POSITIONS ? \"1\" : renderDecimal(int(replacement.data[j + 2]));\n                string memory scaleY = replacement.dataType == RenderDataType.POSITIONSANDTWOSCALES ? renderDecimal(int(replacement.data[j + 3])) : scaleX;\n\n                replacementSvg = string.concat(replacementSvg, '<use href=\"#',\n                        replacement.ref,'\" transform=\"translate(',\n                        x.toStringSigned(), ', ', y.toStringSigned(), ') scale(', scaleX, ', ', scaleY, ')\" />');\n                \n            }\n        }\n\n        allReplacements = string.concat(allReplacements, '<g id=\"', replacement.placeholder,\"-\",tokenIdStr, '\">', replacementSvg, '</g>');\n    }\n    return allReplacements;\n}\n\n\n\n\n     function setUseTags(string memory svgTemplate, string memory ref, int16[] memory positions, bool hasScale, string memory placeholder)\n        public\n        pure\n        returns (string memory)\n    {\n        string memory useTags = \"\";\n        uint256 iterationStep = hasScale ? 3 : 2;\n\n        for (uint256 i = 0; i < positions.length; i += iterationStep) {\n            string memory x = positions[i].toStringSigned();\n            string memory y = positions[i + 1].toStringSigned();\n            string memory scale = hasScale ? positions[i + 2].toStringSigned() : \"1\";\n            \n            useTags = string.concat(\n                useTags,\n                '<use href=\"#', ref, '\" transform=\"translate(', x, ', ', y, ') scale(', scale, ')\" />'\n            );\n        }\n\n        return replaceFirst(svgTemplate,placeholder, useTags);\n    } \n\n    \n\n\n    // is used for flowers and few plants\n    function setUseRotations(string memory svg, string memory ref, string memory placeHolder, int[] memory rotations, int16[2] memory rotationAnchor) public pure returns (string memory) {\n        string memory useTags = \"\";\n\n        for (uint256 i = 0; i < rotations.length; i++) {\n            useTags = string.concat(\n                useTags,\n                '<use href=\"#',\n               ref,\n                '\" transform=\"rotate(',\n                int256(rotations[i]).toStringSigned(),\n                ' ',\n                int256(rotationAnchor[0]).toStringSigned(),\n                ' ',\n                int256(rotationAnchor[1]).toStringSigned(),\n                ')\"/>'\n            );\n        }\n\n        return replaceFirst(svg, placeHolder, useTags);\n    }\n\n      function renderFinalNFT(string memory assetsSVG, uint tokenId, string memory motifSVG, SVGData memory svgData,  string memory maskedAssetsSVG, MotifType  motifType, uint timestamp) public pure returns (string memory) {\n\n\n        string memory waves = generateWaves(tokenId, timestamp);\n\n        string memory tokenIdStr = tokenId.toString();\n        string memory topSVG = \n        string.concat(\n        '<svg xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 1080 1080\">'\n        '<filter id=\"star-filter', tokenIdStr,'\">'\n        '<feTurbulence seed=\"', tokenIdStr, '\" baseFrequency=\".08\" result=\"turbulence\"/>'\n        '<feColorMatrix type=\"matrix\" values=\"0 0 0 9 -4 '\n                                             '0 0 0 9 -4 '\n                                             '0 0 0 9 -4 '\n                                             '0 0 0 1 0\" result=\"boosted\"/>'\n        '<feComponentTransfer>'\n            '<feFuncA type=\"table\" tableValues=\"0 0 0 1 0\"/>'\n        '</feComponentTransfer>'\n        '</filter>'\n         '<filter id=\"makeWhite\">'\n        '<feColorMatrix type=\"matrix\"'\n        ' values=\"1 1 1 1 0 '\n                '1 1 1 1 0 '\n                '1 1 1 1 0 '\n                '1 1 1 1 0\" />'\n        '</filter>'\n        '<filter id=\"makeBlack\">'\n        '<feColorMatrix type=\"matrix\"'\n        ' values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0\" /></filter>'\n        '<filter id=\"silh', tokenIdStr,'\" x=\"0\" y=\"0\" width=\"200%\" height=\"200%\">'\n        '<feFlood flood-color=\"', svgData.waterColor,'\" result=\"flood\" />'\n        '<feComposite in=\"flood\" in2=\"SourceAlpha\" operator=\"in\"/>'\n        '</filter>');\n\n\n\n\n        string memory skyBGSVG = string.concat('<rect fill=\"', svgData.skyColor, '\" width=\"1080\" height=\"1080\"/>');\n        string memory skyBehind = string.concat(topSVG, skyBGSVG , svgData.sunSVG, assetsSVG);\n\n        string memory moonMask = string.concat('<mask id=\"moonMask', tokenIdStr, '\"><rect fill=\"#fff\" width=\"1080\" height=\"1080\"/>','<use href=\"#motif',tokenIdStr, '\" filter=\"url(#makeBlack)\"/></mask>', svgData.nightSVG , svgData.moonSVG ,'</svg>');\n        string memory lightHouse =  tokenId == 3 ? '<use href=\"#lighthouse\" filter=\"url(#makeBlack)\"/>' : '';\n        string memory cityLights = motifType == MotifType.SKYSCRAPER ? string.concat('<use href=\"#s-light', tokenIdStr,'\" filter=\"url(#makeBlack)\"/>') : '';\n        string memory nightMask = string.concat('</g><mask id=\"nightMask', tokenIdStr, '\">','<rect fill=\"#fff\" width=\"1080\" height=\"1080\"/>', lightHouse, maskedAssetsSVG , cityLights,'<use href=\"#bird-group',tokenIdStr,'\" filter=\"url(#makeWhite)\"/></mask>');\n\n        string memory outputSVG = string.concat(skyBehind, '<g id=\"motif',tokenIdStr, '\">',svgData.cloudsSVG, svgData.skySceneSVG,  motifSVG, nightMask, '<defs>', waves ,svgData.flowerSVG, svgData.replacements, '</defs>',  moonMask  );\n\n        return outputSVG;\n\n\n    }\n\n\n    function generateWaves(uint tokenId, uint timestamp) public pure returns (string memory) {\n        string memory tokenIdstr = tokenId.toString();\n        int y = int(randomNum(string.concat(tokenIdstr, timestamp.toString()),0,60  )) - 30;\n        if (y > -5 && y < 5){\n            y = y < 0 ? -5 : int(5);\n        }\n        return string.concat(\n'<g id=\"crest', tokenIdstr,'\"><rect fill=\"#FCD899\" id=\"first-c', tokenIdstr ,'\" width=\"300\" x=\"0\" height=\"4\" y=\"', y.toStringSigned() ,'\" /><use href=\"#first-c', tokenIdstr, '\" transform=\"translate(400) scale(1,-1)\" /></g>'\n'<pattern viewBox=\"-20 -20 800 800\" id=\"crestA', tokenIdstr ,'\" width=\".7\" height=\"1\"><use href=\"#crest', tokenIdstr, '\"  /></pattern>'\n'<pattern viewBox=\"-50 -20 800 800\" id=\"crestB', tokenIdstr,'\" width=\".5\" height=\"1\"><use href=\"#crest', tokenIdstr ,'\" /></pattern>'\n'<pattern viewBox=\"20 -20 800 800\" id=\"crestC', tokenIdstr ,'\" width=\".375\" height=\"1\"><use href=\"#crest',tokenIdstr ,'\"  /></pattern>'\n'<pattern viewBox=\"20 -20 800 800\" id=\"crestD',tokenIdstr, '\" width=\".25\" height=\"1\"><use href=\"#crest',tokenIdstr ,'\"  /></pattern>'\n'<pattern viewBox=\"20 -20 800 800\" id=\"crestE', tokenIdstr, '\" width=\".15\" height=\"1\"><use href=\"#crest', tokenIdstr,'\" /></pattern>'\n'<g id=\"crests', tokenIdstr ,'\"  transform=\"translate(0,800) scale(1,-1)\">'\n'<rect width=\"100%\" height=\"100%\" fill=\"url(#crestA', tokenIdstr, ')\" />'\n'<rect width=\"100%\" height=\"100%\" fill=\"url(#crestB', tokenIdstr,')\" />'\n'<rect width=\"100%\" height=\"100%\" fill=\"url(#crestC',tokenIdstr,')\" />'\n'<rect width=\"100%\" height=\"100%\" fill=\"url(#crestD',tokenIdstr,')\" />'\n'<rect width=\"100%\" height=\"100%\" fill=\"url(#crestE',tokenIdstr,')\" />'\n'</g>');\n\n    }\n\n\n\n\n\n}"}, "contracts/solidity-trigonometry/Trigonometry.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\n/**\n * @notice Solidity library offering basic trigonometry functions where inputs and outputs are\n * integers. Inputs are specified in radians scaled by 1e18, and similarly outputs are scaled by 1e18.\n *\n * This implementation is based off the Solidity trigonometry library written by Lefteris Karapetsas\n * which can be found here: https://github.com/Sikorkaio/sikorka/blob/e75c91925c914beaedf4841c0336a806f2b5f66d/contracts/trigonometry.sol\n *\n * Compared to Lefteris' implementation, this version makes the following changes:\n *   - Uses a 32 bits instead of 16 bits for improved accuracy\n *   - Updated for Solidity 0.8.x\n *   - Various gas optimizations\n *   - Change inputs/outputs to standard trig format (scaled by 1e18) instead of requiring the\n *     integer format used by the algorithm\n *\n * Lefertis' implementation is based off Dave Dribin's trigint C library\n *     http://www.dribin.org/dave/trigint/\n *\n * Which in turn is based from a now deleted article which can be found in the Wayback Machine:\n *     http://web.archive.org/web/20120301144605/http://www.dattalo.com/technical/software/pic/picsine.html\n */\nlibrary Trigonometry {\n  // Table index into the trigonometric table\n  uint256 constant INDEX_WIDTH        = 8;\n  // Interpolation between successive entries in the table\n  uint256 constant INTERP_WIDTH       = 16;\n  uint256 constant INDEX_OFFSET       = 28 - INDEX_WIDTH;\n  uint256 constant INTERP_OFFSET      = INDEX_OFFSET - INTERP_WIDTH;\n  uint32  constant ANGLES_IN_CYCLE    = 1073741824;\n  uint32  constant QUADRANT_HIGH_MASK = 536870912;\n  uint32  constant QUADRANT_LOW_MASK  = 268435456;\n  uint256 constant SINE_TABLE_SIZE    = 256;\n\n  // Pi as an 18 decimal value, which is plenty of accuracy: \"For JPL's highest accuracy calculations, which are for\n  // interplanetary navigation, we use 3.141592653589793: https://www.jpl.nasa.gov/edu/news/2016/3/16/how-many-decimals-of-pi-do-we-really-need/\n  uint256 constant PI          = 3141592653589793238;\n  uint256 constant TWO_PI      = 2 * PI;\n  uint256 constant PI_OVER_TWO = PI / 2;\n\n  // The constant sine lookup table was generated by generate_trigonometry.py. We must use a constant\n  // bytes array because constant arrays are not supported in Solidity. Each entry in the lookup\n  // table is 4 bytes. Since we're using 32-bit parameters for the lookup table, we get a table size\n  // of 2^(32/4) + 1 = 257, where the first and last entries are equivalent (hence the table size of\n  // 256 defined above)\n  uint8   constant entry_bytes = 4; // each entry in the lookup table is 4 bytes\n  uint256 constant entry_mask  = ((1 << 8*entry_bytes) - 1); // mask used to cast bytes32 -> lookup table entry\n  bytes   constant sin_table   = hex\"00_00_00_00_00_c9_0f_88_01_92_1d_20_02_5b_26_d7_03_24_2a_bf_03_ed_26_e6_04_b6_19_5d_05_7f_00_35_06_47_d9_7c_07_10_a3_45_07_d9_5b_9e_08_a2_00_9a_09_6a_90_49_0a_33_08_bc_0a_fb_68_05_0b_c3_ac_35_0c_8b_d3_5e_0d_53_db_92_0e_1b_c2_e4_0e_e3_87_66_0f_ab_27_2b_10_72_a0_48_11_39_f0_cf_12_01_16_d5_12_c8_10_6e_13_8e_db_b1_14_55_76_b1_15_1b_df_85_15_e2_14_44_16_a8_13_05_17_6d_d9_de_18_33_66_e8_18_f8_b8_3c_19_bd_cb_f3_1a_82_a0_25_1b_47_32_ef_1c_0b_82_6a_1c_cf_8c_b3_1d_93_4f_e5_1e_56_ca_1e_1f_19_f9_7b_1f_dc_dc_1b_20_9f_70_1c_21_61_b3_9f_22_23_a4_c5_22_e5_41_af_23_a6_88_7e_24_67_77_57_25_28_0c_5d_25_e8_45_b6_26_a8_21_85_27_67_9d_f4_28_26_b9_28_28_e5_71_4a_29_a3_c4_85_2a_61_b1_01_2b_1f_34_eb_2b_dc_4e_6f_2c_98_fb_ba_2d_55_3a_fb_2e_11_0a_62_2e_cc_68_1e_2f_87_52_62_30_41_c7_60_30_fb_c5_4d_31_b5_4a_5d_32_6e_54_c7_33_26_e2_c2_33_de_f2_87_34_96_82_4f_35_4d_90_56_36_04_1a_d9_36_ba_20_13_37_6f_9e_46_38_24_93_b0_38_d8_fe_93_39_8c_dd_32_3a_40_2d_d1_3a_f2_ee_b7_3b_a5_1e_29_3c_56_ba_70_3d_07_c1_d5_3d_b8_32_a5_3e_68_0b_2c_3f_17_49_b7_3f_c5_ec_97_40_73_f2_1d_41_21_58_9a_41_ce_1e_64_42_7a_41_d0_43_25_c1_35_43_d0_9a_ec_44_7a_cd_50_45_24_56_bc_45_cd_35_8f_46_75_68_27_47_1c_ec_e6_47_c3_c2_2e_48_69_e6_64_49_0f_57_ee_49_b4_15_33_4a_58_1c_9d_4a_fb_6c_97_4b_9e_03_8f_4c_3f_df_f3_4c_e1_00_34_4d_81_62_c3_4e_21_06_17_4e_bf_e8_a4_4f_5e_08_e2_4f_fb_65_4c_50_97_fc_5e_51_33_cc_94_51_ce_d4_6e_52_69_12_6e_53_02_85_17_53_9b_2a_ef_54_33_02_7d_54_ca_0a_4a_55_60_40_e2_55_f5_a4_d2_56_8a_34_a9_57_1d_ee_f9_57_b0_d2_55_58_42_dd_54_58_d4_0e_8c_59_64_64_97_59_f3_de_12_5a_82_79_99_5b_10_35_ce_5b_9d_11_53_5c_29_0a_cc_5c_b4_20_df_5d_3e_52_36_5d_c7_9d_7b_5e_50_01_5d_5e_d7_7c_89_5f_5e_0d_b2_5f_e3_b3_8d_60_68_6c_ce_60_ec_38_2f_61_6f_14_6b_61_f1_00_3e_62_71_fa_68_62_f2_01_ac_63_71_14_cc_63_ef_32_8f_64_6c_59_bf_64_e8_89_25_65_63_bf_91_65_dd_fb_d2_66_57_3c_bb_66_cf_81_1f_67_46_c7_d7_67_bd_0f_bc_68_32_57_aa_68_a6_9e_80_69_19_e3_1f_69_8c_24_6b_69_fd_61_4a_6a_6d_98_a3_6a_dc_c9_64_6b_4a_f2_78_6b_b8_12_d0_6c_24_29_5f_6c_8f_35_1b_6c_f9_34_fb_6d_62_27_f9_6d_ca_0d_14_6e_30_e3_49_6e_96_a9_9c_6e_fb_5f_11_6f_5f_02_b1_6f_c1_93_84_70_23_10_99_70_83_78_fe_70_e2_cb_c5_71_41_08_04_71_9e_2c_d1_71_fa_39_48_72_55_2c_84_72_af_05_a6_73_07_c3_cf_73_5f_66_25_73_b5_eb_d0_74_0b_53_fa_74_5f_9d_d0_74_b2_c8_83_75_04_d3_44_75_55_bd_4b_75_a5_85_ce_75_f4_2c_0a_76_41_af_3c_76_8e_0e_a5_76_d9_49_88_77_23_5f_2c_77_6c_4e_da_77_b4_17_df_77_fa_b9_88_78_40_33_28_78_84_84_13_78_c7_ab_a1_79_09_a9_2c_79_4a_7c_11_79_8a_23_b0_79_c8_9f_6d_7a_05_ee_ac_7a_42_10_d8_7a_7d_05_5a_7a_b6_cb_a3_7a_ef_63_23_7b_26_cb_4e_7b_5d_03_9d_7b_92_0b_88_7b_c5_e2_8f_7b_f8_88_2f_7c_29_fb_ed_7c_5a_3d_4f_7c_89_4b_dd_7c_b7_27_23_7c_e3_ce_b1_7d_0f_42_17_7d_39_80_eb_7d_62_8a_c5_7d_8a_5f_3f_7d_b0_fd_f7_7d_d6_66_8e_7d_fa_98_a7_7e_1d_93_e9_7e_3f_57_fe_7e_5f_e4_92_7e_7f_39_56_7e_9d_55_fb_7e_ba_3a_38_7e_d5_e5_c5_7e_f0_58_5f_7f_09_91_c3_7f_21_91_b3_7f_38_57_f5_7f_4d_e4_50_7f_62_36_8e_7f_75_4e_7f_7f_87_2b_f2_7f_97_ce_bc_7f_a7_36_b3_7f_b5_63_b2_7f_c2_55_95_7f_ce_0c_3d_7f_d8_87_8d_7f_e1_c7_6a_7f_e9_cb_bf_7f_f0_94_77_7f_f6_21_81_7f_fa_72_d0_7f_fd_88_59_7f_ff_62_15_7f_ff_ff_ff\";\n\n  function sin(int angle) internal pure returns (int256) {\n    if (angle < 0) {\n      return -sin(uint256(-angle));\n    } else {\n      return sin(uint256(angle));\n    }\n  }\n  /**\n   * @notice Return the sine of a value, specified in radians scaled by 1e18\n   * @dev This algorithm for converting sine only uses integer values, and it works by dividing the\n   * circle into 30 bit angles, i.e. there are 1,073,741,824 (2^30) angle units, instead of the\n   * standard 360 degrees (2pi radians). From there, we get an output in range -2,147,483,647 to\n   * 2,147,483,647, (which is the max value of an int32) which is then converted back to the standard\n   * range of -1 to 1, again scaled by 1e18\n   * @param _angle Angle to convert\n   * @return Result scaled by 1e18\n   */\n  function sin(uint256 _angle) internal pure returns (int256) {\n    unchecked {\n      // Convert angle from from arbitrary radian value (range of 0 to 2pi) to the algorithm's range\n      // of 0 to 1,073,741,824\n      _angle = ANGLES_IN_CYCLE * (_angle % TWO_PI) / TWO_PI;\n\n      // Apply a mask on an integer to extract a certain number of bits, where angle is the integer\n      // whose bits we want to get, the width is the width of the bits (in bits) we want to extract,\n      // and the offset is the offset of the bits (in bits) we want to extract. The result is an\n      // integer containing _width bits of _value starting at the offset bit\n      uint256 interp = (_angle >> INTERP_OFFSET) & ((1 << INTERP_WIDTH) - 1);\n      uint256 index  = (_angle >> INDEX_OFFSET)  & ((1 << INDEX_WIDTH)  - 1);\n\n      // The lookup table only contains data for one quadrant (since sin is symmetric around both\n      // axes), so here we figure out which quadrant we're in, then we lookup the values in the\n      // table then modify values accordingly\n      bool is_odd_quadrant      = (_angle & QUADRANT_LOW_MASK)  == 0;\n      bool is_negative_quadrant = (_angle & QUADRANT_HIGH_MASK) != 0;\n\n      if (!is_odd_quadrant) {\n        index = SINE_TABLE_SIZE - 1 - index;\n      }\n\n      bytes memory table = sin_table;\n      // We are looking for two consecutive indices in our lookup table\n      // Since EVM is left aligned, to read n bytes of data from idx i, we must read from `i * data_len` + `n`\n      // therefore, to read two entries of size entry_bytes `index * entry_bytes` + `entry_bytes * 2`\n      uint256 offset1_2 = (index + 2) * entry_bytes;\n\n      // This following snippet will function for any entry_bytes <= 15\n      uint256 x1_2; assembly {\n        // mload will grab one word worth of bytes (32), as that is the minimum size in EVM\n        x1_2 := mload(add(table, offset1_2))\n      }\n\n      // We now read the last two numbers of size entry_bytes from x1_2\n      // in example: entry_bytes = 4; x1_2 = 0x00...12345678abcdefgh\n      // therefore: entry_mask = 0xFFFFFFFF\n\n      // 0x00...12345678abcdefgh >> 8*4 = 0x00...12345678\n      // 0x00...12345678 & 0xFFFFFFFF = 0x12345678\n      uint256 x1 = x1_2 >> 8*entry_bytes & entry_mask;\n      // 0x00...12345678abcdefgh & 0xFFFFFFFF = 0xabcdefgh\n      uint256 x2 = x1_2 & entry_mask;\n\n      // Approximate angle by interpolating in the table, accounting for the quadrant\n      uint256 approximation = ((x2 - x1) * interp) >> INTERP_WIDTH;\n      int256 sine = is_odd_quadrant ? int256(x1) + int256(approximation) : int256(x2) - int256(approximation);\n      if (is_negative_quadrant) {\n        sine *= -1;\n      }\n\n      // Bring result from the range of -2,147,483,647 through 2,147,483,647 to -1e18 through 1e18.\n      // This can never overflow because sine is bounded by the above values\n      return sine * 1e18 / 2_147_483_647;\n    }\n  }\n\n  function cos(int angle) internal pure returns (int256) {\n    if (angle < 0) {\n      return cos(uint256(-angle));\n    } else {\n      return cos(uint256(angle));\n    }\n  }\n\n  /**\n   * @notice Return the cosine of a value, specified in radians scaled by 1e18\n   * @dev This is identical to the sin() method, and just computes the value by delegating to the\n   * sin() method using the identity cos(x) = sin(x + pi/2)\n   * @dev Overflow when `angle + PI_OVER_TWO > type(uint256).max` is ok, results are still accurate\n   * @param _angle Angle to convert\n   * @return Result scaled by 1e18\n   */\n  function cos(uint256 _angle) internal pure returns (int256) {\n    unchecked {\n      return sin(_angle + PI_OVER_TWO);\n    }\n  }\n}\n"}, "forge-std/console.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n    function _sendLogPayload(bytes memory payload) private view {\n        uint256 payloadLength = payload.length;\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            let payloadStart := add(payload, 32)\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n        }\n    }\n\n    function log() internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n\n    function logInt(int p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n    }\n\n    function logUint(uint p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n    }\n\n    function logString(string memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n    }\n\n    function log(string memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint p0, uint p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n    }\n\n    function log(uint p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n    }\n\n    function log(uint p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n    }\n\n    function log(uint p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint p0, uint p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n\n}"}}, "settings": {"viaIR": false, "optimizer": {"enabled": true}, "evmVersion": "paris", "outputSelection": {"*": {"*": ["evm.legacyAssembly"]}}, "libraries": {"contracts/NDDecoder.sol": {"NDDecoder": "0xd93d701D1B3b83Ae6F9D17E4440ed7890def7Ea3"}, "contracts/NDUtils.sol": {"NDUtils": "0x7338E0762d1580302d26e8E34CA21565Bf9E95f9"}}}}
{"language": "Solidity", "sources": {"src/AutoLayerForwarder.sol": {"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.30;\n\n\nimport {AggregatorV3Interface} from \"../lib/foundry-chainlink-toolkit/src/interfaces/feeds/AggregatorV3Interface.sol\";\nimport {IERC20} from \"../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\nimport {IERC721} from \"../lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\";\nimport {AutoLayerPoints} from \"./AutoLayerPoints.sol\";\nimport {AutoLayerPointsMultipleSeason} from \"./AutoLayerPointsMultipleSeason.sol\";\nimport { AutoLayerReferals } from \"./AutoLayerReferals.sol\";\nimport { AutoLayerReferalsCalc } from \"./AutoLayerReferalsCalc.sol\";\nimport \"../lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\";\n\n\nimport \"../lib/openzeppelin-contracts/contracts/access/Ownable.sol\";\nimport \"./utils/AutoLayerReferral.sol\";\nimport \"../lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport './utils/AutoLayerUtils.sol';\nimport \"./interfaces/IParaSwap.sol\";\nimport \"./interfaces/IBalancer.sol\";\nimport \"./interfaces/IGamma.sol\";\nimport \"./interfaces/INFTPool.sol\";\nimport \"./interfaces/IHipervisor.sol\";\nimport \"./interfaces/IGammaUniProxy.sol\";\n\ncontract AutoLayerForwarder is Ownable, IERC721Receiver {\n    using SafeERC20 for IERC20;\n\n    AutoLayerPoints public autoLayerPoints;\n    AutoLayerPointsMultipleSeason public autoLayerPointsMultipleSeason;\n    AggregatorV3Interface priceFeed;\n    AutoLayerReferals autolayerReferals;\n    AutoLayerReferalsCalc autolayerReferalsCalc;\n    address router;\n    IBalancer balancerVault;\n    IGamma gammaProxy;\n    address tokenProxy;\n    mapping(address => bool) public isTokenWhitelisted;\n    mapping(address => uint8) public tokenBoost;\n\n    event TokensAmount(address user, address token, uint256 amount);\n\n    constructor(\n        address autoLayerPointsAddress_, \n        address autoLayerMultipleSeasonAddress_, \n        address referralsAddress_, \n        address referralsCalcAddress_, \n        address routerAddress_, \n        address ETHUSDPriceFeedAdress_, \n        address balancerVaultAddress_, \n        address tokenProxyAddress_, \n        address gammaProxyAddress_\n    ) Ownable(msg.sender) {\n        autoLayerPoints = AutoLayerPoints(autoLayerPointsAddress_);\n        autoLayerPointsMultipleSeason = AutoLayerPointsMultipleSeason(autoLayerMultipleSeasonAddress_);\n        priceFeed = AggregatorV3Interface(ETHUSDPriceFeedAdress_);\n        router = routerAddress_;\n        balancerVault = IBalancer(balancerVaultAddress_);\n        tokenProxy = tokenProxyAddress_;\n        gammaProxy = IGamma(gammaProxyAddress_);\n        autolayerReferals = AutoLayerReferals(referralsAddress_);\n        autolayerReferalsCalc = AutoLayerReferalsCalc(referralsCalcAddress_);\n    }\n\n    function swapTokensWithETH(bytes calldata swapData_) external payable returns(uint256 swappedAmount) {\n        bytes memory dataWithoutFunctionSelector_ = bytes(swapData_[4:]);\n        (Utils.SellData memory sellData_) = abi.decode(dataWithoutFunctionSelector_, (Utils.SellData));\n\n        address toToken_ = address(sellData_.path[sellData_.path.length - 1].to);\n        require(sellData_.fromToken != toToken_, \"Swapping to same token is not allowed\");\n\n        if (sellData_.fromToken == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)) require(msg.value == sellData_.fromAmount, \"Amount not matching\");\n        else {\n            IERC20(sellData_.fromToken).safeTransferFrom(msg.sender, address(this), sellData_.fromAmount);\n            IERC20(sellData_.fromToken).approve(tokenProxy, sellData_.fromAmount);\n        }\n\n        uint256 balanceBefore_;\n        if (toToken_ != address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)) {\n            balanceBefore_ = IERC20(toToken_).balanceOf(address(this));\n        } else balanceBefore_ = address(this).balance;\n\n        (bool success, ) = router.call{value: msg.value}(swapData_);\n        require(success, \"Swap failed\");\n\n        uint256 balanceAfter_;\n        if (toToken_ != address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)) balanceAfter_ = IERC20(toToken_).balanceOf(address(this));\n        else balanceAfter_ = address(this).balance;\n        swappedAmount = balanceAfter_ - balanceBefore_;\n\n        if(isTokenWhitelisted[toToken_]) {\n            uint8 tokenBoost_ = tokenBoost[toToken_];\n            addUserPoints(swappedAmount, tokenBoost_, toToken_);\n        }\n\n        if (toToken_ != address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)) IERC20(toToken_).safeTransfer(msg.sender, swappedAmount);\n        else {\n            (bool success_, ) = msg.sender.call{value: swappedAmount}(\"\");\n            require(success_, \"ETH send failed\");\n        }\n    }\n\n    function swapTokens(bytes calldata swapData_) external returns(uint256 swappedAmount) {\n        bytes memory dataWithoutFunctionSelector_ = bytes(swapData_[4:]);\n        (Utils.SellData memory sellData_) = abi.decode(dataWithoutFunctionSelector_, (Utils.SellData));\n\n        address toToken_ = address(sellData_.path[sellData_.path.length - 1].to);\n        require(sellData_.fromToken != toToken_, \"Swapping to same token is not allowed\");\n\n        IERC20(sellData_.fromToken).safeTransferFrom(msg.sender, address(this), sellData_.fromAmount);\n        uint256 balanceBefore_ = IERC20(toToken_).balanceOf(address(this));\n\n        IERC20(sellData_.fromToken).approve(tokenProxy, sellData_.fromAmount);\n        (bool success, ) = router.call(swapData_);\n        require(success, \"Swap failed\");\n        uint256 balanceAfter_ = IERC20(toToken_).balanceOf(address(this));\n        swappedAmount = balanceAfter_ - balanceBefore_;\n\n        if(isTokenWhitelisted[toToken_]) {\n            uint8 tokenBoost_ = tokenBoost[toToken_];\n            addUserPoints(swappedAmount, tokenBoost_, toToken_);\n        }\n        IERC20(toToken_).safeTransfer(msg.sender, swappedAmount);\n    }\n\n    function addLiquidityToBalancer(bytes calldata swapData_, address[] memory tokens_, address[] memory tokensWithBpt_, bytes32 poolId_) external payable returns (uint256 bptAmount_){\n        (uint256 fromAmount, uint256 swappedAmount, address fromToken_, address toToken_) = internalSwap(swapData_);\n\n        if (fromToken_ == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)) require(fromAmount == msg.value, \"Incorrect ETH amount\");\n\n        address bptAddress = getBptAddress(poolId_);\n        uint256[] memory amountsWithBPT = AutoLayerUtils.generateAmounts(swappedAmount, tokensWithBpt_, toToken_);\n        uint256[] memory amountsWithoutBPT = AutoLayerUtils.generateAmounts(swappedAmount, tokens_, toToken_);\n        bytes memory userDataEncoded_ = abi.encode(1, amountsWithoutBPT);\n        JoinPoolRequest memory joinRequest_ = JoinPoolRequest(tokensWithBpt_, amountsWithBPT, userDataEncoded_, false);\n\n        uint256 bptAmountBeforeDeposit_ = IERC20(bptAddress).balanceOf(address(this));\n        IERC20(toToken_).approve(address(balancerVault), swappedAmount);\n        balancerVault.joinPool(poolId_, address(this), address(this), joinRequest_);\n        bptAmount_ = IERC20(bptAddress).balanceOf(address(this)) - bptAmountBeforeDeposit_;\n\n        IERC20(bptAddress).safeTransfer(msg.sender, bptAmount_);\n    }\n\n    function removeLiquidityFromBalancer(bytes32 poolId_, address bptToken_, address tokenOut_, address[] memory tokens_, uint256[] memory minAmountsOut_, uint256 bptAmount_) external {\n        require(tokens_.length == minAmountsOut_.length, \"Not matching lengths\");\n\n        IERC20(bptToken_).safeTransferFrom(msg.sender, address(this), bptAmount_);\n        IERC20(bptToken_).approve(address(balancerVault), bptAmount_);\n\n        bytes memory userDataEncoded_ = abi.encode(0, bptAmount_, 0);\n        IAsset[] memory assets_ = AutoLayerUtils.tokensToAssets(tokens_);\n        ExitPoolRequest memory request_ = ExitPoolRequest(assets_, minAmountsOut_, userDataEncoded_, false);\n\n        uint256 balanceBefore_ = IERC20(tokenOut_).balanceOf(address(this));\n        balancerVault.exitPool(poolId_, address(this), payable(address(this)), request_);\n        uint256 balanceAfter_ = IERC20(tokenOut_).balanceOf(address(this));\n\n        IERC20(tokenOut_).safeTransfer(msg.sender, balanceAfter_ - balanceBefore_);\n    }\n\n    function addLiquidityToCamelot(bytes calldata swapData0_, bytes calldata swapData1_, address pos, uint256[4] memory minIn, address nftPool, uint256 lockDuration) public payable {\n        (uint256 fromAmount0, uint256 swappedAmount0, address fromToken_0, address toToken_0) = internalSwap(swapData0_);\n        (uint256 fromAmount1, uint256 swappedAmount1, address fromToken_1, address toToken_1) = internalSwap(swapData1_);\n\n        if (fromToken_0 == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)) require(fromAmount0 + fromAmount1 == msg.value, \"Incorrect ETH amount\");\n\n        address gammaUniProxyAddress = gammaProxy.gammaUniProxy();\n        (uint256 requiredSecondLow, uint256 requiredSecondHigh) = IGammaUniProxy(gammaUniProxyAddress).getDepositAmount(pos, toToken_0, swappedAmount0);\n        (uint256 requiredFirstLow, uint256 requiredFirstHigh) = IGammaUniProxy(gammaUniProxyAddress).getDepositAmount(pos, toToken_1, swappedAmount1);\n\n        uint256 finalAmount0;\n        uint256 finalAmount1;\n        uint256 resendAmount;\n        address resendToken;\n        if (swappedAmount0 >= requiredFirstLow && swappedAmount0 <= requiredFirstHigh) {\n            finalAmount0 = swappedAmount0;\n            finalAmount1 = swappedAmount1;\n        } else if (swappedAmount0 > requiredFirstHigh) {\n            finalAmount0 = requiredFirstHigh;\n            finalAmount1 = swappedAmount1;\n            resendAmount = swappedAmount0 - requiredFirstHigh;\n            resendToken = toToken_0;\n        } else if (swappedAmount1 > requiredSecondHigh) {\n            finalAmount0 = swappedAmount0;\n            finalAmount1 = requiredSecondHigh;\n            resendAmount = swappedAmount1 - requiredSecondHigh;\n            resendToken = toToken_1;\n        } else {\n            revert(\"Incorrect swapped amounts\");\n        }\n\n        IERC20(toToken_0).approve(address(gammaProxy), swappedAmount0);\n        IERC20(toToken_1).approve(address(gammaProxy), swappedAmount1);\n\n        uint256 NFTId = INFTPool(nftPool).lastTokenId();\n        gammaProxy.deposit(toToken_0, toToken_1, finalAmount0, finalAmount1, pos, minIn, nftPool, lockDuration);\n        IERC721(nftPool).safeTransferFrom(address(this), msg.sender, NFTId + 1);\n        if (resendAmount != 0) IERC20(resendToken).safeTransfer(msg.sender, resendAmount);\n    }\n\n    function withdrawFromCamelotPosition(address nftPool, uint256 tokenId, uint256 amountToWithdraw) public {\n        INFTPool(nftPool).withdrawFromPosition(tokenId, amountToWithdraw);\n    }\n\n    function unbindCamelotPosition(address positionAddress, uint256 sharesAmount, uint256[4] memory minAmounts) external {\n        IERC20(positionAddress).safeTransferFrom(msg.sender, address(this), sharesAmount);\n        IHipervisor(positionAddress).withdraw(sharesAmount, msg.sender, address(this), minAmounts);\n    }\n\n    function internalSwap(bytes calldata swapData_) internal returns(uint256 fromAmount, uint256 swappedAmount, address fromToken, address toToken) {\n        bytes memory dataWithoutFunctionSelector_ = bytes(swapData_[4:]);\n        (Utils.SellData memory sellData_) = abi.decode(dataWithoutFunctionSelector_, (Utils.SellData));\n\n        fromToken = sellData_.fromToken;\n        toToken = address(sellData_.path[sellData_.path.length - 1].to);\n\n        require(fromToken != toToken, \"Swapping to same token is not allowed\");\n        if (fromToken != address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)) {\n            IERC20(fromToken).safeTransferFrom(msg.sender, address(this), sellData_.fromAmount);\n            IERC20(fromToken).approve(tokenProxy, sellData_.fromAmount);\n        }\n\n        fromAmount = sellData_.fromAmount;\n\n        uint256 balanceBefore_;\n        if (toToken != address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)) {\n            balanceBefore_ = IERC20(toToken).balanceOf(address(this));\n        } else balanceBefore_ = address(this).balance;\n\n        bool success;\n        if (fromToken == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)) {\n            (success, ) = router.call{value: fromAmount}(swapData_);\n        } else (success, ) = router.call(swapData_);\n\n        require(success, \"Swap failed\");\n\n        uint256 balanceAfter_;\n        if (toToken != address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)) balanceAfter_ = IERC20(toToken).balanceOf(address(this));\n        else balanceAfter_ = address(this).balance;\n        swappedAmount = balanceAfter_ - balanceBefore_;\n\n        if(isTokenWhitelisted[toToken]) {\n            uint8 tokenBoost_ = tokenBoost[toToken];\n            addUserPoints(swappedAmount, tokenBoost_, toToken);\n        }\n    }\n\n    function getBptAddress(bytes32 poolId_) public view returns(address bptAddress) {\n        (bptAddress, ) = balancerVault.getPool(poolId_);\n    }\n\n    function checkReferalCode(string memory code) internal pure returns (bool isFirstTx) {\n        return (bytes(code).length != 0);\n    }\n\n    function addUserPoints(uint256 ETHAmount_, uint8 tokenBoost_, address destToken) internal {\n        uint256 ETHCurrentPrice = retrieveETHPrice() / (10 ** priceFeed.decimals());\n        uint256 usdAmount = ETHAmount_ * ETHCurrentPrice;\n        uint256 pointsReferee = usdAmount * tokenBoost_;\n        uint256 pointsReferal = 0;\n        address referalAddress = address(0);\n\n        ReferalsUtils.RefereeStats memory referal = autolayerReferals.getUserReferal(msg.sender);\n\n        if (checkReferalCode(referal.referalCode)) {\n            ReferalsUtils.ReferalCode memory codeData = autolayerReferals.getReferalCode(referal.referalCode);\n            ReferalsUtils.ReferralResult memory result = autolayerReferalsCalc.calcPoints(referal.usageCount, usdAmount);\n\n            pointsReferal += result.referalPoints * tokenBoost_;\n            pointsReferee += result.refereePoints * tokenBoost_;\n\n            referalAddress = codeData.owner;\n\n            autoLayerPoints.addPoints(referalAddress, pointsReferal);\n            autolayerReferals.trackTransaction(msg.sender, referal.referalCode, usdAmount, pointsReferal, pointsReferee);\n        }\n\n        autoLayerPoints.addPoints(msg.sender, pointsReferee);\n        emit TokensAmount(msg.sender, destToken, usdAmount);\n\n        if (autoLayerPointsMultipleSeason.isCurrentSeasonOpen()) {\n          autoLayerPointsMultipleSeason.addPoints(msg.sender, pointsReferee);\n          if (pointsReferal != 0 && referalAddress != address(0)) {\n            autoLayerPointsMultipleSeason.addPoints(referalAddress, pointsReferal);\n          }\n        }\n    }\n\n    function setAutolayerReferralCalc(address contractAddress) external onlyOwner {\n      autolayerReferalsCalc = AutoLayerReferalsCalc(contractAddress);\n    }\n\n    function retrieveETHPrice() internal view returns(uint256 answer_) {\n       (, int answer,,,) = priceFeed.latestRoundData();\n\n       if (answer < 0) return 0;\n       else return uint256(answer);\n    }\n\n    function whitelistTokens(address[] memory tokenAddresses_) external onlyOwner() {\n        for (uint8 i; i < tokenAddresses_.length; i++) {\n            isTokenWhitelisted[tokenAddresses_[i]] = true;\n            tokenBoost[tokenAddresses_[i]] = 1;\n        }\n    }\n\n    function blackListTokens(address[] memory tokenAddresses_) external onlyOwner() {\n        for (uint8 i; i < tokenAddresses_.length; i++) {\n            isTokenWhitelisted[tokenAddresses_[i]] = false;\n        }\n    }\n\n    function changeTokenBoost(address tokenAddress_, uint8 newBoost) external onlyOwner() {\n        require(isTokenWhitelisted[tokenAddress_], \"Token is not whitelisted\");\n        tokenBoost[tokenAddress_] = newBoost;\n    }\n\n    receive() external virtual payable {\n\n    }\n\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external pure override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n}"}, "lib/foundry-chainlink-toolkit/src/interfaces/feeds/AggregatorV3Interface.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n  function description() external view returns (string memory);\n  function version() external view returns (uint256);\n  function getRoundData(uint80 _roundId) external view returns (\n    uint80 roundId,\n    int256 answer,\n    uint256 startedAt,\n    uint256 updatedAt,\n    uint80 answeredInRound\n  );\n  function latestRoundData() external view returns (\n    uint80 roundId,\n    int256 answer,\n    uint256 startedAt,\n    uint256 updatedAt,\n    uint80 answeredInRound\n  );\n}\n"}, "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"}, "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC-721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"}, "src/AutoLayerPoints.sol": {"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.30;\n\nimport \"../lib/openzeppelin-contracts/contracts/access/Ownable.sol\";\n\ncontract AutoLayerPoints is Ownable {\n\n    mapping(address => uint256) public userPoints;\n    mapping(address => bool) public isAllowed;\n\n    event AutoLayerPointsAdded(address user, uint256 pointsAdded);\n    event AutoLayerPointsRemoved(address user, uint256 pointsAdded);\n\n    modifier onlyAllowed() {\n        require(isAllowed[msg.sender] || msg.sender == owner(), \"Not allowed forwarder\");\n        _;\n    }\n\n    constructor() Ownable(msg.sender) {}\n\n    function setAllowed(address allowedAddress_) public onlyOwner() {\n        isAllowed[allowedAddress_] = true;\n    }\n\n    function removeAllowed(address notAllowedAddress_) public onlyOwner() {\n        isAllowed[notAllowedAddress_] = false;\n    }\n\n    function addPoints(address userAddress_, uint256 pointsAmount_) public onlyAllowed() {\n        userPoints[userAddress_] += pointsAmount_;\n        emit AutoLayerPointsAdded(userAddress_, pointsAmount_);\n    }\n\n    function removePoints(address userAddress_, uint256 pointsAmount_) public onlyAllowed() {\n        userPoints[userAddress_] -= pointsAmount_;\n        emit AutoLayerPointsRemoved(userAddress_, pointsAmount_);\n    }\n}"}, "src/AutoLayerPointsMultipleSeason.sol": {"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.30;\n\nimport \"../lib/openzeppelin-contracts/contracts/access/Ownable.sol\";\n\ncontract AutoLayerPointsMultipleSeason is Ownable {\n    mapping(uint8 => mapping(address => uint256)) public userPointsBySeason; // [seasonId][userAddress] => pointsAmount\n    mapping(address => uint256) public totalUserPoints;\n    mapping(address => bool) public isAllowed;\n\n    uint8 public currentSeason;\n    bool public isCurrentSeasonOpen;\n\n    event AutoLayerPointsAdded(address user, uint256 pointsAdded);\n    event AutoLayerPointsBySeasonAdded(address user, uint256 pointsAdded, uint8 season);\n    event AutoLayerPointsRemoved(address user, uint256 pointsAdded);\n\n    modifier onlyAllowed() {\n        require(isAllowed[msg.sender] || msg.sender == owner(), \"Not allowed forwarder\");\n        _;\n    }\n\n    constructor() Ownable(msg.sender) {\n        isCurrentSeasonOpen = true;\n        currentSeason = 2;\n    }\n\n    function setAllowed(address allowedAddress_) public onlyOwner() {\n        isAllowed[allowedAddress_] = true;\n    }\n\n    function removeAllowed(address notAllowedAddress_) public onlyOwner() {\n        isAllowed[notAllowedAddress_] = false;\n    }\n\n    function addPoints(address userAddress_, uint256 pointsAmount_) public onlyAllowed() {\n        require(isCurrentSeasonOpen, \"Current season is not open\");\n        require(pointsAmount_ > 0, \"Points amount must be greater than zero\");\n        userPointsBySeason[currentSeason][userAddress_] += pointsAmount_;\n        totalUserPoints[userAddress_] += pointsAmount_;\n        emit AutoLayerPointsAdded(userAddress_, pointsAmount_);\n        emit AutoLayerPointsBySeasonAdded(userAddress_, pointsAmount_, currentSeason);\n    }\n\n    function removePoints(address userAddress_, uint256 pointsAmount_) public onlyAllowed() {\n        require(pointsAmount_ > 0, \"Points amount must be greater than zero\");\n        require(userPointsBySeason[currentSeason][userAddress_] >= pointsAmount_, \"User does not have enough points\");\n        require(totalUserPoints[userAddress_] >= pointsAmount_, \"User does not have enough points\");\n        userPointsBySeason[currentSeason][userAddress_] -= pointsAmount_;\n        totalUserPoints[userAddress_] -= pointsAmount_;\n        emit AutoLayerPointsRemoved(userAddress_, pointsAmount_);\n    }\n\n    function updateCurrentSeasonStatus(bool status_) public onlyOwner() {\n        isCurrentSeasonOpen = status_;\n    }\n\n    function updateCurrentSeason(uint8 season_, bool openNewSeason_) public onlyOwner() {\n        currentSeason = season_;\n        isCurrentSeasonOpen = openNewSeason_;\n    }\n}"}, "src/AutoLayerReferals.sol": {"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.30;\n\nimport \"./utils/OwnerUtils.sol\";\nimport \"./utils/AutoLayerReferral.sol\";\nimport \"./interfaces/IReferals.sol\";\nimport { AutoLayerReferalsCalc } from \"./AutoLayerReferalsCalc.sol\";\n\ncontract AutoLayerReferals is OwnerUtils, IAutoLayerReferals  {\n    mapping(string => ReferalsUtils.ReferalCode) private referalCodes; // referal code => referal code data\n    mapping(address => string[]) public userCodes; // user address (referal) => referal codes\n    mapping(address => ReferalsUtils.RefereeStats) private userReferal; // user address (referee) => referee stats\n\n    // Owner cannot claim his own code\n    error OwnerCannotClaimHisOwnCode(string code);\n    // User already claimed a code\n    error CodeAlreadyClaimed(string code);\n    // Code already exists\n    error CodeAlreadyExists(string code);\n    // Code does not exist\n    error CodeNotFound(string code);\n    // Sender is not forwader\n    error NotAllowedForwarder();\n\n    event CodeCreated(address user, string code);\n    event CodeClaimed(address user, string code);\n\n    constructor() OwnerUtils(msg.sender) {\n    }\n\n    function getReferalCode(string calldata code) external view override returns (ReferalsUtils.ReferalCode memory) {\n        return referalCodes[code];\n    }\n\n    function getUserReferal(address user) external view override returns (ReferalsUtils.RefereeStats memory) {\n        return userReferal[user];\n    }\n\n    function createReferal(string calldata referalCode) external override {\n        require(referalCodes[referalCode].owner == address(0), CodeAlreadyExists(referalCode));\n        referalCodes[referalCode].owner = msg.sender;\n        userCodes[msg.sender].push(referalCode);\n        emit CodeCreated(msg.sender, referalCode);\n    }\n\n    function claimReferal(string calldata referalCode) external override {\n        require(referalCodes[referalCode].owner != address(0), CodeNotFound(referalCode));\n        require(bytes(userReferal[msg.sender].referalCode).length == 0, CodeAlreadyClaimed(referalCode));\n        require(referalCodes[referalCode].owner != msg.sender, OwnerCannotClaimHisOwnCode(referalCode));\n\n        referalCodes[referalCode].users.push(msg.sender);\n        userReferal[msg.sender].referalCode = referalCode;\n        emit CodeClaimed(msg.sender, referalCode);\n    }\n\n    function getReferalCodes(address wallet) external view override returns (string[] memory) {\n        return userCodes[wallet];\n    }\n\n    function trackTransaction(address user, string calldata referalCode, uint256 volumeUsd, uint256 referalPoints, uint256 refereePoints) external override onlyAllowed() {\n        referalCodes[referalCode].volumeUsd += volumeUsd;\n        referalCodes[referalCode].usageCount += 1;\n        referalCodes[referalCode].pointsObtained += referalPoints;\n\n        userReferal[user].volumeUsd += volumeUsd;\n        userReferal[user].usageCount += 1;\n        userReferal[user].pointsObtained += refereePoints;\n    }\n}"}, "src/AutoLayerReferalsCalc.sol": {"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.30;\n\nimport \"./utils/OwnerUtils.sol\";\nimport \"./utils/AutoLayerReferral.sol\";\nimport \"./interfaces/IAutoLayerReferalsCalc.sol\";\n\ncontract AutoLayerReferalsCalc is OwnerUtils, IAutoLayerReferalsCalc  {\n\n  uint256 scale;\n\n  uint256 multiplier_first_tx_referee;\n  uint256 multiplier_not_first_tx_referee;\n\n  uint256 multiplier_first_tx_referal;\n  uint256 multiplier_not_first_tx_referal;\n\n\n  constructor() OwnerUtils(msg.sender) {\n      scale = 100;\n      multiplier_first_tx_referee = 100;\n      multiplier_not_first_tx_referee = 125;\n      multiplier_first_tx_referal = 500;\n      multiplier_not_first_tx_referal = 200;\n  }\n\n  function setScale(uint256 newScale) external override onlyOwner {\n      scale = newScale;\n  }\n\n  function setRefereeMultipliers(uint256 firstTxMult, uint256 txMult) external override onlyOwner {\n      multiplier_not_first_tx_referee = txMult;\n      multiplier_first_tx_referee = firstTxMult;\n  }\n\n  function setReferalMultipliers(uint256 firstTxMult, uint256 txMult) external override onlyOwner {\n      multiplier_not_first_tx_referal = txMult;\n      multiplier_first_tx_referal = firstTxMult;\n  }\n\n  function calcPoints(uint256 usageCount, uint256 volumeUsd) external override view returns (ReferalsUtils.ReferralResult memory) {\n      bool firstTx = usageCount == 0;\n\n      uint256 referalPoints = volumeUsd\n        * (firstTx ? multiplier_first_tx_referal : multiplier_not_first_tx_referal) / scale;\n      uint256 refereePoints = volumeUsd\n        * (firstTx ? multiplier_first_tx_referee : multiplier_not_first_tx_referee) / scale;\n\n      ReferalsUtils.ReferralResult memory result = ReferalsUtils.ReferralResult({\n          referalPoints: referalPoints,\n          refereePoints: refereePoints\n      });\n\n      return result;\n  }\n\n}"}, "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @title ERC-721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC-721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"}, "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.30;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"}, "src/utils/AutoLayerReferral.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nlibrary ReferalsUtils {\n\n    struct ReferalCode {\n        address owner;\n        address[] users;\n        uint256 volumeUsd;\n        uint256 usageCount; // how many times the referal code has been used (tx done)\n        uint256 pointsObtained; // points obtained by the referal code taking into account the multipliers\n    }\n\n    struct RefereeStats {\n        string referalCode;\n        uint256 volumeUsd;\n        uint256 usageCount; // how many times the referal code has been used (tx done)\n        uint256 pointsObtained;\n    }\n\n    struct ReferralResult {\n        uint256 refereePoints;\n        uint256 referalPoints;\n    }\n}"}, "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"}, "src/utils/AutoLayerUtils.sol": {"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.30;\n\nimport \"../interfaces/IBalancer.sol\";\n\nlibrary AutoLayerUtils {\n    function generateAmounts(uint256 swappedAmount, address[] memory tokens_, address depositedToken) internal pure returns (uint256[] memory amounts) {\n        amounts = new uint256[](tokens_.length);\n        for (uint i = 0; i < tokens_.length; i++) {\n            if (tokens_[i] == depositedToken) amounts[i] = swappedAmount;\n            else amounts[i] = 0;\n        }\n    }\n\n    function tokensToAssets(address[] memory tokens_) internal pure returns(IAsset[] memory assets) {\n        assets = new IAsset[](tokens_.length);\n        for (uint8 i = 0; i < tokens_.length; i++) {\n            assets[i] = IAsset(tokens_[i]);\n        }\n    }\n}"}, "src/interfaces/IParaSwap.sol": {"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.30;\n\nlibrary Utils {\n\nstruct SimpleData {\n    address fromToken;\n    address toToken;\n    uint256 fromAmount;\n    uint256 toAmount;\n    uint256 expectedAmount;\n    address[] callees;\n    bytes exchangeData;\n    uint256[] startIndexes;\n    uint256[] values;\n    address payable beneficiary;\n    address payable partner;\n    uint256 feePercent;\n    bytes permit;\n    uint256 deadline;\n    bytes16 uuid;\n}\n\nstruct SellData {\n    address fromToken;\n    uint256 fromAmount;\n    uint256 toAmount;\n    uint256 expectedAmount;\n    address payable beneficiary;\n    Utils.Path[] path;\n    address payable partner;\n    uint256 feePercent;\n    bytes permit;\n    uint256 deadline;\n    bytes16 uuid;\n}\n\nstruct Path {\n    address to;\n    uint256 totalNetworkFee; //NOT USED - Network fee is associated with 0xv3 trades\n    Adapter[] adapters;\n}\n\nstruct Adapter {\n    address payable adapter;\n    uint256 percent;\n    uint256 networkFee; //NOT USED\n    Route[] route;\n}\n\nstruct Route {\n    uint256 index; //Adapter at which index needs to be used\n    address targetExchange;\n    uint256 percent;\n    bytes payload;\n    uint256 networkFee; //NOT USED - Network fee is associated with 0xv3 trades\n}\n\n}"}, "src/interfaces/IBalancer.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport \"./IAsset.sol\";\n\nenum SwapKind {\n    GIVEN_IN,\n    GIVEN_OUT\n}\n\nstruct BatchSwapStep {\n    bytes32 poolId;\n    uint256 assetInIndex;\n    uint256 assetOutIndex;\n    uint256 amount;\n    bytes userData;\n}\n\nstruct BatchSwap {\n    SwapKind kind;\n    BatchSwapStep[] swaps;\n    IAsset[] assets;\n    FundManagement funds;\n    int256[] limits;\n    uint256 deadline;\n}\n\nstruct Swap {\n    SingleSwap singleSwap;\n    FundManagement funds;\n    uint256 limit;\n    uint256 deadline;\n}\n\nstruct FundManagement {\n    address sender;\n    bool fromInternalBalance;\n    address recipient;\n    bool toInternalBalance;\n}\n\nstruct SingleSwap {\n    bytes32 poolId;\n    uint8 kind;\n    address assetIn;\n    address assetOut;\n    uint256 amount;\n    bytes userData;\n}\n\nstruct JoinPoolRequest {\n    address[] assets;\n    uint256[] maxAmountsIn;\n    bytes userData;\n    bool fromInternalBalance;\n}\n\nstruct ExitPoolRequest {\n    IAsset[] assets;\n    uint256[] minAmountsOut;\n    bytes userData;\n    bool toInternalBalance;\n}\n\nenum PoolSpecialization {\n    GENERAL,\n    MINIMAL_SWAP_INFO,\n    TWO_TOKEN\n}\n\ninterface IBalancer {\n    function joinPool(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        JoinPoolRequest memory request\n    ) external;\n\n    function exitPool(\n        bytes32 poolId,\n        address sender,\n        address payable recipient,\n        ExitPoolRequest memory request\n    ) external;\n\n    function getPool(\n        bytes32 poolId\n    ) external view returns (address, PoolSpecialization);\n}\n"}, "src/interfaces/IGamma.sol": {"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.30;\n\ninterface IGamma {\n    function depositETH(address token0, address token1, uint256 deposit0, uint256 deposit1, address pos, uint256[4] memory minIn, address nftPool, uint256 lockDuration) external payable;\n    function deposit(address token0, address token1, uint256 deposit0, uint256 deposit1, address pos, uint256[4] memory minIn, address nftPool, uint256 lockDuration) external;\n    function gammaUniProxy() external returns(address);\n}"}, "src/interfaces/INFTPool.sol": {"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.30;\n\ninterface INFTPool {\n\nfunction lastTokenId() external view returns (uint256);\nfunction withdrawFromPosition(uint256 tokenId, uint256 amountToWithdraw) external;\nfunction getPoolInfo() external returns(address, address, address, uint256, uint256, uint256, uint256, uint256);\nfunction getStakingPosition(uint256 tokenId) external view returns(uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256);\n}"}, "src/interfaces/IHipervisor.sol": {"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.30;\n\ninterface IHipervisor {\n    function withdraw(uint256 shares, address to, address from, uint256[4] memory minAmounts) external;\n    function getTotalAmounts() external view returns (uint256, uint256);\n    function totalSupply() external view returns (uint256);\n}"}, "src/interfaces/IGammaUniProxy.sol": {"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.30;\n\ninterface IGammaUniProxy {\n    function getDepositAmount(address pos, address token, uint256 _deposit) external returns(uint256 amountStart, uint256 amountEnd);\n}"}, "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"}, "src/utils/OwnerUtils.sol": {"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.30;\n\nimport \"../../lib/openzeppelin-contracts/contracts/access/Ownable.sol\";\n\ncontract OwnerUtils is Ownable {\n    mapping(address => bool) public isAllowed;\n\n    constructor(address initialOwner) Ownable(initialOwner) {}\n\n    modifier onlyAllowed() {\n        require(isAllowed[msg.sender] || msg.sender == owner(), \"Not allowed forwarder\");\n        _;\n    }\n\n    function setAllowed(address allowedAddress_) public virtual onlyOwner() {\n        isAllowed[allowedAddress_] = true;\n    }\n\n    function removeAllowed(address notAllowedAddress_) public virtual onlyOwner() {\n        isAllowed[notAllowedAddress_] = false;\n    }\n}"}, "src/interfaces/IReferals.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport \"../utils/AutoLayerReferral.sol\";\n\ninterface IAutoLayerReferals {\n    function createReferal(string calldata referalCode) external;\n\n    function claimReferal(string calldata referalCode) external;\n\n    function getReferalCodes(address wallet) external view returns (string[] memory);\n\n    function trackTransaction(address user,string calldata referalCode, uint256 volumeUsd, uint256 referalPoints, uint256 refereePoints) external;\n\n    function getReferalCode(string calldata code) external view returns (ReferalsUtils.ReferalCode memory);\n\n    function getUserReferal(address user) external view returns (ReferalsUtils.RefereeStats memory);\n}"}, "src/interfaces/IAutoLayerReferalsCalc.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport \"../utils/AutoLayerReferral.sol\";\n\n\ninterface IAutoLayerReferalsCalc {\n    function setScale(uint256 newScale) external;\n\n    function setRefereeMultipliers(uint256 firstTxMult, uint256 txMult) external;\n\n    function setReferalMultipliers(uint256 firstTxMult, uint256 txMult) external;\n\n    function calcPoints(uint256 usageCount, uint256 volumeUsd) external view returns (ReferalsUtils.ReferralResult memory);\n}"}, "lib/openzeppelin-contracts/contracts/utils/Context.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"}, "lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"}, "lib/openzeppelin-contracts/contracts/utils/Address.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.30;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert Errors.FailedCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {Errors.FailedCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\n     * of an unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {Errors.FailedCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert Errors.FailedCall();\n        }\n    }\n}\n"}, "src/interfaces/IAsset.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\n/**\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\n * types.\n *\n * This concept is unrelated to a Pool's Asset Managers.\n */\ninterface IAsset {\n    // solhint-disable-previous-line no-empty-blocks\n}"}, "lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"}, "lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"}, "lib/openzeppelin-contracts/contracts/utils/Errors.sol": {"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Collection of common custom errors used in multiple contracts\n *\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n * It is recommended to avoid relying on the error API for critical functionality.\n */\nlibrary Errors {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedCall();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error FailedDeployment();\n\n    /**\n     * @dev A necessary precompile is missing.\n     */\n    error MissingPrecompile(address);\n}\n"}}, "settings": {"remappings": ["@chainlink/contracts/=lib/foundry-chainlink-toolkit/lib/chainlink-brownie-contracts/contracts/src/", "@openzeppelin/=lib/foundry-chainlink-toolkit/lib/openzeppelin-contracts/", "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/", "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/", "chainlink-brownie-contracts/=lib/foundry-chainlink-toolkit/lib/chainlink-brownie-contracts/contracts/src/v0.6/vendor/@arbitrum/nitro-contracts/src/", "ds-test/=lib/forge-std/lib/ds-test/src/", "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/", "forge-std/=lib/forge-std/src/", "foundry-chainlink-toolkit/=lib/foundry-chainlink-toolkit/", "halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/", "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/", "openzeppelin-contracts/=lib/openzeppelin-contracts/", "openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/", "solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/"], "optimizer": {"enabled": true}, "metadata": {"useLiteralContent": false, "bytecodeHash": "ipfs", "appendCBOR": true}, "outputSelection": {"*": {"*": ["evm.legacyAssembly"]}}, "evmVersion": "paris", "viaIR": false, "libraries": {}}}
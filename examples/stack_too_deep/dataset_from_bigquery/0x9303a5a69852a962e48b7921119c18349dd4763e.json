{"language": "Solidity", "sources": {"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../utils/introspection/IERC165Upgradeable.sol\";\n"}, "@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(\n        uint256 tokenId,\n        uint256 salePrice\n    ) external view returns (address receiver, uint256 royaltyAmount);\n}\n"}, "@openzeppelin/contracts-upgradeable/interfaces/IERC4906Upgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\n\npragma solidity ^0.8.30;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"./IERC721Upgradeable.sol\";\n\n/// @title EIP-721 Metadata Update Extension\ninterface IERC4906Upgradeable is IERC165Upgradeable, IERC721Upgradeable {\n    /// @dev This event emits when the metadata of a token is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFT.\n    event MetadataUpdate(uint256 _tokenId);\n\n    /// @dev This event emits when the metadata of a range of tokens is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFTs.\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\n}\n"}, "@openzeppelin/contracts-upgradeable/interfaces/IERC721Upgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../token/ERC721/IERC721Upgradeable.sol\";\n"}, "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"}, "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.30;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"}, "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"}, "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"}, "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\n    }\n}\n"}, "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.30;\n\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/StringsUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[44] private __gap;\n}\n"}, "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../ERC721Upgradeable.sol\";\nimport \"../../../interfaces/IERC4906Upgradeable.sol\";\nimport {Initializable} from \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorageUpgradeable is Initializable, IERC4906Upgradeable, ERC721Upgradeable {\n    using StringsUpgradeable for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    function __ERC721URIStorage_init() internal onlyInitializing {\n    }\n\n    function __ERC721URIStorage_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721Upgradeable, IERC165Upgradeable) returns (bool) {\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Emits {MetadataUpdate}.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n\n        emit MetadataUpdate(tokenId);\n    }\n\n    /**\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\n     * the storage mapping.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"}, "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"}, "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"}, "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"}, "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"}, "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.30;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"}, "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.30;\n\nimport \"./IERC165Upgradeable.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"}, "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"}, "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"}, "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMathUpgradeable {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"}, "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.30;\n\nimport \"./math/MathUpgradeable.sol\";\nimport \"./math/SignedMathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMathUpgradeable.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"}, "contracts/BSKT.sol": {"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.30;\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\r\nimport \"./interfaces/IBSKTPair.sol\";\r\nimport \"./interfaces/IFactory.sol\";\r\nimport \"./interfaces/IUniswap.sol\";\r\nimport \"./interfaces/IWETH.sol\";\r\nimport \"./interfaces/IBSKT.sol\";\r\nimport \"./interfaces/IBSKTUtils.sol\";\r\n\r\n/// @title Basket Token Standard\r\n/// @notice A contract for creating and managing tokenized baskets of ERC20 tokens\r\n/// @dev Implements ERC721 for basket tokens and ERC2981 for royalties\r\n/// @dev Each basket is represented as a single NFT (tokenId 0) owned by the creator\r\n/// @dev The contract manages a collection of ERC20 tokens with specified weights\r\ncontract BasketTokenStandard is\r\n    ERC721URIStorageUpgradeable,\r\n    IERC2981Upgradeable,\r\n    ReentrancyGuardUpgradeable,\r\n    IBSKT\r\n{\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n\r\n    // ===============================================\r\n    // Type Declarations\r\n    // ===============================================\r\n\r\n    /// @notice Structure containing token addresses and their weights\r\n    /// @dev Core data structure for the basket's composition\r\n    struct TokenDetails {\r\n        address[] tokens;\r\n        uint256[] weights;\r\n    }\r\n\r\n    struct Swap{\r\n        uint256 wethBought;\r\n        uint256 OldTokensLength;\r\n        uint256 newTokensLength;\r\n        uint256 totalAllocated;\r\n        uint256 amountToSwap;\r\n        address wethAddress;\r\n        address routerAddress;\r\n        uint256[] amounts;\r\n        uint256[] swappedAmounts;\r\n    }\r\n\r\n    // ===============================================\r\n    // Constants\r\n    // ===============================================\r\n\r\n    /// @notice ERC2981 interface identifier for royalty information\r\n    /// @dev Used for ERC165 interface detection\r\n    bytes4 private constant INTERFACE_ID_ERC2981 = 0x2a55205a;\r\n\r\n    /// @notice Precision value for percentage calculations (100% = 10000)\r\n    /// @dev Used to represent token weights and buffer with high precision\r\n    uint256 public constant PERCENT_PRECISION = 10000;\r\n\r\n    // ===============================================\r\n    // State Variables\r\n    // ===============================================\r\n\r\n    /// @notice Address of the BSKT pair contract\r\n    /// @dev The pair contract holds the actual token reserves and manages liquidity\r\n    address public bsktPair;\r\n\r\n    /// @notice Address of the factory contract\r\n    /// @dev Factory provides utility functions and manages whitelisted contracts\r\n    address public factory;\r\n\r\n    /// @notice Unique identifier for the basket\r\n    /// @dev Used for external identification of the basket\r\n    string public id;\r\n\r\n    /// @notice Description of the basket\r\n    /// @dev Human-readable description of the basket's purpose or contents\r\n    string public description;\r\n\r\n    /// @notice Mapping for supported interfaces (ERC165)\r\n    /// @dev Tracks which interfaces the contract implements\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    /// @notice Storage for token details\r\n    /// @dev Contains the current set of tokens and their weights in the basket\r\n    TokenDetails private _tokenDetails;\r\n\r\n    // ===============================================\r\n    // Modifiers\r\n    // ===============================================\r\n\r\n    /// @notice Ensures LP withdrawal meets the minimum required by the factory\r\n    /// @param amount The LP amount being withdrawn\r\n    modifier validateMinLpWithdrawal(uint256 amount) {\r\n        uint256 min = _factory().minLpWithdrawal();\r\n        if (amount < min) revert InvalidWithdrawalAmount();\r\n        _;\r\n    }\r\n\r\n    /// @notice Validates that two arrays have the same length\r\n    /// @param lengthOne Length of the first array\r\n    /// @param lengthTwo Length of the second array\r\n    /// @dev Used to ensure tokens and weights arrays match in length\r\n    modifier checkLength(uint256 lengthOne, uint256 lengthTwo) {\r\n        if (lengthOne != lengthTwo || lengthOne == 0 || lengthTwo == 0)\r\n            revert InvalidLength();\r\n        _;\r\n    }\r\n\r\n    /// @notice Restricts access to the token owner only\r\n    /// @dev Uses getOwner() which returns the owner of NFT with ID 0\r\n    modifier onlyOwner() {\r\n        if (getOwner() != msg.sender) revert InvalidOwner();\r\n        _;\r\n    }\r\n\r\n    /// @notice Modifier to restrict transfers through non-whitelisted contracts\r\n    /// @param target The target address to check for whitelisting\r\n    /// @dev Allows transfers to EOAs but restricts contracts to whitelisted ones\r\n    modifier onlyWhitelistedContract(address target) {\r\n        if (target == address(0)) revert InvalidAddress(target);\r\n        if (isContractAddress(target)) {\r\n            if (!_factory().isWhitelistedContract(target))\r\n                revert ContractNotWhitelisted();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /// @notice Restricts function execution when the contract is paused\r\n    /// @dev Checks the factory's pause state and reverts if paused\r\n    modifier onlyNotPaused() {\r\n        if (_factory().paused()) revert MethodPaused();\r\n        _;\r\n    }\r\n\r\n    // ===============================================\r\n    // Events\r\n    // ===============================================\r\n\r\n    /// @notice Emitted when ETH is contributed to the basket\r\n    /// @param bskt Address of the basket contract\r\n    /// @param sender Address of the contributor\r\n    /// @param amount Amount of ETH contributed\r\n    /// @param amountAfterFee Amount of ETH after platform fee deduction\r\n\r\n    event ContributedToBSKT(address bskt, address indexed sender, uint256 amount, uint256 amountAfterFee);\r\n\r\n    /// @notice Emitted when tokens are withdrawn from the basket\r\n    /// @param bskt Address of the basket contract\r\n    /// @param sender Address of the user withdrawing\r\n    /// @param tokens Array of token addresses withdrawn\r\n    /// @param amounts Array of token amounts withdrawn\r\n    /// @param lpAmountAfterFee Amount of LP tokens burned for user (after fee deduction)\r\n    event WithdrawnFromBSKT(\r\n        address bskt,\r\n        address indexed sender,\r\n        address[] tokens,\r\n        uint256[] amounts,\r\n        uint256 lpAmountAfterFee\r\n    );\r\n\r\n    /// @notice Emitted when ETH is withdrawn from the basket\r\n    /// @param bskt Address of the basket contract\r\n    /// @param sender Address of the user withdrawing\r\n    /// @param amount Amount of ETH withdrawn\r\n    event WithdrawnETHFromBSKT(\r\n        address bskt,\r\n        address indexed sender,\r\n        uint256 amount\r\n    );\r\n\r\n    /// @notice Emitted when the basket is rebalanced\r\n    /// @param bskt Address of the basket contract\r\n    /// @param oldtokens Array of token addresses\r\n    /// @param oldWeights Previous weights of tokens\r\n    /// @param newWeights New weights of tokens after rebalancing\r\n    event BSKTRebalanced(\r\n        address indexed bskt,\r\n        address[] oldtokens,\r\n        uint256[] oldWeights,\r\n        address[] newTokens,\r\n        uint256[] newWeights\r\n    );\r\n\r\n    /// @notice Emitted when the platform fee is deducted during a user action (e.g., contribute, withdrawETH, withdrawTokens)\r\n    /// @param feeAmount The deducted fee amount in wei\r\n    /// @param feePercent The applied fee percentage\r\n    /// @param feeCollector The address that received the deducted fee\r\n    /// @param action The type of action triggering the fee (e.g., \"contribute\", \"withdrawTokens\", \"withdrawETH\")\r\n    event PlatformFeeDeducted(\r\n        uint256 feeAmount,\r\n        uint256 feePercent,\r\n        address indexed feeCollector,\r\n        string action\r\n    );\r\n\r\n    /// @notice Emitted when management fee is claimed\r\n    /// @param bskt Address of the basket contract\r\n    /// @param manager Address of Basket manager\r\n    /// @param lpAmount Amount of LP tokens\r\n    /// @param ethAmount Amount of ETH \r\n    /// @param amounts Array of amount of tokens\r\n    event FeeClaimed(\r\n        address indexed bskt,\r\n        address indexed manager,\r\n        uint256 lpAmount,\r\n        uint256 ethAmount,\r\n        uint[] amounts\r\n    );\r\n\r\n    /// @notice Emitted when platform fee is deducted in tokens (direct transfer, no swaps)\r\n    /// @param bskt Address of the basket contract\r\n    /// @param feeCollector Address that received the fee tokens\r\n    /// @param tokens Array of token addresses\r\n    /// @param amounts Array of token amounts sent as fees\r\n    /// @param feePercent The applied fee percentage\r\n    /// @param totalLpAmount Total LP tokens involved in the transaction\r\n    /// @param feeLpAmount LP tokens burned for fees\r\n    /// @param action The type of action triggering the fee\r\n    event PlatformFeeDeductedInTokens(\r\n        address indexed bskt,\r\n        address indexed feeCollector,\r\n        address[] tokens,\r\n        uint256[] amounts,\r\n        uint256 feePercent,\r\n        uint256 totalLpAmount,\r\n        uint256 feeLpAmount,\r\n        string action\r\n    );\r\n\r\n    // ===============================================\r\n    // Errors\r\n    // ===============================================\r\n\r\n    /// @notice Error thrown when array lengths do not match\r\n    error InvalidLength();\r\n\r\n    /// @notice Error thrown when an invalid token is provided\r\n    error InvalidToken();\r\n\r\n    /// @notice Error thrown when token weights are invalid\r\n    error InvalidWeight();\r\n\r\n    /// @notice Error thrown when a non-owner tries to perform an owner-only action\r\n    error InvalidOwner();\r\n\r\n    /// @notice Error thrown when a contract is not whitelisted\r\n    error ContractNotWhitelisted();\r\n\r\n    /// @notice Error thrown when a zero value is sent for a contribution\r\n    error ZeroContributionAmount();\r\n\r\n    /// @notice Error thrown when an emergency operation has invalid parameters\r\n    error InvalidEmergencyParams();\r\n\r\n    /// @notice Error thrown when no ALVA token is included in the basket\r\n    error NoAlvaTokenIncluded();\r\n\r\n    /// @notice Error thrown when ALVA token percentage is too low\r\n    /// @param provided The provided ALVA percentage\r\n    /// @param required The minimum required percentage\r\n    error InsufficientAlvaPercentage(uint256 provided, uint256 required);\r\n\r\n    /// @notice Error thrown when a duplicate token is detected\r\n    error DuplicateToken();\r\n\r\n    /// @notice Error thrown when a token weight is zero\r\n    error ZeroTokenWeight();\r\n\r\n    /// @notice Error thrown when an interface ID is invalid\r\n    error InvalidInterfaceId();\r\n\r\n    /// @notice Error thrown when a withdrawal amount is zero or invalid\r\n    error InvalidWithdrawalAmount();\r\n\r\n    /// @notice Thrown when the targeted address is not a valid contract address\r\n    /// @param target The address that caused the error\r\n    error InvalidContractAddress(address target);\r\n\r\n    /// @notice Reverts if _index is out of bounds\r\n    /// @param index The index that caused the error\r\n    /// @param length Length of the tokens array\r\n    error TokenIndexOutOfBounds(uint256 index, uint256 length);\r\n\r\n    /// @notice Reverts if an unauthorized user tries to send tokens to the contract\r\n    /// @param sender The sender address that cased the error\r\n    error UnauthorizedSender(address sender);\r\n\r\n    /// @notice Error thrown when an invalid fee amount is provided\r\n    /// @param amount The invalid amount value that caused the error\r\n    error InvalidFeeAmount(uint256 amount);\r\n\r\n    /// @notice Reverts if address is invalid\r\n    /// @param target The address that cased the error\r\n    error InvalidAddress (address target); \r\n\r\n    /// @notice Reverts if the critical methods of the contract are paused\r\n    error MethodPaused();\r\n\r\n    /// @notice Reverts if the signature is invalid\r\n    /// @param signature The signature that caused the error\r\n    error InvalidSignature(bytes signature);\r\n\r\n    /// @notice Error thrown when swap output is less than minimum required amount\r\n    /// @param tokenIn The input token address \r\n    /// @param tokenOut The output token address that failed the minimum check\r\n    /// @param amountIn The input token amount used for the swap\r\n    /// @param actualAmountOut The actual output token amount received from swap\r\n    /// @param minAmountOut The minimum output token amount required\r\n    error InsufficientSwapOutput(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn,\r\n        uint256 actualAmountOut,\r\n        uint256 minAmountOut\r\n    );\r\n\r\n    // ===============================================\r\n    // Initialization\r\n    // ===============================================\r\n\r\n    /// @notice Initializes a new Basket Token\r\n    /// @dev Sets up the ERC721 token and initializes basket parameters\r\n    /// @param _name Name of the basket token\r\n    /// @param _symbol Symbol of the basket token\r\n    /// @param _owner Owner of the basket token\r\n    /// @param _factoryAddress Factory contract address\r\n    /// @param _tokens Array of token addresses in the basket\r\n    /// @param _weights Array of weights for each token\r\n    /// @param _bsktPair BSKT pair contract address\r\n    /// @param _tokenURI URI of the basket token\r\n    /// @param _id ID of the basket token\r\n    /// @param _description Description of the basket\r\n    function initialize(\r\n        string calldata _name,\r\n        string calldata _symbol,\r\n        address _owner,\r\n        address _factoryAddress,\r\n        address[] calldata _tokens,\r\n        uint256[] calldata _weights,\r\n        address _bsktPair,\r\n        string calldata _tokenURI,\r\n        string calldata _id,\r\n        string calldata _description\r\n    ) external checkLength(_tokens.length, _weights.length) initializer {\r\n        __ERC721_init(_name, _symbol);\r\n        _registerInterface(INTERFACE_ID_ERC2981);\r\n        __ReentrancyGuard_init();\r\n\r\n        factory = _factoryAddress;\r\n        id = _id;\r\n        _checkValidTokensAndWeights(_tokens, _weights);\r\n\r\n        bsktPair = _bsktPair;\r\n\r\n        _tokenDetails.tokens = _tokens;\r\n        _tokenDetails.weights = _weights;\r\n\r\n        description = _description;\r\n\r\n        _safeMint(_owner, 0);\r\n        _setTokenURI(0, _tokenURI);\r\n    }\r\n\r\n    // ===============================================\r\n    // External Functions\r\n    // ===============================================\r\n\r\n    /// @notice Allows the contract to receive ETH\r\n    /// @dev Required for WETH.withdraw() to work properly\r\n    receive() external payable {\r\n        if (!isContractAddress(msg.sender))\r\n            revert UnauthorizedSender(msg.sender);\r\n    }\r\n\r\n    /// @notice Allows users to contribute ETH to the basket\r\n    /// @dev Swaps ETH for tokens according to their weights and mints LP tokens\r\n    /// @dev The ETH is split proportionally according to token weights and swapped\r\n    /// @param _minAmountsOut Array of minimum amounts expected for each token after swaps\r\n    /// @param _signature Signature for the transaction\r\n    /// @param _deadline Deadline for the transaction\r\n    function contribute(uint256[] calldata _minAmountsOut, bytes calldata _signature, uint256 _deadline)\r\n        external\r\n        payable\r\n        onlyNotPaused\r\n        nonReentrant\r\n    {\r\n        if (msg.value == 0) revert ZeroContributionAmount();\r\n\r\n        if (!_bsktUtils().verifySignature(_deadline, _tokenDetails.tokens, _tokenDetails.weights, _minAmountsOut, _signature)) revert InvalidSignature(_signature);\r\n\r\n        IFactory factoryInstance = _factory();\r\n        // Get contribution fee from the Factory contract\r\n        (, uint256 contributionFee, , address feeCollector) = factoryInstance\r\n            .getPlatformFeeConfig();\r\n\r\n        uint256 feeAmount = 0;\r\n        // Deduct the contribution fee\r\n        if (contributionFee > 0) {\r\n            feeAmount = (msg.value * contributionFee) / PERCENT_PRECISION; // Calculate the contribution fee\r\n            (bool success, ) = payable(feeCollector).call{value: feeAmount}(\"\"); // Transfer fee to feeCollector\r\n            require(success, \"Failed to deduct Contribution Fee\");\r\n            emit PlatformFeeDeducted(\r\n                feeAmount,\r\n                contributionFee,\r\n                feeCollector,\r\n                \"contribute\"\r\n            ); // Emit fee event for contribution\r\n        }\r\n\r\n        uint256 amountAfterFee = msg.value - feeAmount;\r\n        address wethAddress = factoryInstance.weth();\r\n        address routerAddress = factoryInstance.router();\r\n\r\n        uint256 totalAllocated;\r\n        uint256 tokensLength = _tokenDetails.tokens.length;\r\n        uint256[] memory amounts = new uint256[](tokensLength);\r\n        \r\n        for(uint256 i = 0; i < tokensLength; ) {\r\n            address token = _tokenDetails.tokens[i];\r\n            uint256 weight = _tokenDetails.weights[i];\r\n\r\n            uint256 _amountInMin;\r\n            // For the last token, use remaining amount to avoid dust\r\n            if (i == tokensLength - 1) {\r\n                _amountInMin = amountAfterFee - totalAllocated;\r\n            } else {\r\n                _amountInMin = (amountAfterFee * weight) / PERCENT_PRECISION;\r\n                totalAllocated += _amountInMin;\r\n            }\r\n\r\n            uint256 balance = IERC20Upgradeable(token).balanceOf(bsktPair);\r\n            \r\n            // Check if the token is WETH\r\n            if (token == wethAddress) {\r\n                // If token is WETH, directly deposit ETH as WETH and transfer to the pair\r\n                IWETH(wethAddress).deposit{value: _amountInMin}();\r\n            \r\n                // Transfer WETH to the pair\r\n                IERC20Upgradeable(wethAddress).transfer(bsktPair, _amountInMin);\r\n            } else {\r\n                // For other tokens, swap ETH for tokens\r\n                address[] memory path = new address[](2);\r\n                path[0] = wethAddress;\r\n                path[1] = token;\r\n                \r\n                IUniswapV2Router(routerAddress)\r\n                    .swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n                    value: _amountInMin\r\n                }(_minAmountsOut[i], path, bsktPair, _deadline);\r\n            }\r\n    \r\n            amounts[i] = IERC20Upgradeable(token).balanceOf(bsktPair) - balance;\r\n\r\n             // Validate that received amount meets minimum requirement\r\n             if (amounts[i] < _minAmountsOut[i]) {\r\n                revert InsufficientSwapOutput(\r\n                    address(0),     // tokenIn (zero address represents native ETH)\r\n                    token,     // tokenOut (target token)\r\n                    _amountInMin,   // amountIn (ETH amount)\r\n                    amounts[i],     // actualAmountOut\r\n                    _minAmountsOut[i] // minAmountOut\r\n                );\r\n            }\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        IBSKTPair(bsktPair).mint(msg.sender, amounts);\r\n\r\n        emit ContributedToBSKT(address(this), msg.sender, msg.value, amountAfterFee);\r\n    }\r\n\r\n    /// @notice Allows users to withdraw their underlying tokens directly\r\n    /// @dev Burns LP tokens and returns underlying tokens\r\n    /// @param _liquidity Amount of liquidity tokens to burn\r\n    function withdraw(uint256 _liquidity) \r\n        external \r\n        nonReentrant \r\n        validateMinLpWithdrawal(_liquidity) \r\n    {\r\n        // TODO: Verify Mangement Fee deduction flow in this case\r\n        // Get fee configuration from Factory\r\n        IFactory factoryInstance = _factory(); \r\n        (, , uint256 withdrawalFee, address feeCollector) = factoryInstance.getPlatformFeeConfig();\r\n\r\n        uint256 feeLiquidity = 0;\r\n        uint256 userLiquidity = _liquidity;\r\n\r\n        // Deduct withdrawal fee (if any) - Send fee tokens directly to collector (NO SWAPS)\r\n        if (withdrawalFee > 0) {\r\n            feeLiquidity = (_liquidity * withdrawalFee) / PERCENT_PRECISION;\r\n            userLiquidity = _liquidity - feeLiquidity;\r\n\r\n            // Send fee tokens directly to fee collector without any swaps\r\n            uint256[] memory feeAmounts = _withdraw(feeLiquidity, feeCollector);\r\n            \r\n            emit PlatformFeeDeductedInTokens(\r\n                address(this),\r\n                feeCollector,\r\n                _tokenDetails.tokens,\r\n                feeAmounts,\r\n                withdrawalFee,\r\n                _liquidity,\r\n                feeLiquidity,\r\n                \"withdrawTokens\"\r\n            );\r\n        }\r\n\r\n        // Withdraw user's portion directly as tokens\r\n        uint256[] memory userAmounts = _withdraw(userLiquidity, msg.sender);\r\n\r\n        // Emit Withdrawal Event\r\n        emit WithdrawnFromBSKT(\r\n            address(this),\r\n            msg.sender,\r\n            _tokenDetails.tokens,\r\n            userAmounts,\r\n            userLiquidity\r\n        );\r\n    }\r\n\r\n    /// @notice Internal function to convert tokens to ETH and send to a receiver\r\n    /// @dev Swaps tokens to ETH and sends to the specified receiver\r\n    /// @param factoryInstance The factory instance to use for the swap\r\n    /// @param _amounts Array of token amounts to convert\r\n    /// @param _receiver Address to receive the ETH\r\n    /// @param _minAmountsOut Array of minimum amounts of output tokens\r\n    /// @param _signature Signature for the transaction\r\n    /// @param _deadline Deadline for the transaction\r\n    function _tokensToEth(\r\n        IFactory factoryInstance,\r\n        uint256[] memory _amounts,\r\n        address payable _receiver,\r\n        uint256[] calldata _minAmountsOut,\r\n        bytes calldata _signature,\r\n        uint256 _deadline\r\n    ) private returns (uint256 totalETH) {\r\n        if(!_bsktUtils().verifySignature(_deadline, _tokenDetails.tokens, _tokenDetails.weights, _minAmountsOut, _signature)) revert InvalidSignature(_signature);\r\n\r\n        address wethAddress = factoryInstance.weth(); \r\n        address routerAddress = factoryInstance.router(); \r\n        uint256 totalWETH = 0;\r\n\r\n        // Step 1: Convert all tokens to WETH (collected in this contract)\r\n        for (uint256 i = 0; i < _amounts.length; ) {\r\n            if (_amounts[i] > 0) {\r\n                if (_tokenDetails.tokens[i] == wethAddress) {\r\n                    totalWETH += _amounts[i];\r\n                } else {\r\n                    uint256 wethAmount = _swapTokensForTokens(\r\n                        _tokenDetails.tokens[i],\r\n                        wethAddress,\r\n                        routerAddress,\r\n                        _amounts[i],\r\n                        address(this), // Send to this contract instead of receiver\r\n                        _minAmountsOut[i],\r\n                        _deadline\r\n                    );\r\n                    totalWETH += wethAmount;\r\n                }\r\n            }\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        // Step 2: Convert WETH to ETH and send to receiver\r\n        if (totalWETH > 0) {\r\n            IWETH(wethAddress).withdraw(totalWETH);\r\n            (bool success, ) = _receiver.call{value: totalWETH}(\"\");\r\n            require(\r\n                success,\r\n                \"Failed to unwrap and transfer WETH to the receiver\"\r\n            );\r\n            totalETH = totalWETH;\r\n        }\r\n\r\n        return totalETH;\r\n    }\r\n\r\n    /// @notice Allows users to withdraw and convert to WETH\r\n    /// @dev Burns LP tokens, receives the underlying tokens, and swaps them to WETH\r\n    /// @param _liquidity Amount of liquidity tokens to burn\r\n    /// @param _minAmountsOutFee Array of minimum amounts of output tokens for fee\r\n    /// @param _signatureFee Signature for fee\r\n    /// @param _minAmountsOut Array of minimum amounts of output tokens\r\n    /// @param _signature Signature for the transaction\r\n    /// @param _deadline Deadline for the transaction\r\n    function withdrawETH(\r\n        uint256 _liquidity,\r\n        uint256[] calldata _minAmountsOutFee,\r\n        bytes calldata _signatureFee,\r\n        uint256[] calldata _minAmountsOut,\r\n        bytes calldata _signature,\r\n        uint256 _deadline\r\n    ) external nonReentrant validateMinLpWithdrawal(_liquidity) {\r\n\r\n        // Get fee configuration from Factory\r\n        IFactory factoryInstance = _factory(); \r\n        (, , uint256 withdrawalFee, address feeCollector) = factoryInstance\r\n            .getPlatformFeeConfig();\r\n\r\n        uint256 feeLiquidity = 0;\r\n        uint256 userLiquidity = _liquidity;\r\n        uint256 feeWethAmount = 0;\r\n\r\n        // Deduct withdrawal fee\r\n        if (withdrawalFee > 0) {\r\n            feeLiquidity = (_liquidity * withdrawalFee) / PERCENT_PRECISION;\r\n            userLiquidity = _liquidity - feeLiquidity;\r\n\r\n            // Withdraw fee portion to this contract first\r\n            uint256[] memory feeAmounts = _withdraw(\r\n                feeLiquidity,\r\n                address(this)\r\n            );\r\n\r\n            // Convert fee tokens to ETH and send to fee collector\r\n            feeWethAmount = _tokensToEth(\r\n                factoryInstance,\r\n                feeAmounts,\r\n                payable(feeCollector),\r\n                _minAmountsOutFee,\r\n                _signatureFee,\r\n                _deadline\r\n            );\r\n            emit PlatformFeeDeducted(\r\n                feeWethAmount,\r\n                withdrawalFee,\r\n                feeCollector,\r\n                \"withdrawETH\"\r\n            );\r\n        }\r\n\r\n        // Process user's portion\r\n        uint256[] memory userAmounts = _withdraw(userLiquidity, address(this));\r\n\r\n        // Convert user tokens to WETH and send to user\r\n        uint256 ethAmount = _tokensToEth(\r\n            factoryInstance,\r\n            userAmounts,\r\n            payable(msg.sender),\r\n            _minAmountsOut,\r\n            _signature,\r\n            _deadline\r\n        );\r\n\r\n        emit WithdrawnETHFromBSKT(address(this), msg.sender, ethAmount);\r\n    }\r\n\r\n    /// @notice Allows the owner to rebalance the basket with new tokens and weights\r\n    /// @dev Changes the basket composition by selling current tokens and buying new ones\r\n    /// @param _newTokens Array of new token addresses\r\n    /// @param _newWeights Array of new token weights\r\n    /// @param _minAmountsOutPrev Array of minimum amounts of output tokens for previous tokens\r\n    /// @param _signaturePrev Signature for previous tokens\r\n    /// @param _minAmountsOutNew Array of minimum amounts of output tokens for new tokens\r\n    /// @param _signatureNew Signature for new tokens\r\n    /// @param _deadline Deadline for the transaction\r\n    function rebalance(\r\n        address[] calldata _newTokens,\r\n        uint256[] calldata _newWeights,\r\n        uint256[] calldata _minAmountsOutPrev,\r\n        bytes calldata _signaturePrev,\r\n        uint256[] calldata _minAmountsOutNew,\r\n        bytes calldata _signatureNew,\r\n        uint256 _deadline\r\n    ) external onlyNotPaused onlyOwner nonReentrant {\r\n        _rebalance(_newTokens, _newWeights, _minAmountsOutPrev, _signaturePrev, _minAmountsOutNew, _signatureNew, false, _deadline);\r\n    }\r\n\r\n    /// @notice Emergency function to rebalance the basket to a stable configuration\r\n    /// @dev Allows rebalancing to exactly 2 tokens in emergency situations\r\n    /// @param _newTokens Array containing exactly 2 token addresses\r\n    /// @param _newWeights Array containing the weights for the 2 tokens, must sum to 100%\r\n    /// @param _minAmountsOutPrev Array of minimum amounts of output tokens for previous tokens\r\n    /// @param _signaturePrev Signature for previous tokens\r\n    /// @param _minAmountsOutNew Array of minimum amounts of output tokens for new tokens\r\n    /// @param _signatureNew Signature for new tokens\r\n    /// @param _deadline Deadline for the transaction\r\n    function emergencyStable(\r\n        address[] calldata _newTokens,\r\n        uint256[] calldata _newWeights,\r\n        uint256[] calldata _minAmountsOutPrev,\r\n        bytes calldata _signaturePrev,\r\n        uint256[] calldata _minAmountsOutNew,\r\n        bytes calldata _signatureNew,\r\n        uint256 _deadline\r\n    ) external onlyNotPaused onlyOwner nonReentrant {\r\n        _rebalance(_newTokens, _newWeights, _minAmountsOutPrev, _signaturePrev, _minAmountsOutNew, _signatureNew, true, _deadline);\r\n    }\r\n\r\n    /// @notice Function to claim management fee for this BSKT\r\n    /// @dev Converts claimed LP tokens to WETH and sends to the basket owner\r\n    /// @param amount Amount of LP tokens to claim as management fee\r\n    /// @param _minAmountsOut Array of minimum amounts of output tokens\r\n    /// @param _signature Signature for the transaction\r\n    /// @param _deadline Deadline for the transaction\r\n    function claimFee(\r\n        uint256 amount,\r\n        uint256[] calldata _minAmountsOut,\r\n        bytes calldata _signature,\r\n        uint256 _deadline,\r\n        bool withdrawIndividualTokens,\r\n        bool withdrawFullAmount\r\n    ) external onlyOwner nonReentrant {\r\n\r\n        IFactory factoryInstance = _factory();\r\n\r\n        IBSKTPair(bsktPair).distMgmtFee();\r\n        if (withdrawFullAmount) {\r\n            amount = IBSKTPair(bsktPair).collectedFee();\r\n        }\r\n\r\n        if(amount > IBSKTPair(bsktPair).collectedFee()) \r\n            revert InvalidFeeAmount(amount);\r\n\r\n        IERC20Upgradeable(bsktPair).transfer(bsktPair, amount);\r\n\r\n        uint256[] memory _amounts;\r\n        uint256 ethBought;\r\n        if(withdrawIndividualTokens) {\r\n            _amounts = IBSKTPair(bsktPair).burn(getOwner());\r\n        } else {\r\n            _amounts = IBSKTPair(bsktPair).burn(address(this));\r\n        \r\n            ethBought = _tokensToEth(\r\n                factoryInstance,\r\n                _amounts,\r\n                payable(getOwner()),\r\n                _minAmountsOut,\r\n                _signature,\r\n                _deadline\r\n            );\r\n        }\r\n        \r\n        IBSKTPair(bsktPair).updateCollectedFee(amount);\r\n        emit FeeClaimed(address(this), getOwner(), amount, ethBought, _amounts);\r\n    }\r\n\r\n    /// @notice Override transfer functions to enforce whitelist\r\n    /// @dev Only allows transfers to whitelisted contracts\r\n    /// @param from Current owner address\r\n    /// @param to New owner address\r\n    /// @param tokenId ID of the token being transferred (always 0 for this contract)\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    )\r\n        public\r\n        override(ERC721Upgradeable, IERC721Upgradeable)\r\n        onlyNotPaused\r\n        onlyWhitelistedContract(to)\r\n    {\r\n        super.transferFrom(from, to, tokenId);\r\n    }\r\n\r\n    /// @notice Safe version of transferFrom with additional checks\r\n    /// @dev Only allows transfers to whitelisted contracts\r\n    /// @param from Current owner address\r\n    /// @param to New owner address\r\n    /// @param tokenId ID of the token being transferred (always 0 for this contract)\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    )\r\n        public\r\n        override(ERC721Upgradeable, IERC721Upgradeable)\r\n        onlyNotPaused\r\n        onlyWhitelistedContract(to)\r\n    {\r\n        super.safeTransferFrom(from, to, tokenId);\r\n    }\r\n\r\n    /// @notice Safe version of transferFrom with data parameter\r\n    /// @dev Only allows transfers to whitelisted contracts\r\n    /// @param from Current owner address\r\n    /// @param to New owner address\r\n    /// @param tokenId ID of the token being transferred (always 0 for this contract)\r\n    /// @param data Additional data with no specified format\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    )\r\n        public\r\n        override(ERC721Upgradeable, IERC721Upgradeable)\r\n        onlyNotPaused\r\n        onlyWhitelistedContract(to)\r\n    {\r\n        super.safeTransferFrom(from, to, tokenId, data);\r\n    }\r\n\r\n    /// @notice Override approve function to enforce whitelist\r\n    /// @dev Only allows approvals to whitelisted contracts\r\n    /// @param to Address to approve\r\n    /// @param tokenId ID of the token to approve (always 0 for this contract)\r\n    function approve(address to, uint256 tokenId)\r\n        public\r\n        override(ERC721Upgradeable, IERC721Upgradeable)\r\n        onlyWhitelistedContract(to)\r\n    {\r\n        super.approve(to, tokenId);\r\n    }\r\n\r\n    /// @notice Override setApprovalForAll function to enforce whitelist\r\n    /// @dev Only allows approvals to whitelisted contracts\r\n    /// @param operator Address to approve as operator\r\n    /// @param approved Approval status to set\r\n    function setApprovalForAll(address operator, bool approved)\r\n        public\r\n        override(ERC721Upgradeable, IERC721Upgradeable)        \r\n    {\r\n        if(approved) {\r\n            if (isContractAddress(operator) && !_factory().isWhitelistedContract(operator)) {\r\n                revert ContractNotWhitelisted();\r\n            }\r\n        }\r\n        \r\n        super.setApprovalForAll(operator, approved);\r\n    }\r\n\r\n    // ===============================================\r\n    // Internal/Private Functions\r\n    // ===============================================\r\n\r\n    /// @notice Validates that tokens and weights are correctly configured\r\n    /// @dev Checks that each token is unique, weights are valid, and ALVA is included\r\n    /// @dev Weights must sum to PERCENT_PRECISION (10000) and ALVA must meet minimum percentage\r\n    /// @param _tokens Array of token addresses\r\n    /// @param _weights Array of token weights\r\n    function _checkValidTokensAndWeights(\r\n        address[] memory _tokens,\r\n        uint256[] memory _weights\r\n    ) private view {\r\n        uint256 _totalWeight;\r\n        bool isAlvaPresent = false;\r\n        address alvaAddress = _factory().alva();\r\n\r\n        for (uint256 i = 0; i < _tokens.length; ) {\r\n            if (!isContractAddress(_tokens[i]))\r\n                revert InvalidContractAddress(_tokens[i]);\r\n\r\n            if (\r\n                !_checkForDuplicateAddress(_tokens, _tokens[i], i + 1) &&\r\n                _weights[i] != 0\r\n            ) {\r\n                if (_tokens[i] == alvaAddress) {\r\n                    isAlvaPresent = true;\r\n                    uint256 minPercentALVA = _factory().minPercentALVA();\r\n                    if (_weights[i] < minPercentALVA) {\r\n                        revert InsufficientAlvaPercentage(\r\n                            _weights[i],\r\n                            minPercentALVA\r\n                        );\r\n                    }\r\n                }\r\n\r\n                _totalWeight += _weights[i];\r\n            } else {\r\n                if (_weights[i] == 0) {\r\n                    revert ZeroTokenWeight();\r\n                } else {\r\n                    revert InvalidToken();\r\n                }\r\n            }\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        if (!isAlvaPresent) revert NoAlvaTokenIncluded();\r\n        if (_totalWeight != PERCENT_PRECISION) revert InvalidWeight();\r\n    }\r\n\r\n    /// @notice Internal function to withdraw liquidity\r\n    /// @dev Transfers LP tokens from the user to the pair contract and burns them\r\n    /// @param _liquidity Amount of liquidity tokens to burn\r\n    /// @param _to Address to receive the tokens\r\n    /// @return amounts Array of token amounts withdrawn\r\n    function _withdraw(uint256 _liquidity, address _to)\r\n        private\r\n        returns (uint256[] memory amounts)\r\n    {\r\n        if (_liquidity == 0) revert InvalidWithdrawalAmount();\r\n\r\n        IERC20Upgradeable(bsktPair).transferFrom(\r\n            msg.sender,\r\n            bsktPair,\r\n            _liquidity\r\n        );\r\n        amounts = IBSKTPair(bsktPair).burn(_to);\r\n    }\r\n\r\n    /// @notice Internal function to perform basket rebalancing\r\n    /// @dev Converts all tokens to WETH, then distributes WETH to buy new tokens\r\n    /// @param _newTokens Array of new token addresses\r\n    /// @param _newWeights Array of new token weights\r\n    /// @param _minAmountsOutPrev Array of minimum amounts of output tokens for previous tokens\r\n    /// @param _signaturePrev Signature for previous tokens\r\n    /// @param _minAmountsOutNew Array of minimum amounts of output tokens for new tokens\r\n    /// @param _signatureNew Signature for new tokens\r\n    /// @param _isEmergencyStable Flag for emergency stable conversion which requires exactly 2 tokens\r\n    /// @param _deadline Deadline for the transaction\r\n    function _rebalance(\r\n        address[] memory _newTokens,\r\n        uint256[] memory _newWeights,\r\n        uint256[] memory _minAmountsOutPrev,\r\n        bytes memory _signaturePrev,\r\n        uint256[] memory _minAmountsOutNew,\r\n        bytes memory _signatureNew,\r\n        bool _isEmergencyStable,\r\n        uint256 _deadline\r\n    ) private checkLength(_newTokens.length, _newWeights.length) {\r\n        if (_isEmergencyStable && _newTokens.length != 2) {\r\n            revert InvalidEmergencyParams();\r\n        }\r\n        \r\n        // Verify signatures\r\n        if(!_bsktUtils().verifySignature(_deadline, _tokenDetails.tokens, _tokenDetails.weights, _minAmountsOutPrev, _signaturePrev)) revert InvalidSignature(_signaturePrev);\r\n        if(!_bsktUtils().verifySignature(_deadline, _newTokens, _newWeights, _minAmountsOutNew, _signatureNew)) revert InvalidSignature(_signatureNew);\r\n        Swap memory swapStates;\r\n\r\n        // As alva is required in any case\r\n        _checkValidTokensAndWeights(_newTokens, _newWeights);\r\n\r\n        IBSKTPair(bsktPair).setReentrancyGuardStatus(true);\r\n        swapStates.amounts = IBSKTPair(bsktPair).transferTokensToOwner();\r\n\r\n        swapStates.wethAddress = _factory().weth();\r\n        swapStates.routerAddress = _factory().router();\r\n        swapStates.OldTokensLength = _tokenDetails.tokens.length;\r\n        swapStates.newTokensLength = _newTokens.length;\r\n        swapStates.swappedAmounts = new uint256[](swapStates.newTokensLength);\r\n\r\n        // Step 1: Convert all tokens to WETH (collected in this contract)\r\n        for (uint256 i = 0; i < swapStates.OldTokensLength; ) {\r\n            address token = _tokenDetails.tokens[i]; \r\n            uint256 balance = swapStates.amounts[i]; \r\n\r\n            if (balance > 0) {\r\n                // If token is WETH, simply add up in the total weth bought\r\n                if(token == swapStates.wethAddress) {\r\n                    swapStates.wethBought += balance;\r\n                } else{\r\n                // For other tokens, swap token to weth and sum up weth bought\r\n                    swapStates.wethBought += _swapTokensForTokens(\r\n                        token,\r\n                        swapStates.wethAddress,\r\n                        swapStates.routerAddress,\r\n                        balance,\r\n                        address(this),\r\n                        _minAmountsOutPrev[i],\r\n                        _deadline\r\n                    );\r\n                }   \r\n            }\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        // Step 2: Convert all WETH tokens to the new tokens and weights\r\n        // If WETH amount is zero in the result of first swap, skip the second swap loop\r\n        if (swapStates.wethBought > 0) {\r\n            for (uint256 i = 0; i < swapStates.newTokensLength; ) {\r\n\r\n                // For the last token, use remaining amount to avoid dust\r\n                if (i == swapStates.newTokensLength - 1) {\r\n                    swapStates.amountToSwap = swapStates.wethBought - swapStates.totalAllocated;\r\n                } else {\r\n                    swapStates.amountToSwap =\r\n                        (swapStates.wethBought * _newWeights[i]) /\r\n                        PERCENT_PRECISION;\r\n                    swapStates.totalAllocated += swapStates.amountToSwap;\r\n                }\r\n\r\n                swapStates.swappedAmounts[i] = _swapTokensForTokens(\r\n                    swapStates.wethAddress,\r\n                    _newTokens[i],\r\n                    swapStates.routerAddress,\r\n                    swapStates.amountToSwap,\r\n                    bsktPair,\r\n                    _minAmountsOutNew[i],\r\n                    _deadline\r\n                );\r\n\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n\r\n        emit BSKTRebalanced(\r\n            address(this),\r\n            _tokenDetails.tokens,\r\n            _tokenDetails.weights,\r\n            _newTokens,\r\n            _newWeights\r\n        );\r\n\r\n        IBSKTPair(bsktPair).updateTokens(_newTokens, swapStates.swappedAmounts);\r\n        _tokenDetails.tokens = _newTokens;\r\n        _tokenDetails.weights = _newWeights;\r\n        IBSKTPair(bsktPair).setReentrancyGuardStatus(false);\r\n    }\r\n\r\n    /// @notice Swaps tokens using the Uniswap router\r\n    /// @dev Internal function to handle token swaps with buffer protection\r\n    /// @param _tokenIn Address of the input token\r\n    /// @param _tokenOut Address of the output token\r\n    /// @param _router Address of the Uniswap router\r\n    /// @param _amountIn Amount of input tokens\r\n    /// @param _to Address to receive output tokens\r\n    /// @param _deadline Deadline for the transaction\r\n    /// @return amountOut Amount of output tokens received\r\n    function _swapTokensForTokens(\r\n        address _tokenIn,\r\n        address _tokenOut,\r\n        address _router,\r\n        uint256 _amountIn,\r\n        address _to,\r\n        uint256 _minAmountOut,\r\n        uint256 _deadline\r\n    ) private returns (uint256 amountOut) {\r\n        // If input and output tokens are identical (e.g., WETH to WETH), just transfer directly\r\n        uint256 balanceBefore = IERC20Upgradeable(_tokenOut).balanceOf(_to);\r\n\r\n        if (_tokenIn == _tokenOut) {\r\n            if(_to != address(this)) IERC20Upgradeable(_tokenIn).safeTransfer(_to, _amountIn);\r\n        } else {\r\n            // Handle tokens that revert on zero approval\r\n            try IERC20Upgradeable(_tokenIn).approve(_router, 0) {\r\n            } catch {\r\n                // Token reverted on zero-approval, skip resetting to zero\r\n            }\r\n            // Set the required allowance directly\r\n            IERC20Upgradeable(_tokenIn).safeApprove(_router, _amountIn);\r\n\r\n            address[] memory path = _factory().getPath(_tokenIn, _tokenOut);\r\n            if (path.length != 2) revert InvalidLength();\r\n\r\n            IUniswapV2Router(_router)\r\n                .swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                    _amountIn,\r\n                    _minAmountOut,\r\n                    path,\r\n                    _to,\r\n                    _deadline\r\n                );\r\n            }\r\n        // Calculate tokenOut amount received after swap\r\n        amountOut = IERC20Upgradeable(_tokenOut).balanceOf(_to) - balanceBefore;\r\n\r\n        if (amountOut < _minAmountOut)\r\n            revert InsufficientSwapOutput(\r\n                _tokenIn,           // tokenIn Address\r\n                _tokenOut,          // tokenOut Address\r\n                _amountIn,          // TokenIn amount\r\n                amountOut,          // TokenOut amount received\r\n                _minAmountOut       // Min TokenOut amount acceptable\r\n            );\r\n    }\r\n\r\n    /// @notice Registers an interface with ERC165\r\n    /// @dev Adds the interface ID to the supported interfaces mapping for standard detection\r\n    /// @dev This enables NFT marketplace and wallet compatibility via ERC-165 interface detection\r\n    /// @param interfaceId The interface identifier, as specified in ERC-165\r\n    function _registerInterface(bytes4 interfaceId) internal virtual {\r\n        if (interfaceId == 0xffffffff) revert InvalidInterfaceId();\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n\r\n    /// @notice Checks if any address in the array matches the given address\r\n    /// @dev Loops through the array starting from the given index and checks for matches\r\n    /// @param _array Array to loop through\r\n    /// @param _address Address to check\r\n    /// @param _startIndex Index to start checking from\r\n    function _checkForDuplicateAddress(\r\n        address[] memory _array,\r\n        address _address,\r\n        uint256 _startIndex\r\n    ) internal pure returns (bool) {\r\n        if (_array.length > _startIndex) {\r\n            for (uint256 i = _startIndex; i < _array.length; ) {\r\n                if (_array[i] == _address) revert DuplicateToken();\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /// @notice Returns the factory instance casted to IFactory interface\r\n    /// @dev Used to avoid repeated casting of the factory address in loops and functions\r\n    /// @return factoryInstance The factory interface instance\r\n    function _factory() private view returns (IFactory) {\r\n        return IFactory(factory);\r\n    }\r\n\r\n    /// @notice Returns the factory instance casted to IFactory interface\r\n    /// @dev Used to avoid repeated casting of the factory address in loops and functions\r\n    /// @return factoryInstance The factory interface instance\r\n    function _bsktUtils() private view returns (IBSKTUtils) {\r\n        return IBSKTUtils(_factory().bsktUtils());\r\n    }\r\n\r\n    /// @notice Checks if an address is a contract\r\n    /// @param target The address to check\r\n    /// @return bool True if the address is a contract, false otherwise\r\n    function isContractAddress(address target) internal view returns (bool) {\r\n        return AddressUpgradeable.isContract(target);\r\n    }\r\n\r\n    // ===============================================\r\n    // Public/External View/Pure Functions\r\n    // ===============================================\r\n\r\n    /// @notice Gets the total number of tokens in the basket\r\n    /// @dev Returns the length of the tokens array\r\n    /// @return tokenLength Number of tokens in the basket\r\n    function totalTokens() external view returns (uint256 tokenLength) {\r\n        tokenLength = _tokenDetails.tokens.length;\r\n    }\r\n\r\n    /// @notice Calculates the total value of all tokens in WETH\r\n    /// @dev Converts each token's value to its WETH equivalent using the router\r\n    /// @return value Total value of all tokens in WETH\r\n    function getTokenValueByWETH() public view returns (uint256 value) {\r\n        IFactory factoryInstance = _factory(); \r\n        address wethAddress = factoryInstance.weth(); \r\n        uint256 tokensLength = _tokenDetails.tokens.length;\r\n        \r\n        for (uint256 i = 0; i < tokensLength; ) {\r\n            address token = _tokenDetails.tokens[i]; \r\n            uint256 balance = IBSKTPair(bsktPair).getTokenReserve(i); \r\n            \r\n            address[] memory path = factoryInstance.getPath(token, wethAddress); \r\n            \r\n            value += factoryInstance.getAmountsOut(balance, path); \r\n            \r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Returns the contract-level metadata URI\r\n    /// @dev Used for OpenSea and other marketplaces to display collection info\r\n    /// @return URI string from the factory contract\r\n    function contractURI() public view returns (string memory) {\r\n        return _factory().getContractURI();\r\n    }\r\n\r\n    /// @notice Checks if contract supports a given interface\r\n    /// @dev Combines OpenZeppelin's implementation with custom interfaces\r\n    /// @param interfaceId Interface identifier to check\r\n    /// @return True if interface is supported\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override(ERC721URIStorageUpgradeable, IERC165Upgradeable, IBSKT)\r\n        returns (bool)\r\n    {\r\n        return\r\n            super.supportsInterface(interfaceId) ||\r\n            _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /// @notice Calculates royalty information for token sales\r\n    /// @dev Implements ERC2981 to provide royalty information\r\n    /// @param _salePrice Price at which the token is being sold\r\n    /// @return receiver Address to receive royalties\r\n    /// @return royaltyAmount Amount of royalty to pay\r\n    function royaltyInfo(\r\n        uint256, /* _tokenId */\r\n        uint256 _salePrice\r\n    )\r\n        external\r\n        view\r\n        override(IBSKT, IERC2981Upgradeable)\r\n        returns (address receiver, uint256 royaltyAmount)\r\n    {\r\n        receiver = _factory().royaltyReceiver();\r\n        uint256 rate = _factory().royaltyPercentage();\r\n        if (rate > 0 && receiver != address(0)) {\r\n            royaltyAmount = (_salePrice * rate) / PERCENT_PRECISION;\r\n        }\r\n    }\r\n\r\n    /// @notice Gets the details of a token at specified index\r\n    /// @dev Returns both the token address and its weight in the basket\r\n    /// @param _index Index of the token in the basket\r\n    /// @return token Address of the token\r\n    /// @return weight Weight of the token in the basket\r\n    function getTokenDetails(uint256 _index)\r\n        external\r\n        view\r\n        returns (address token, uint256 weight)\r\n    {\r\n        uint256 length = _tokenDetails.tokens.length;\r\n        if (_index >= length) revert TokenIndexOutOfBounds(_index, length);\r\n        token = _tokenDetails.tokens[_index];\r\n        weight = _tokenDetails.weights[_index];\r\n    }\r\n\r\n    /// @notice Gets all token details including addresses and weights\r\n    /// @return tokens Array of token addresses\r\n    /// @return weights Array of token weights\r\n    function getTokenDetails()\r\n        external\r\n        view\r\n        returns (address[] memory tokens, uint256[] memory weights)\r\n    {\r\n        return (_tokenDetails.tokens, _tokenDetails.weights);\r\n    }\r\n\r\n    /// @notice Get existing owner of BSKT, which will be the owner of 0 token\r\n    /// @return owner address\r\n    function getOwner() public view returns (address owner) {\r\n        return ownerOf(0);\r\n    }\r\n}\r\n"}, "contracts/interfaces/IBSKT.sol": {"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.30;\r\n\r\ninterface IBSKT {\r\n    function initialize(\r\n        string calldata _name,\r\n        string calldata _symbol,\r\n        address _owner,\r\n        address _factoryAddress,\r\n        address[] calldata _tokens,\r\n        uint256[] calldata _weights,\r\n        address _bsktPair,\r\n        string calldata _tokenURI,\r\n        string calldata _id,\r\n        string calldata _description\r\n    ) external;\r\n\r\n    function contribute(uint256[] calldata minAmountsOut, bytes calldata signature, uint256 _deadline) external payable;\r\n    function withdraw(uint256 _liquidity) external;\r\n    function withdrawETH(uint256 _liquidity, uint256[] calldata _minAmountsOutFee, bytes calldata _signatureFee, uint256[] calldata _minAmountsOut, bytes calldata _signature, uint256 _deadline) external;\r\n    function rebalance(address[] calldata _newTokens, uint256[] calldata _newWeights, uint256[] calldata _minAmountsOutnewPrev, bytes calldata _signaturenewPrev, uint256[] calldata _minAmountsOutnew, bytes calldata _signaturenew, uint256 _deadline) external;\r\n    function emergencyStable(address[] calldata _newTokens, uint256[] calldata _newWeights, uint256[] calldata _minAmountsOutnewPrev, bytes calldata _signaturenewPrev, uint256[] calldata _minAmountsOutnew, bytes calldata _signaturenew, uint256 _deadline) external;\r\n    function claimFee(uint256 amount, uint256[] calldata _minAmountsOut, bytes calldata _signature, uint256 _deadline, bool withdrawIndividualTokens, bool withdrawFullAmount) external;\r\n    function getTokenDetails(uint256 _index) external view returns (address token, uint256 weight);\r\n    function getTokenDetails() external view returns (address[] memory tokens, uint256[] memory weights);\r\n    function totalTokens() external view returns (uint256 tokenLength);\r\n    function getTokenValueByWETH() external view returns (uint256 value);\r\n    function contractURI() external view returns (string memory);\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n    function royaltyInfo(uint256, uint256) external view returns (address receiver, uint256 royaltyAmount);\r\n    function getOwner() external view returns (address owner);\r\n}"}, "contracts/interfaces/IBSKTPair.sol": {"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.30;\r\n\r\ninterface IBSKTPair {\r\n    function initialize(address factoryAddress, string memory name, address[] calldata tokens) external;\r\n\r\n    function mint(address _to, uint256[] calldata amounts) external returns (uint256 liquidity);\r\n\r\n    function burn(address _to) external returns (uint256[] memory amounts);\r\n\r\n    function transferTokensToOwner() external returns (uint256[] memory amounts);\r\n\r\n    function updateTokens(address[] calldata _tokens, uint256[] calldata _tokensReserve) external;\r\n\r\n    function setReentrancyGuardStatus(bool _state) external;\r\n\r\n    function updateCollectedFee(uint256 _amount) external;\r\n\r\n    function distMgmtFee() external;\r\n\r\n    function collectedFee() external view returns (uint256 collectedFee);\r\n\r\n    function getTokenAddress(uint256 _index) external view returns (address);\r\n\r\n    function getTokenReserve(uint256 _index) external view returns (uint256);\r\n\r\n    function getTokenList() external view returns (address[] memory);\r\n\r\n    function getTokensReserve() external view returns (uint256[] memory);\r\n\r\n    function getTotalMgmtFee() external view returns (uint);\r\n\r\n    function calculateShareETH(uint256 _amountLP) external view returns (uint256 amountETH);\r\n\r\n    function calculateShareTokens(uint256 _amountLP) external view returns (uint256[] memory amountTokens);\r\n\r\n    function getTokenAndUserBal(address _user) external view returns (uint256[] memory, uint256, uint256);\r\n}\r\n"}, "contracts/interfaces/IBSKTUtils.sol": {"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.30;\r\n\r\ninterface IBSKTUtils {\r\n    function initialize(\r\n        address _signer\r\n    ) external;\r\n\r\n    function verifySignature(\r\n        uint256 deadline,\r\n        address[] calldata tokens,\r\n        uint256[] calldata weights,\r\n        uint256[] calldata amount,\r\n        bytes calldata signature\r\n    ) external view returns (bool);\r\n}"}, "contracts/interfaces/IFactory.sol": {"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.30;\r\n\r\ninterface IFactory {\r\n    // --- View Functions ---\r\n    function alva() external view returns (address);\r\n    function minPercentALVA() external view returns (uint16);\r\n    function minLpWithdrawal() external view returns (uint256);\r\n    function bsktImplementation() external view returns (address);\r\n    function bsktPairImplementation() external view returns (address);\r\n    function royaltyReceiver() external view returns (address);\r\n    function royaltyPercentage() external view returns (uint256);\r\n    function router() external view returns (address);\r\n    function weth() external view returns (address);\r\n    function minBSKTCreationAmount() external view returns (uint256);\r\n    function monthlyFeeRate() external view returns (uint256);\r\n    function collectionUri() external view returns (string memory);\r\n    function totalBSKT() external view returns (uint);\r\n    function getBSKTAtIndex(uint256 index) external view returns (address);\r\n    function getPlatformFeeConfig() external view returns (uint16, uint16, uint16, address);\r\n    function getContractURI() external view returns (string memory);\r\n    function paused() external view returns (bool);\r\n    function isWhitelistedContract(address contractAddr) external view returns (bool);\r\n    function calMgmtFee(uint256 months, uint256 lpSupply) external view returns (uint256);\r\n    function getAmountsOut(uint256 _amount, address[] memory _path) external view returns (uint);\r\n    function getPath(address _tokenA, address _tokenB) external pure returns (address[] memory);\r\n    function bsktUtils() external view returns (address);\r\n\r\n    // --- Mutative Functions ---\r\n    function initialize(\r\n        address _alva,\r\n        uint16 _minPercentALVA,\r\n        address _bsktImplementation,\r\n        address _bsktPairImplementation,\r\n        uint256 _monthlyFeeRate,\r\n        address _royaltyReceiver,\r\n        string calldata _collectionUri,\r\n        address _feeCollector,\r\n        address _defaultMarketplace,\r\n        address _routerAddress,\r\n        address _wethAddress,\r\n        uint256 _minBSKTCreationAmount\r\n    ) external;\r\n\r\n    function setMinLpWithdrawal(uint256 newMin) external;\r\n    function createBSKT(\r\n        string calldata _name,\r\n        string calldata _symbol,\r\n        address[] calldata _tokens,\r\n        uint256[] calldata _weights,\r\n        string calldata _tokenURI,\r\n        uint256[] calldata _minAmountsOut,\r\n        bytes calldata _signature,\r\n        string calldata _id,\r\n        string calldata _description,\r\n        uint256 _deadline\r\n    ) external payable;\r\n    function updateBSKTImplementation(address _bsktImplementation) external;\r\n    function updateBSKTPairImplementation(address _bsktPairImplementation) external;\r\n    function updateAlva(address _alva) external;\r\n    function updateMinPercentALVA(uint16 _minPercentALVA) external;\r\n    function updateCollectionURI(string calldata _collectionURI) external;\r\n    function updateRoyaltyPercentage(uint256 _royaltyPercentage) external;\r\n    function updateRoyaltyReceiver(address _royaltyReceiver) external;\r\n    function updateMinBSKTCreationAmount(uint256 _minBSKTCreationAmount) external;\r\n    function addWhitelistedContract(address contractAddr) external;\r\n    function dewhitelistContract(address contractAddr) external;\r\n    function setPlatformFeeConfig(uint16 _bsktCreationFee, uint16 _contributionFee, uint16 _withdrawalFee) external;\r\n    function setFeeCollector(address _feeCollector) external;\r\n    function pause() external;\r\n    function unpause() external;\r\n}"}, "contracts/interfaces/IUniswap.sol": {"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.30;\r\n\r\ninterface IUniswapV2Router {\r\n    function getAmountsOut(uint amountIn, address[] memory path)\r\n        external\r\n        view\r\n        returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n}\r\n"}, "contracts/interfaces/IWETH.sol": {"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.30;\r\n\r\ninterface IWETH {\r\n    // Events\r\n    event Deposit(address indexed dst, uint256 wad);\r\n    event Withdrawal(address indexed src, uint256 wad);\r\n    \r\n    // Functions\r\n    function deposit() external payable;\r\n    \r\n    // No-argument withdraw function (withdraws all)\r\n    function withdraw() external;\r\n    \r\n    // Withdraw with specific amount\r\n    function withdraw(uint wad) external;\r\n    \r\n    function mint(address to, uint256 amount) external;\r\n    \r\n    function burn(address from, uint256 amount) external;\r\n    \r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    \r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n    \r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    \r\n    // Additional ERC20 functions\r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n"}}, "settings": {"optimizer": {"enabled": true}, "viaIR": false, "evmVersion": "paris", "outputSelection": {"*": {"*": ["evm.legacyAssembly"]}}, "metadata": {"useLiteralContent": true}}}
{"language": "Solidity", "settings": {"optimizer": {"enabled": true}, "outputSelection": {"*": {"*": ["evm.legacyAssembly"]}}, "viaIR": false, "remappings": []}, "sources": {"innmind/idoAlphaProdProxy.sol": {"content": "// created by cryptodo.app\n\n// SPDX-License-Identifier: MIT\n\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {ReentrancyGuardUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\nimport {PausableUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\nimport {UUPSUpgradeable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.15/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data)\n        internal\n        view\n        returns (bytes memory)\n    {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    /**\n     * @dev Mints `amount` new tokens and sends them to `to`.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - The caller must have the appropriate permissions to mint tokens.\n     */\n    function mint(address to, uint256 amount) external;\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     */\n    function burn(uint256 value) external;\n\n    /**\n     * @dev Transfers ownership of the contract to a new owner.\n     */\n    function transferOwnership(address newOwner) external;\n\n    /**\n     * @dev Allows the current owner to renounce ownership of the contract.\n     */\n    function renounceOwnership() external;\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(\n        address spender,\n        uint256 currentAllowance,\n        uint256 requestedDecrease\n    );\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 requestedDecrease\n    ) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(\n                    spender,\n                    currentAllowance,\n                    requestedDecrease\n                );\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data)\n        private\n        returns (bool)\n    {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success &&\n            (returndata.length == 0 || abi.decode(returndata, (bool))) &&\n            address(token).code.length > 0;\n    }\n}\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length)\n        internal\n        pure\n        returns (string memory)\n    {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature)\n        internal\n        pure\n        returns (address, RecoverError)\n    {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature)\n        internal\n        pure\n        returns (address)\n    {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs &\n            bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (\n            uint256(s) >\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\n        ) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash)\n        internal\n        pure\n        returns (bytes32 message)\n    {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19Ethereum Signed Message:\\n\",\n                    Strings.toString(s.length),\n                    s\n                )\n            );\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash)\n        internal\n        pure\n        returns (bytes32 data)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n\npragma solidity ^0.8.30;\n\ncontract ALPHA_IDO is\n    Initializable,\n    OwnableUpgradeable,\n    ReentrancyGuardUpgradeable,\n    PausableUpgradeable,\n    UUPSUpgradeable\n{\n    using ECDSA for bytes32;\n    using Address for address;\n    using SafeERC20 for IERC20;\n\n    struct PreOrderStruct {\n        address buyer;\n        uint256 tokensAmount;\n        IERC20 boughtFor; // stable address or native (zero address)\n        uint256 payedAmount;\n        address referrer;\n        uint256 refFee;\n        uint256 refundFee;\n    }\n\n    IERC20 public saleTokenContract;\n    IERC20 public usdtAddress;\n    IERC20 public usdcAddress;\n\n    address public signatureValidator;\n    mapping(bytes => bool) public usedSignature;\n\n    address public alphaFeeReceiver;\n    address public operatorAddress;\n    address public refundOperatorAddress;\n\n    address public proxyUpgraderAddress;\n\n    uint32 public alphaFee;\n\n    uint256 public preOrderStartTime;\n    uint256 public preOrderEndTime;\n    uint256 public refundEndTime;\n    uint256 public saleStartTime;\n    uint256 public saleEndTime;\n\n    uint256 public stablePrice;\n    uint256 public nativeTokenPrice;\n    uint256 public preOrderStablePrice;\n    uint256 public preOrderNativeTokenPrice;\n\n    uint256 public maxAllocationAmount;\n    uint256 public maxPreOrderAllocationAmount;\n    uint256 public maxTokensPerWallet;\n    uint256 public minPurchaseAmount;\n\n    uint256 public maxReferralFee;\n    uint256 public minReferralFee;\n    uint256 public baseReferralFee;\n    uint256 public baseRefundFee;\n\n    uint256 public totalPreOrderBought;\n    uint256 public preOrdersCount;\n    mapping(uint256 => PreOrderStruct) private preOrders;\n    mapping(address => uint256[]) private preOrdersIndex;\n    mapping(address => uint256) private _preOrdersBought;\n\n    uint256 public totalPreOrderWithdrawn;\n    mapping(address => uint256) private userPreOrderWithdrawn;\n\n    uint256 public totalTokensBought;\n    mapping(address => uint256) private _tokensBought;\n    mapping(address => uint256) public allowedForBuy;\n\n    uint256 public freeETH;\n\n    bool public signatureCheckEnabled = true;\n    bool public isSalePaused = false;\n    uint256 public createdAt;\n\n    event PreOrderEvent(\n        address buyer,\n        uint256 amount,\n        address purchaseTokenAddress,\n        uint256 value\n    );\n    event BuyTokens(\n        address buyer,\n        uint256 amount,\n        address purchaseTokenAddress,\n        uint256 value\n    );\n    event StablePriceUpdated(uint256 newStablePrice);\n    event NativeTokenPriceUpdated(uint256 newNativeTokenPrice);\n    event SaleStatusChanged(bool newStatus);\n    event SalePeriodChanged(uint256 _newSaleStartTime, uint256 _newSaleEndTime);\n    event PreOrderPeriodChanged(uint256 _newSaleStartTime, uint256 _newSaleEndTime);\n    event MaxAllocationAmountChanged(uint256 newMaxAllocationAmount);\n    event MaxTokensPerWalletChanged(uint256 newMaxTokensPerWalletAmount);\n    event MinPurchaseAmountChanged(uint256 newMinPurchaseAmount);\n    event SignatureValidatorChanged(address newValidator);\n    event RefundOperatorAddressChanged(address newRefundOperatorAddress);\n    event AlphaFeeReceiverChanged(address newAlphaFeeReceiver);\n    event Received(address sender, uint256 value);\n\n    function initialize() initializer public {\n        // eth\n        saleTokenContract = IERC20(0x2e00C85860855E036d2c87bCe79333183d2d2112);\n        usdtAddress = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n        usdcAddress = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\n\n        // base mainnet\n        // saleTokenContract = IERC20(0x44dd0C2e368453FD66d66f1f542efee68c536dCf);\n        // usdtAddress = IERC20(0xfde4C96c8593536E31F229EA8f37b2ADa2699bb2);\n        // usdcAddress = IERC20(0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913);\n\n        // linea mainnet\n        // saleTokenContract = IERC20(0x0BEDd9aeF9C0ee751300859f383EaeF5e7706184);\n        // usdtAddress = IERC20(0xA219439258ca9da29E9Cc4cE5596924745e12B93);\n        // usdcAddress = IERC20(0x176211869cA2b568f2A7D4EE941E073a821EE1ff);\n\n        // arbitrum mainnet\n        // saleTokenContract = IERC20(0x9587b49156be0f4B7C75165f590e78342F1FA62f);\n        // usdtAddress = IERC20(0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9);\n        // usdcAddress = IERC20(0xaf88d065e77c8cC2239327C5EDb3A432268e5831);\n\n        // bsc mainnet\n        // saleTokenContract = IERC20(0x29fa895542e31Ce3497c9e72c74205E62dd1E75C);\n        // usdtAddress = IERC20(0x55d398326f99059fF775485246999027B3197955);\n        // usdcAddress = IERC20(0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d);\n\n        // bsc testnet\n        // saleTokenContract = IERC20(0x25a30B000E817b539b09E2b8988da94E30b87F19);\n        // usdtAddress = IERC20(0x30ED55dB4F7CD6829f01C8A224134Cbc21055555);\n        // usdcAddress = IERC20(0x74C93D2d06138457974447BDD6f15b337d8F6823);\n\n        signatureValidator = 0x43cdCcCA6b24F45a8B52512B83DC1A4208f16671;\n        alphaFeeReceiver = 0xaebF22D90E6E0948E0F4ecDA5612aea4d34c1c8a;\n        operatorAddress = _msgSender();\n        refundOperatorAddress = 0xDEe0AE49547c50E6B687f9242333E39b904fb2af;\n        address ownerAddress = 0x85dA68ebb65fC4e4c8c4872321955D13A14C1072;\n        proxyUpgraderAddress = 0x096766d1231A63Ed6Cb68649C59f039AfcC3C041;\n\n        stablePrice = 0.006 * 10**6; // 0.013$\n        nativeTokenPrice = 0.000000 * 10**18; // in wei\n\n        preOrderStablePrice = 0.006 * 10**6;\n        preOrderNativeTokenPrice = 0;\n\n        maxPreOrderAllocationAmount = 16666666 * 10**18; // 100000$\n        maxAllocationAmount = 50000000 * 10**18; // 300000$\n        maxTokensPerWallet = 2500000 * 10**18; // 15000$\n        minPurchaseAmount = 1 * 10**18; // 100$\n\n        alphaFee = 1000; // 10%\n        maxReferralFee = 5000; // 50% from alpha fee\n        minReferralFee = 100; // 1% from alpha fee\n        baseReferralFee = 500; // 5% from alpha fee\n        baseRefundFee = 500; // 5% from user payed amount\n\n        preOrderStartTime = 1737370800;\n        preOrderEndTime = 1738072800;\n        refundEndTime = 1738159200;\n\n        saleStartTime = 1738159201;\n        saleEndTime = 1738850400;\n\n        // signatureCheckEnabled = false;\n        createdAt = block.timestamp;\n\n        __Pausable_init();\n        __ReentrancyGuard_init();\n        __Ownable_init(ownerAddress);\n        __UUPSUpgradeable_init();\n\n        require(\n            preOrderEndTime > preOrderStartTime,\n            \"Pre order End Time must be > preorder start Time\"\n        );\n        require(saleEndTime > saleStartTime, \"Sale end Time must be > sale start Time\");\n        require(saleStartTime + 1 days > refundEndTime, \"Sale start Time + 1 day must be > refund end Time\");\n        require(saleStartTime > preOrderEndTime, \"Sale start Time must be > preorder end Time\");\n        require(refundEndTime > preOrderEndTime, \"Refund End Time must be > preorder end Time\");\n\n        require(alphaFee < 10000, \"Alpha fee percent must be < 10000\");\n        require(\n            baseReferralFee > 0 && baseReferralFee < 10000,\n            \"Base ref fee must be > 0 or < 10000\"\n        );\n\n        require(stablePrice > 0, \"Price cannot be a zero\");\n    }\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        onlyProxyUpgrader\n        override\n    {}\n\n    function setProxyUpgrader(address newAddress) external onlyProxyUpgrader {\n        proxyUpgraderAddress = newAddress;\n    }\n\n    // modifiers\n    modifier onlyOperator() {\n        if (_msgSender() != operatorAddress) {\n            revert(\"Only Operator function\");\n        }\n        _;\n    }\n\n    modifier onlyRefundOperator() {\n        if (_msgSender() != refundOperatorAddress) {\n            revert(\"Only Refund Operator function\");\n        }\n        _;\n    }\n\n    modifier onlyProxyUpgrader() {\n        if (_msgSender() != proxyUpgraderAddress) {\n            revert(\"Only Proxy Upgrader function\");\n        }\n        _;\n    }\n\n    modifier checkBuyData(\n        bool isPreorder,\n        uint256 tokenAmount,\n        IERC20 purchaseToken,\n        uint256 deadline,\n        uint256 minAlloc,\n        uint256 maxAlloc,\n        uint256 totalBought,\n        address referrer,\n        uint256 refFee,\n        uint256 _refundFee,\n        bytes calldata signature\n    ) {\n        require(!isSalePaused, \"Selling on pause\");\n\n        if (isPreorder) {\n            require(block.timestamp >= preOrderStartTime, \"Preorder has not started yet\");\n            require(block.timestamp <= preOrderEndTime, \"Preorder has ended\");\n\n            require(\n                totalBought < maxPreOrderAllocationAmount,\n                \"Max Preorder Allocation has reached\"\n            );\n            require(\n                totalBought + tokenAmount <= maxPreOrderAllocationAmount,\n                \"Max Preorder Allocation exceeded. Try to buy fewer tokens\"\n            );\n        } else {\n            require(block.timestamp >= saleStartTime, \"Sale has not started yet\");\n            require(block.timestamp <= saleEndTime, \"Sale has ended\");\n        }\n\n        require(tokenAmount > 0, \"Purchase amount can not be zero\");\n        require(\n            tokenAmount >= minPurchaseAmount,\n            \"Token amount is below the minimum purchase amount\"\n        );\n\n        require(totalBought < maxAllocationAmount, \"Max Allocation has reached\");\n        require(\n            totalBought + tokenAmount <= maxAllocationAmount,\n            \"Max Allocation exceeded. Try to buy fewer tokens\"\n        );\n\n        if (address(purchaseToken) != address(0)) {\n            require(\n                purchaseToken == usdtAddress ||\n                purchaseToken == usdcAddress,\n                \"Wrong purchase token address\"\n            );\n\n            uint256 price = isPreorder ? preOrderStablePrice : stablePrice;\n            require(price > 0, \"Stable price not setted\");\n\n            uint256 purchaseTokensAmount = getPurchaseTokensAmount(\n                tokenAmount,\n                purchaseToken,\n                isPreorder\n            );\n\n            require(\n                purchaseToken.balanceOf(_msgSender()) >= purchaseTokensAmount,\n                \"Insufficient balance for purchase\"\n            );\n            require(\n                purchaseToken.allowance(_msgSender(), address(this)) >=\n                    purchaseTokensAmount,\n                \"Allowance too low for purchase\"\n            );\n        } else {\n            uint256 price = isPreorder ? preOrderNativeTokenPrice : nativeTokenPrice;\n            require(price > 0, \"Native token price not setted\");\n        }\n\n        if (maxTokensPerWallet > 0) {\n            if (isPreorder) {\n                require(\n                    tokenAmount + _preOrdersBought[_msgSender()] <= maxTokensPerWallet,\n                    \"Token amount exceeds max allowed per wallet.\"\n                );\n            } else {\n                require(\n                    tokenAmount + _tokensBought[_msgSender()] <= maxTokensPerWallet,\n                    \"Token amount exceeds max allowed per wallet.\"\n                );\n            }\n        }\n\n        if (signatureCheckEnabled) {\n            require(\n                verifySignature(\n                    _msgSender(),\n                    deadline,\n                    minAlloc,\n                    maxAlloc,\n                    totalBought,\n                    referrer,\n                    refFee,\n                    _refundFee,\n                    signature\n                ),\n                \"Signature validator does not match with recovered address\"\n            );\n            usedSignature[signature] = true;\n        }\n        _;\n    }\n\n    // only refund operator functions\n    function setRefundOperator(address newAddress) external onlyRefundOperator {\n        require(newAddress != address(0), \"Zero address cannot be set as refund operator\");\n        refundOperatorAddress = newAddress;\n        emit RefundOperatorAddressChanged(newAddress);\n    }\n\n    function setRefundEndTime(uint256 _newEndTime) external onlyRefundOperator {\n        require(_newEndTime + 1 days < saleStartTime,\n            \"Refund end time + 1 day must be < SALE start time\"\n        );\n        require(_newEndTime > preOrderEndTime,\n            \"Refund end time must be greater than preorder end time\"\n        );\n\n        refundEndTime = _newEndTime;\n        // emit RefundEndTimeChanged(_newEndTime);\n    }\n\n    function setBaseRefundFee(uint256 newFee) external onlyRefundOperator {\n        require(\n            newFee > 0 && newFee < 10000,\n            \"Fee must be greater than 0 and smaller than 10000 (100%)\"\n        );\n        baseRefundFee = newFee;\n        // emit baseRefundFeeChanged(newFee);\n    }\n\n    // only operator functions\n    function depositTokens(uint256 amount) external nonReentrant {\n        saleTokenContract.safeTransferFrom(_msgSender(), address(this), amount);\n    }\n\n    function burnFreeTokens() external onlyOperator {\n        uint256 tokBalance = saleTokenContract.balanceOf(address(this));\n        saleTokenContract.burn(tokBalance);\n    }\n\n    // only dev function for fast test without signature\n    function setSignatureCheck() external onlyOperator {\n        signatureCheckEnabled = !signatureCheckEnabled;\n    }\n\n    function setAllowedForBuy(address userAddress, uint256 amount) external onlyOperator {\n        allowedForBuy[userAddress] = amount;\n    }\n\n    function pause() external onlyOperator {\n        _pause();\n    }\n\n    function unpause() external onlyOperator {\n        _unpause();\n    }\n\n    function setSaleStatus() external onlyOperator {\n        isSalePaused = !isSalePaused;\n        emit SaleStatusChanged(isSalePaused);\n    }\n\n    function setPreOrderPeriod(uint256 _newStartTime, uint256 _newEndTime)\n        external\n        onlyOperator\n    {\n        // require(_newStartTime < _newEndTime, \"End time must be greater than start time\");\n        // require(_newEndTime < saleStartTime,\n        //     \"Preorder end time must be earler than SALE start time\"\n        // );\n        // require(_newEndTime < refundEndTime,\n        //     \"End time must be smaller than refund end time\"\n        // );\n        preOrderStartTime = _newStartTime;\n        preOrderEndTime = _newEndTime;\n        emit PreOrderPeriodChanged(_newStartTime, _newEndTime);\n    }\n\n    function setSalePeriod(uint256 _newSaleStartTime, uint256 _newSaleEndTime)\n        external\n        onlyOperator\n    {\n        // require(\n        //     _newSaleStartTime < _newSaleEndTime,\n        //     \"End time must be greater than start time\"\n        // );\n        // require(\n        //     _newSaleStartTime > refundEndTime + 1 days,\n        //     \"Sale start time must be > refund end time + 1 day\"\n        // );\n        saleStartTime = _newSaleStartTime;\n        saleEndTime = _newSaleEndTime;\n        emit SalePeriodChanged(_newSaleStartTime, _newSaleEndTime);\n    }\n\n    function setMaxTokensPerWallet(uint256 _newMaxTokensPerWalletAmount)\n        external\n        onlyOperator\n    {\n        require(_newMaxTokensPerWalletAmount > 0, \"Amount cannot be zero\");\n        maxTokensPerWallet = _newMaxTokensPerWalletAmount;\n        emit MaxTokensPerWalletChanged(_newMaxTokensPerWalletAmount);\n    }\n\n    function setMinPurchaseAmount(uint256 _newMinPurchaseAmount) external onlyOperator {\n        require(_newMinPurchaseAmount > 0, \"Amount cannot be zero\");\n        minPurchaseAmount = _newMinPurchaseAmount;\n        emit MinPurchaseAmountChanged(_newMinPurchaseAmount);\n    }\n\n    function setMaxAllocationAmount(uint256 _newAmount) external onlyOperator {\n        require(_newAmount > 0, \"Amount cannot be zero\");\n        maxAllocationAmount = _newAmount;\n        emit MaxAllocationAmountChanged(_newAmount);\n    }\n\n    function setMaxPreOrderAllocationAmount(uint256 _newAmount) external onlyOperator {\n        require(_newAmount > 0, \"Amount cannot be zero\");\n        maxPreOrderAllocationAmount = _newAmount;\n        // emit MaxPreOrderAllocationAmountChanged(_newAmount);\n    }\n\n    function setBaseReferralFee(uint256 newFee) external onlyOperator {\n        require(\n            newFee > 0 && newFee < 10000,\n            \"Fee must be greater than 0 and smaller than 10000 (100%)\"\n        );\n        baseReferralFee = newFee;\n        // emit BaseReferralFeeChanged(newFee);\n    }\n\n    function setMaxReferralFee(uint256 newFee) external onlyOperator {\n        require(\n            newFee > 0 && newFee < 10000,\n            \"Fee must be greater than 0 and smaller than 10000 (100%)\"\n        );\n        maxReferralFee = newFee;\n    }\n\n    function setMinReferralFee(uint256 newFee) external onlyOperator {\n        require(\n            newFee > 0 && newFee < 10000,\n            \"Fee must be greater than 0 and smaller than 10000 (100%)\"\n        );\n        minReferralFee = newFee;\n    }\n\n    function setSignatureValidator(address newValidator) external onlyOperator {\n        require(newValidator != address(0), \"Zero address cannot be a validator\");\n        signatureValidator = newValidator;\n        emit SignatureValidatorChanged(newValidator);\n    }\n\n    function setAlphaFeeReceiver(address newAddress) external {\n        require(\n            _msgSender() == alphaFeeReceiver,\n            \"Only fee reciever can change youreself\"\n        );\n        require(\n            newAddress != address(0),\n            \"Zero address cannot be set as company address\"\n        );\n        alphaFeeReceiver = newAddress;\n    }\n\n    function setUsdtAddress(address newAddress) external onlyOperator {\n        require(newAddress != address(0), \"Zero address cannot be set as USDT\");\n        usdtAddress = IERC20(newAddress);\n    }\n\n    function setUsdcAddress(address newAddress) external onlyOperator {\n        require(newAddress != address(0), \"Zero address cannot be set as USDC\");\n        usdcAddress = IERC20(newAddress);\n    }\n\n    function setSaleTokenAddress(address newAddress) external onlyOperator {\n        require(newAddress != address(0), \"Zero address cannot be set as Sale token\");\n        saleTokenContract = IERC20(newAddress);\n    }\n\n    function withdrawFreeEth() external {\n        require(_msgSender() == alphaFeeReceiver, \"You cant call this method\");\n        require(block.timestamp > refundEndTime, \"Refund period is not over\");\n\n        uint256 ethFreeBalance = address(this).balance;\n        require(ethFreeBalance > 0, \"Nothing to withdraw\");\n\n        (bool success, ) = payable(alphaFeeReceiver).call{value: ethFreeBalance}(\"\");\n        require(success, \"Sending ETH failed\");\n\n        freeETH = 0;\n    }\n\n    function withdrawFreeStable() external {\n        require(_msgSender() == alphaFeeReceiver, \"You cant call this method\");\n        require(block.timestamp > refundEndTime, \"Refund period is not over\");\n\n        uint256 usdtBalance = usdtAddress.balanceOf(address(this));\n        uint256 usdcBalance = usdcAddress.balanceOf(address(this));\n\n        require(usdtBalance > 0 || usdcBalance > 0, \"Nothing to withdraw\");\n\n        if (usdtBalance > 0) {\n            usdtAddress.safeTransfer(alphaFeeReceiver, usdtBalance);\n        }\n        if (usdcBalance > 0) {\n            usdcAddress.safeTransfer(alphaFeeReceiver, usdcBalance);\n        }\n    }\n\n    function withdrawOtherToken(address tokenAddress) external {\n        require(_msgSender() == alphaFeeReceiver, \"You cant call this method\");\n        require(block.timestamp > refundEndTime, \"Refund period is not over\");\n\n        uint256 tokenBalance = IERC20(tokenAddress).balanceOf(address(this));\n\n        require(tokenBalance > 0, \"Nothing to withdraw\");\n\n        if (tokenBalance > 0) {\n            IERC20(tokenAddress).safeTransfer(alphaFeeReceiver, tokenBalance);\n        }\n    }\n\n    // only owner functions\n    function setStablePrice(uint256 _newPrice) external onlyOwner {\n        require(_newPrice > 0, \"Price cannot be zero\");\n        stablePrice = _newPrice;\n        emit StablePriceUpdated(_newPrice);\n    }\n\n    function setNativeTokenPrice(uint256 _newPrice) external onlyOwner {\n        nativeTokenPrice = _newPrice;\n        emit NativeTokenPriceUpdated(_newPrice);\n    }\n\n    function setPreOrderStablePrice(uint256 _newPrice) external onlyOwner {\n        preOrderStablePrice = _newPrice;\n        // emit PreOrderStablePriceUpdated(_newPrice);\n    }\n\n    function setPreOrderNativeTokenPrice(uint256 _newPrice) external onlyOwner {\n        preOrderNativeTokenPrice = _newPrice;\n        // emit PreOrderNativeTokenPriceUpdated(_newPrice);\n    }\n\n    // read functions\n    function getCreatedAt() external view returns (uint256) {\n        return createdAt;\n    }\n\n    function balances(address account) public view returns (uint256) {\n        uint256 purchasedTokens = _tokensBought[account];\n\n        return purchasedTokens;\n    }\n\n    function preOrderBalances(address account) public view returns (uint256) {\n        uint256 purchasedTokens = _preOrdersBought[account];\n\n        return purchasedTokens;\n    }\n\n    function userWithdrawnAmount(address account) public view returns (uint256) {\n        uint256 withdrawnTokens = userPreOrderWithdrawn[account];\n\n        return withdrawnTokens;\n    }\n\n    function getPreOrderIndexes(address _address)\n        public\n        view\n        returns (uint256[] memory indexes)\n    {\n        return preOrdersIndex[_address];\n    }\n\n    function getPreorderByIndex(uint256 index)\n        public\n        view\n        returns (PreOrderStruct memory _pre)\n    {\n        return preOrders[index];\n    }\n\n    // user write functions\n    function refund(uint256 i, bool withFee) private {\n        PreOrderStruct storage userPreOrder = preOrders[i];\n\n        if (userPreOrder.buyer != address(0) && userPreOrder.payedAmount > 0) {\n            uint256 feeAmount = (userPreOrder.payedAmount * userPreOrder.refundFee) / 10000;\n            uint256 refundAmount = withFee\n                ? userPreOrder.payedAmount - feeAmount\n                : userPreOrder.payedAmount;\n\n            if (address(userPreOrder.boughtFor) != address(0)) {\n                (userPreOrder.boughtFor).safeTransfer(userPreOrder.buyer, refundAmount);\n\n                if (withFee) {\n                    (userPreOrder.boughtFor).safeTransfer(alphaFeeReceiver, feeAmount);\n                }\n            } else {\n                (bool refundSuccess, ) = payable(userPreOrder.buyer).call{\n                    value: refundAmount\n                }(\"\");\n                require(refundSuccess, \"Fail via sending refund to user\");\n\n                if (withFee) {\n                    (bool feeSuccess, ) = payable(alphaFeeReceiver).call{\n                        value: feeAmount\n                    }(\"\");\n                    require(feeSuccess, \"Fail via sending fee for refund\");\n                }\n            }\n\n            uint256 amount = userPreOrder.tokensAmount;\n\n            totalPreOrderBought -= amount;\n            _preOrdersBought[userPreOrder.buyer] -= amount;\n\n            totalPreOrderWithdrawn += amount;\n            userPreOrderWithdrawn[userPreOrder.buyer] += amount;\n\n            totalTokensBought -= amount;\n\n            userPreOrder.payedAmount = 0;\n            userPreOrder.tokensAmount = 0;\n        }\n    }\n\n    function refundRequest() public nonReentrant {\n        require(block.timestamp < refundEndTime, \"Refund time already expired\");\n\n        uint256[] memory userPreorders = getPreOrderIndexes(_msgSender());\n        require(userPreorders.length > 0, \"Nothing to refund\");\n\n        for (uint256 i = 0; i < userPreorders.length; i++) {\n            refund(userPreorders[i], true);\n        }\n    }\n\n    function refundToAllUsers(uint256 from, uint256 to) public nonReentrant onlyRefundOperator {\n        require(block.timestamp < refundEndTime, \"Refund time already expired\");\n\n        for (uint256 i = from; i < to; i++) {\n            refund(i, false);\n        }\n    }\n\n    function acceptPreOrders(uint256 from, uint256 to) public nonReentrant onlyOperator {\n        require(block.timestamp > refundEndTime, \"Refund time is not ended yet\");\n\n        for (uint256 i = from; i < to; i++) {\n            PreOrderStruct memory userPreOrder = preOrders[i];\n\n            if (userPreOrder.buyer != address(0) && userPreOrder.payedAmount > 0) {\n                if (\n                    userPreOrder.referrer != address(0) &&\n                    userPreOrder.referrer != _msgSender() &&\n                    userPreOrder.refFee > 0\n                ) {\n                    uint256 realRefFee = baseReferralFee;\n                    if (\n                        userPreOrder.refFee > maxReferralFee ||\n                        userPreOrder.refFee < minReferralFee\n                    ) {\n                        realRefFee = baseReferralFee;\n                    } else {\n                        realRefFee = userPreOrder.refFee;\n                    }\n\n                    uint256 alphaFeeAmount = (userPreOrder.payedAmount * alphaFee) /\n                        10000;\n                    uint256 refAmount = (alphaFeeAmount * realRefFee) / 10000;\n                    uint256 finalAlphaFeeAmount = alphaFeeAmount - refAmount;\n                    uint256 ownerRecieveAmount = userPreOrder.payedAmount -\n                        alphaFeeAmount;\n\n                    saleTokenContract.safeTransfer(\n                        userPreOrder.buyer,\n                        userPreOrder.tokensAmount\n                    );\n\n                    if (address(userPreOrder.boughtFor) != address(0)) {\n                        (userPreOrder.boughtFor).safeTransfer(\n                            owner(),\n                            ownerRecieveAmount\n                        );\n                        (userPreOrder.boughtFor).safeTransfer(\n                            alphaFeeReceiver,\n                            finalAlphaFeeAmount\n                        );\n                        (userPreOrder.boughtFor).safeTransfer(\n                            userPreOrder.referrer,\n                            refAmount\n                        );\n                    } else {\n                        (bool sentOwnerSuccess, ) = payable(owner()).call{\n                            value: ownerRecieveAmount\n                        }(\"\");\n                        require(sentOwnerSuccess, \"Failed to send owner\");\n                        (bool sentAlphaSuccess, ) = payable(alphaFeeReceiver).call{\n                            value: finalAlphaFeeAmount\n                        }(\"\");\n                        require(sentAlphaSuccess, \"Failed to send company fee\");\n                        (bool sentRefSuccess, ) = payable(userPreOrder.referrer).call{\n                            value: refAmount\n                        }(\"\");\n                        if (!sentRefSuccess) {\n                            (bool sentAlphaRefSuccess, ) = payable(alphaFeeReceiver).call{\n                                value: refAmount\n                            }(\"\");\n                            require(sentAlphaRefSuccess, \"Failed to send company R fee\");\n                        }\n                    }\n                } else {\n                    uint256 finalAlphaFeeAmount = (userPreOrder.payedAmount * alphaFee) /\n                        10000;\n                    uint256 ownerRecieveAmount = userPreOrder.payedAmount -\n                        finalAlphaFeeAmount;\n\n                    saleTokenContract.safeTransfer(\n                        userPreOrder.buyer,\n                        userPreOrder.tokensAmount\n                    );\n\n                    if (address(userPreOrder.boughtFor) != address(0)) {\n                        (userPreOrder.boughtFor).safeTransfer(\n                            owner(),\n                            ownerRecieveAmount\n                        );\n                        (userPreOrder.boughtFor).safeTransfer(\n                            alphaFeeReceiver,\n                            finalAlphaFeeAmount\n                        );\n                    } else {\n                        (bool sentOwnerSuccess, ) = payable(owner()).call{\n                            value: ownerRecieveAmount\n                        }(\"\");\n                        require(sentOwnerSuccess, \"Failed to send owner\");\n                        (bool sentAlphaSuccess, ) = payable(alphaFeeReceiver).call{\n                            value: finalAlphaFeeAmount\n                        }(\"\");\n                        require(sentAlphaSuccess, \"Failed to send company fee\");\n                    }\n                }\n\n                _tokensBought[preOrders[i].buyer] += preOrders[i].tokensAmount;\n\n                preOrders[i].payedAmount = 0;\n                preOrders[i].tokensAmount = 0;\n            }\n        }\n    }\n\n    function allowedBuy(uint256 tokenAmount, IERC20 purchaseToken)\n        public\n        payable\n        nonReentrant\n        whenNotPaused\n    {\n        require(\n            block.timestamp > saleStartTime && block.timestamp < saleEndTime,\n            \"Sale is not started or ended\"\n        );\n        require(tokenAmount < maxTokensPerWallet, \"Token Amount must be < max per wallet\");\n        require(\n            balances(_msgSender()) + tokenAmount <= maxTokensPerWallet,\n            \"Max Token Per Wallet exceeded. Try to buy fewer tokens\"\n        );\n        require(allowedForBuy[_msgSender()] > 0, \"You are not allowed for this funtion\");\n\n        (\n            uint256 purchaseTokensAmount,\n            uint256 companyFeeAmount,\n            uint256 finalCompanyFeeAmount,\n\n        ) = getTransferAmounts(tokenAmount, purchaseToken, address(0), 0, false);\n\n        if (address(purchaseToken) != address(0)) {\n            require(stablePrice > 0, \"Stable price not setted\");\n            purchaseToken.safeTransferFrom(\n                _msgSender(),\n                address(this),\n                purchaseTokensAmount\n            );\n\n            purchaseToken.safeTransfer(owner(), purchaseTokensAmount - companyFeeAmount);\n            purchaseToken.safeTransfer(alphaFeeReceiver, finalCompanyFeeAmount);\n        } else {\n            require(nativeTokenPrice > 0, \"Native token price not setted\");\n            require(\n                msg.value == purchaseTokensAmount,\n                \"Price and native tokens amount does not match\"\n            );\n\n            (bool sentOwner, ) = payable(owner()).call{\n                value: purchaseTokensAmount - companyFeeAmount\n            }(\"\");\n            require(sentOwner, \"Failed to send owner\");\n            (bool sentAlphaFee, ) = payable(alphaFeeReceiver).call{\n                value: finalCompanyFeeAmount\n            }(\"\");\n            require(sentAlphaFee, \"Failed to send company fee\");\n        }\n\n        saleTokenContract.safeTransfer(_msgSender(), tokenAmount);\n\n        allowedForBuy[_msgSender()] = 0;\n        _tokensBought[_msgSender()] += tokenAmount;\n        totalTokensBought += tokenAmount;\n        emit BuyTokens(\n            _msgSender(),\n            tokenAmount,\n            address(purchaseToken),\n            purchaseTokensAmount\n        );\n    }\n\n    function preOrder(\n        uint256 tokenAmount,\n        IERC20 purchaseToken,\n        uint256 deadline,\n        uint256 minAlloc,\n        uint256 maxAlloc,\n        uint256 totalPreoderBought,\n        address _referrer,\n        uint256 _refFee,\n        uint256 _refundFee,\n        bytes calldata signature\n    )\n        public\n        payable\n        nonReentrant\n        whenNotPaused\n        checkBuyData(\n            true,\n            tokenAmount,\n            purchaseToken,\n            deadline,\n            minAlloc,\n            maxAlloc,\n            totalPreoderBought,\n            _referrer,\n            _refFee,\n            _refundFee,\n            signature\n        )\n    {\n        uint256 purchaseTokensAmount = getPurchaseTokensAmount(\n            tokenAmount,\n            purchaseToken,\n            true\n        );\n\n        if (address(purchaseToken) != address(0)) {\n            purchaseToken.safeTransferFrom(\n                _msgSender(),\n                address(this),\n                purchaseTokensAmount\n            );\n        } else {\n            require(\n                msg.value == purchaseTokensAmount,\n                \"Price and native tokens amount does not match\"\n            );\n        }\n\n        uint256 refundFeePercent = _refundFee > baseRefundFee ? baseRefundFee : _refundFee;\n\n        preOrders[preOrdersCount] = PreOrderStruct({\n            buyer: _msgSender(),\n            tokensAmount: tokenAmount,\n            boughtFor: purchaseToken,\n            payedAmount: purchaseTokensAmount,\n            referrer: _referrer,\n            refFee: _refFee,\n            refundFee: refundFeePercent\n        });\n\n        preOrdersIndex[_msgSender()].push(preOrdersCount);\n\n        preOrdersCount++;\n        totalPreOrderBought += tokenAmount;\n        totalTokensBought += tokenAmount;\n        _preOrdersBought[_msgSender()] += tokenAmount;\n        emit PreOrderEvent(\n            _msgSender(),\n            tokenAmount,\n            address(purchaseToken),\n            purchaseTokensAmount\n        );\n    }\n\n    function buyTokens(\n        uint256 tokenAmount,\n        IERC20 purchaseToken,\n        uint256 deadline,\n        uint256 minAlloc,\n        uint256 maxAlloc,\n        uint256 totalBought,\n        address referrer,\n        uint256 refFee,\n        uint256 _refundFee,\n        bytes calldata signature\n    )\n        public\n        payable\n        nonReentrant\n        whenNotPaused\n        checkBuyData(\n            false,\n            tokenAmount,\n            purchaseToken,\n            deadline,\n            minAlloc,\n            maxAlloc,\n            totalBought,\n            referrer,\n            refFee,\n            _refundFee,\n            signature\n        )\n    {\n        (\n            uint256 purchaseTokensAmount,\n            uint256 companyFeeAmount,\n            uint256 finalCompanyFeeAmount,\n            uint256 referralFeeAmount\n        ) = getTransferAmounts(tokenAmount, purchaseToken, referrer, refFee, false);\n\n        if (address(purchaseToken) != address(0)) {\n            purchaseToken.safeTransferFrom(\n                _msgSender(),\n                address(this),\n                purchaseTokensAmount\n            );\n\n            if (referrer != address(0) && referrer != _msgSender()) {\n                try \n                    purchaseToken.transfer(referrer, referralFeeAmount) \n                {} catch {\n                    purchaseToken.safeTransfer(alphaFeeReceiver, referralFeeAmount);\n                }\n            }\n\n            purchaseToken.safeTransfer(owner(), purchaseTokensAmount - companyFeeAmount);\n            purchaseToken.safeTransfer(alphaFeeReceiver, finalCompanyFeeAmount);\n        } else {\n            require(\n                msg.value == purchaseTokensAmount,\n                \"Price and native tokens amount does not match\"\n            );\n\n            if (referrer != address(0) && referrer != _msgSender()) {\n                (bool sentRefFee, ) = payable(referrer).call{value: referralFeeAmount}(\n                    \"\"\n                );\n                if (!sentRefFee) {\n                    (bool sentAlphaRFee, ) = payable(alphaFeeReceiver).call{\n                        value: referralFeeAmount\n                    }(\"\");\n                    require(sentAlphaRFee, \"Failed to send company R fee\");\n                }\n            }\n\n            (bool sentOwner, ) = payable(owner()).call{\n                value: purchaseTokensAmount - companyFeeAmount\n            }(\"\");\n            require(sentOwner, \"Failed to send owner\");\n            (bool sentAlphaFee, ) = payable(alphaFeeReceiver).call{\n                value: finalCompanyFeeAmount\n            }(\"\");\n            require(sentAlphaFee, \"Failed to send company fee\");\n        }\n\n        saleTokenContract.safeTransfer(_msgSender(), tokenAmount);\n\n        _tokensBought[_msgSender()] += tokenAmount;\n        totalTokensBought += tokenAmount;\n        emit BuyTokens(\n            _msgSender(),\n            tokenAmount,\n            address(purchaseToken),\n            purchaseTokensAmount\n        );\n    }\n\n    // private functions\n    function getDecimals(IERC20 token) private view returns (uint8) {\n        (bool success, bytes memory data) = address(token).staticcall(\n            abi.encodeWithSignature(\"decimals()\")\n        );\n        require(success, \"Failed to call decimals function on token contract\");\n        return abi.decode(data, (uint8));\n    }\n\n    function getPurchaseTokensAmount(uint256 tokenAmount, IERC20 purchaseToken, bool isPreorder)\n        private\n        view\n        returns (uint256 _amount)\n    {\n        uint256 purchaseTokensAmount;\n\n        if (address(purchaseToken) != address(0)) {\n            uint8 saleTokenDecimals = getDecimals(saleTokenContract);\n            uint8 purchaseTokenDecimals = getDecimals(purchaseToken);\n            uint256 price = isPreorder ? preOrderStablePrice : stablePrice;\n            purchaseTokensAmount =\n                (((tokenAmount * price) / 10**saleTokenDecimals) *\n                    10**purchaseTokenDecimals) /\n                10**6;\n        } else {\n            uint8 saleTokenDecimals = getDecimals(saleTokenContract);\n            uint256 price = isPreorder ? preOrderNativeTokenPrice : nativeTokenPrice;\n            purchaseTokensAmount =\n                (tokenAmount * price) /\n                10**saleTokenDecimals;\n        }\n\n        return purchaseTokensAmount;\n    }\n\n    function getTransferAmounts(\n        uint256 tokenAmount,\n        IERC20 purchaseToken,\n        address referrer,\n        uint256 refFee,\n        bool isPreorder\n    )\n        private\n        view\n        returns (\n            uint256 _purchaseTokensAmount,\n            uint256 _companyFeeAmount,\n            uint256 _finalCompanyFeeAmount,\n            uint256 _referralFeeAmount\n        )\n    {\n        uint256 purchaseTokensAmount;\n        uint256 companyFeeAmount;\n        uint256 finalCompanyFeeAmount;\n        uint256 referralFeeAmount;\n        uint256 finalRefFee;\n\n        if (address(purchaseToken) != address(0)) {\n            purchaseTokensAmount = getPurchaseTokensAmount(tokenAmount, purchaseToken, isPreorder);\n            companyFeeAmount = (purchaseTokensAmount * alphaFee) / 10000;\n\n            if (referrer != address(0) && referrer != _msgSender() && refFee > 0) {\n                finalRefFee = (refFee < minReferralFee || refFee > maxReferralFee)\n                    ? baseReferralFee\n                    : refFee;\n                referralFeeAmount = (companyFeeAmount * finalRefFee) / 10000;\n                finalCompanyFeeAmount = companyFeeAmount - referralFeeAmount;\n            } else {\n                finalCompanyFeeAmount = companyFeeAmount;\n            }\n        } else {\n            purchaseTokensAmount = getPurchaseTokensAmount(tokenAmount, purchaseToken, isPreorder);\n            companyFeeAmount = (purchaseTokensAmount * alphaFee) / 10000;\n\n            if (referrer != address(0) && referrer != _msgSender() && refFee > 0) {\n                finalRefFee = (refFee < minReferralFee || refFee > maxReferralFee)\n                    ? baseReferralFee\n                    : refFee;\n                referralFeeAmount = (companyFeeAmount * finalRefFee) / 10000;\n                finalCompanyFeeAmount = companyFeeAmount - referralFeeAmount;\n            } else {\n                finalCompanyFeeAmount = companyFeeAmount;\n            }\n        }\n\n        return (\n            purchaseTokensAmount,\n            companyFeeAmount,\n            finalCompanyFeeAmount,\n            referralFeeAmount\n        );\n    }\n\n    function verifySignature(\n        address userAddress,\n        uint256 deadline,\n        uint256 minAlloc,\n        uint256 maxAlloc,\n        uint256 totalBought,\n        address referrer,\n        uint256 refFee,\n        uint256 _refundFee,\n        bytes calldata signature\n    ) private view returns (bool) {\n        require(!usedSignature[signature], \"Signature already used\");\n        require(block.timestamp <= deadline, \"Signature expired\");\n\n        bytes32 hash = keccak256(\n            abi.encodePacked(\n                userAddress,\n                deadline,\n                minAlloc,\n                maxAlloc,\n                totalBought,\n                referrer,\n                refFee,\n                _refundFee\n            )\n        );\n\n        address signer = hash.toEthSignedMessageHash().recover(signature);\n        return (signer == signatureValidator);\n    }\n\n    receive() external payable {\n        freeETH += msg.value;\n        emit Received(_msgSender(), msg.value);\n    }\n\n    function ethBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n}\n"}, "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC1822Proxiable} from \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\";\nimport {ERC1967Utils} from \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\";\nimport {Initializable} from \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address private immutable __self = address(this);\n\n    /**\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\n     * If the getter returns `\"5.0.0\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\n     * during an upgrade.\n     */\n    string public constant UPGRADE_INTERFACE_VERSION = \"5.0.0\";\n\n    /**\n     * @dev The call is from an unauthorized context.\n     */\n    error UUPSUnauthorizedCallContext();\n\n    /**\n     * @dev The storage `slot` is unsupported as a UUID.\n     */\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC-1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC-1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        _checkProxy();\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        _checkNotDelegated();\n        _;\n    }\n\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data);\n    }\n\n    /**\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\n     * context is not of a proxy with an ERC-1967 compliant implementation pointing to self.\n     * See {_onlyProxy}.\n     */\n    function _checkProxy() internal view virtual {\n        if (\n            address(this) == __self || // Must be called through delegatecall\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\n        ) {\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Reverts if the execution is performed via delegatecall.\n     * See {notDelegated}.\n     */\n    function _checkNotDelegated() internal view virtual {\n        if (address(this) != __self) {\n            // Must not be called through delegatecall\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\n     *\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\n     * is expected to be the implementation slot in ERC-1967.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\n                revert UUPSUnsupportedProxiableUUID(slot);\n            }\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\n        } catch {\n            // The implementation is not UUPS\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\n        }\n    }\n}\n"}, "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.30;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\n    struct PausableStorage {\n        bool _paused;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Pausable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\n\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\n        assembly {\n            $.slot := PausableStorageLocation\n        }\n    }\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        PausableStorage storage $ = _getPausableStorage();\n        return $._paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"}, "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.30;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\n    struct ReentrancyGuardStorage {\n        uint256 _status;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ReentrancyGuard\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\n\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\n        assembly {\n            $.slot := ReentrancyGuardStorageLocation\n        }\n    }\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        $._status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if ($._status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        $._status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        $._status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        return $._status == ENTERED;\n    }\n}\n"}, "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.30;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\n    struct OwnableStorage {\n        address _owner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Ownable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\n\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\n        assembly {\n            $.slot := OwnableStorageLocation\n        }\n    }\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\n        __Ownable_init_unchained(initialOwner);\n    }\n\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        OwnableStorage storage $ = _getOwnableStorage();\n        return $._owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        OwnableStorage storage $ = _getOwnableStorage();\n        address oldOwner = $._owner;\n        $._owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"}, "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"}, "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.30;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"}, "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol": {"content": "// SPDX-License-Identifier: MIT\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n\n// File: .deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.15/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n\n// File: .deps/github/OpenZeppelin/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {UpgradeableBeacon} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n\n// File: .deps/github/OpenZeppelin/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Utils.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\n\npragma solidity ^0.8.30;\n\n\n\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n */\nlibrary ERC1967Utils {\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev The `implementation` of the proxy is invalid.\n     */\n    error ERC1967InvalidImplementation(address implementation);\n\n    /**\n     * @dev The `admin` of the proxy is invalid.\n     */\n    error ERC1967InvalidAdmin(address admin);\n\n    /**\n     * @dev The `beacon` of the proxy is invalid.\n     */\n    error ERC1967InvalidBeacon(address beacon);\n\n    /**\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\n     */\n    error ERC1967NonPayable();\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        if (newImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(newImplementation);\n        }\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(newImplementation, data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        if (newAdmin == address(0)) {\n            revert ERC1967InvalidAdmin(address(0));\n        }\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {IERC1967-AdminChanged} event.\n     */\n    function changeAdmin(address newAdmin) internal {\n        emit AdminChanged(getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is the keccak-256 hash of \"eip1967.proxy.beacon\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        if (newBeacon.code.length == 0) {\n            revert ERC1967InvalidBeacon(newBeacon);\n        }\n\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\n\n        address beaconImplementation = IBeacon(newBeacon).implementation();\n        if (beaconImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(beaconImplementation);\n        }\n    }\n\n    /**\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-BeaconUpgraded} event.\n     *\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\n     * efficiency.\n     */\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\n     * if an upgrade doesn't perform an initialization call.\n     */\n    function _checkNonPayable() private {\n        if (msg.value > 0) {\n            revert ERC1967NonPayable();\n        }\n    }\n}\n\n// File: .deps/github/OpenZeppelin/openzeppelin-contracts/contracts/proxy/Proxy.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback\n     * function and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n}\n\n// File: .deps/github/OpenZeppelin/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.30;\n\n\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `implementation`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `implementation`. This will typically be an\n     * encoded function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     *\n     * Requirements:\n     *\n     * - If `data` is empty, `msg.value` must be zero.\n     */\n    constructor(address implementation, bytes memory _data) payable {\n        ERC1967Utils.upgradeToAndCall(implementation, _data);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return ERC1967Utils.getImplementation();\n    }\n}"}, "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev ERC-1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"}}}
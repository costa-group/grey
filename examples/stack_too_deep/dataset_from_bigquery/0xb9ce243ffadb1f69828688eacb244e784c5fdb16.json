{"language": "Solidity", "settings": {"optimizer": {"enabled": true}, "viaIR": false, "outputSelection": {"*": {"*": ["evm.legacyAssembly"]}}, "remappings": []}, "sources": {"lotteryfarm.sol": {"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.30;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n\r\n/**\r\n * @title LotteryFarm\r\n * @dev A staking contract that implements a lottery system where users can win prizes.\r\n * Users stake tokens for a specified period and earn lottery tickets (1 ticket per day staked).\r\n * A drawing is performed every 7 days (configurable) where winners are randomly selected.\r\n */\r\ncontract LotteryFarm is Ownable, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    // Structs\r\n    struct UserInfo {\r\n        uint256 amount;           // How many tokens the user has staked\r\n        uint256 rewardDebt;       // Reward debt\r\n        uint256 ticketCount;      // How many lottery tickets the user has\r\n        uint256 stakeTime;        // When the user staked\r\n        uint256 unlockTime;       // When the user can withdraw\r\n        bool hasUnlockedTokens;   // Whether the user has tokens ready to unlock\r\n        bool hasClaimed;          // Whether the user has claimed their prize\r\n    }\r\n\r\n    struct Farm {\r\n        address stakeToken;       // Address of token to stake\r\n        address rewardToken;      // Address of token to reward\r\n        uint256 rewardPerSecond;  // Reward per second\r\n        uint256 startTime;        // Start time of the farm\r\n        uint256 endTime;          // End time of the farm\r\n        uint256 lastRewardTime;   // Last timestamp reward was calculated\r\n        uint256 accRewardPerShare;// Accumulated rewards per share, times 1e18\r\n        uint256 totalStaked;      // Total tokens staked\r\n        uint256 lockDuration;     // Duration in seconds tokens are locked\r\n        uint256 depositFee;       // Deposit fee (if any)\r\n        uint256 withdrawFee;      // Withdraw fee (if any)\r\n        uint256 minStakeAmount;   // Minimum amount to stake\r\n        uint256 maxStakeAmount;   // Maximum amount to stake (0 = no limit)\r\n        bool paused;              // Is the farm paused?\r\n        bool active;              // Is the farm active?\r\n        uint256 drawInterval;     // Interval between lottery draws in seconds (default 7 days)\r\n        uint256 ticketsPerStake;  // Number of tickets per day of staking per token\r\n        uint256 winnerCount;      // Number of winners per draw\r\n        uint256 lastDrawTime;     // Last time a draw was performed\r\n        uint256 prizePool;        // Current prize pool amount\r\n        address[] currentWinners; // Current winners of the draw\r\n    }\r\n\r\n    // Events\r\n    event Deposit(address indexed user, uint256 indexed farmId, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed farmId, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed farmId, uint256 amount);\r\n    event FarmCreated(uint256 indexed farmId, address stakeToken, address rewardToken);\r\n    event FarmUpdated(uint256 indexed farmId);\r\n    event LotteryDrawPerformed(uint256 indexed farmId, address[] winners, uint256 prizeAmount);\r\n    event PrizeClaimed(address indexed user, uint256 indexed farmId, uint256 amount);\r\n\r\n    // State variables\r\n    Farm[] public farms;\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n    mapping(uint256 => address[]) public participants;\r\n    mapping(uint256 => mapping(address => uint256)) public userTicketsMap;\r\n    mapping(uint256 => uint256) public totalTickets;\r\n\r\n    // Fee receiver address\r\n    address public feeReceiver;\r\n    \r\n    // Constants\r\n    uint256 public constant SECONDS_PER_DAY = 86400;\r\n    uint256 public constant DEFAULT_DRAW_INTERVAL = 7 * SECONDS_PER_DAY;\r\n    uint256 public constant PRECISION_FACTOR = 1e18;\r\n\r\n    /**\r\n     * @dev Constructor\r\n     * @param _feeReceiver Address to receive fees\r\n     */\r\n    constructor(address _feeReceiver) Ownable(msg.sender) {\r\n        require(_feeReceiver != address(0), \"Fee receiver cannot be zero address\");\r\n        feeReceiver = _feeReceiver;\r\n    }\r\n\r\n    /**\r\n     * @dev Create a new farm\r\n     * @param _stakeToken Stake token address\r\n     * @param _rewardToken Reward token address\r\n     * @param _rewardPerSecond Reward tokens per second\r\n     * @param _startTime Start time of the farm\r\n     * @param _endTime End time of the farm\r\n     * @param _lockDuration Duration in seconds tokens are locked\r\n     * @param _depositFee Deposit fee (percentage with 2 decimals, e.g. 100 = 1%)\r\n     * @param _withdrawFee Withdraw fee (percentage with 2 decimals, e.g. 100 = 1%)\r\n     * @param _minStakeAmount Minimum amount to stake\r\n     * @param _maxStakeAmount Maximum amount to stake (0 = no limit)\r\n     * @param _drawInterval Interval between draws in seconds\r\n     * @param _ticketsPerStake Number of tickets per day of staking per token\r\n     * @param _winnerCount Number of winners per draw\r\n     */\r\n    function createFarm(\r\n        address _stakeToken,\r\n        address _rewardToken,\r\n        uint256 _rewardPerSecond,\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256 _lockDuration,\r\n        uint256 _depositFee,\r\n        uint256 _withdrawFee,\r\n        uint256 _minStakeAmount,\r\n        uint256 _maxStakeAmount,\r\n        uint256 _drawInterval,\r\n        uint256 _ticketsPerStake,\r\n        uint256 _winnerCount\r\n    ) external {\r\n        require(_stakeToken != address(0), \"Stake token cannot be zero address\");\r\n        require(_rewardToken != address(0), \"Reward token cannot be zero address\");\r\n        require(_startTime >= block.timestamp, \"Start time must be in the future\");\r\n        require(_endTime > _startTime, \"End time must be after start time\");\r\n        require(_depositFee <= 1000, \"Deposit fee cannot be more than 10%\");\r\n        require(_withdrawFee <= 1000, \"Withdraw fee cannot be more than 10%\");\r\n        require(_rewardPerSecond > 0, \"Reward per second must be positive\");\r\n        require(_minStakeAmount > 0, \"Min stake amount must be positive\");\r\n        require(_drawInterval > 0, \"Draw interval must be positive\");\r\n        require(_ticketsPerStake > 0, \"Tickets per stake must be positive\");\r\n        require(_winnerCount > 0, \"Winner count must be positive\");\r\n        \r\n        // Set default draw interval if not specified\r\n        uint256 drawInterval = _drawInterval > 0 ? _drawInterval : DEFAULT_DRAW_INTERVAL;\r\n        \r\n        // Create new farm\r\n        farms.push(\r\n            Farm({\r\n                stakeToken: _stakeToken,\r\n                rewardToken: _rewardToken,\r\n                rewardPerSecond: _rewardPerSecond,\r\n                startTime: _startTime,\r\n                endTime: _endTime,\r\n                lastRewardTime: _startTime,\r\n                accRewardPerShare: 0,\r\n                totalStaked: 0,\r\n                lockDuration: _lockDuration,\r\n                depositFee: _depositFee,\r\n                withdrawFee: _withdrawFee,\r\n                minStakeAmount: _minStakeAmount,\r\n                maxStakeAmount: _maxStakeAmount,\r\n                paused: false,\r\n                active: true,\r\n                drawInterval: drawInterval,\r\n                ticketsPerStake: _ticketsPerStake,\r\n                winnerCount: _winnerCount,\r\n                lastDrawTime: _startTime,\r\n                prizePool: 0,\r\n                currentWinners: new address[](0)\r\n            })\r\n        );\r\n        \r\n        uint256 farmId = farms.length - 1;\r\n        emit FarmCreated(farmId, _stakeToken, _rewardToken);\r\n    }\r\n\r\n    /**\r\n     * @dev Stake tokens in a farm\r\n     * @param _farmId Farm ID\r\n     * @param _amount Amount to stake\r\n     */\r\n    function stake(uint256 _farmId, uint256 _amount) external nonReentrant {\r\n        require(_farmId < farms.length, \"Farm does not exist\");\r\n        Farm storage farm = farms[_farmId];\r\n        \r\n        require(farm.active, \"Farm is not active\");\r\n        require(!farm.paused, \"Farm is paused\");\r\n        require(block.timestamp >= farm.startTime, \"Farm has not started yet\");\r\n        require(block.timestamp < farm.endTime, \"Farm has ended\");\r\n        require(_amount >= farm.minStakeAmount, \"Amount less than minimum stake\");\r\n        \r\n        if (farm.maxStakeAmount > 0) {\r\n            require(_amount <= farm.maxStakeAmount, \"Amount more than maximum stake\");\r\n        }\r\n        \r\n        // Update the farm\r\n        updateFarm(_farmId);\r\n        \r\n        // Get user info\r\n        UserInfo storage user = userInfo[_farmId][msg.sender];\r\n        \r\n        // Transfer tokens\r\n        IERC20(farm.stakeToken).safeTransferFrom(\r\n            address(msg.sender),\r\n            address(this),\r\n            _amount\r\n        );\r\n        \r\n        // Calculate deposit fee\r\n        uint256 depositFee = _amount.mul(farm.depositFee).div(10000);\r\n        uint256 amountAfterFee = _amount.sub(depositFee);\r\n        \r\n        // Transfer fee to fee receiver if applicable\r\n        if (depositFee > 0) {\r\n            IERC20(farm.stakeToken).safeTransfer(feeReceiver, depositFee);\r\n        }\r\n        \r\n        // Update user info\r\n        if (user.amount == 0) {\r\n            // First time staking\r\n            user.stakeTime = block.timestamp;\r\n            user.unlockTime = block.timestamp.add(farm.lockDuration);\r\n            \r\n            // Add user to participants list\r\n            participants[_farmId].push(msg.sender);\r\n        }\r\n        \r\n        // Calculate new ticket count for user\r\n        uint256 newTickets = calculateTickets(farm.ticketsPerStake, amountAfterFee, farm.lockDuration);\r\n        user.ticketCount = user.ticketCount.add(newTickets);\r\n        userTicketsMap[_farmId][msg.sender] = user.ticketCount;\r\n        totalTickets[_farmId] = totalTickets[_farmId].add(newTickets);\r\n        \r\n        // Update user amount and reward debt\r\n        user.amount = user.amount.add(amountAfterFee);\r\n        user.rewardDebt = user.amount.mul(farm.accRewardPerShare).div(PRECISION_FACTOR);\r\n        \r\n        // Update farm total staked\r\n        farm.totalStaked = farm.totalStaked.add(amountAfterFee);\r\n        \r\n        // Add to prize pool (50% of staking amount goes to prize pool)\r\n        uint256 prizeContribution = amountAfterFee.mul(50).div(100);\r\n        farm.prizePool = farm.prizePool.add(prizeContribution);\r\n        \r\n        emit Deposit(msg.sender, _farmId, amountAfterFee);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate tickets based on amount and duration\r\n     * @param _ticketsPerStake Tickets per token per day\r\n     * @param _amount Amount staked\r\n     * @param _lockDuration Lock duration in seconds\r\n     * @return Number of tickets\r\n     */\r\n    function calculateTickets(\r\n        uint256 _ticketsPerStake,\r\n        uint256 _amount,\r\n        uint256 _lockDuration\r\n    ) internal pure returns (uint256) {\r\n        uint256 daysLocked = _lockDuration.div(SECONDS_PER_DAY);\r\n        if (daysLocked == 0) daysLocked = 1; // Minimum 1 day even for no lock\r\n        \r\n        // Calculate tickets: amount * ticketsPerStake * daysLocked / 1e18\r\n        return _amount.mul(_ticketsPerStake).mul(daysLocked).div(PRECISION_FACTOR);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw tokens from a farm\r\n     * @param _farmId Farm ID\r\n     * @param _amount Amount to withdraw\r\n     */\r\n    function withdraw(uint256 _farmId, uint256 _amount) external nonReentrant {\r\n        require(_farmId < farms.length, \"Farm does not exist\");\r\n        Farm storage farm = farms[_farmId];\r\n        \r\n        UserInfo storage user = userInfo[_farmId][msg.sender];\r\n        require(user.amount >= _amount, \"Withdraw amount exceeds balance\");\r\n        require(block.timestamp >= user.unlockTime, \"Tokens are still locked\");\r\n        \r\n        // Update the farm\r\n        updateFarm(_farmId);\r\n        \r\n        // Calculate pending reward\r\n        uint256 userPendingReward = user.amount.mul(farm.accRewardPerShare).div(PRECISION_FACTOR).sub(user.rewardDebt);\r\n        \r\n        // Update user info\r\n        user.amount = user.amount.sub(_amount);\r\n        user.rewardDebt = user.amount.mul(farm.accRewardPerShare).div(PRECISION_FACTOR);\r\n        \r\n        // Calculate withdraw fee\r\n        uint256 withdrawFee = _amount.mul(farm.withdrawFee).div(10000);\r\n        uint256 amountAfterFee = _amount.sub(withdrawFee);\r\n        \r\n        // Transfer fee to fee receiver if applicable\r\n        if (withdrawFee > 0) {\r\n            IERC20(farm.stakeToken).safeTransfer(feeReceiver, withdrawFee);\r\n        }\r\n        \r\n        // Transfer tokens back to user\r\n        IERC20(farm.stakeToken).safeTransfer(address(msg.sender), amountAfterFee);\r\n        \r\n        // Transfer pending reward to user\r\n        if (userPendingReward > 0) {\r\n            IERC20(farm.rewardToken).safeTransfer(address(msg.sender), userPendingReward);\r\n        }\r\n        \r\n        // Update farm total staked\r\n        farm.totalStaked = farm.totalStaked.sub(_amount);\r\n        \r\n        emit Withdraw(msg.sender, _farmId, amountAfterFee);\r\n    }\r\n\r\n    /**\r\n     * @dev Perform lottery draw for a farm\r\n     * @param _farmId Farm ID\r\n     */\r\n    function performDraw(uint256 _farmId) external nonReentrant {\r\n        require(_farmId < farms.length, \"Farm does not exist\");\r\n        Farm storage farm = farms[_farmId];\r\n        \r\n        require(farm.active, \"Farm is not active\");\r\n        require(!farm.paused, \"Farm is paused\");\r\n        require(\r\n            block.timestamp >= farm.lastDrawTime.add(farm.drawInterval),\r\n            \"Not time for draw yet\"\r\n        );\r\n        require(totalTickets[_farmId] > 0, \"No tickets in the pool\");\r\n        \r\n        // Get the prize amount (half the prize pool)\r\n        uint256 prizeAmount = farm.prizePool.div(2);\r\n        \r\n        // Select winners\r\n        address[] memory winners = selectWinners(_farmId, farm.winnerCount);\r\n        farm.currentWinners = winners;\r\n        \r\n        // Update farm state\r\n        farm.lastDrawTime = block.timestamp;\r\n        farm.prizePool = farm.prizePool.sub(prizeAmount);\r\n        \r\n        emit LotteryDrawPerformed(_farmId, winners, prizeAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Select winners randomly for a draw\r\n     * @param _farmId Farm ID\r\n     * @param _winnerCount Number of winners to select\r\n     * @return Array of winner addresses\r\n     */\r\n    function selectWinners(uint256 _farmId, uint256 _winnerCount) internal view returns (address[] memory) {\r\n        // Make sure we don't try to select more winners than participants\r\n        uint256 participantCount = participants[_farmId].length;\r\n        uint256 actualWinnerCount = _winnerCount > participantCount ? participantCount : _winnerCount;\r\n        \r\n        address[] memory winners = new address[](actualWinnerCount);\r\n        uint256[] memory selectedIndices = new uint256[](participantCount);\r\n        \r\n        // Initialize array with sequential indices\r\n        for (uint256 i = 0; i < participantCount; i++) {\r\n            selectedIndices[i] = i;\r\n        }\r\n        \r\n        // Select winners using Fisher-Yates shuffle algorithm\r\n        uint256 ticketTotal = totalTickets[_farmId];\r\n        \r\n        for (uint256 i = 0; i < actualWinnerCount; i++) {\r\n            // Generate random index\r\n            uint256 randomIndex = uint256(keccak256(abi.encodePacked(\r\n                block.timestamp,\r\n                block.prevrandao,\r\n                msg.sender,\r\n                i\r\n            ))) % (participantCount - i);\r\n            \r\n            // Get the participant at the random index\r\n            address selected = participants[_farmId][selectedIndices[randomIndex]];\r\n            \r\n            // Adjust selection probability based on ticket count\r\n            uint256 userTickets = userTicketsMap[_farmId][selected];\r\n            uint256 probability = userTickets.mul(PRECISION_FACTOR).div(ticketTotal);\r\n            \r\n            // Roll for selection\r\n            uint256 roll = uint256(keccak256(abi.encodePacked(\r\n                block.timestamp,\r\n                block.prevrandao,\r\n                selected,\r\n                i\r\n            ))) % PRECISION_FACTOR;\r\n            \r\n            if (roll < probability) {\r\n                // Selected!\r\n                winners[i] = selected;\r\n            } else {\r\n                // Try next highest ticket holder\r\n                uint256 maxTickets = 0;\r\n                address maxTicketHolder = address(0);\r\n                \r\n                for (uint256 j = 0; j < participantCount; j++) {\r\n                    address participant = participants[_farmId][j];\r\n                    uint256 participantTickets = userTicketsMap[_farmId][participant];\r\n                    \r\n                    // Skip already selected winners\r\n                    bool alreadySelected = false;\r\n                    for (uint256 k = 0; k < i; k++) {\r\n                        if (winners[k] == participant) {\r\n                            alreadySelected = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    \r\n                    if (!alreadySelected && participantTickets > maxTickets) {\r\n                        maxTickets = participantTickets;\r\n                        maxTicketHolder = participant;\r\n                    }\r\n                }\r\n                \r\n                winners[i] = maxTicketHolder;\r\n            }\r\n            \r\n            // Swap the used index to the end to avoid reselection\r\n            selectedIndices[randomIndex] = selectedIndices[participantCount - i - 1];\r\n        }\r\n        \r\n        return winners;\r\n    }\r\n\r\n    /**\r\n     * @dev Claim lottery prize\r\n     * @param _farmId Farm ID\r\n     */\r\n    function claimPrize(uint256 _farmId) external nonReentrant {\r\n        require(_farmId < farms.length, \"Farm does not exist\");\r\n        Farm storage farm = farms[_farmId];\r\n        \r\n        // Check if caller is a winner\r\n        bool isWinner = false;\r\n        for (uint256 i = 0; i < farm.currentWinners.length; i++) {\r\n            if (farm.currentWinners[i] == msg.sender) {\r\n                isWinner = true;\r\n                break;\r\n            }\r\n        }\r\n        \r\n        require(isWinner, \"Not a winner\");\r\n        \r\n        UserInfo storage user = userInfo[_farmId][msg.sender];\r\n        require(!user.hasClaimed, \"Already claimed prize\");\r\n        \r\n        // Calculate prize amount (split evenly among winners)\r\n        uint256 prizeAmount = farm.prizePool.div(farm.currentWinners.length);\r\n        \r\n        // Mark as claimed\r\n        user.hasClaimed = true;\r\n        \r\n        // Transfer prize\r\n        IERC20(farm.rewardToken).safeTransfer(msg.sender, prizeAmount);\r\n        \r\n        emit PrizeClaimed(msg.sender, _farmId, prizeAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Emergency withdraw without caring about rewards\r\n     * @param _farmId Farm ID\r\n     */\r\n    function emergencyWithdraw(uint256 _farmId) external nonReentrant {\r\n        require(_farmId < farms.length, \"Farm does not exist\");\r\n        Farm storage farm = farms[_farmId];\r\n        \r\n        UserInfo storage user = userInfo[_farmId][msg.sender];\r\n        uint256 amount = user.amount;\r\n        \r\n        // Reset user info\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n        user.ticketCount = 0;\r\n        userTicketsMap[_farmId][msg.sender] = 0;\r\n        \r\n        // Update total tickets\r\n        totalTickets[_farmId] = totalTickets[_farmId] > user.ticketCount ? totalTickets[_farmId].sub(user.ticketCount) : 0;\r\n        \r\n        // Update farm total staked\r\n        farm.totalStaked = farm.totalStaked > amount ? farm.totalStaked.sub(amount) : 0;\r\n        \r\n        // Transfer tokens back to user with emergency fee (higher than normal)\r\n        uint256 emergencyFee = amount.mul(farm.withdrawFee.mul(2)).div(10000);\r\n        uint256 amountAfterFee = amount.sub(emergencyFee);\r\n        \r\n        // Transfer fee to fee receiver if applicable\r\n        if (emergencyFee > 0) {\r\n            IERC20(farm.stakeToken).safeTransfer(feeReceiver, emergencyFee);\r\n        }\r\n        \r\n        // Transfer tokens back to user\r\n        IERC20(farm.stakeToken).safeTransfer(address(msg.sender), amountAfterFee);\r\n        \r\n        emit EmergencyWithdraw(msg.sender, _farmId, amountAfterFee);\r\n    }\r\n\r\n    /**\r\n     * @dev Update farm rewards\r\n     * @param _farmId Farm ID\r\n     */\r\n    function updateFarm(uint256 _farmId) public {\r\n        Farm storage farm = farms[_farmId];\r\n        \r\n        if (block.timestamp <= farm.lastRewardTime) {\r\n            return;\r\n        }\r\n        \r\n        if (farm.totalStaked == 0) {\r\n            farm.lastRewardTime = block.timestamp;\r\n            return;\r\n        }\r\n        \r\n        uint256 endTime = farm.endTime < block.timestamp ? farm.endTime : block.timestamp;\r\n        uint256 timeElapsed = endTime.sub(farm.lastRewardTime);\r\n        \r\n        if (timeElapsed == 0) {\r\n            return;\r\n        }\r\n        \r\n        uint256 reward = timeElapsed.mul(farm.rewardPerSecond);\r\n        farm.accRewardPerShare = farm.accRewardPerShare.add(\r\n            reward.mul(PRECISION_FACTOR).div(farm.totalStaked)\r\n        );\r\n        farm.lastRewardTime = block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * @dev Update farm parameters\r\n     * @param _farmId Farm ID\r\n     * @param _rewardPerSecond New reward per second\r\n     * @param _lockDuration New lock duration\r\n     * @param _depositFee New deposit fee\r\n     * @param _withdrawFee New withdraw fee\r\n     * @param _minStakeAmount New minimum stake amount\r\n     * @param _maxStakeAmount New maximum stake amount\r\n     * @param _drawInterval New draw interval\r\n     * @param _ticketsPerStake New tickets per stake\r\n     * @param _winnerCount New winner count\r\n     */\r\n    function updateFarmParams(\r\n        uint256 _farmId,\r\n        uint256 _rewardPerSecond,\r\n        uint256 _lockDuration,\r\n        uint256 _depositFee,\r\n        uint256 _withdrawFee,\r\n        uint256 _minStakeAmount,\r\n        uint256 _maxStakeAmount,\r\n        uint256 _drawInterval,\r\n        uint256 _ticketsPerStake,\r\n        uint256 _winnerCount\r\n    ) external onlyOwner {\r\n        require(_farmId < farms.length, \"Farm does not exist\");\r\n        Farm storage farm = farms[_farmId];\r\n        \r\n        require(_depositFee <= 1000, \"Deposit fee cannot be more than 10%\");\r\n        require(_withdrawFee <= 1000, \"Withdraw fee cannot be more than 10%\");\r\n        \r\n        // Update the farm\r\n        updateFarm(_farmId);\r\n        \r\n        // Update farm parameters\r\n        farm.rewardPerSecond = _rewardPerSecond;\r\n        farm.lockDuration = _lockDuration;\r\n        farm.depositFee = _depositFee;\r\n        farm.withdrawFee = _withdrawFee;\r\n        farm.minStakeAmount = _minStakeAmount;\r\n        farm.maxStakeAmount = _maxStakeAmount;\r\n        farm.drawInterval = _drawInterval;\r\n        farm.ticketsPerStake = _ticketsPerStake;\r\n        farm.winnerCount = _winnerCount;\r\n        \r\n        emit FarmUpdated(_farmId);\r\n    }\r\n\r\n    /**\r\n     * @dev Pause farm\r\n     * @param _farmId Farm ID\r\n     * @param _paused Pause state\r\n     */\r\n    function pauseFarm(uint256 _farmId, bool _paused) external onlyOwner {\r\n        require(_farmId < farms.length, \"Farm does not exist\");\r\n        farms[_farmId].paused = _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Set farm active status\r\n     * @param _farmId Farm ID\r\n     * @param _active Active state\r\n     */\r\n    function setFarmActive(uint256 _farmId, bool _active) external onlyOwner {\r\n        require(_farmId < farms.length, \"Farm does not exist\");\r\n        farms[_farmId].active = _active;\r\n    }\r\n\r\n    /**\r\n     * @dev Set fee receiver\r\n     * @param _feeReceiver Fee receiver address\r\n     */\r\n    function setFeeReceiver(address _feeReceiver) external onlyOwner {\r\n        require(_feeReceiver != address(0), \"Fee receiver cannot be zero address\");\r\n        feeReceiver = _feeReceiver;\r\n    }\r\n\r\n    /**\r\n     * @dev Get farm count\r\n     * @return Farm count\r\n     */\r\n    function getFarmCount() external view returns (uint256) {\r\n        return farms.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Get active farms\r\n     * @return Array of active farm IDs\r\n     */\r\n    function getActiveFarms() external view returns (uint256[] memory) {\r\n        uint256 count = 0;\r\n        \r\n        // Count active farms\r\n        for (uint256 i = 0; i < farms.length; i++) {\r\n            if (farms[i].active) {\r\n                count++;\r\n            }\r\n        }\r\n        \r\n        // Create array of active farm IDs\r\n        uint256[] memory activeFarms = new uint256[](count);\r\n        uint256 index = 0;\r\n        \r\n        for (uint256 i = 0; i < farms.length; i++) {\r\n            if (farms[i].active) {\r\n                activeFarms[index] = i;\r\n                index++;\r\n            }\r\n        }\r\n        \r\n        return activeFarms;\r\n    }\r\n\r\n    /**\r\n     * @dev Get pending reward for a user\r\n     * @param _farmId Farm ID\r\n     * @param _user User address\r\n     * @return Pending reward\r\n     */\r\n    function pendingReward(uint256 _farmId, address _user) external view returns (uint256) {\r\n        require(_farmId < farms.length, \"Farm does not exist\");\r\n        Farm storage farm = farms[_farmId];\r\n        UserInfo storage user = userInfo[_farmId][_user];\r\n        \r\n        uint256 accRewardPerShare = farm.accRewardPerShare;\r\n        \r\n        if (block.timestamp > farm.lastRewardTime && farm.totalStaked > 0) {\r\n            uint256 endTime = farm.endTime < block.timestamp ? farm.endTime : block.timestamp;\r\n            uint256 timeElapsed = endTime.sub(farm.lastRewardTime);\r\n            uint256 reward = timeElapsed.mul(farm.rewardPerSecond);\r\n            accRewardPerShare = accRewardPerShare.add(\r\n                reward.mul(PRECISION_FACTOR).div(farm.totalStaked)\r\n            );\r\n        }\r\n        \r\n        return user.amount.mul(accRewardPerShare).div(PRECISION_FACTOR).sub(user.rewardDebt);\r\n    }\r\n\r\n    /**\r\n     * @dev Get prize pool for a farm\r\n     * @param _farmId Farm ID\r\n     * @return Prize pool amount\r\n     */\r\n    function getPrizePool(uint256 _farmId) external view returns (uint256) {\r\n        require(_farmId < farms.length, \"Farm does not exist\");\r\n        return farms[_farmId].prizePool;\r\n    }\r\n\r\n    /**\r\n     * @dev Get last draw time for a farm\r\n     * @param _farmId Farm ID\r\n     * @return Last draw time\r\n     */\r\n    function getLastDrawTime(uint256 _farmId) external view returns (uint256) {\r\n        require(_farmId < farms.length, \"Farm does not exist\");\r\n        return farms[_farmId].lastDrawTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Get total tickets for a farm\r\n     * @param _farmId Farm ID\r\n     * @return Total tickets\r\n     */\r\n    function getTotalTickets(uint256 _farmId) external view returns (uint256) {\r\n        require(_farmId < farms.length, \"Farm does not exist\");\r\n        return totalTickets[_farmId];\r\n    }\r\n\r\n    /**\r\n     * @dev Get user tickets for a farm\r\n     * @param _farmId Farm ID\r\n     * @param _user User address\r\n     * @return User tickets\r\n     */\r\n    function getUserTickets(uint256 _farmId, address _user) external view returns (uint256) {\r\n        require(_farmId < farms.length, \"Farm does not exist\");\r\n        return userTicketsMap[_farmId][_user];\r\n    }\r\n\r\n    /**\r\n     * @dev Get current winners for a farm\r\n     * @param _farmId Farm ID\r\n     * @return Array of winner addresses\r\n     */\r\n    function getCurrentWinners(uint256 _farmId) external view returns (address[] memory) {\r\n        require(_farmId < farms.length, \"Farm does not exist\");\r\n        return farms[_farmId].currentWinners;\r\n    }\r\n\r\n    /**\r\n     * @dev Get farm by ID\r\n     * @param _farmId Farm ID\r\n     * @return Farm details\r\n     */\r\n    function getFarm(uint256 _farmId) external view returns (Farm memory) {\r\n        require(_farmId < farms.length, \"Farm does not exist\");\r\n        return farms[_farmId];\r\n    }\r\n\r\n    /**\r\n     * @dev Get user info for a farm\r\n     * @param _farmId Farm ID\r\n     * @param _user User address\r\n     * @return User info\r\n     */\r\n    function getUserInfo(uint256 _farmId, address _user) external view returns (UserInfo memory) {\r\n        require(_farmId < farms.length, \"Farm does not exist\");\r\n        return userInfo[_farmId][_user];\r\n    }\r\n\r\n    /**\r\n     * @dev Get participants for a farm\r\n     * @param _farmId Farm ID\r\n     * @return Array of participant addresses\r\n     */\r\n    function getParticipants(uint256 _farmId) external view returns (address[] memory) {\r\n        require(_farmId < farms.length, \"Farm does not exist\");\r\n        return participants[_farmId];\r\n    }\r\n\r\n    /**\r\n     * @dev Recover wrong tokens sent to the contract\r\n     * @param _token Token address\r\n     * @param _amount Amount to recover\r\n     */\r\n    function recoverWrongTokens(address _token, uint256 _amount) external onlyOwner {\r\n        IERC20(_token).safeTransfer(address(msg.sender), _amount);\r\n    }\r\n} "}, "@openzeppelin/contracts/utils/math/SafeMath.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.30;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"}, "@openzeppelin/contracts/access/Ownable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.30;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"}, "@openzeppelin/contracts/security/ReentrancyGuard.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"}, "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"}, "@openzeppelin/contracts/token/ERC20/IERC20.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"}, "@openzeppelin/contracts/interfaces/IERC1363.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"}, "@openzeppelin/contracts/utils/Context.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"}, "@openzeppelin/contracts/interfaces/IERC165.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"}, "@openzeppelin/contracts/interfaces/IERC20.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"}, "@openzeppelin/contracts/utils/introspection/IERC165.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"}}}
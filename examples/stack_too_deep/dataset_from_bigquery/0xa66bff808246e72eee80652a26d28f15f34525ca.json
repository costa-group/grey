{"language": "Solidity", "sources": {"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.30;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"}, "@openzeppelin/contracts/interfaces/IERC2981.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(\n        uint256 tokenId,\n        uint256 salePrice\n    ) external view returns (address receiver, uint256 royaltyAmount);\n}\n"}, "@openzeppelin/contracts/token/common/ERC2981.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC2981} from \"../../interfaces/IERC2981.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n */\nabstract contract ERC2981 is IERC2981, ERC165 {\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 tokenId => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev The default royalty set is invalid (eg. (numerator / denominator) >= 1).\n     */\n    error ERC2981InvalidDefaultRoyalty(uint256 numerator, uint256 denominator);\n\n    /**\n     * @dev The default royalty receiver is invalid.\n     */\n    error ERC2981InvalidDefaultRoyaltyReceiver(address receiver);\n\n    /**\n     * @dev The royalty set for an specific `tokenId` is invalid (eg. (numerator / denominator) >= 1).\n     */\n    error ERC2981InvalidTokenRoyalty(uint256 tokenId, uint256 numerator, uint256 denominator);\n\n    /**\n     * @dev The royalty receiver for `tokenId` is invalid.\n     */\n    error ERC2981InvalidTokenRoyaltyReceiver(uint256 tokenId, address receiver);\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        uint256 denominator = _feeDenominator();\n        if (feeNumerator > denominator) {\n            // Royalty fee will exceed the sale price\n            revert ERC2981InvalidDefaultRoyalty(feeNumerator, denominator);\n        }\n        if (receiver == address(0)) {\n            revert ERC2981InvalidDefaultRoyaltyReceiver(address(0));\n        }\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\n        uint256 denominator = _feeDenominator();\n        if (feeNumerator > denominator) {\n            // Royalty fee will exceed the sale price\n            revert ERC2981InvalidTokenRoyalty(tokenId, feeNumerator, denominator);\n        }\n        if (receiver == address(0)) {\n            revert ERC2981InvalidTokenRoyaltyReceiver(tokenId, address(0));\n        }\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n}\n"}, "@openzeppelin/contracts/token/ERC721/ERC721.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC721} from \"./IERC721.sol\";\nimport {IERC721Receiver} from \"./IERC721Receiver.sol\";\nimport {IERC721Metadata} from \"./extensions/IERC721Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {Strings} from \"../../utils/Strings.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {IERC721Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    mapping(uint256 tokenId => address) private _owners;\n\n    mapping(address owner => uint256) private _balances;\n\n    mapping(uint256 tokenId => address) private _tokenApprovals;\n\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        if (owner == address(0)) {\n            revert ERC721InvalidOwner(address(0));\n        }\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        return _requireOwned(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual {\n        _approve(to, tokenId, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\n        _requireOwned(tokenId);\n\n        return _getApproved(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        address previousOwner = _update(to, tokenId, _msgSender());\n        if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\n        transferFrom(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     *\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\n     */\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n     * particular (ignoring whether it is owned by `owner`).\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n     * the `spender` for the specific `tokenId`.\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n     *\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n     * remain consistent with one another.\n     */\n    function _increaseBalance(address account, uint128 value) internal virtual {\n        unchecked {\n            _balances[account] += value;\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert ERC721InvalidSender(address(0));\n        }\n    }\n\n    /**\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        _checkOnERC721Received(address(0), to, tokenId, data);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        } else if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `tokenId` token must exist and be owned by `from`.\n     * - `to` cannot be the zero address.\n     * - `from` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\n        _safeTransfer(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\n     *\n     * Emits an {Approval} event.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address to, uint256 tokenId, address auth) internal {\n        _approve(to, tokenId, auth, true);\n    }\n\n    /**\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n     * emitted in the context of transfers.\n     */\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Requirements:\n     * - operator can't be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC721InvalidOperator(operator);\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n     * Returns the owner.\n     *\n     * Overrides to ownership logic should be done to {_ownerOf}.\n     */\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\n        if (to.code.length > 0) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                if (retval != IERC721Receiver.onERC721Received.selector) {\n                    revert ERC721InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert ERC721InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n}\n"}, "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.30;\n\nimport {ERC721} from \"../ERC721.sol\";\nimport {IERC721Enumerable} from \"./IERC721Enumerable.sol\";\nimport {IERC165} from \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds enumerability\n * of all the token ids in the contract as well as all token ids owned by each account.\n *\n * CAUTION: `ERC721` extensions that implement custom `balanceOf` logic, such as `ERC721Consecutive`,\n * interfere with enumerability and should not be used together with `ERC721Enumerable`.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    mapping(address owner => mapping(uint256 index => uint256)) private _ownedTokens;\n    mapping(uint256 tokenId => uint256) private _ownedTokensIndex;\n\n    uint256[] private _allTokens;\n    mapping(uint256 tokenId => uint256) private _allTokensIndex;\n\n    /**\n     * @dev An `owner`'s token query was out of bounds for `index`.\n     *\n     * NOTE: The owner being `address(0)` indicates a global out of bounds index.\n     */\n    error ERC721OutOfBoundsIndex(address owner, uint256 index);\n\n    /**\n     * @dev Batch mint is not allowed.\n     */\n    error ERC721EnumerableForbiddenBatchMint();\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256) {\n        if (index >= balanceOf(owner)) {\n            revert ERC721OutOfBoundsIndex(owner, index);\n        }\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual returns (uint256) {\n        if (index >= totalSupply()) {\n            revert ERC721OutOfBoundsIndex(address(0), index);\n        }\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev See {ERC721-_update}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\n        address previousOwner = super._update(to, tokenId, auth);\n\n        if (previousOwner == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (previousOwner != to) {\n            _removeTokenFromOwnerEnumeration(previousOwner, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (previousOwner != to) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n\n        return previousOwner;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = balanceOf(to) - 1;\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = balanceOf(from);\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n\n    /**\n     * See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch\n     */\n    function _increaseBalance(address account, uint128 amount) internal virtual override {\n        if (amount > 0) {\n            revert ERC721EnumerableForbiddenBatchMint();\n        }\n        super._increaseBalance(account, amount);\n    }\n}\n"}, "@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Royalty.sol)\n\npragma solidity ^0.8.30;\n\nimport {ERC721} from \"../ERC721.sol\";\nimport {ERC2981} from \"../../common/ERC2981.sol\";\n\n/**\n * @dev Extension of ERC721 with the ERC2981 NFT Royalty Standard, a standardized way to retrieve royalty payment\n * information.\n *\n * Royalty information can be specified globally for all token ids via {ERC2981-_setDefaultRoyalty}, and/or individually\n * for specific token ids via {ERC2981-_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n */\nabstract contract ERC721Royalty is ERC2981, ERC721 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC2981) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n}\n"}, "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"}, "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"}, "@openzeppelin/contracts/token/ERC721/IERC721.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"}, "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"}, "@openzeppelin/contracts/utils/Base64.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.2) (utils/Base64.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Provides a set of functions to operate with Base64 strings.\n */\nlibrary Base64 {\n    /**\n     * @dev Base64 Encoding/Decoding Table\n     */\n    string internal constant _TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /**\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\n     */\n    function encode(bytes memory data) internal pure returns (string memory) {\n        /**\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\n         */\n        if (data.length == 0) return \"\";\n\n        // Loads the table into memory\n        string memory table = _TABLE;\n\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\n        // and split into 4 numbers of 6 bits.\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\n        // - `data.length + 2`  -> Round up\n        // - `/ 3`              -> Number of 3-bytes chunks\n        // - `4 *`              -> 4 characters for each chunk\n        string memory result = new string(4 * ((data.length + 2) / 3));\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Prepare the lookup table (skip the first \"length\" byte)\n            let tablePtr := add(table, 1)\n\n            // Prepare result pointer, jump over length\n            let resultPtr := add(result, 0x20)\n            let dataPtr := data\n            let endPtr := add(data, mload(data))\n\n            // In some cases, the last iteration will read bytes after the end of the data. We cache the value, and\n            // set it to zero to make sure no dirty bytes are read in that section.\n            let afterPtr := add(endPtr, 0x20)\n            let afterCache := mload(afterPtr)\n            mstore(afterPtr, 0x00)\n\n            // Run over the input, 3 bytes at a time\n            for {\n\n            } lt(dataPtr, endPtr) {\n\n            } {\n                // Advance 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // To write each character, shift the 3 byte (24 bits) chunk\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\n                // and apply logical AND with 0x3F to bitmask the least significant 6 bits.\n                // Use this as an index into the lookup table, mload an entire word\n                // so the desired character is in the least significant byte, and\n                // mstore8 this least significant byte into the result and continue.\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n            }\n\n            // Reset the value that was cached\n            mstore(afterPtr, afterCache)\n\n            // When data `bytes` is not exactly 3 bytes long\n            // it is padded with `=` characters at the end\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n                mstore8(sub(resultPtr, 2), 0x3d)\n            }\n            case 2 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n            }\n        }\n\n        return result;\n    }\n}\n"}, "@openzeppelin/contracts/utils/Context.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"}, "@openzeppelin/contracts/utils/introspection/ERC165.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"}, "@openzeppelin/contracts/utils/introspection/IERC165.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"}, "@openzeppelin/contracts/utils/math/Math.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"}, "@openzeppelin/contracts/utils/math/SignedMath.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"}, "@openzeppelin/contracts/utils/Strings.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.30;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"}, "contracts/Genuine.sol": {"content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.30;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\";\nimport \"@openzeppelin/contracts/utils/Base64.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\ncontract Genuine is ERC721, ERC721Enumerable, ERC721Royalty {\n    address internal owner;\n    uint256 internal nextTokenId;\n\n    uint constant MINT_TO_SENDER = 0x20;\n    uint constant MINT_PRICE = 6400000 gwei;\n    uint constant MAX_TOKEN_ID = 0xFFF;\n\n    uint8 constant STONE = 0;\n    bytes constant STONE_PROBS = hex\"0308101a263547596b7f93a7bbcfe7ff\";\n\n    uint8 constant CUT = 1;\n\n    uint8 constant CLARITY = 2;\n    bytes constant CLARITY_PROBS = hex\"4c99d7f2ff\";\n\n    uint8 constant ALLOY = 3;\n    bytes constant ALLOY_PROBS = hex\"7fb2d7f2ff\";\n\n    uint8 constant SHIMMER = 4;\n    bytes constant SHIMMER_PROBS = hex\"7fd7ff\";\n\n    uint8 constant MAGIC = 5;\n    bytes constant MAGIC_PROBS = hex\"54a8ff\";\n\n    uint8 constant RED = 0;\n    uint8 constant GREEN = 1;\n    uint8 constant BLUE = 2;\n    uint8 constant METALLIC = 3;\n    uint8 constant ROUGHNESS = 4;\n    uint8 constant TRANSMISSION = 5;\n\n    uint8 constant SHAPE_CUT = 0;\n    uint8 constant REFLECT = 1;\n    uint8 constant SECTION_POSITIONS = 2; // Number of positions/vertices in one section (pre-reflections)\n    uint8 constant SECTION_INDICES = 3; // Number of indices in one section (pre-reflections)\n    uint8 constant POSITIONS_DIV_4 = 4; // Number of positions/vertices in the final shape (post-reflections)\n    uint8 constant INDICES_DIV_3 = 5; // Number of indices in the final shape (post-reflections)\n    uint8 constant POSITION_MIN_X = 6;\n    uint8 constant POSITION_MIN_Y = 7;\n    uint8 constant POSITION_MIN_Z = 8;\n    uint8 constant POSITION_MAX_X = 9;\n    uint8 constant POSITION_MAX_Y = 10;\n    uint8 constant POSITION_MAX_Z = 11;\n    uint8 constant HEADER_COUNT = 12;\n\n    bytes constant ALLOWED_VIEWS = hex\"1f1f050b0b0b1f\";\n\n    // Header, then section positions, then section indices\n    bytes constant CLASSIC =\n        hex\"00051118446082be827e427e00be000042005442003c423c00425466362a2a36667e260072263058265830267200267e7e220072223058225830227200227e000c0d000d0e000e0f000f10010302010403020507020305030905030609030406040b06050807050908060a09060b0a070d0c07080d080e0d08090e090f0e090a0f0a100f0a0b10\";\n    bytes constant OVOID =\n        hex\"01051118446082bfae7e415200bf000041005e410046411e004132643b1232373c7e210078211a68213836214c0021527e1d00781d1a681d38361d4c001d52000c0d000d0e000e0f000f10010302010403020507020305030905030609030406040b06050807050908060a09060b0a070d0c07080d080e0d08090e090f0e090a0f0a100f0a0b10\";\n    bytes constant LEGEND =\n        hex\"0207131a98d0ae82d9527e27504a00027e00027e02504a02025b25383725005b250059273635273600270000275248005248023a35253a0025520002520000007e00007e02000102000203020403030405040607040705050708070908070a0900030b030c0b03050c050d0c0c0d0e0c0e0f0b0c0f0b0f1005080d08090d090e0d0b0c0f0b0f10020604021206011112011202\";\n    bytes constant PEAR =\n        hex\"03012037406ea485ba5c7b4600851e007b1e265f1e104b3e003f46443d1e1c1f4656111e38ff3e28df465cd71e34c73a1cbb4654c31e18a53e00ad4644a71e248f1e007b1a265f1a443d1a56111a5cd71a54c31a44a71a248f1a00851a00f7ba1423da2c0bda2cebda14d1da01030201040302030503040605080703060505060806090807080a08090a0a090b090c0b0a0b0d0b0c0e0b0e100c0f0e0b100d0e1110000e0f00110e040f06060f09090f0c010212021312020513051413050714071514070a150a16150a0d160d17160d1017101817101118111918110019001a19121c1b12131c131d1c13141d14151d15161d161e1d16171e17181e181f1e18191f191a1f1c1d1b1d1e1b1b1e1f1a1b1f\";\n    bytes constant SIGIL =\n        hex\"04031c2870a088b0c07850410000c000502700473300333f002f415050274d473345333f432f417828277024335e1a3f5a18417800277000335e003f5a0041000041005024505024782824780024004c1c000aca404c1c72001c0f00ca72201c010206010512010605020307020706030408030807041108050a0905131205141305060a050913050914060b0a06070b070c0b07080c08110c090a0e090d15090e0d0914130915140a0b0f0a0f0e0b0c100b100f0c111012131613140013171813001713181614151914191b141a00141b1a161817191a1b\";\n    bytes constant CRIT =\n        hex\"05010e121c249484ac6c7c5400841c007c1c6c3e1c3620540020546cc21c00c254007c186c3e186cc218008418003ed60000ac36e0d601030201040302030503060503040600050601020801080702050902090805000a050a0907080b080c0b080d0c08090d090a0d0a0c0d\";\n    bytes constant PILLOW =\n        hex\"0605151e547887aa8779577900aa000057004957003957390057497937005b4b2473373a6b376b244b5b3a377300377979330073333a6b336b3a337300337900116f3a1b6d6d1b3a6f1100010302010403020306020605030409030908030806040b0905060706080708090a090b0a0a0b0f0b100f080a0e0a0f0e07080d080e0d05070c070d0c0f11120f10110e0f120d0e130c0d130c131400141300130e000e12001211\";\n\n    uint8 constant OUTER_MIN_R = 0;\n    uint8 constant OUTER_MIN_G = 1;\n    uint8 constant OUTER_MIN_B = 2;\n    uint8 constant OUTER_RANGE_R = 3;\n    uint8 constant OUTER_RANGE_G = 4;\n    uint8 constant OUTER_RANGE_B = 5;\n    uint8 constant INNER_MIN_R = 6;\n    uint8 constant INNER_MIN_G = 7;\n    uint8 constant INNER_MIN_B = 8;\n    uint8 constant INNER_RANGE_R = 9;\n    uint8 constant INNER_RANGE_G = 10;\n    uint8 constant INNER_RANGE_B = 11;\n    uint8 constant ATTENUATION_MIN_R = 12;\n    uint8 constant ATTENUATION_MIN_G = 13;\n    uint8 constant ATTENUATION_MIN_B = 14;\n    uint8 constant ATTENUATION_RANGE_R = 15;\n    uint8 constant ATTENUATION_RANGE_G = 16;\n    uint8 constant ATTENUATION_RANGE_B = 17;\n    uint8 constant TEXT_R = 18;\n    uint8 constant TEXT_G = 19;\n    uint8 constant TEXT_B = 20;\n    uint8 constant GRAD_R = 21;\n    uint8 constant GRAD_G = 22;\n    uint8 constant GRAD_B = 23;\n    uint8 constant NUM_COLORS = 24;\n\n    bytes constant COLORS =\n        hex\"63605a0202025a606302020263635a020202ffffff4040405d001408080e2e00210505072e001e050507ff0b4b342228285f3406060906312306060717145e0d07070a9e881d2d2a3260490505060c2c1c050505061f1304040433cc711d2d243238600508051014310608060c102c0507053868f21d25353c32600805052116460a090918122f0706069b8aff2321385f283e060607581a33070708400a20070707fc65bc2d1d28635054020204613c44040406635054020204ffb3d22d20265d530a080f0859500f080e0859500f080e08ffe027333022144a5e070b070b3848080a0807253006070627d3fc1f3133635d5a020202624e460305035f3928060806ffd3c0332b275d0000080d0d230202040505350303050808ba0000331f2158624605030333480b090808586246050303baed582d331c5e4414070a075d400a080c08382809060706ffb531352e235e3814070907532e0a090909382009060606f77d1933272231145e090707210c3e0707074b3c610504048f36fc2b253d\";\n\n    // 0, 10, 20, 40, 60 metallic (without, faint, subtle, strong, powerful)\n    bytes constant ALLOY_TO_METALLIC = hex\"000a14283c\";\n\n    // 25, 25, 20, 10, 0 roughness (standard, fine, pure, brilliant, flawless)\n    bytes constant CLARITY_TO_ROUGHNESS = hex\"1919140a00\";\n\n    // 95, 100, 100, 100, 100 transmission (standard, fine, pure, brilliant, flawless)\n    bytes constant CLARITY_TO_TRANSMISSION = hex\"5f64646464\";\n\n    // 20, 60, 100 iridescence (light, heavy, eminent)\n    bytes constant SHIMMER_TO_IRIDESCENCE = hex\"144664\";\n\n    // 0, 3.5, 7.0 dispersion (without, soft, hard)\n    bytes constant MAGIC_TO_DISPERSION = hex\"002346\";\n\n    enum Stone {\n        Diamond,\n        Ruby,\n        Alexandrite,\n        Emerald,\n        Sapphire,\n        Tanzanite,\n        Spinel,\n        Tourmaline,\n        Heliodor,\n        Aquamarine,\n        Morganite,\n        Garnet,\n        Peridot,\n        Topaz,\n        Citrine,\n        Amethyst,\n        Count\n    }\n\n    enum Cut {\n        Classic,\n        Ovoid,\n        Legend,\n        Pear,\n        Sigil,\n        Crit,\n        Pillow,\n        Count\n    }\n\n    enum Clarity {\n        Standard,\n        Fine,\n        Pure,\n        Brilliant,\n        Flawless,\n        Count\n    }\n\n    enum Alloy {\n        Without,\n        Faint,\n        Subtle,\n        Strong,\n        Powerful,\n        Count\n    }\n\n    enum Shimmer {\n        Light,\n        Heavy,\n        Eminent,\n        Count\n    }\n\n    enum Magic {\n        Without,\n        Soft,\n        Hard,\n        Count\n    }\n\n    enum View {\n        Front, // No rotation\n        Left, // +90deg about Y\n        Back, // +180deg about Y\n        Right, // -90deg about Y\n        Top, // +90deg about X\n        Count\n    }\n\n    constructor() ERC721(\"Genuine\", \"GEN\") {\n        owner = msg.sender;\n        for (uint i = 0x00; i < MINT_TO_SENDER; ++i) {\n            _safeMint(owner, i);\n        }\n        nextTokenId = MINT_TO_SENDER;\n        ERC2981._setDefaultRoyalty(owner, 0x200);\n    }\n\n    function mint() public payable returns (uint256) {\n        require(msg.value >= MINT_PRICE, \"Not enough ETH provided\");\n        require(nextTokenId <= MAX_TOKEN_ID, \"All tokens have been minted\");\n        payable(owner).transfer(msg.value);\n        _safeMint(msg.sender, nextTokenId);\n        return nextTokenId++;\n    }\n\n    function _update(\n        address to,\n        uint256 tokenId,\n        address auth\n    ) internal override(ERC721, ERC721Enumerable) returns (address) {\n        return super._update(to, tokenId, auth);\n    }\n\n    function _increaseBalance(\n        address account,\n        uint128 value\n    ) internal override(ERC721, ERC721Enumerable) {\n        super._increaseBalance(account, value);\n    }\n\n    function supportsInterface(\n        bytes4 interfaceId\n    )\n        public\n        view\n        override(ERC721, ERC721Enumerable, ERC721Royalty)\n        returns (bool)\n    {\n        return\n            ERC721.supportsInterface(interfaceId) ||\n            ERC721Enumerable.supportsInterface(interfaceId) ||\n            ERC721Royalty.supportsInterface(interfaceId);\n    }\n\n    // 8 -> \"0.08\", 80 -> \"0.8\", 120 -> \"1\"\n    function percentageIntToFloat(\n        uint8 val\n    ) internal pure returns (string memory) {\n        if (val <= 0) {\n            return \"0\";\n        } else if (val < 10) {\n            return string.concat(\"0.0\", Strings.toString(val));\n        } else if (val < 100) {\n            return string.concat(\"0.\", Strings.toString(val));\n        } else {\n            return \"1\";\n        }\n    }\n\n    // 80 -> \"8.0\", 29 -> \"2.9\", 6 -> \"0.6\"\n    function tenthIntToFloat(uint8 val) internal pure returns (string memory) {\n        return\n            string.concat(\n                Strings.toString(val / 10),\n                \".\",\n                Strings.toString(val % 10)\n            );\n    }\n\n    function rgb(uint8[] memory rgbs) internal pure returns (string memory) {\n        return\n            string.concat(\n                percentageIntToFloat(rgbs[RED]),\n                \",\",\n                percentageIntToFloat(rgbs[GREEN]),\n                \",\",\n                percentageIntToFloat(rgbs[BLUE])\n            );\n    }\n\n    function pbr(uint8[] memory pbrs) internal pure returns (string memory) {\n        return\n            string.concat(\n                '\\\\\"pbrMetallicRoughness\\\\\":{\\\\\"baseColorFactor\\\\\":[',\n                rgb(pbrs),\n                ',1],\\\\\"metallicFactor\\\\\":',\n                percentageIntToFloat(pbrs[METALLIC]),\n                ',\\\\\"roughnessFactor\\\\\":',\n                percentageIntToFloat(pbrs[ROUGHNESS]),\n                \"}\"\n            );\n    }\n\n    function colorFromStone(\n        uint8[] memory rolls,\n        uint8 offset, // Outer, Inner, Attenuation\n        bytes32 state,\n        uint8 state_idx,\n        uint8[] memory rgbs\n    ) internal pure returns (bytes32, uint8) {\n        uint stoneOffset = uint(NUM_COLORS) * rolls[STONE];\n        uint8 adj;\n        for (uint i = 0; i < 3; ++i) {\n            (state, state_idx, adj) = randomUint8(state, state_idx);\n            rgbs[i] =\n                uint8(COLORS[stoneOffset + 6 * offset + 0 + i]) +\n                (adj % uint8(COLORS[stoneOffset + 6 * offset + 3 + i]));\n        }\n\n        return (state, state_idx);\n    }\n\n    function outerMaterial(\n        uint8[] memory rolls,\n        bytes32 state,\n        uint8 state_idx\n    ) internal pure returns (bytes32, uint8, string memory) {\n        uint8[] memory pbrs = new uint8[](6); // Additional entry for transmission\n        uint8[] memory attenuation = new uint8[](3);\n\n        // Use `pbrs` as a scratch space for two random vars that will additively contribute\n        // to iridescence thickness. Gives a range of [200, 710].\n        uint16 iridescenceThicknessMaximum = 200;\n        for (uint i = 0; i < 2; i++) {\n            (state, state_idx, pbrs[i]) = randomUint8(state, state_idx);\n            iridescenceThicknessMaximum += pbrs[i];\n        }\n\n        (state, state_idx) = colorFromStone(\n            rolls,\n            0, // Outer color\n            state,\n            state_idx,\n            pbrs\n        );\n        pbrs[METALLIC] = uint8(ALLOY_TO_METALLIC[rolls[ALLOY]]);\n        pbrs[ROUGHNESS] = uint8(CLARITY_TO_ROUGHNESS[rolls[CLARITY]]);\n        pbrs[TRANSMISSION] = uint8(CLARITY_TO_TRANSMISSION[rolls[CLARITY]]);\n\n        (state, state_idx) = colorFromStone(\n            rolls,\n            2, // Attenuation color\n            state,\n            state_idx,\n            attenuation\n        );\n\n        return (\n            state,\n            state_idx,\n            string.concat(\n                pbr(pbrs),\n                ',\\\\\"extensions\\\\\":{\\\\\"KHR_materials_dispersion\\\\\":{\\\\\"dispersion\\\\\":',\n                tenthIntToFloat(uint8(MAGIC_TO_DISPERSION[rolls[MAGIC]])),\n                '},\\\\\"KHR_materials_ior\\\\\":{\\\\\"ior\\\\\":1.2},\\\\\"KHR_materials_iridescence\\\\\":{\\\\\"iridescenceFactor\\\\\":',\n                percentageIntToFloat(\n                    uint8(SHIMMER_TO_IRIDESCENCE[rolls[SHIMMER]])\n                ),\n                ',\\\\\"iridescenceIor\\\\\":1.6,\\\\\"iridescenceThicknessMaximum\\\\\":',\n                Strings.toString(iridescenceThicknessMaximum),\n                '},\\\\\"KHR_materials_transmission\\\\\":{\\\\\"transmissionFactor\\\\\":',\n                percentageIntToFloat(pbrs[TRANSMISSION]),\n                '},\\\\\"KHR_materials_volume\\\\\":{\\\\\"thicknessFactor\\\\\":128,\\\\\"attenuationDistance\\\\\":256,\\\\\"attenuationColor\\\\\":[',\n                rgb(attenuation),\n                \"]}}\"\n            )\n        );\n    }\n\n    function innerMaterial(\n        uint8[] memory rolls,\n        bytes32 state,\n        uint8 state_idx\n    ) internal pure returns (bytes32, uint8, string memory) {\n        uint8[] memory pbrs = new uint8[](5);\n\n        (state, state_idx) = colorFromStone(\n            rolls,\n            1, // Inner color\n            state,\n            state_idx,\n            pbrs\n        );\n        pbrs[METALLIC] = 100;\n        pbrs[ROUGHNESS] = 20;\n\n        return (state, state_idx, pbr(pbrs));\n    }\n\n    function materials(\n        uint8[] memory rolls,\n        bytes32 state,\n        uint8 state_idx\n    ) internal pure returns (string memory) {\n        string memory outer;\n        string memory inner;\n\n        (state, state_idx, outer) = outerMaterial(rolls, state, state_idx);\n        (state, state_idx, inner) = innerMaterial(rolls, state, state_idx);\n\n        return string.concat('\\\\\"materials\\\\\":[{', outer, \"},{\", inner, \"}],\");\n    }\n\n    function getViewParams(View v) internal pure returns (int[6] memory) {\n        if (v == View.Front) {\n            return [int(0), 1, 2, 1, 1, 1];\n        } else if (v == View.Left) {\n            return [int(2), 1, 0, 1, 1, -1];\n        } else if (v == View.Back) {\n            return [int(0), 1, 2, -1, 1, -1];\n        } else if (v == View.Right) {\n            return [int(2), 1, 0, -1, 1, 1];\n        } else {\n            return [int(0), 2, 1, 1, -1, 1];\n        }\n    }\n\n    function dynamicView(Cut cut) internal view returns (View) {\n        View[] memory views = new View[](uint(View.Count));\n        uint allowed_views = uint8(ALLOWED_VIEWS[uint(cut)]);\n\n        uint num_views = 0;\n        for (uint i = 0; i < uint(View.Count); ++i) {\n            if (allowed_views & (1 << i) != 0) {\n                views[num_views++] = View(i);\n            }\n        }\n\n        return views[block.timestamp % num_views];\n    }\n\n    function encodePositions(\n        bytes memory shape\n    ) internal view returns (string memory) {\n        bytes memory positions = new bytes(\n            uint(uint8(shape[POSITIONS_DIV_4])) * 4\n        );\n\n        uint len = uint8(shape[SECTION_POSITIONS]);\n        uint sectionOffset = HEADER_COUNT;\n\n        // Start by copying the initial shape (section positions)\n        for (uint i = 0; i < len; i++) {\n            for (uint j = 0; j < 3; j++) {\n                positions[i * 4 + j] = shape[sectionOffset + i * 3 + j];\n            }\n        }\n\n        // Reflect X, Y, Z\n        for (uint8 axis = 0x01; axis <= 0x04; axis <<= 1) {\n            if (uint8(shape[REFLECT]) & axis == 0) continue;\n\n            int8[3] memory mults = [\n                axis == 0x01 ? -1 : int8(1),\n                axis == 0x02 ? -1 : int8(1),\n                axis == 0x04 ? -1 : int8(1)\n            ];\n\n            for (uint i = 0; i < len; i++) {\n                for (uint j = 0; j < 3; ++j) {\n                    positions[(len + i) * 4 + j] = bytes1(\n                        uint8(mults[j] * int8(uint8(positions[i * 4 + j])))\n                    );\n                }\n            }\n            len <<= 1;\n        }\n\n        // Timestamp-based view\n        int[6] memory params = getViewParams(\n            dynamicView(Cut(uint8(shape[SHAPE_CUT])))\n        );\n        for (uint i = 0; i < len; i++) {\n            int8[3] memory transformed = [int8(0), 0, 0];\n            for (uint j = 0; j < 3; ++j) {\n                transformed[j] =\n                    int8(uint8(positions[i * 4 + uint(params[j])])) *\n                    int8(params[3 + j]);\n            }\n            for (uint j = 0; j < 3; ++j) {\n                positions[i * 4 + j] = bytes1(uint8(transformed[j]));\n            }\n        }\n\n        return Base64.encode(positions);\n    }\n\n    function encodeIndices(\n        bytes memory shape,\n        bool reverse\n    ) internal pure returns (string memory) {\n        bytes memory indices = new bytes(uint(uint8(shape[INDICES_DIV_3])) * 3);\n\n        uint8 sectionPosLen = uint8(shape[SECTION_POSITIONS]);\n        uint len = uint8(shape[SECTION_INDICES]);\n        uint sectionOffset = HEADER_COUNT + sectionPosLen * 3;\n\n        // Start by copying the initial indices (section indices)\n        for (uint i = 0; i < len; i++) {\n            for (uint j = 0; j < 3; j++) {\n                indices[i * 3 + j] = shape[\n                    sectionOffset + i * 3 + (reverse ? 2 - j : j)\n                ];\n            }\n        }\n\n        // Reflect X, Y, Z\n        for (uint8 axis = 0x01; axis <= 0x04; axis <<= 1) {\n            if (uint8(shape[REFLECT]) & axis == 0) continue;\n            for (uint i = 0; i < len; i++) {\n                for (uint j = 0; j < 3; ++j) {\n                    indices[(len + i) * 3 + j] = bytes1(\n                        uint8(indices[i * 3 + (2 - j)]) + sectionPosLen\n                    );\n                }\n            }\n            len <<= 1;\n            sectionPosLen <<= 1;\n        }\n\n        return Base64.encode(indices);\n    }\n\n    function buffers(bytes memory shape) internal view returns (string memory) {\n        return\n            string.concat(\n                '\\\\\"buffers\\\\\":[{\\\\\"uri\\\\\":\\\\\"data:application/octet-stream;base64,',\n                encodePositions(shape),\n                '\\\\\",\\\\\"byteLength\\\\\":',\n                Strings.toString(uint16(4) * uint8(shape[POSITIONS_DIV_4])),\n                '},{\\\\\"uri\\\\\":\\\\\"data:application/octet-stream;base64,',\n                encodeIndices(shape, false),\n                '\\\\\",\\\\\"byteLength\\\\\":',\n                Strings.toString(uint16(3) * uint8(shape[INDICES_DIV_3])),\n                '},{\\\\\"uri\\\\\":\\\\\"data:application/octet-stream;base64,',\n                encodeIndices(shape, true),\n                '\\\\\",\\\\\"byteLength\\\\\":',\n                Strings.toString(uint16(3) * uint8(shape[INDICES_DIV_3])),\n                \"}],\"\n            );\n    }\n\n    function bufferViews(\n        bytes memory shape\n    ) internal pure returns (string memory) {\n        return\n            string.concat(\n                '\\\\\"bufferViews\\\\\":[{\\\\\"buffer\\\\\":0,\\\\\"byteOffset\\\\\":0,\\\\\"byteStride\\\\\":4,\\\\\"byteLength\\\\\":',\n                Strings.toString(uint16(4) * uint8(shape[POSITIONS_DIV_4])),\n                ',\\\\\"target\\\\\":34962},{\\\\\"buffer\\\\\":1,\\\\\"byteOffset\\\\\":0,\\\\\"byteLength\\\\\":',\n                Strings.toString(uint16(3) * uint8(shape[INDICES_DIV_3])),\n                ',\\\\\"target\\\\\":34963},{\\\\\"buffer\\\\\":2,\\\\\"byteOffset\\\\\":0,\\\\\"byteLength\\\\\":',\n                Strings.toString(uint16(3) * uint8(shape[INDICES_DIV_3])),\n                ',\\\\\"target\\\\\":34963}],'\n            );\n    }\n\n    function decTriplet(\n        int8[3] memory vals\n    ) internal pure returns (string memory) {\n        return\n            string.concat(\n                Strings.toStringSigned(vals[0]),\n                \",\",\n                Strings.toStringSigned(vals[1]),\n                \",\",\n                Strings.toStringSigned(vals[2])\n            );\n    }\n\n    function toHexString(uint8 value) internal pure returns (string memory) {\n        bytes16 HEX_DIGITS = \"0123456789abcdef\";\n        bytes memory buffer = new bytes(2);\n        buffer[1] = HEX_DIGITS[value & 0xf];\n        value >>= 4;\n        buffer[0] = HEX_DIGITS[value & 0xf];\n        return string(buffer);\n    }\n\n    function hexTriplet(\n        bytes1[3] memory vals\n    ) internal pure returns (string memory) {\n        return\n            string.concat(\n                toHexString(uint8(vals[0])),\n                toHexString(uint8(vals[1])),\n                toHexString(uint8(vals[2]))\n            );\n    }\n\n    function minsMaxs(\n        bytes memory shape,\n        uint unflippedIdx,\n        uint flippedIdx\n    ) internal view returns (string memory) {\n        // Timestamp-based view\n        int[6] memory params = getViewParams(\n            dynamicView(Cut(uint8(shape[SHAPE_CUT])))\n        );\n\n        int8[3] memory vals = [int8(0), 0, 0];\n        for (uint i = 0; i < 3; ++i) {\n            vals[i] = int8(\n                uint8(\n                    shape[\n                        (params[3 + i] > 0 ? unflippedIdx : flippedIdx) +\n                            uint(params[i])\n                    ]\n                )\n            );\n            vals[i] *= params[3 + i] > 0 ? int8(1) : -1;\n        }\n\n        return decTriplet(vals);\n    }\n\n    function accessors(\n        bytes memory shape\n    ) internal view returns (string memory) {\n        return\n            string.concat(\n                '\\\\\"accessors\\\\\":[{\\\\\"bufferView\\\\\":0,\\\\\"byteOffset\\\\\":0,\\\\\"componentType\\\\\":5120,\\\\\"count\\\\\":',\n                Strings.toString(uint8(shape[POSITIONS_DIV_4])),\n                ',\\\\\"type\\\\\":\\\\\"VEC3\\\\\",\\\\\"min\\\\\":[',\n                minsMaxs(shape, POSITION_MIN_X, POSITION_MAX_X),\n                '],\\\\\"max\\\\\":[',\n                minsMaxs(shape, POSITION_MAX_X, POSITION_MIN_X),\n                ']},{\\\\\"bufferView\\\\\":1,\\\\\"byteOffset\\\\\":0,\\\\\"componentType\\\\\":5121,\\\\\"count\\\\\":',\n                Strings.toString(uint16(3) * uint8(shape[INDICES_DIV_3])),\n                ',\\\\\"type\\\\\":\\\\\"SCALAR\\\\\",\\\\\"min\\\\\":[0],\\\\\"max\\\\\":[',\n                Strings.toString(uint8(shape[POSITIONS_DIV_4]) - 1),\n                ']},{\\\\\"bufferView\\\\\":2,\\\\\"byteOffset\\\\\":0,\\\\\"componentType\\\\\":5121,\\\\\"count\\\\\":',\n                Strings.toString(uint16(3) * uint8(shape[INDICES_DIV_3])),\n                ',\\\\\"type\\\\\":\\\\\"SCALAR\\\\\",\\\\\"min\\\\\":[0],\\\\\"max\\\\\":[',\n                Strings.toString(uint8(shape[POSITIONS_DIV_4]) - 1),\n                \"]}]\"\n            );\n    }\n\n    function getShape(Cut cut) internal pure returns (bytes memory) {\n        if (cut == Cut.Classic) {\n            return CLASSIC;\n        } else if (cut == Cut.Ovoid) {\n            return OVOID;\n        } else if (cut == Cut.Legend) {\n            return LEGEND;\n        } else if (cut == Cut.Pear) {\n            return PEAR;\n        } else if (cut == Cut.Sigil) {\n            return SIGIL;\n        } else if (cut == Cut.Crit) {\n            return CRIT;\n        } else {\n            return PILLOW;\n        }\n    }\n\n    function getModel(\n        uint8[] memory rolls,\n        bytes32 state,\n        uint8 state_idx\n    ) internal view returns (string memory) {\n        bytes memory shape = getShape(Cut(rolls[CUT]));\n\n        return\n            string.concat(\n                \"{\",\n                '\\\\\"asset\\\\\":{\\\\\"version\\\\\":\\\\\"2.0\\\\\",\\\\\"generator\\\\\":\\\\\"ofoid\\\\\"},',\n                '\\\\\"scenes\\\\\":[{\\\\\"nodes\\\\\":[0]}],',\n                '\\\\\"nodes\\\\\":[{\\\\\"mesh\\\\\":0}],',\n                '\\\\\"meshes\\\\\":[{\\\\\"primitives\\\\\":[{\\\\\"attributes\\\\\":{\\\\\"POSITION\\\\\":0},\\\\\"indices\\\\\":1,\\\\\"material\\\\\":0},{\\\\\"attributes\\\\\":{\\\\\"POSITION\\\\\":0},\\\\\"indices\\\\\":2,\\\\\"material\\\\\":1}]}],',\n                '\\\\\"extensionsUsed\\\\\":[\\\\\"KHR_materials_dispersion\\\\\",\\\\\"KHR_materials_ior\\\\\",\\\\\"KHR_materials_iridescence\\\\\",\\\\\"KHR_materials_transmission\\\\\",\\\\\"KHR_materials_volume\\\\\",\\\\\"KHR_mesh_quantization\\\\\"],',\n                '\\\\\"extensionsRequired\\\\\":[\\\\\"KHR_mesh_quantization\\\\\"],',\n                materials(rolls, state, state_idx),\n                buffers(shape),\n                bufferViews(shape),\n                accessors(shape),\n                \"}\"\n            );\n    }\n\n    function randomUint8(\n        bytes32 state,\n        uint8 idx\n    ) internal pure returns (bytes32, uint8, uint8) {\n        if (idx >= 32) {\n            state = keccak256(abi.encodePacked(state));\n            idx = 0;\n        }\n        return (state, idx + 1, uint8(state[idx]));\n    }\n\n    function stoneStr(\n        uint8[] memory rolls\n    ) internal pure returns (string memory) {\n        string[16] memory stone = [\n            \"Diamond\",\n            \"Ruby\",\n            \"Alexandrite\",\n            \"Emerald\",\n            \"Sapphire\",\n            \"Tanzanite\",\n            \"Spinel\",\n            \"Tourmaline\",\n            \"Heliodor\",\n            \"Aquamarine\",\n            \"Morganite\",\n            \"Garnet\",\n            \"Peridot\",\n            \"Topaz\",\n            \"Citrine\",\n            \"Amethyst\"\n        ];\n        return stone[rolls[STONE]];\n    }\n\n    function cutStr(\n        uint8[] memory rolls\n    ) internal pure returns (string memory) {\n        string[7] memory cut = [\n            \"Classic\",\n            \"Ovoid\",\n            \"Legend\",\n            \"Pear\",\n            \"Sigil\",\n            \"Crit\",\n            \"Pillow\"\n        ];\n        return cut[rolls[CUT]];\n    }\n\n    function clarityStr(\n        uint8[] memory rolls\n    ) internal pure returns (string memory) {\n        string[5] memory clarity = [\n            \"Standard\",\n            \"Fine\",\n            \"Pure\",\n            \"Brilliant\",\n            \"Flawless\"\n        ];\n        return clarity[rolls[CLARITY]];\n    }\n\n    function alloyStr(\n        uint8[] memory rolls\n    ) internal pure returns (string memory) {\n        string[5] memory alloy = [\n            \"Without\",\n            \"Faint\",\n            \"Subtle\",\n            \"Strong\",\n            \"Powerful\"\n        ];\n        return alloy[rolls[ALLOY]];\n    }\n\n    function shimmerStr(\n        uint8[] memory rolls\n    ) internal pure returns (string memory) {\n        string[3] memory shimmer = [\"Light\", \"Heavy\", \"Eminent\"];\n        return shimmer[rolls[SHIMMER]];\n    }\n\n    function magicStr(\n        uint8[] memory rolls\n    ) internal pure returns (string memory) {\n        string[3] memory magic = [\"Without\", \"Soft\", \"Hard\"];\n        return magic[rolls[MAGIC]];\n    }\n\n    function viewStr(View v) internal pure returns (string memory) {\n        string[5] memory views = [\"Front\", \"Left\", \"Back\", \"Right\", \"Top\"];\n        return views[uint8(v)];\n    }\n\n    function svg(uint8[] memory rolls) internal pure returns (string memory) {\n        return\n            string.concat(\n                \"<svg width='1080' height='1080' xmlns='http://www.w3.org/2000/svg'><style>text{font-family:Inter,Roboto,'Helvetica Neue','Arial Nova','Nimbus Sans',Arial,system-ui,sans-serif;font-weight:bold;font-size:106px;fill:#999}</style><defs><linearGradient id='o' x1='0' x2='0' y1='0' y2='1'><stop stop-color='#0f0f0f'/><stop offset='100%' stop-color='#\",\n                hexTriplet(\n                    [\n                        COLORS[uint(NUM_COLORS) * rolls[STONE] + GRAD_R],\n                        COLORS[uint(NUM_COLORS) * rolls[STONE] + GRAD_G],\n                        COLORS[uint(NUM_COLORS) * rolls[STONE] + GRAD_B]\n                    ]\n                ),\n                \"'/></linearGradient></defs><rect width='1080' height='1080' fill='url(#o)'/><g transform='translate(80, 0)'><text y='160' style='font-size:60px;fill:#4d4d4d'>Genuine</text><text y='330' style='fill:#\",\n                hexTriplet(\n                    [\n                        COLORS[uint(NUM_COLORS) * rolls[STONE] + TEXT_R],\n                        COLORS[uint(NUM_COLORS) * rolls[STONE] + TEXT_G],\n                        COLORS[uint(NUM_COLORS) * rolls[STONE] + TEXT_B]\n                    ]\n                ),\n                \"'>\",\n                stoneStr(rolls),\n                \"</text><text y='460'>\",\n                cutStr(rolls),\n                \" cut</text><text y='590'>\",\n                clarityStr(rolls),\n                \" clarity</text><text y='720'>\",\n                alloyStr(rolls),\n                \" alloy</text><text y='850'>\",\n                shimmerStr(rolls),\n                \" shimmer</text><text y='980'>\",\n                magicStr(rolls),\n                \" magic</text></g>\",\n                \"</svg>\"\n            );\n    }\n\n    function prob(bytes memory probs, uint8 val) internal pure returns (uint8) {\n        for (uint i = 0; i < probs.length; i++) {\n            if (val < uint8(probs[i])) {\n                return uint8(i);\n            }\n        }\n        return uint8(probs.length - 1);\n    }\n\n    function displayedTokenId(\n        uint256 tokenId\n    ) internal pure returns (string memory) {\n        uint256 displayed = tokenId + 1;\n        if (displayed < 10) {\n            return string.concat(\"000\", Strings.toString(displayed));\n        } else if (displayed < 100) {\n            return string.concat(\"00\", Strings.toString(displayed));\n        } else if (displayed < 1000) {\n            return string.concat(\"0\", Strings.toString(displayed));\n        } else {\n            return Strings.toString(displayed);\n        }\n    }\n\n    function tokenURI(\n        uint256 tokenId\n    ) public view override returns (string memory) {\n        bytes32 state = keccak256(abi.encodePacked(tokenId + 0x220));\n        uint8 state_idx = 0;\n\n        uint8[] memory rolls = new uint8[](6);\n\n        (state, state_idx, rolls[STONE]) = randomUint8(state, state_idx);\n        rolls[STONE] = prob(STONE_PROBS, rolls[STONE]);\n\n        (state, state_idx, rolls[CUT]) = randomUint8(state, state_idx);\n        rolls[CUT] %= uint8(Cut.Count);\n\n        (state, state_idx, rolls[CLARITY]) = randomUint8(state, state_idx);\n        rolls[CLARITY] = prob(CLARITY_PROBS, rolls[CLARITY]);\n\n        (state, state_idx, rolls[ALLOY]) = randomUint8(state, state_idx);\n        rolls[ALLOY] = rolls[CLARITY] <= uint8(Clarity.Fine)\n            ? uint8(Alloy.Without)\n            : prob(ALLOY_PROBS, rolls[ALLOY]);\n\n        (state, state_idx, rolls[SHIMMER]) = randomUint8(state, state_idx);\n        rolls[SHIMMER] = prob(SHIMMER_PROBS, rolls[SHIMMER]);\n\n        (state, state_idx, rolls[MAGIC]) = randomUint8(state, state_idx);\n        rolls[MAGIC] = prob(MAGIC_PROBS, rolls[MAGIC]);\n\n        return\n            string.concat(\n                'data:application/json,{\"name\":\"'\n                \"Genuine \",\n                displayedTokenId(tokenId),\n                '\",\"description\":\"',\n                \"Digital facets.\\\\n\\\\nForever enduring, fully on-chain.\\\\n\\\\nInitial view: \",\n                viewStr(dynamicView(Cut(rolls[CUT]))),\n                '\",\"attributes\":[{\"trait_type\":\"Stone\",\"value\":\"',\n                stoneStr(rolls),\n                '\"},{\"trait_type\":\"Cut\",\"value\":\"',\n                cutStr(rolls),\n                '\"},{\"trait_type\":\"Clarity\",\"value\":\"',\n                clarityStr(rolls),\n                '\"},{\"trait_type\":\"Alloy\",\"value\":\"',\n                alloyStr(rolls),\n                '\"},{\"trait_type\":\"Shimmer\",\"value\":\"',\n                shimmerStr(rolls),\n                '\"},{\"trait_type\":\"Magic\",\"value\":\"',\n                magicStr(rolls),\n                '\"}],\"image_data\":\"',\n                svg(rolls),\n                '\",\"animation_url\":\"data:model/gltf+json,',\n                getModel(rolls, state, state_idx),\n                '\"}'\n            );\n    }\n}\n"}}, "settings": {"optimizer": {"enabled": true}, "viaIR": false, "evmVersion": "paris", "outputSelection": {"*": {"*": ["evm.legacyAssembly"]}}, "libraries": {}}}
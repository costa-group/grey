{"language": "Solidity", "sources": {"@openzeppelin/contracts/interfaces/IERC1363.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"}, "@openzeppelin/contracts/interfaces/IERC165.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"}, "@openzeppelin/contracts/interfaces/IERC20.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"}, "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"}, "@openzeppelin/contracts/token/ERC20/IERC20.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"}, "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"}, "@openzeppelin/contracts/utils/Create2.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Create2.sol)\n\npragma solidity ^0.8.30;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev There's no code to deploy.\n     */\n    error Create2EmptyBytecode();\n\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n        if (bytecode.length == 0) {\n            revert Create2EmptyBytecode();\n        }\n        assembly (\"memory-safe\") {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n            // if no address was created, and returndata is not empty, bubble revert\n            if and(iszero(addr), not(iszero(returndatasize()))) {\n                let p := mload(0x40)\n                returndatacopy(p, 0, returndatasize())\n                revert(p, returndatasize())\n            }\n        }\n        if (addr == address(0)) {\n            revert Errors.FailedDeployment();\n        }\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40) // Get free memory pointer\n\n            // |                   | \u2193 ptr ...  \u2193 ptr + 0x0B (start) ...  \u2193 ptr + 0x20 ...  \u2193 ptr + 0x40 ...   |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\n            // | 0xFF              |            FF                                                             |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\n            // | keccak(start, 85) |            \u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191 |\n\n            mstore(add(ptr, 0x40), bytecodeHash)\n            mstore(add(ptr, 0x20), salt)\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\n            mstore8(start, 0xff)\n            addr := and(keccak256(start, 85), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n    }\n}\n"}, "@openzeppelin/contracts/utils/Errors.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Collection of common custom errors used in multiple contracts\n *\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n * It is recommended to avoid relying on the error API for critical functionality.\n *\n * _Available since v5.1._\n */\nlibrary Errors {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedCall();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error FailedDeployment();\n\n    /**\n     * @dev A necessary precompile is missing.\n     */\n    error MissingPrecompile(address);\n}\n"}, "@openzeppelin/contracts/utils/introspection/IERC165.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"}, "contracts/interfaces/AggregatorV3Interface.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\ninterface AggregatorV3Interface {\n    function decimals() external view returns (uint8);\n\n    function description() external view returns (string memory);\n\n    function version() external view returns (uint256);\n\n    // getRoundData and latestRoundData should both raise \"No data present\"\n    // if they do not have data to report, instead of returning unset values\n    // which could be misinterpreted as actual reported values.\n    function getRoundData(\n        uint80 _roundId\n    )\n        external\n        view\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n    function latestRoundData()\n        external\n        view\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"}, "contracts/interfaces/IStreamer.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nenum StreamState {\n    NOT_INITIALIZED,\n    STARTED,\n    SHORTENED,\n    FINISHED\n}\n\ninterface IStreamer {\n    event Initialized();\n    event Claimed(uint256 streamingAssetAmount, uint256 nativeAssetAmount);\n    event Terminated(uint256 terminationTimestamp);\n    event Swept(uint256 amount);\n    event Rescued(address token, uint256 balance);\n    event InsufficientAssetBalance(uint256 balanceRequired, uint256 balance);\n\n    error ZeroAmount();\n    error NotReceiver();\n    error NotStreamCreator();\n    error CantRescueStreamingAsset();\n    error ZeroAddress();\n    error SlippageExceedsScaleFactor();\n    error InvalidPrice();\n    error NotInitialized();\n    error NotEnoughBalance(uint256 balance, uint256 streamingAmount);\n    error StreamNotFinished();\n    error AlreadyInitialized();\n    error DurationTooShort();\n    error TerminationIsAfterStream(uint256 terminationTimestamp);\n    error CreatorCannotSweepYet();\n    error SweepCooldownNotPassed();\n    error AlreadyTerminated();\n    error NoticePeriodExceedsStreamDuration();\n    error DecimalsNotInBounds();\n    error StreamingAmountTooLow();\n\n    function initialize() external;\n\n    function claim() external;\n\n    function sweepRemaining() external;\n\n    function terminateStream(uint256 _terminationTimestamp) external;\n\n    function rescueToken(IERC20 token) external;\n\n    function getNativeAssetAmountOwed() external view returns (uint256);\n\n    function calculateStreamingAssetAmount(uint256 nativeAssetAmount) external view returns (uint256);\n\n    function calculateNativeAssetAmount(uint256 streamingAssetAmount) external view returns (uint256);\n}\n"}, "contracts/interfaces/IStreamerFactory.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport { AggregatorV3Interface } from \"./AggregatorV3Interface.sol\";\n\ninterface IStreamerFactory {\n    event StreamerDeployed(address newContract, bytes constructorParams);\n\n    error AssetsMatch();\n\n    function deployStreamer(\n        address _streamingAsset,\n        address _nativeAsset,\n        AggregatorV3Interface _streamingAssetOracle,\n        AggregatorV3Interface _nativeAssetOracle,\n        address _returnAddress,\n        address _streamCreator,\n        address _recipient,\n        uint256 _nativeAssetStreamingAmount,\n        uint256 _slippage,\n        uint256 _sweepCooldown,\n        uint256 _finishCooldown,\n        uint256 _streamDuration,\n        uint256 _minimumNoticePeriod\n    ) external returns (address);\n}\n"}, "contracts/Streamer.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\n// Developed with @openzeppelin/contracts v5.3.0\nimport { AggregatorV3Interface } from \"./interfaces/AggregatorV3Interface.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { StreamState, IStreamer } from \"./interfaces/IStreamer.sol\";\n\n/** @title Streamer\n * @author WOOF! Software\n * @custom:security-contact dmitriy@woof.software\n * @notice This contract streams a certain amount of native asset in a form of streaming asset to the recipient over a specified streaming duration.\n * - The contract is designed to work with a pair of Chainlink oracles: Native Asset / USD and Streaming Asset / USD. However, can support any oracle which supports AggregatorV3Interface.\n * - Streaming asset is accrued linearly over a streaming duration, unlocking a portion of Streaming asset each second. Recipient can claim any time during and after the stream.\n * - Stream Creator is able to:\n *  1. rescue any ERC-20 token stuck in contract except of streaming asset.\n *  2. terminate the stream until the stream end. In this case, the distribution of streaming asset will continue till the termination timestamp.\n *  3. sweep remaining streaming asset tokens after stream end or termination timestamp (in case the stream is terminated).\n * - The streaming amount is specified in the native asset units. During the claiming, accrued native asset amount is calculated into streaming asset.\n * - All the tokens transferred via sweepRemaining or rescueToken are sent to the returnAddress.\n * - Anyone is able to call claim or sweepRemaining after a specified duration. Assets will still be transferred to the recipient and returnAddress accordingly.\n */\ncontract Streamer is IStreamer {\n    using SafeERC20 for IERC20;\n\n    /// @notice The denominator for slippage calculation. Equals 100%.\n    uint256 public constant SLIPPAGE_SCALE = 1e8;\n    /// @notice Minimal required duration for all duration parameters.\n    uint256 public constant MIN_DURATION = 1 days;\n    /// @notice Minimal number of decimals allowed for tokens and price feeds.\n    uint8 public constant MIN_DECIMALS = 6;\n    /// @notice Number of decimals used to scale prices.\n    uint8 public constant SCALE_DECIMALS = 18;\n\n    /// @notice The address of asset used for distribution.\n    IERC20 public immutable streamingAsset;\n    /// @notice The address of price feed oracle for Streaming asset. Must return the price in USD.\n    AggregatorV3Interface public immutable streamingAssetOracle;\n    /// @notice The address of price feed oracle for Native asset. Must return the price in USD.\n    AggregatorV3Interface public immutable nativeAssetOracle;\n    /// @notice The address which receives tokens during the execution of sweepRemaining and rescueToken functions.\n    address public immutable returnAddress;\n    /// @notice The owner of the stream.\n    address public immutable streamCreator;\n    /// @notice The recipient of streaming asset.\n    address public immutable recipient;\n    /// @notice Amount of asset to be distributed. Specified in the Native asset units.\n    uint256 public immutable nativeAssetStreamingAmount;\n    /// @notice A percentage used to reduce the price of streaming asset to account for price fluctuations.\n    uint256 public immutable slippage;\n    /// @notice A period of time since last claim timestamp after which anyone can call claim.\n    uint256 public immutable claimCooldown;\n    /// @notice A period of time since the end of stream after which anyone can call sweepRemaining.\n    uint256 public immutable sweepCooldown;\n    /// @notice A period of time since the initialization of the stream during which asset is streamed.\n    uint256 public immutable streamDuration;\n    /// @notice A minimal period of time during which Streaming asset must continue to accrue after termination is called.\n    uint256 public immutable minimumNoticePeriod;\n    /// @notice Decimals of Streaming asset.\n    uint8 public immutable streamingAssetDecimals;\n    /// @notice Decimals of Native asset.\n    uint8 public immutable nativeAssetDecimals;\n    /// @notice Decimals of the price returned by the Streaming Asset Oracle.\n    uint8 public immutable streamingAssetOracleDecimals;\n    /// @notice Decimals of the price returned by the Native Asset Oracle.\n    uint8 public immutable nativeAssetOracleDecimals;\n    /// @notice The start of the stream. Set during initialization of the stream.\n    uint256 public startTimestamp;\n    /// @notice The timestamp of the latest claim call.\n    uint256 public lastClaimTimestamp;\n    /// @notice The timestamp till which tokens continue to accrue. Set during the terminateStream call.\n    uint256 public terminationTimestamp;\n    /// @notice Amount of Native asset already distributed.\n    uint256 public nativeAssetSuppliedAmount;\n    /// @notice Total amount of claimed Streaming asset.\n    uint256 public streamingAssetClaimedAmount;\n    /// @notice The state which indicated if the stream is not initialized, ongoing or terminated.\n    StreamState private state;\n\n    modifier onlyStreamCreator() {\n        if (msg.sender != streamCreator) revert NotStreamCreator();\n        _;\n    }\n\n    /// @dev Decimals for tokens and price feeds should be between 6 and 18 to ensure proper calculations.\n    /// @dev Streaming asset should not be a token with multiple addresses to ensure the correct flow of the stream.\n    /// USD value of `_nativeAssetStreamingAmount` must be equal to at least $1.\n    constructor(\n        IERC20 _streamingAsset,\n        AggregatorV3Interface _streamingAssetOracle,\n        AggregatorV3Interface _nativeAssetOracle,\n        address _returnAddress,\n        address _streamCreator,\n        address _recipient,\n        uint8 _streamingAssetDecimals,\n        uint8 _nativeAssetDecimals,\n        uint256 _nativeAssetStreamingAmount,\n        uint256 _slippage,\n        uint256 _claimCooldown,\n        uint256 _sweepCooldown,\n        uint256 _streamDuration,\n        uint256 _minimumNoticePeriod\n    ) {\n        if (_recipient == address(0)) revert ZeroAddress();\n        if (_streamCreator == address(0)) revert ZeroAddress();\n        if (_returnAddress == address(0)) revert ZeroAddress();\n        if (address(_streamingAsset) == address(0)) revert ZeroAddress();\n        if (_nativeAssetStreamingAmount == 0) revert ZeroAmount();\n        if (_slippage > SLIPPAGE_SCALE) revert SlippageExceedsScaleFactor();\n        if (_claimCooldown < MIN_DURATION) revert DurationTooShort();\n        if (_sweepCooldown < MIN_DURATION) revert DurationTooShort();\n        if (_streamDuration < MIN_DURATION) revert DurationTooShort();\n        if (_minimumNoticePeriod < MIN_DURATION) revert DurationTooShort();\n        if (_minimumNoticePeriod > _streamDuration) revert NoticePeriodExceedsStreamDuration();\n        streamingAssetOracleDecimals = _streamingAssetOracle.decimals();\n        nativeAssetOracleDecimals = _nativeAssetOracle.decimals();\n        if (\n            _streamingAssetDecimals < MIN_DECIMALS ||\n            _nativeAssetDecimals < MIN_DECIMALS ||\n            streamingAssetOracleDecimals < MIN_DECIMALS ||\n            nativeAssetOracleDecimals < MIN_DECIMALS\n        ) revert DecimalsNotInBounds();\n        (, int256 nativeAssetPrice, , , ) = _nativeAssetOracle.latestRoundData();\n        if (nativeAssetPrice <= 0) revert InvalidPrice();\n        if (\n            (_nativeAssetStreamingAmount * uint256(nativeAssetPrice)) / 10 ** nativeAssetOracleDecimals <\n            10 ** _nativeAssetDecimals\n        ) revert StreamingAmountTooLow();\n\n        streamingAsset = _streamingAsset;\n        streamingAssetOracle = _streamingAssetOracle;\n        nativeAssetOracle = _nativeAssetOracle;\n        returnAddress = _returnAddress;\n        streamCreator = _streamCreator;\n        recipient = _recipient;\n        streamingAssetDecimals = _streamingAssetDecimals;\n        nativeAssetDecimals = _nativeAssetDecimals;\n        nativeAssetStreamingAmount = _nativeAssetStreamingAmount;\n        slippage = _slippage;\n        claimCooldown = _claimCooldown;\n        sweepCooldown = _sweepCooldown;\n        streamDuration = _streamDuration;\n        minimumNoticePeriod = _minimumNoticePeriod;\n    }\n\n    /** @notice Initializes the stream by setting start timestamp and validating that the contract has enough Streaming asset.\n     * @dev Streaming asset must be transferred to the contract's balance before function is called.\n     * @dev It is recommended to send a sufficient amount of Streaming asset in order to ensure the correct work of the Streamer.\n     * The extra amount depends on the volatility of assets. In general, we recommend sending extra 10% of the necessary Streaming asset amount.\n     * @dev Use the function `calculateStreamingAssetAmount` to determine the amount of Streaming asset to transfer.\n     */\n    function initialize() external onlyStreamCreator {\n        if (state != StreamState.NOT_INITIALIZED) revert AlreadyInitialized();\n        startTimestamp = block.timestamp;\n        lastClaimTimestamp = block.timestamp;\n        state = StreamState.STARTED;\n\n        uint256 balance = streamingAsset.balanceOf(address(this));\n        if (calculateNativeAssetAmount(balance) < nativeAssetStreamingAmount)\n            revert NotEnoughBalance(balance, nativeAssetStreamingAmount);\n\n        emit Initialized();\n    }\n\n    /** @notice Claims the accrued amount of Streaming asset to the recipient's address.\n     * @dev The stream must be initialized.\n     * @dev Can be called by the recipient or anyone after claim cooldown has passed since the last claim timestamp.\n     * @dev In case the contract doesn't have enough Streaming asset on its balance, the whole balance will be sent. The stream owner will have to replenish\n     * the balance in order to resume the stream.\n     */\n    function claim() external {\n        if (state == StreamState.NOT_INITIALIZED) revert NotInitialized();\n        if (msg.sender != recipient && block.timestamp < lastClaimTimestamp + claimCooldown) revert NotReceiver();\n\n        uint256 owed = getNativeAssetAmountOwed();\n        if (owed == 0) revert ZeroAmount();\n\n        uint256 streamingAssetAmount = calculateStreamingAssetAmount(owed);\n        if (streamingAssetAmount == 0) revert ZeroAmount();\n\n        uint256 balance = streamingAsset.balanceOf(address(this));\n        if (balance < streamingAssetAmount) {\n            emit InsufficientAssetBalance(streamingAssetAmount, balance);\n            streamingAssetAmount = balance;\n            owed = calculateNativeAssetAmount(balance);\n        }\n\n        lastClaimTimestamp = block.timestamp;\n        nativeAssetSuppliedAmount += owed;\n        streamingAssetClaimedAmount += streamingAssetAmount;\n\n        streamingAsset.safeTransfer(recipient, streamingAssetAmount);\n        emit Claimed(streamingAssetAmount, owed);\n    }\n\n    /// @notice Terminates the stream, stopping the distribution after the termination timestamp.\n    /// @param _terminationTimestamp The timestamp after which the stream is stopped. Must be longer than `block.timestamp + minimumNoticePeriod` and less than the end of stream.\n    /// If the parameter is equal to 0, the termination timestamp will be set as `block.timestamp + minimumNoticePeriod`.\n    function terminateStream(uint256 _terminationTimestamp) external onlyStreamCreator {\n        if (state == StreamState.SHORTENED) revert AlreadyTerminated();\n        if (_terminationTimestamp == 0) {\n            terminationTimestamp = block.timestamp + minimumNoticePeriod;\n        } else {\n            if (_terminationTimestamp < block.timestamp + minimumNoticePeriod) revert DurationTooShort();\n            terminationTimestamp = _terminationTimestamp;\n        }\n\n        if (terminationTimestamp > startTimestamp + streamDuration)\n            revert TerminationIsAfterStream(_terminationTimestamp);\n        state = StreamState.SHORTENED;\n        emit Terminated(terminationTimestamp);\n    }\n\n    /** @notice Allows to sweep all the Streaming asset tokens from the Streamer's balance.\n     * @dev Can be called by Stream Creator before initialization without any additional conditions.\n     * @dev After the end of stream (Either after stream duration or after termination timestamp if termination was called), can be called\n     * by Stream Creator or anyone after sweep cooldown has passed.\n     */\n    function sweepRemaining() external {\n        if (state == StreamState.NOT_INITIALIZED) {\n            if (msg.sender != streamCreator) {\n                revert NotStreamCreator();\n            }\n        } else {\n            uint256 streamEnd = getStreamEnd();\n\n            if (msg.sender == streamCreator) {\n                if (block.timestamp <= streamEnd) {\n                    revert CreatorCannotSweepYet();\n                }\n            } else if (block.timestamp <= streamEnd + sweepCooldown) {\n                revert SweepCooldownNotPassed();\n            }\n        }\n        uint256 remainingBalance = streamingAsset.balanceOf(address(this));\n\n        streamingAsset.safeTransfer(returnAddress, remainingBalance);\n        emit Swept(remainingBalance);\n    }\n\n    /** @notice Allows to transfer any ERC-20 token except the Streaming asset from the Streamer's balance.\n     * @param token Address of ERC-20 token to transfer.\n     * @dev Can only be called by Stream Creator.\n     */\n    function rescueToken(IERC20 token) external onlyStreamCreator {\n        if (token == streamingAsset) revert CantRescueStreamingAsset();\n        uint256 balance = token.balanceOf(address(this));\n        token.safeTransfer(returnAddress, balance);\n        emit Rescued(address(token), balance);\n    }\n\n    /// @notice Calculates the amount of asset accrued since the last claiming\n    /// @return Amount of accrued asset in Native asset units.\n    function getNativeAssetAmountOwed() public view returns (uint256) {\n        if (nativeAssetSuppliedAmount >= nativeAssetStreamingAmount) {\n            return 0;\n        }\n        uint256 streamEnd = getStreamEnd();\n        // Validate if stream is properly initialized\n        if (streamEnd == 0) return 0;\n        uint256 totalOwed;\n\n        if (block.timestamp < streamEnd) {\n            uint256 elapsed = block.timestamp - startTimestamp;\n            totalOwed = (nativeAssetStreamingAmount * elapsed) / streamDuration;\n        } else {\n            // If Stream is terminated, calculate amount accrued before termination timestamp\n            if (state == StreamState.SHORTENED)\n                totalOwed = (nativeAssetStreamingAmount * (streamEnd - startTimestamp)) / streamDuration;\n            else totalOwed = nativeAssetStreamingAmount;\n        }\n        return totalOwed - nativeAssetSuppliedAmount;\n    }\n\n    /** @notice Calculates the amount of Streaming asset based on the specified Native asset amount.\n     * @param nativeAssetAmount The amount of Native asset to be converted to Streaming asset.\n     * @dev Used in `claim` to calculate the amount Native asset owed in Streaming asset.\n     * @dev The price of streaming asset is reduced by the slippage to account for price fluctuations.\n     * @return Amount of Streaming asset.\n     */\n    function calculateStreamingAssetAmount(uint256 nativeAssetAmount) public view returns (uint256) {\n        (, int256 streamingAssetPrice, , , ) = streamingAssetOracle.latestRoundData();\n        if (streamingAssetPrice <= 0) revert InvalidPrice();\n\n        (, int256 nativeAssetPrice, , , ) = nativeAssetOracle.latestRoundData();\n        if (nativeAssetPrice <= 0) revert InvalidPrice();\n\n        uint256 streamingAssetPriceScaled = (scaleAmount(\n            uint256(streamingAssetPrice),\n            streamingAssetOracleDecimals,\n            SCALE_DECIMALS\n        ) * (SLIPPAGE_SCALE - slippage)) / SLIPPAGE_SCALE;\n        // Scale native asset price to streaming asset decimals for calculations\n        uint256 nativeAssetPriceScaled = scaleAmount(\n            uint256(nativeAssetPrice),\n            nativeAssetOracleDecimals,\n            SCALE_DECIMALS\n        );\n        uint256 amountInStreamingAsset = (scaleAmount(nativeAssetAmount, nativeAssetDecimals, SCALE_DECIMALS) *\n            nativeAssetPriceScaled) / streamingAssetPriceScaled;\n\n        return scaleAmount(amountInStreamingAsset, SCALE_DECIMALS, streamingAssetDecimals);\n    }\n\n    /** @notice Calculates the amount of Native asset based on the specified Streaming asset amount.\n     * @param streamingAssetAmount The amount of Streaming asset to be converted to Native asset.\n     * @dev Used in `initialize` to validate if the Streamer has enough Streaming asset to begin stream.\n     * @dev Used in `claim` to calculate how much the remaining balance of Streaming asset is equal to the Native Asset\n     * (For cases where the Streamer doesn't have enough Streaming asset to distribute).\n     * @return Amount of Native asset.\n     */\n    function calculateNativeAssetAmount(uint256 streamingAssetAmount) public view returns (uint256) {\n        (, int256 streamingAssetPrice, , , ) = streamingAssetOracle.latestRoundData();\n        if (streamingAssetPrice <= 0) revert InvalidPrice();\n\n        (, int256 nativeAssetPrice, , , ) = nativeAssetOracle.latestRoundData();\n        if (nativeAssetPrice <= 0) revert InvalidPrice();\n\n        // Streaming asset price is reduced by slippage to account for price fluctuations\n        uint256 streamingAssetPriceScaled = (scaleAmount(\n            uint256(streamingAssetPrice),\n            streamingAssetOracleDecimals,\n            SCALE_DECIMALS\n        ) * (SLIPPAGE_SCALE - slippage)) / SLIPPAGE_SCALE;\n        // Scale native asset price to streaming asset decimals for calculations\n        uint256 nativeAssetPriceScaled = scaleAmount(\n            uint256(nativeAssetPrice),\n            nativeAssetOracleDecimals,\n            SCALE_DECIMALS\n        );\n        uint256 amountInNativeAsset = (scaleAmount(streamingAssetAmount, streamingAssetDecimals, SCALE_DECIMALS) *\n            streamingAssetPriceScaled) / nativeAssetPriceScaled;\n\n        return scaleAmount(amountInNativeAsset, SCALE_DECIMALS, nativeAssetDecimals);\n    }\n\n    /// @dev Returns a correct end of the stream once the stream is initialized.\n    /// @return Timestamp representing the end of the stream.\n    function getStreamEnd() public view returns (uint256) {\n        if (state == StreamState.NOT_INITIALIZED) return 0;\n        return (state == StreamState.SHORTENED) ? terminationTimestamp : startTimestamp + streamDuration;\n    }\n\n    /// @return Current state of the stream.\n    function getStreamState() external view returns (StreamState) {\n        uint256 streamEnd = getStreamEnd();\n        if (streamEnd == 0) return StreamState.NOT_INITIALIZED;\n        return block.timestamp < streamEnd ? state : StreamState.FINISHED;\n    }\n\n    /** @notice Scales an amount from one decimal representation to another.\n     * @param amount The amount to be scaled.\n     * @param fromDecimals The number of decimals of the original amount.\n     * @param toDecimals The number of decimals of the target amount.\n     * @return The scaled amount.\n     */\n    function scaleAmount(uint256 amount, uint256 fromDecimals, uint256 toDecimals) internal pure returns (uint256) {\n        if (fromDecimals == toDecimals) return amount;\n        if (fromDecimals > toDecimals) {\n            return amount / (10 ** (fromDecimals - toDecimals));\n        }\n        return amount * (10 ** (toDecimals - fromDecimals));\n    }\n}\n"}, "contracts/StreamerFactory.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport { AggregatorV3Interface } from \"./interfaces/AggregatorV3Interface.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport { Create2 } from \"@openzeppelin/contracts/utils/Create2.sol\";\nimport { IStreamerFactory } from \"./interfaces/IStreamerFactory.sol\";\nimport { Streamer } from \"./Streamer.sol\";\n\n/** @title Streamer Factory\n * @author WOOF! Software\n * @custom:security-contact dmitriy@woof.software\n * @notice A Factory smart contract used for a safe deployment of new Streamer instances.\n * Anyone can use this Smart contract to deploy new streamers.\n */\ncontract StreamerFactory is IStreamerFactory {\n    /// @notice A number per deployer used to generate a unique salt for Create2.\n    mapping(address => uint256) public counters;\n\n    /// @notice Deploys a new Streamer instance.\n    /// @dev For details of each parameter, check documentation for Streamer.\n    /// @dev Do not send tokens to Streamer address precomputed before actual deployment. Use the address returned from the function.\n    /// @return The address of a new Streamer instance.\n    function deployStreamer(\n        address _streamingAsset,\n        address _nativeAsset,\n        AggregatorV3Interface _streamingAssetOracle,\n        AggregatorV3Interface _nativeAssetOracle,\n        address _returnAddress,\n        address _streamCreator,\n        address _recipient,\n        uint256 _nativeAssetStreamingAmount,\n        uint256 _slippage,\n        uint256 _claimCooldown,\n        uint256 _sweepCooldown,\n        uint256 _streamDuration,\n        uint256 _minimumNoticePeriod\n    ) external returns (address) {\n        if (_streamingAsset == _nativeAsset) revert AssetsMatch();\n        uint8 streamingAssetDecimals = IERC20Metadata(_streamingAsset).decimals();\n        uint8 nativeAssetDecimals = IERC20Metadata(_nativeAsset).decimals();\n        bytes memory constructorParams = abi.encode(\n            IERC20(_streamingAsset),\n            _streamingAssetOracle,\n            _nativeAssetOracle,\n            _returnAddress,\n            _streamCreator,\n            _recipient,\n            streamingAssetDecimals,\n            nativeAssetDecimals,\n            _nativeAssetStreamingAmount,\n            _slippage,\n            _claimCooldown,\n            _sweepCooldown,\n            _streamDuration,\n            _minimumNoticePeriod\n        );\n        bytes32 uniqueSalt = keccak256(abi.encode(msg.sender, counters[msg.sender]++));\n        bytes memory bytecodeWithParams = abi.encodePacked(type(Streamer).creationCode, constructorParams);\n        address newContract = Create2.deploy(0, uniqueSalt, bytecodeWithParams);\n\n        emit StreamerDeployed(newContract, constructorParams);\n        return newContract;\n    }\n}\n"}}, "settings": {"viaIR": false, "optimizer": {"enabled": true}, "evmVersion": "prague", "outputSelection": {"*": {"*": ["evm.legacyAssembly"]}}, "libraries": {}}}
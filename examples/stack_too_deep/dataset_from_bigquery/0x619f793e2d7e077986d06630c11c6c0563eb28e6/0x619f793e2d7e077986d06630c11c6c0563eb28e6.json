{"language": "Solidity", "sources": {"contracts/SweepersCompetitionVaultV2.sol": {"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.30;\n\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol';\nimport '@openzeppelin/contracts/utils/math/Math.sol';\nimport './external/gelato/OpsReady.sol';\nimport './interfaces/IDust.sol';\nimport './interfaces/IRandomizer.sol';\n\n\ncontract SweepersCompetitionVault is ReentrancyGuard, Ownable, IERC721Receiver, IERC1155Receiver, OpsReady {\n\n    IDust public DUST;\n    IRandomizer public randomizer;\n    address payable public sweepersTreasury;\n    address payable public sweepersBuyer;\n    address payable public legacyTreasury;\n\n    address payable public Dev;\n    address payable public VRF;\n    uint256 public DevFee = 0.0025 ether;\n    uint256 public VRFCost = .005 ether;\n    uint256 public SettlementCost = .02 ether;\n    uint256 public gasLimit = 60 gwei;\n\n    uint16 public sweepersCut = 8500;\n    uint16 public legacyCut = 500;\n    uint16 public devCut = 1000;        \n\n    // The competition info\n    struct Comp {\n        // The Token ID for the listed NFT\n        uint256 tokenId;\n        // The Contract Address for the listed NFT\n        address contractAddress;\n        // The NFT Contract Type\n        bool is1155;\n        // The entry limit per wallet \n        uint32 entryLimit;\n        // The number of entries received\n        uint32 numberEntries;\n        // The raffle entry method restrictions\n        bool onlyDust;\n        bool onlyEth;\n        // The statuses of the competition\n        bool blind;\n        bool revealed;\n        bool settled;\n        bool failed;\n        string hiddenImage;\n        string openseaSlug;\n    }\n    Comp[] public comps;\n\n    struct CompETHPrices {\n        uint8 id;\n        uint32 numEntries;\n        uint256 price;\n    }\n    struct CompDustPrices {\n        uint8 id;\n        uint32 numEntries;\n        uint256 price;\n    }\n    mapping(uint256 => CompETHPrices[5]) public ethPrices;\n    mapping(uint256 => CompDustPrices[5]) public dustPrices;\n\n    struct CompTargetParams {\n        uint256 minimumETH;\n        uint256 maximumETH;\n        uint32 startTime;\n        uint32 endTime;\n        uint32 entryCap;\n        bool useETHParams;\n        bool useTimeParams;\n        bool useEntryParams; \n    }\n    mapping(uint256 => CompTargetParams) public targetParams;\n\n    struct CompDistributions {\n        uint256 treasury;\n        uint256 legacy;\n        uint256 dev;\n    }\n    mapping(uint256 => CompDistributions) public distributions;\n\n    mapping(uint256 => uint256) public cancelDate;\n    uint256 public refundPeriod = 30 days;\n\n    mapping(uint256 => uint256) public ethCollected;\n    mapping(uint256 => uint256) public dustCollected;\n    mapping(uint256 => uint256) public ethDistributed;\n\n    struct Entries {\n        address entrant;\n        uint32 entryLength;\n    }\n    mapping(uint256 => Entries[]) public entries;\n\n    struct UserEntries {\n        uint32 numberEntries;\n        uint256 ethSpent;\n        uint256 dustSpent;\n        bool claimed;\n    }\n    mapping(bytes32 => UserEntries) public userData;\n    mapping(uint256 => bool) public winnerRequested;\n    mapping(uint256 => address) public compWinner;\n    mapping(uint256 => bytes32) public pickWinnerTaskId;\n\n    struct Referrer {\n        bool isValidReferrer;\n        uint256 referralCount;\n        uint256 referralCredits;\n        address referrerAddress;\n    }\n    mapping(bytes32 => Referrer) public referrer;\n    mapping(address => bytes32) public referrerId;\n    mapping(bytes32 => mapping(address => uint256)) public referralExpiration;\n    mapping(address => bool) public hasBonused;\n    uint256 public earningRate = 10;\n    uint32 public referreeBonus = 1;\n    uint256 public referralPeriod = 30 days;\n\n    modifier onlySweepersTreasury() {\n        require(msg.sender == sweepersTreasury || msg.sender == owner() || msg.sender == sweepersBuyer, \"Sender not allowed\");\n        _;\n    }\n\n    modifier onlyRandomizer() {\n        require(msg.sender == address(randomizer), \"Sender not allowed\");\n        _;\n    }\n\n    event CompCreated(uint256 indexed CompId, uint32 startTime, uint32 endTime, address indexed NFTContract, uint256 indexed TokenId, uint32 entryLimit, uint32 entryCap, bool BlindComp);\n    event CompSettled(uint256 indexed CompId, address indexed NFTProjectAddress, uint256 tokenID, address winner, uint256 winningEntryID);\n    event CompFailed(uint256 indexed CompId, address indexed NFTProjectAddress, uint256 tokenID);\n    event CompCanceled(uint256 indexed CompId, address indexed NFTProjectAddress, uint256 tokenID);\n    event EntryReceived(uint256 indexed CompId, address sender, uint256 entriesBought, uint256 currentEntryLength, uint256 compPriceId, bool withETH, uint256 timeStamp);\n    event RefundClaimed(uint256 indexed CompId, uint256 ethRefunded, uint256 dustRefunded, address Entrant);\n    event Received(address indexed From, uint256 Amount);\n\n    constructor(\n        address _dust,\n        address payable _ops,\n        IRandomizer _randomizer,\n        address payable _vrf,\n        address payable _legacy,\n        address payable _treasury,\n        address payable _buyer\n    ) OpsReady(_ops) {\n        DUST = IDust(_dust);\n        Dev = payable(msg.sender);\n        randomizer = _randomizer;\n        VRF = _vrf;\n        legacyTreasury = _legacy;\n        sweepersTreasury = _treasury;\n        sweepersBuyer = _buyer;\n    }\n\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n        return IERC721Receiver.onERC721Received.selector;\n    }\n\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n        return IERC1155Receiver.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] calldata,\n        uint256[] calldata,\n        bytes calldata\n    ) external pure returns (bytes4) {\n        return IERC1155Receiver.onERC1155BatchReceived.selector;\n    }\n\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool) {\n        return interfaceID == this.supportsInterface.selector;\n    }\n\n    function setDust(address _dust) external onlyOwner {\n        DUST = IDust(_dust);\n    }\n\n    function setDev(address _dev, uint256 _devFee) external onlyOwner {\n        Dev = payable(_dev);\n        DevFee = _devFee;\n    }\n\n    function setDistribution(uint16 _sweepersCut, uint16 _legacyCut, uint16 _devCut) external onlyOwner {\n        require(_sweepersCut + _legacyCut + _devCut == 10000);\n        sweepersCut = _sweepersCut;\n        legacyCut = _legacyCut;\n        devCut = _devCut;  \n    }\n\n    function setRefundPeriod(uint256 _period) external onlyOwner {\n        refundPeriod = _period;\n    }\n\n    function setReferralParams(uint256 _rate, uint16 _bonus, uint256 _period) external onlyOwner {\n        earningRate = _rate;\n        referreeBonus = _bonus;\n        referralPeriod = _period;\n    }\n\n    function updateSweepersTreasury(address payable _treasury) external onlyOwner {\n        sweepersTreasury = _treasury;\n    }\n\n    function updateSweepersBuyer(address payable _buyer) external onlyOwner {\n        sweepersBuyer = _buyer;\n    }\n\n    function updateLegacyTreasury(address payable _treasury) external onlyOwner {\n        legacyTreasury = _treasury;\n    }\n\n    function updateSettlementParams(\n        IRandomizer _randomizer, \n        address payable _vrf, \n        uint256 _vrfCost, \n        uint256 _settlementCost, \n        uint256 _gasLimit \n    ) external onlyOwner {\n        randomizer = _randomizer;\n        VRF = _vrf;\n        VRFCost = _vrfCost;\n        SettlementCost = _settlementCost;\n        gasLimit = _gasLimit;\n    }\n\n    function createComp(\n        address _nftContract, \n        uint256 _tokenId, \n        bool _is1155, \n        bool _blind,\n        uint32 _startTime, \n        uint32 _endTime, \n        uint16 _entryCap,\n        uint16 _entryLimit,\n        uint256 _minETH,\n        uint256 _maxETH,\n        CompDustPrices[] calldata _dustPrices,\n        CompETHPrices[] calldata _ethPrices,\n        bool _onlyDust,\n        bool _onlyEth,\n        bool _ethParams,\n        bool _timeParams,\n        bool _entryParams,\n        string calldata _hiddenImage, \n        string calldata _slug\n    ) external payable onlySweepersTreasury returns (uint256) {\n        require(msg.value == VRFCost + SettlementCost);\n        require(_ethParams || _timeParams || _entryParams);\n        require(_blind ? _tokenId == 0 : _tokenId != 0);\n\n        Comp memory _comp = Comp({\n            tokenId : _tokenId,\n            contractAddress : _nftContract,\n            is1155 : _is1155,\n            entryLimit : _entryLimit,\n            numberEntries : 0,\n            onlyDust : _onlyDust,\n            onlyEth : _onlyEth,\n            blind : _blind,\n            revealed : _blind ? false : true,\n            settled : false,\n            failed : false,\n            hiddenImage : _blind ? _hiddenImage : 'null',\n            openseaSlug : _slug\n        });\n\n        comps.push(_comp);\n\n        if(!_onlyDust) {\n            require(_ethPrices.length > 0, \"No prices\");\n\n            for (uint256 i = 0; i < _ethPrices.length; i++) {\n                require(_ethPrices[i].numEntries > 0, \"numEntries is 0\");\n\n                CompETHPrices memory p = CompETHPrices({\n                    id: uint8(i),\n                    numEntries: _ethPrices[i].numEntries,\n                    price: _ethPrices[i].price\n                });\n\n                ethPrices[comps.length - 1][i] = p;\n            }\n        }\n\n        if(!_onlyEth) {\n            require(_dustPrices.length > 0, \"No prices\");\n\n            for (uint256 i = 0; i < _dustPrices.length; i++) {\n                require(_dustPrices[i].numEntries > 0, \"numEntries is 0\");\n\n                CompDustPrices memory d = CompDustPrices({\n                    id: uint8(i),\n                    numEntries: _dustPrices[i].numEntries,\n                    price: _dustPrices[i].price\n                });\n\n                dustPrices[comps.length - 1][i] = d;\n            }\n        }\n\n        targetParams[comps.length - 1] = CompTargetParams({\n            minimumETH : _minETH,\n            maximumETH : _maxETH,\n            startTime : _startTime,\n            endTime : _endTime,\n            entryCap : _entryCap,\n            useETHParams : _ethParams,\n            useTimeParams : _timeParams,\n            useEntryParams : _entryParams \n        });\n\n        if(!_blind) {\n            if(_is1155) {\n                IERC1155(_nftContract).safeTransferFrom(msg.sender, address(this), _tokenId, 1, \"\");\n            } else {\n                IERC721(_nftContract).safeTransferFrom(msg.sender, address(this), _tokenId);\n            }\n        }\n\n        startPickWinnerTask(comps.length - 1);\n\n        emit CompCreated(comps.length - 1, _startTime, _endTime, _nftContract, _tokenId, _entryLimit, _entryCap, _blind);\n\n        return comps.length - 1;\n    }\n\n    function updateBlindComp(uint32 _id, uint256 _tokenId) external onlySweepersTreasury {\n        require(comps[_id].tokenId == 0, \"Comp already updated\");\n        require(_tokenId != 0);\n        comps[_id].tokenId = _tokenId;\n        if(comps[_id].is1155) {\n            IERC1155(comps[_id].contractAddress).safeTransferFrom(msg.sender, address(this), _tokenId, 1, \"\");\n        } else {\n            IERC721(comps[_id].contractAddress).safeTransferFrom(msg.sender, address(this), _tokenId);\n        }\n    }\n\n    function updateBlindComp1155(uint256 _id, bool _is1155) external onlySweepersTreasury {\n        comps[_id].is1155 = _is1155;\n    }\n\n    function updateBlindImage(uint256 _id, string calldata _hiddenImage) external onlySweepersTreasury {\n        comps[_id].hiddenImage = _hiddenImage;\n    }\n\n    function updateOpenseaSlug(uint256 _id, string calldata _slug) external onlySweepersTreasury {\n        comps[_id].openseaSlug = _slug;\n    }\n\n    function updateCompEndTime(uint256 _id, uint32 _endTime) external onlySweepersTreasury {\n        targetParams[_id].endTime = _endTime;\n    }\n\n    function emergencyCancelComp(uint32 _id) external payable onlySweepersTreasury {\n        require(compStatus(_id) == 1 || compStatus(_id) == 0, 'Can only cancel active comps');\n        require(msg.value == ethDistributed[_id], 'Must send back enough ETH to cover refunds');\n        _cancelComp(_id);\n    }\n\n    function _cancelComp(uint32 _id) private {\n        comps[_id].failed = true;\n        cancelDate[_id] = block.timestamp;\n\n        stopTask(pickWinnerTaskId[_id]);\n\n        if (comps[_id].tokenId != 0) {\n            if(comps[_id].is1155) {\n                IERC1155(comps[_id].contractAddress).safeTransferFrom(address(this), Dev, comps[_id].tokenId, 1, \"\");\n            } else {\n                IERC721(comps[_id].contractAddress).safeTransferFrom(address(this), Dev, comps[_id].tokenId);\n            }\n        }\n        delete distributions[_id];\n        delete ethDistributed[_id];\n        emit CompCanceled(_id, address(comps[_id].contractAddress), comps[_id].tokenId);\n    }\n\n    function claimRefund(uint256 _id) external nonReentrant {\n        require(compStatus(_id) == 4, \"not failed\");\n        require(\n            block.timestamp <= cancelDate[_id] + refundPeriod,\n            \"claim time expired\"\n        );\n\n        UserEntries storage claimData = userData[\n            keccak256(abi.encode(msg.sender, _id))\n        ];\n\n        require(claimData.claimed == false, \"already refunded\");\n\n        ethCollected[_id] -= claimData.ethSpent;\n        dustCollected[_id] -= claimData.dustSpent;\n\n        claimData.claimed = true;\n        if(claimData.ethSpent > 0) {\n            (bool sentETH, ) = msg.sender.call{value: claimData.ethSpent}(\"\");\n            require(sentETH, \"Fail send refund\");\n        }\n\n        if(claimData.dustSpent > 0) { DUST.mint(msg.sender, claimData.dustSpent); }\n\n        emit RefundClaimed(_id, claimData.ethSpent, claimData.dustSpent, msg.sender);\n    }\n\n    function emergencyRescueNFT(address _nft, uint256 _tokenId, bool _is1155) external onlySweepersTreasury {\n        if(_is1155) {\n            IERC1155(_nft).safeTransferFrom(address(this), Dev, _tokenId, 1, \"\");\n        } else {\n            IERC721(_nft).safeTransferFrom(address(this), Dev, _tokenId);\n        }\n    }\n\n    function emergencyRescueETH(uint256 amount) external onlySweepersTreasury {\n        (bool sent,) = Dev.call{value: amount}(\"\");\n        require(sent);\n    }\n\n    /**\n     * @notice Buy a competition entry using DUST.\n     */\n    function buyEntryDust(uint256 _id, uint256 _priceId, bytes32 _referrer, uint16 _redeemEntries) external payable nonReentrant {\n        require(compStatus(_id) == 1, 'Comp is not Active');\n        require(!comps[_id].onlyEth, 'Comp is restricted to only ETH');\n\n        CompDustPrices memory priceStruct = getDustPriceStructForId(_id, _priceId);\n        require(msg.value == DevFee, 'Fee not covered');\n        \n        bytes32 hash = keccak256(abi.encode(msg.sender, _id));\n        require(userData[hash].numberEntries + priceStruct.numEntries + _redeemEntries <= comps[_id].entryLimit, \"Bought too many entries\"); \n        if(targetParams[_id].useEntryParams) require(comps[_id].numberEntries + priceStruct.numEntries + _redeemEntries <= targetParams[_id].entryCap, \"Not enough entries remaining\"); \n\n        uint32 _numEntries = priceStruct.numEntries;\n        if(_redeemEntries > 0) {\n            bytes32 _ref = referrerId[msg.sender];\n            require(referrer[_ref].referralCredits >= _redeemEntries * 1000, 'Not enough credits available');\n            referrer[_ref].referralCredits -= (_redeemEntries * 1000);\n            _numEntries += _redeemEntries;\n        }\n\n        if(referrer[_referrer].isValidReferrer) {\n            if(referralExpiration[_referrer][msg.sender] == 0) {\n                referralExpiration[_referrer][msg.sender] = block.timestamp + referralPeriod;\n            }\n            if(block.timestamp < referralExpiration[_referrer][msg.sender]) {\n                referrer[_referrer].referralCount += priceStruct.numEntries;\n                referrer[_referrer].referralCredits += (priceStruct.numEntries) * 1000 / earningRate;\n                if(!hasBonused[msg.sender]) {\n                    _numEntries += referreeBonus;\n                    hasBonused[msg.sender] = true;\n                }\n            }\n        }\n\n        Entries memory entryBought = Entries({\n            entrant: msg.sender,\n            entryLength: comps[_id].numberEntries + _numEntries\n        });\n        entries[_id].push(entryBought);\n  \n        dustCollected[_id] += priceStruct.price;\n        comps[_id].numberEntries += _numEntries;\n\n        userData[hash].numberEntries += _numEntries;\n        userData[hash].dustSpent += priceStruct.price;\n\n        DUST.burnFrom(msg.sender, priceStruct.price);\n        \n        (bool sent,) = Dev.call{value: DevFee}(\"\");\n        require(sent);\n\n        emit EntryReceived(\n            _id,\n            msg.sender,\n            priceStruct.numEntries,\n            _numEntries,\n            _priceId,\n            false,\n            block.timestamp\n        );\n    }\n\n    /**\n     * @notice Buy a competition entry using ETH.\n     */\n    function buyEntryETH(uint32 _id, uint256 _priceId, bytes32 _referrer, uint16 _redeemEntries) external payable nonReentrant {\n        require(compStatus(_id) == 1, 'Comp is not Active');\n        require(!comps[_id].onlyDust, 'Comp is restricted to only DUST');\n\n        CompETHPrices memory priceStruct = getEthPriceStructForId(_id, _priceId);\n        require(msg.value == priceStruct.price, 'msg.value must be equal to the price');\n        \n        bytes32 hash = keccak256(abi.encode(msg.sender, _id));\n        require(userData[hash].numberEntries + priceStruct.numEntries + _redeemEntries <= comps[_id].entryLimit, \"Bought too many entries\");\n        if(targetParams[_id].useEntryParams) require(comps[_id].numberEntries + priceStruct.numEntries + _redeemEntries <= targetParams[_id].entryCap, \"Not enough entries remaining\"); \n\n        uint32 _numEntries = priceStruct.numEntries;\n        if(_redeemEntries > 0) {\n            bytes32 _ref = referrerId[msg.sender];\n            require(referrer[_ref].referralCredits >= _redeemEntries * 1000, 'Not enough credits available');\n            referrer[_ref].referralCredits -= (_redeemEntries * 1000);\n            _numEntries += _redeemEntries;\n        }\n\n        if(referrer[_referrer].isValidReferrer) {\n            if(referralExpiration[_referrer][msg.sender] == 0) {\n                referralExpiration[_referrer][msg.sender] = block.timestamp + referralPeriod;\n            }\n            if(block.timestamp < referralExpiration[_referrer][msg.sender]) {\n                referrer[_referrer].referralCount += priceStruct.numEntries;\n                referrer[_referrer].referralCredits += (priceStruct.numEntries) * 1000 / earningRate;\n                if(!hasBonused[msg.sender]) {\n                    _numEntries += referreeBonus;\n                    hasBonused[msg.sender] = true;\n                }\n            }\n        }\n\n        // add the entry to the entries array\n        Entries memory entryBought = Entries({\n            entrant: msg.sender,\n            entryLength: comps[_id].numberEntries + _numEntries\n        });\n        entries[_id].push(entryBought);\n  \n        comps[_id].numberEntries += _numEntries;\n\n        userData[hash].numberEntries += _numEntries;\n        userData[hash].ethSpent += priceStruct.price;\n\n        if(targetParams[_id].useETHParams) {\n            if(ethCollected[_id] < targetParams[_id].minimumETH) {\n                (bool sent,) = sweepersBuyer.call{value: msg.value}(\"\");\n                require(sent);\n                ethDistributed[_id] += msg.value * (10000 - sweepersCut) / 10000;\n            } else if(ethDistributed[_id] > 0) {\n                uint256 adjuster = msg.value * (sweepersCut) / 10000;\n                if(ethDistributed[_id] > adjuster) {\n                    ethDistributed[_id] -= adjuster;\n                } else {\n                    distributions[_id].treasury += adjuster - ethDistributed[_id];\n                    ethDistributed[_id] = 0;\n                }\n            } else {\n                distributions[_id].treasury += msg.value * sweepersCut / 10000;\n            }\n        } else {\n            distributions[_id].treasury += msg.value * sweepersCut / 10000;\n        }\n        distributions[_id].legacy += msg.value * legacyCut / 10000;\n        distributions[_id].dev += msg.value * devCut / 10000;\n\n        ethCollected[_id] += priceStruct.price;\n\n        emit EntryReceived(\n            _id,\n            msg.sender,\n            _numEntries,\n            comps[_id].numberEntries,\n            _priceId,\n            true,\n            block.timestamp\n        );\n    }\n\n    function enrollReferrer(string calldata referralCode) external nonReentrant {\n        require(referrerId[msg.sender] == 0, 'User already enrolled');\n        bytes32 bytesCode = bytes32(bytes(referralCode)); \n        require(referrer[bytesCode].referralCount == 0 && !referrer[bytesCode].isValidReferrer && bytesCode != 0, 'referralCode already exists');\n        referrerId[msg.sender] = bytesCode;\n        referrer[bytesCode].isValidReferrer = true;\n        referrer[bytesCode].referrerAddress = msg.sender;\n    }\n\n    function removeReferrer(bytes32 _referrerId, address _referrer) external onlySweepersTreasury {\n        delete referrer[_referrerId];\n        delete referrerId[_referrer];\n    }\n\n    function suspendReferrer(bytes32 _referrer) external onlySweepersTreasury {\n        referrer[_referrer].isValidReferrer = false;\n    }\n\n    function getEthPriceStructForId(uint256 _idRaffle, uint256 _id)\n        internal\n        view\n        returns (CompETHPrices memory)\n    {\n        if (ethPrices[_idRaffle][_id].id == _id) {\n            return ethPrices[_idRaffle][_id];\n        }\n        return CompETHPrices({id: 0, numEntries: 0, price: 0});\n    }\n\n    function getDustPriceStructForId(uint256 _idRaffle, uint256 _id)\n        internal\n        view\n        returns (CompDustPrices memory)\n    {\n        if (dustPrices[_idRaffle][_id].id == _id) {\n            return dustPrices[_idRaffle][_id];\n        }\n        return CompDustPrices({id: 0, numEntries: 0, price: 0});\n    }\n\n    function startPickWinnerTask(uint256 _id) internal {\n        pickWinnerTaskId[_id] = IOps(ops).createTaskNoPrepayment(\n            address(this), \n            this._pickCompWinner.selector,\n            address(this),\n            abi.encodeWithSelector(this.canPickChecker.selector, _id),\n            ETH\n        );\n    }\n\n    function canPickChecker(uint256 _id) \n        external\n        view\n        returns (bool canExec, bytes memory execPayload)\n    {\n        canExec = (compStatus(_id) == 2 && !winnerRequested[_id] && comps[_id].tokenId != 0);\n        \n        execPayload = abi.encodeWithSelector(\n            this._pickCompWinner.selector,\n            _id\n        );\n    }\n\n    function pickCompWinner(uint256 _id) public {\n        require(compStatus(_id) == 2, 'cant be settled now');\n        require(comps[_id].tokenId != 0, 'update comp tokenID');\n        \n        if(comps[_id].numberEntries > 0) {\n            randomizer.requestRandomWords(_id);\n            winnerRequested[_id] = true;\n            (bool sent,) = VRF.call{value: VRFCost}(\"\");\n            require(sent);\n        } else {\n            winnerRequested[_id] = true;\n            _closeComp(_id);\n        }\n    }\n\n    function _pickCompWinner(uint256 _id) external onlyOps {\n        require(tx.gasprice < gasLimit, 'cant be settled now');\n        (uint256 fee, address feeToken) = IOps(ops).getFeeDetails();\n        _transfer(fee, feeToken);\n\n        pickCompWinner(_id);\n\n        stopTask(pickWinnerTaskId[_id]);\n    }\n\n    function earlyCloseConp(uint256 _id) external onlySweepersTreasury {\n        require(targetParams[_id].useETHParams, 'Can only close with ETH params');\n        require(ethCollected[_id] >= targetParams[_id].minimumETH && ethDistributed[_id] == 0, 'Can not close with current funding');\n        require(comps[_id].tokenId != 0, 'Update comp tokenID');\n\n        randomizer.requestRandomWords(_id);\n        winnerRequested[_id] = true;\n        (bool sent,) = VRF.call{value: VRFCost}(\"\");\n        require(sent);\n    }\n    \n    /**\n     * @notice Settle a competition, finalizing the bid and transferring the NFT to the winner.\n     * @dev If there are no entries, the competition is failed and can be relisted.\n     */\n    function settleComp(uint256 _id) external {\n        uint256 seed = randomizer.getRandomWord();\n        _settleComp(_id, seed);\n    }\n\n    function autoSettleComp(uint256 _id, uint256 seed) external onlyRandomizer {\n        _settleComp(_id, seed);\n    }\n\n    function _settleComp(uint256 _id, uint256 seed) internal {\n        require(compStatus(_id) == 6, 'cant be settled now');\n        require(comps[_id].numberEntries > 0, 'comp has no entries');\n\n        comps[_id].settled = true;\n        uint256 entryIndex = seed % comps[_id].numberEntries + 1;\n        uint256 winnerIndex = findWinner(entries[_id], entryIndex);\n        address _compWinner = entries[_id][winnerIndex].entrant;\n        compWinner[_id] = _compWinner;\n\n        if(comps[_id].is1155) {\n            IERC1155(comps[_id].contractAddress).safeTransferFrom(address(this), _compWinner, comps[_id].tokenId, 1, \"\");\n        } else {\n            IERC721(comps[_id].contractAddress).safeTransferFrom(address(this), _compWinner, comps[_id].tokenId);\n        }\n\n        if(comps[_id].blind) {\n            comps[_id].revealed = true;\n        }\n\n        if(distributions[_id].treasury > 0) {\n            (bool sent1,) = sweepersTreasury.call{value: distributions[_id].treasury}(\"\");\n            require(sent1);\n        }\n        if(distributions[_id].legacy > 0) {\n            (bool sent2,) = legacyTreasury.call{value: distributions[_id].legacy}(\"\");\n            require(sent2);\n        }\n        if(distributions[_id].dev > 0) {\n            (bool sent3,) = Dev.call{value: distributions[_id].dev}(\"\");\n            require(sent3);\n        }\n\n        emit CompSettled(_id, address(comps[_id].contractAddress), comps[_id].tokenId, _compWinner, entryIndex);\n    }\n\n    function _closeComp(uint256 _id) internal {\n        require(compStatus(_id) == 2, 'cant be settled now');\n        require(comps[_id].numberEntries == 0, 'comp has entries');\n\n        comps[_id].settled = true;\n        uint256 entryIndex;\n        address _compWinner;\n\n        comps[_id].failed = true;\n        if (comps[_id].tokenId != 0) {\n            if(comps[_id].is1155) {\n                IERC1155(comps[_id].contractAddress).safeTransferFrom(address(this), Dev, comps[_id].tokenId, 1, \"\");\n            } else {\n                IERC721(comps[_id].contractAddress).safeTransferFrom(address(this), Dev, comps[_id].tokenId);\n            }\n        }\n        emit CompFailed(_id, address(comps[_id].contractAddress), comps[_id].tokenId);\n        \n        emit CompSettled(_id, address(comps[_id].contractAddress), comps[_id].tokenId, _compWinner, entryIndex);\n    }\n\n    function findWinner(Entries[] storage _array, uint256 entryIndex) internal pure returns (uint256) {\n        Entries[] memory array = _array;\n        \n        if (array.length == 0) {\n            return 0;\n        }\n\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds down (it does integer division with truncation).\n            if (array[mid].entryLength > entryIndex) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\n        if (low > 0 && array[low - 1].entryLength == entryIndex) {\n            return low - 1;\n        } else {\n            return low;\n        }\n    }\n\n    function compStatus(uint256 _id) public view returns (uint8) {\n        if (winnerRequested[_id] && !comps[_id].settled) {\n            return 6; // AWAITING SETTLEMENT - Winner selected and awaiting settlement    \n        }\n        if (comps[_id].failed) {\n            return 4; // FAILED - not sold by end time\n        }\n        if (comps[_id].settled) {\n            return 3; // SUCCESS - Entrant won \n        }\n        if(targetParams[_id].useTimeParams) {    \n            if (block.timestamp >= targetParams[_id].endTime && comps[_id].tokenId == 0) {\n                return 5; // AWAITING TOKENID - Comp finished\n            }\n            if (block.timestamp >= targetParams[_id].endTime || comps[_id].numberEntries == targetParams[_id].entryCap) {\n                return 2; // AWAITING WINNER SELECTION - Comp finished\n            }\n            if (block.timestamp <= targetParams[_id].endTime && block.timestamp >= targetParams[_id].startTime) {\n                return 1; // ACTIVE - entries enabled\n            }\n        } else if(targetParams[_id].useETHParams) {\n            if (ethCollected[_id] >= targetParams[_id].maximumETH && comps[_id].tokenId == 0) {\n                return 5; // AWAITING TOKENID - Comp finished\n            }\n            if (ethCollected[_id] >= targetParams[_id].maximumETH) {\n                return 2; // AWAITING WINNER SELECTION - Comp finished\n            }\n            if (ethCollected[_id] < targetParams[_id].maximumETH && block.timestamp >= targetParams[_id].startTime) {\n                return 1; // ACTIVE - entries enabled\n            }\n        } else if(targetParams[_id].useEntryParams) {\n            if (comps[_id].numberEntries >= targetParams[_id].entryCap && comps[_id].tokenId == 0) {\n                return 5; // AWAITING TOKENID - Comp finished\n            }\n            if (comps[_id].numberEntries >= targetParams[_id].entryCap) {\n                return 2; // AWAITING WINNER SELECTION - Comp finished\n            }\n            if (comps[_id].numberEntries < targetParams[_id].entryCap && block.timestamp >= targetParams[_id].startTime) {\n                return 1; // ACTIVE - entries enabled\n            }\n        }\n        return 0; // QUEUED - awaiting start time\n    }\n\n    function getEntries(uint256 _id) external view returns (Entries[] memory) {\n        return entries[_id];\n    }\n\n    function getUserData(uint256 _id, address _entrant) external view returns (UserEntries memory) {\n        return userData[keccak256(abi.encode(_entrant, _id))];\n    }\n\n    function getCompsLength() external view returns (uint256) {\n        return comps.length;\n    }\n\n    function getReferrerData(address _referrer) external view returns(bool isReferrer, bytes32 code, uint256 numReferrals, uint256 numCredits) {\n        code = referrerId[_referrer];\n        if(code == 0) {\n            return (false, 0x0, 0, 0);\n        } else {\n            isReferrer = referrer[code].isValidReferrer;\n            numReferrals = referrer[code].referralCount;\n            numCredits = referrer[code].referralCredits;\n        }\n    }\n\n    function stopTask(bytes32 taskId) internal {\n        IOps(ops).cancelTask(taskId);\n    }\n\n    function manualStopTask(bytes32 taskId) external onlySweepersTreasury {\n        stopTask(taskId);\n    }\n\n    receive() external payable {\n        emit Received(msg.sender, msg.value);\n    }\n}"}, "contracts/interfaces/IRandomizer.sol": {"content": "// SPDX-License-Identifier: MIT LICENSE\n\npragma solidity ^0.8.30;\n\ninterface IRandomizer {\n    \n    function getRandomWord() external returns (uint256);\n    function requestRandomWords(uint256 _id) external;\n    \n}"}, "contracts/interfaces/IDust.sol": {"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.30;\n\ninterface IDust {\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address to, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n    function burn(uint256 _amount) external;\n    function burnFrom(address _from, uint256 _amount) external;\n    function mint(address _to, uint256 _amount) external;\n}"}, "contracts/external/gelato/OpsReady.sol": {"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.30;\n\nimport {\n    SafeERC20,\n    IERC20\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ninterface IOps {\n    function gelato() external view returns (address payable);\n    function createTaskNoPrepayment(address _execAddress, bytes4 _execSelector, address _resolverAddress, bytes calldata _resolverData, address _feeToken) external returns (bytes32 task);\n    function getFeeDetails() external view returns (uint256, address);\n    function cancelTask(bytes32 task) external;\n}\n\nabstract contract OpsReady {\n    address public immutable ops;\n    address payable public immutable gelato;\n    address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    modifier onlyOps() {\n        require(msg.sender == ops, \"OpsReady: onlyOps\");\n        _;\n    }\n\n    constructor(address _ops) {\n        ops = _ops;\n        gelato = IOps(_ops).gelato();\n    }\n\n    function _transfer(uint256 _amount, address _paymentToken) internal {\n        if (_paymentToken == ETH) {\n            (bool success, ) = gelato.call{value: _amount}(\"\");\n            require(success, \"_transfer: ETH transfer failed\");\n        } else {\n            SafeERC20.safeTransfer(IERC20(_paymentToken), gelato, _amount);\n        }\n    }\n}"}, "@openzeppelin/contracts/utils/math/Math.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"}, "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"}, "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"}, "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"}, "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"}, "@openzeppelin/contracts/access/Ownable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"}, "@openzeppelin/contracts/security/ReentrancyGuard.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"}, "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"}, "@openzeppelin/contracts/token/ERC721/IERC721.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"}, "@openzeppelin/contracts/utils/introspection/IERC165.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"}, "@openzeppelin/contracts/utils/Context.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"}, "@openzeppelin/contracts/utils/Address.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"}, "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"}, "@openzeppelin/contracts/token/ERC20/IERC20.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"}}, "settings": {"optimizer": {"enabled": true}, "viaIR": false, "evmVersion": "london", "outputSelection": {"*": {"*": ["evm.legacyAssembly"]}}}}
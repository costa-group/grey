{"language": "Solidity", "sources": {"src/DealManager.sol": {"content": "/*    .o.                                                                                             \n     .888.                                                                                            \n    .8\"888.                                                                                           \n   .8' `888.                                                                                          \n  .88ooo8888.                                                                                         \n .8'     `888.                                                                                        \no88o     o8888o                                                                                       \n                                                                                                      \n                                                                                                      \n                                                                                                      \nooo        ooooo               .             ooooo                  ooooooo  ooooo                    \n`88.       .888'             .o8             `888'                   `8888    d8'                     \n 888b     d'888   .ooooo.  .o888oo  .oooo.    888          .ooooo.     Y888..8P                       \n 8 Y88. .P  888  d88' `88b   888   `P  )88b   888         d88' `88b     `8888'                        \n 8  `888'   888  888ooo888   888    .oP\"888   888         888ooo888    .8PY888.                       \n 8    Y     888  888    .o   888 . d8(  888   888       o 888    .o   d8'  `888b                      \no8o        o888o `Y8bod8P'   \"888\" `Y888\"\"8o o888ooooood8 `Y8bod8P' o888o  o88888o                    \n                                                                                                      \n                                                                                                      \n                                                                                                      \n  .oooooo.                .o8                            .oooooo.                                     \n d8P'  `Y8b              \"888                           d8P'  `Y8b                                    \n888          oooo    ooo  888oooo.   .ooooo.  oooo d8b 888           .ooooo.  oooo d8b oo.ooooo.      \n888           `88.  .8'   d88' `88b d88' `88b `888\"\"8P 888          d88' `88b `888\"\"8P  888' `88b     \n888            `88..8'    888   888 888ooo888  888     888          888   888  888      888   888     \n`88b    ooo     `888'     888   888 888    .o  888     `88b    ooo  888   888  888      888   888 .o. \n `Y8bood8P'      .8'      `Y8bod8P' `Y8bod8P' d888b     `Y8bood8P'  `Y8bod8P' d888b     888bod8P' Y8P \n             .o..P'                                                                     888           \n             `Y8P'                                                                     o888o          \n_______________________________________________________________________________________________________\n\nAll software, documentation and other files and information in this repository (collectively, the \"Software\")\nare copyright MetaLeX Labs, Inc., a Delaware corporation.\n\nAll rights reserved.\n\nThe Software is proprietary and shall not, in part or in whole, be used, copied, modified, merged, published, \ndistributed, transmitted, sublicensed, sold, or otherwise used in any form or by any means, electronic or\nmechanical, including photocopying, recording, or by any information storage and retrieval system, \nexcept with the express prior written permission of the copyright holder.*/\n\npragma solidity ^0.8.30;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./interfaces/IIssuanceManager.sol\";\nimport \"./libs/LexScroWLite.sol\";\nimport \"./libs/auth.sol\";\nimport \"./storage/DealManagerStorage.sol\";\nimport \"./storage/BorgAuthStorage.sol\";\n\n/// @title DealManager\n/// @notice Manages the lifecycle of deals between parties, including creation, signing, payment, and finalization for a CyberCorp\n/// @dev Implements UUPS upgradeable pattern and integrates with BorgAuth for access control\ncontract DealManager is Initializable, BorgAuthACL, LexScroWLite {\n    using DealManagerStorage for DealManagerStorage.DealManagerData;\n\n    error ZeroAddress();\n    error CounterPartyValueMismatch();\n    error AgreementConditionsNotMet();\n    error DealNotPending();\n    error PartyValuesLengthMismatch();\n    error ConditionAlreadyExists();\n    error ConditionDoesNotExist();\n    error NotUpgradeFactory();\n    error DealNotExpired();\n\n    /// @notice Emitted when a new deal is proposed\n    /// @param agreementId Unique identifier for the agreement\n    /// @param certAddress Address of the certificate contract\n    /// @param certId ID of the certificate\n    /// @param paymentToken Address of the token used for payment\n    /// @param paymentAmount Amount to be paid\n    /// @param templateId ID of the template used for the agreement\n    /// @param corp Address of the CyberCorp\n    /// @param dealRegistry Address of the CyberAgreementRegistry\n    /// @param parties Array of party addresses involved in the deal\n    /// @param conditions Array of condition contract addresses\n    /// @param hasSecret Whether the deal requires a secret for finalization\n    event DealProposed(\n        bytes32 indexed agreementId,\n        address[] certAddress,\n        uint256[] certId,\n        address paymentToken,\n        uint256 paymentAmount,\n        bytes32 templateId,\n        address corp,\n        address dealRegistry,\n        address[] parties,\n        address[] conditions,\n        bool hasSecret\n    );\n\n    event DealFinalized(\n        bytes32 indexed agreementId,\n        address indexed signer,\n        address indexed corp,\n        address dealRegistry,\n        bool fillUnallocated\n    );\n\n    /// @notice Maps agreement IDs to arrays of counter party values for closed deals.\n    mapping(bytes32 => string[]) public counterPartyValues;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    /// @notice Initializes the DealManager contract\n    /// @dev Sets up the contract with required addresses and initializes parent contracts\n    /// @param _auth Address of the BorgAuth contract\n    /// @param _corp Address of the CyberCorp\n    /// @param _dealRegistry Address of the CyberAgreementRegistry\n    /// @param _issuanceManager Address of the CyberCorp's issuance manager\n    function initialize(address _auth, address _corp, address _dealRegistry, address _issuanceManager, address _upgradeFactory) public initializer {\n        __BorgAuthACL_init(_auth);\n        \n        if (_corp == address(0)) revert ZeroAddress();\n        if (_dealRegistry == address(0)) revert ZeroAddress();\n        if (_issuanceManager == address(0)) revert ZeroAddress();\n\n        // Set storage values\n        LexScrowStorage.setCorp(_corp);\n        LexScrowStorage.setDealRegistry(_dealRegistry);\n        DealManagerStorage.setIssuanceManager(_issuanceManager);\n\n        // Initialize LexScroWLite without setting storage\n        __LexScroWLite_init(_corp, _dealRegistry);\n        DealManagerStorage.setUpgradeFactory(_upgradeFactory);\n    }\n\n    /// @notice Proposes a new deal\n    /// @dev Creates a new agreement and certificate for the deal\n    /// @param _certPrinterAddress Address of the certificate NFT contract\n    /// @param _paymentToken Address of the token used for payment\n    /// @param _paymentAmount Amount to be paid\n    /// @param _templateId ID of the agreement template to use\n    /// @param _salt Random value for unique agreement ID generation\n    /// @param _globalValues Array of global values for the agreement, must match the template\n    /// @param _parties Array of party addresses\n    /// @param _certDetails Details of the certificate to be created\n    /// @param _partyValues Array of party-specific values, must match the template\n    /// @param conditions Array of condition contract addresses\n    /// @param secretHash Hash of the secret required for finalization (if any)\n    /// @param expiry Timestamp when the deal expires\n    /// @return agreementId Unique identifier for the agreement\n    /// @return certIds IDs of the created certificate\n    function proposeDeal(\n        address[] memory _certPrinterAddress, \n        address _paymentToken, \n        uint256 _paymentAmount, \n        bytes32 _templateId, \n        uint256 _salt,\n        string[] memory _globalValues, \n        address[] memory _parties, \n        CertificateDetails[] memory _certDetails,\n        string[][] memory _partyValues,\n        address[] memory conditions,\n        bytes32 secretHash,\n        uint256 expiry\n    ) public onlyOwner returns (bytes32 agreementId, uint256[] memory certIds) {\n        agreementId = ICyberAgreementRegistry(LexScrowStorage.getDealRegistry()).createContract(_templateId, _salt, _globalValues, _parties, _partyValues, secretHash, address(this), expiry);\n       \n        Token[] memory corpAssets = new Token[](_certDetails.length);\n        certIds = new uint256[](_certDetails.length);\n        for(uint256 i = 0; i < _certDetails.length; i++) {\n            certIds[i] = DealManagerStorage.getIssuanceManager().createCert(_certPrinterAddress[i], address(this), _certDetails[i]);\n            corpAssets[i] = Token(TokenType.ERC721, _certPrinterAddress[i], certIds[i], 1);\n        }\n\n        Token[] memory buyerAssets = new Token[](1);\n        buyerAssets[0] = Token(TokenType.ERC20, _paymentToken, 0, _paymentAmount);\n\n        Escrow memory newEscrow = Escrow({\n            agreementId: agreementId,\n            counterParty: _parties[1],\n            corpAssets: corpAssets,\n            buyerAssets: buyerAssets,\n            signature: \"\",\n            expiry: expiry,\n            status: EscrowStatus.PENDING\n        });\n        \n        LexScrowStorage.setEscrow(agreementId, newEscrow);\n\n        //set conditions\n        for(uint256 i = 0; i < conditions.length; i++) {\n            LexScrowStorage.addConditionToEscrow(agreementId, ICondition(conditions[i]));\n        }\n\n        emit DealProposed(\n            agreementId,\n            _certPrinterAddress,\n            certIds,\n            _paymentToken,\n            _paymentAmount,\n            _templateId,\n            LexScrowStorage.getCorp(),\n            LexScrowStorage.getDealRegistry(),\n            _parties,\n            conditions,\n            secretHash > 0\n        );\n    }\n\n    /// @notice Proposes and signs a deal in one transaction\n    /// @dev Combines deal proposal and initial signature\n    /// @param _certPrinterAddress Address of the certificate NFT contract\n    /// @param _paymentToken Address of the token used for payment\n    /// @param _paymentAmount Amount to be paid\n    /// @param _templateId ID of the agreement template to use\n    /// @param _salt Random value for unique agreement ID generation\n    /// @param _globalValues Array of global values for the agreement, must match the template\n    /// @param _parties Array of party addresses\n    /// @param _certDetails Details of the certificate to be created\n    /// @param proposer Address of the deal proposer\n    /// @param signature Signature of the proposer\n    /// @param _partyValues Array of party-specific values, must match the template\n    /// @param conditions Array of condition contract addresses\n    /// @param secretHash Hash of the secret required for finalization (if any)\n    /// @param expiry Timestamp when the deal expires\n    /// @return agreementId Unique identifier for the agreement\n    /// @return certIds IDs of the created certificate\n    function proposeAndSignDeal(\n        address[] memory _certPrinterAddress, \n        address _paymentToken, \n        uint256 _paymentAmount, \n        bytes32 _templateId, \n        uint256 _salt,\n        string[] memory _globalValues, \n        address[] memory _parties, \n        CertificateDetails[] memory _certDetails,\n        address proposer,\n        bytes memory signature,\n        string[][] memory _partyValues,\n        address[] memory conditions,\n        bytes32 secretHash,\n        uint256 expiry\n    ) public returns (bytes32 agreementId, uint256[] memory certIds) {\n        if(_partyValues.length > _parties.length) revert PartyValuesLengthMismatch();\n        \n        certIds = new uint256[](_certDetails.length);\n\n        (agreementId, certIds) = proposeDeal(_certPrinterAddress, _paymentToken, _paymentAmount, _templateId, _salt, _globalValues, _parties, _certDetails, _partyValues, conditions, secretHash, expiry);\n        // NOTE: proposer is expected to be listed as a party in the parties array.\n        \n        // Update the escrow signature\n        Escrow storage escrow = LexScrowStorage.getEscrow(agreementId);\n        escrow.signature = signature;\n\n        if(_partyValues.length > 1) {\n            if(_partyValues[1].length != _partyValues[0].length) revert PartyValuesLengthMismatch();\n            DealManagerStorage.setCounterPartyValues(agreementId, _partyValues[1]);\n        }\n        ICyberAgreementRegistry(LexScrowStorage.getDealRegistry()).signContractFor(proposer, agreementId, _partyValues[0], signature, false, \"\");\n    }\n\n    /// @notice Signs a deal and processes payment\n    /// @dev Validates signature and processes payment for the deal\n    /// @param signer Address of the signer\n    /// @param agreementId Unique identifier for the agreement\n    /// @param signature Digital Signature hash of the signer\n    /// @param partyValues Array of party-specific values, must match the template\n    /// @param _fillUnallocated Whether to fill unallocated slots\n    /// @param name Name of the signer\n    /// @param secret Secret required for finalization (if any)\n    function signDealAndPay(\n        address signer,\n        bytes32 agreementId,\n        bytes memory signature,\n        string[] memory partyValues,\n        bool _fillUnallocated,\n        string memory name,\n        string memory secret\n    ) public {\n        if(ICyberAgreementRegistry(LexScrowStorage.getDealRegistry()).isVoided(agreementId)) revert DealVoided();\n        if(ICyberAgreementRegistry(LexScrowStorage.getDealRegistry()).isFinalized(agreementId)) revert DealAlreadyFinalized();\n        Escrow storage escrow = LexScrowStorage.getEscrow(agreementId);\n        if(escrow.status != EscrowStatus.PENDING) revert DealNotPending();\n        if(escrow.expiry < block.timestamp) revert DealExpired();\n\n        string[] storage counterPartyCheck = DealManagerStorage.getCounterPartyValues(agreementId);\n        if(counterPartyCheck.length > 0) {\n            if (keccak256(abi.encode(counterPartyCheck)) != keccak256(abi.encode(partyValues))) revert CounterPartyValueMismatch();\n        }\n        else {\n            DealManagerStorage.setCounterPartyValues(agreementId, partyValues);\n        }\n        \n        ICyberAgreementRegistry(LexScrowStorage.getDealRegistry()).signContractFor(signer, agreementId, partyValues, signature, _fillUnallocated, secret);\n        updateEscrow(agreementId, msg.sender, name);\n        handleCounterPartyPayment(agreementId);\n    }\n\n    /// @notice Signs and finalizes a deal in one transaction\n    /// @dev Combines signing, payment, and finalization steps\n    /// @param signer Address of the signer\n    /// @param agreementId Unique identifier for the agreement\n    /// @param partyValues Array of party-specific values, must match the template\n    /// @param signature Digital Signature hash of the signer   \n    /// @param _fillUnallocated Whether to fill unallocated slots\n    /// @param name Name of the signer\n    /// @param secret Secret required for finalization (if any)\n    function signAndFinalizeDeal(\n        address signer,\n        bytes32 agreementId,\n        string[] memory partyValues,\n        bytes memory signature,\n        bool _fillUnallocated,\n        string memory name,\n        string memory secret\n    ) public {\n        if(ICyberAgreementRegistry(LexScrowStorage.getDealRegistry()).isVoided(agreementId)) revert DealVoided();\n        if(ICyberAgreementRegistry(LexScrowStorage.getDealRegistry()).isFinalized(agreementId)) revert DealAlreadyFinalized();\n        if(LexScrowStorage.getEscrow(agreementId).status != EscrowStatus.PENDING) revert DealNotPending();\n\n        string[] storage counterPartyCheck = DealManagerStorage.getCounterPartyValues(agreementId);\n        if(counterPartyCheck.length > 0) {\n            if (keccak256(abi.encode(counterPartyCheck)) != keccak256(abi.encode(partyValues))) revert CounterPartyValueMismatch();\n        }\n        else {\n            DealManagerStorage.setCounterPartyValues(agreementId, partyValues);\n        }\n            \n        if(!conditionCheck(agreementId)) revert AgreementConditionsNotMet();\n        \n        if(!ICyberAgreementRegistry(LexScrowStorage.getDealRegistry()).hasSigned(agreementId, signer))\n            ICyberAgreementRegistry(LexScrowStorage.getDealRegistry()).signContractFor(signer, agreementId, partyValues, signature, _fillUnallocated, secret);\n\n        updateEscrow(agreementId, msg.sender, name);\n        handleCounterPartyPayment(agreementId);\n        finalizeDeal(agreementId);\n    }\n\n    /// @notice Finalizes a deal\n    /// @dev Checks signatures, conditions and finalizes the agreement\n    /// @param agreementId Unique identifier for the agreement\n    function finalizeDeal(bytes32 agreementId) public {\n        if(ICyberAgreementRegistry(LexScrowStorage.getDealRegistry()).isVoided(agreementId)) revert DealVoided();\n        if(LexScrowStorage.getEscrow(agreementId).status != EscrowStatus.PAID) revert DealNotPaid();\n        if(ICyberAgreementRegistry(LexScrowStorage.getDealRegistry()).isFinalized(agreementId)) revert DealAlreadyFinalized();\n        if(!ICyberAgreementRegistry(LexScrowStorage.getDealRegistry()).allPartiesSigned(agreementId)) revert DealNotFullySigned();\n        if(!conditionCheck(agreementId)) revert AgreementConditionsNotMet();\n        \n        ICyberAgreementRegistry(LexScrowStorage.getDealRegistry()).finalizeContract(agreementId);\n        finalizeEscrow(agreementId);\n        emit DealFinalized(\n            agreementId,\n            msg.sender,\n            LexScrowStorage.getCorp(),\n            LexScrowStorage.getDealRegistry(),\n            false\n        );\n    }\n\n    /// @notice Voids an expired deal\n    /// @dev Voids the certificate and agreement for an expired deal\n    /// @param agreementId Unique identifier for the agreement\n    /// @param signer Address of the signer\n    /// @param signature Signature of the signer\n    function voidExpiredDeal(bytes32 agreementId, address signer, bytes memory signature) public {\n        Escrow storage deal = LexScrowStorage.getEscrow(agreementId);\n        if (block.timestamp <= deal.expiry) revert DealNotExpired();\n        ICyberAgreementRegistry(LexScrowStorage.getDealRegistry()).voidContractFor(agreementId, signer, signature);\n        for(uint256 i = 0; i < deal.corpAssets.length; i++) {\n            if(deal.corpAssets[i].tokenType == TokenType.ERC721) {\n                DealManagerStorage.getIssuanceManager().voidCertificate(\n                    deal.corpAssets[i].tokenAddress, \n                    deal.corpAssets[i].tokenId\n                );\n            }\n        }\n        if(deal.status == EscrowStatus.PAID) \n            voidAndRefund(agreementId);\n        else if(deal.status == EscrowStatus.PENDING)\n            voidEscrow(agreementId);\n    }\n\n    /// @notice Revokes a pending deal\n    /// @dev Can only be called for deals in pending status\n    /// @param agreementId Unique identifier for the agreement\n    /// @param signer Address of the signer\n    /// @param signature Signature of the signer\n    function revokeDeal(bytes32 agreementId, address signer, bytes memory signature) public {\n        if(LexScrowStorage.getEscrow(agreementId).status == EscrowStatus.PENDING) \n            ICyberAgreementRegistry(LexScrowStorage.getDealRegistry()).voidContractFor(agreementId, signer, signature);\n        else\n            revert DealNotPending();\n    }\n\n    /// @notice Signs to void a deal\n    /// @dev If the deal is paid, initiates refund process\n    /// @param agreementId Unique identifier for the agreement\n    /// @param signer Address of the signer\n    /// @param signature Signature of the signer\n    function signToVoid(bytes32 agreementId, address signer, bytes memory signature) public {\n        ICyberAgreementRegistry(LexScrowStorage.getDealRegistry()).voidContractFor(agreementId, signer, signature);\n        if(ICyberAgreementRegistry(LexScrowStorage.getDealRegistry()).isVoided(agreementId) && LexScrowStorage.getEscrow(agreementId).status == EscrowStatus.PAID)\n            voidAndRefund(agreementId);\n    }\n\n    /// @notice Adds a condition to a deal\n    /// @dev Can only be called by owner for pending deals\n    /// @param agreementId Unique identifier for the agreement\n    /// @param condition Address of the condition contract to add\n    function addCondition(bytes32 agreementId, address condition) public onlyOwner {\n        //make sure the contract is still pending\n        if(LexScrowStorage.getEscrow(agreementId).status != EscrowStatus.PENDING) revert DealNotPending();\n        //make sure the condition is not already in the list\n        ICondition[] storage conditions = LexScrowStorage.getConditionsByEscrow(agreementId);\n        for(uint256 i = 0; i < conditions.length; i++) {\n            if(conditions[i] == ICondition(condition)) revert ConditionAlreadyExists();\n        }\n        LexScrowStorage.addConditionToEscrow(agreementId, ICondition(condition));\n    }\n\n    /// @notice Removes a condition from a deal\n    /// @dev Can only be called by owner for pending deals\n    /// @param agreementId Unique identifier for the agreement\n    /// @param index Index of the condition to remove\n    function removeConditionAt(bytes32 agreementId, uint256 index) public onlyOwner {\n        //make sure the contract is still pending\n        if(LexScrowStorage.getEscrow(agreementId).status != EscrowStatus.PENDING) revert DealNotPending();\n        //make sure the condition is in the list\n        ICondition[] storage conditions = LexScrowStorage.getConditionsByEscrow(agreementId);\n        if(index >= conditions.length) revert ConditionDoesNotExist();\n\n        LexScrowStorage.removeConditionFromEscrow(agreementId, index);\n    }\n\n    /// @notice Sets the deal registry address\n    /// @dev Can only be called by owner\n    /// @param _dealRegistry New deal registry address\n    function setDealRegistry(address _dealRegistry) public onlyOwner {\n        LexScrowStorage.setDealRegistry(_dealRegistry);\n    }\n\n    /// @notice Sets the corporation address\n    /// @dev Can only be called by owner\n    /// @param _corp New corporation address\n    function setCorp(address _corp) public onlyOwner {\n        LexScrowStorage.setCorp(_corp);\n    }\n\n    /// @notice Sets the issuance manager address\n    /// @dev Can only be called by owner\n    /// @param _issuanceManager New issuance manager address\n    function setIssuanceManager(address _issuanceManager) public onlyOwner {\n        DealManagerStorage.setIssuanceManager(_issuanceManager);\n    }\n\n    /// @notice Gets the current issuance manager\n    /// @return IIssuanceManager The current issuance manager contract\n    function issuanceManager() public view returns (IIssuanceManager) {\n        return DealManagerStorage.getIssuanceManager();\n    }\n\n    /// @notice Gets the counter party values for an agreement\n    /// @param agreementId Unique identifier for the agreement\n    /// @return string[] Array of counter party values\n    function getCounterPartyValues(bytes32 agreementId) public view returns (string[] memory) {\n        return DealManagerStorage.getCounterPartyValues(agreementId);\n    }\n}\n"}, "dependencies/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\n     *\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\n     */\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\n        return INITIALIZABLE_STORAGE;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        bytes32 slot = _initializableStorageSlot();\n        assembly {\n            $.slot := slot\n        }\n    }\n}\n"}, "src/interfaces/IIssuanceManager.sol": {"content": "/*    .o.                                                                                             \n     .888.                                                                                            \n    .8\"888.                                                                                           \n   .8' `888.                                                                                          \n  .88ooo8888.                                                                                         \n .8'     `888.                                                                                        \no88o     o8888o                                                                                       \n                                                                                                      \n                                                                                                      \n                                                                                                      \nooo        ooooo               .             ooooo                  ooooooo  ooooo                    \n`88.       .888'             .o8             `888'                   `8888    d8'                     \n 888b     d'888   .ooooo.  .o888oo  .oooo.    888          .ooooo.     Y888..8P                       \n 8 Y88. .P  888  d88' `88b   888   `P  )88b   888         d88' `88b     `8888'                        \n 8  `888'   888  888ooo888   888    .oP\"888   888         888ooo888    .8PY888.                       \n 8    Y     888  888    .o   888 . d8(  888   888       o 888    .o   d8'  `888b                      \no8o        o888o `Y8bod8P'   \"888\" `Y888\"\"8o o888ooooood8 `Y8bod8P' o888o  o88888o                    \n                                                                                                      \n                                                                                                      \n                                                                                                      \n  .oooooo.                .o8                            .oooooo.                                     \n d8P'  `Y8b              \"888                           d8P'  `Y8b                                    \n888          oooo    ooo  888oooo.   .ooooo.  oooo d8b 888           .ooooo.  oooo d8b oo.ooooo.      \n888           `88.  .8'   d88' `88b d88' `88b `888\"\"8P 888          d88' `88b `888\"\"8P  888' `88b     \n888            `88..8'    888   888 888ooo888  888     888          888   888  888      888   888     \n`88b    ooo     `888'     888   888 888    .o  888     `88b    ooo  888   888  888      888   888 .o. \n `Y8bood8P'      .8'      `Y8bod8P' `Y8bod8P' d888b     `Y8bood8P'  `Y8bod8P' d888b     888bod8P' Y8P \n             .o..P'                                                                     888           \n             `Y8P'                                                                     o888o          \n_______________________________________________________________________________________________________\n\nAll software, documentation and other files and information in this repository (collectively, the \"Software\")\nare copyright MetaLeX Labs, Inc., a Delaware corporation.\n\nAll rights reserved.\n\nThe Software is proprietary and shall not, in part or in whole, be used, copied, modified, merged, published, \ndistributed, transmitted, sublicensed, sold, or otherwise used in any form or by any means, electronic or\nmechanical, including photocopying, recording, or by any information storage and retrieval system, \nexcept with the express prior written permission of the copyright holder.*/\n\npragma solidity ^0.8.30;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"./ICyberCorp.sol\";\nimport \"./ITransferRestrictionHook.sol\";\nimport \"../CyberCorpConstants.sol\";\nimport \"../storage/CyberCertPrinterStorage.sol\";\n\n//Adapter interface for custom auth roles. Allows extensibility for different auth protocols i.e. hats.\ninterface IIssuanceManager is IERC721, IERC721Enumerable, IERC721Metadata {\n\n    // Events\n    event CertificateCreated(uint256 indexed tokenId, address indexed investor, uint256 amount, uint256 cap);\n    event Converted(uint256 indexed oldTokenId, uint256 indexed newTokenId);\n    event CertificateSigned(uint256 indexed tokenId, string signatureURI);\n    event CertificateEndorsed(uint256 indexed tokenId, address indexed endorser, string signatureURI);\n    event HookStatusChanged(bool enabled);\n    event WhitelistUpdated(address indexed account, bool whitelisted);\n\n    // Issuance Manager Functions\n    function initialize(\n        address _auth,\n        address _CORP,\n        address _CyberCertPrinterImplementation,\n        address _uriBuilder,\n        address _upgradeFactory\n    ) external;\n\n    function createCertPrinter(\n        string[] memory _ledger,\n        string memory _name,\n        string memory _ticker,\n        string memory _certificateUri,\n        SecurityClass _securityClass,\n        SecuritySeries _securitySeries,\n        address _extension\n    ) external returns (address);\n\n    function createCert(\n        address certAddress,\n        address to,\n        CertificateDetails memory _details\n    ) external returns (uint256);\n\n    function assignCert(\n        address certAddress,\n        address from,\n        uint256 tokenId,\n        address investor,\n        CertificateDetails memory _details\n    ) external;\n\n    function createCertAndAssign(\n        address certAddress,\n        address investor,\n        CertificateDetails memory _details\n    ) external returns (uint256 tokenId);\n\n    function signCertificate(\n        address certAddress,\n        uint256 tokenId,\n        string calldata signatureURI\n    ) external;\n\n    function endorseCertificate(\n        address certAddress,\n        uint256 tokenId,\n        address endorser,\n        string calldata signatureURI\n    ) external;\n\n    function updateCertificateDetails(\n        address certAddress,\n        uint256 tokenId,\n        CertificateDetails memory _details\n    ) external;\n\n    function voidCertificate(\n        address certAddress,\n        uint256 tokenId\n    ) external;\n\n    function convert(\n        address certAddress,\n        uint256 tokenId,\n        address convertTo,\n        uint256 stockAmount\n    ) external;\n\n    function upgradeImplementation(\n        address _newImplementation\n    ) external;\n\n    function getBeaconImplementation() external view returns (address);\n\n    // Certificate Details Functions\n    function getCertificateDetails(\n        uint256 tokenId\n    ) external view returns (CertificateDetails memory);\n\n    function getEndorsementHistory(\n        uint256 tokenId,\n        uint256 index\n    ) external view returns (\n        address endorser,\n        string memory signatureURI,\n        uint256 timestamp\n    );\n\n    // Transfer Hook Functions\n    function setRestrictionHook(\n        uint256 _id,\n        address _hookAddress\n    ) external;\n\n    function setGlobalRestrictionHook(\n        address hookAddress\n    ) external;\n\n    function restrictionHooksById(\n        uint256 tokenId\n    ) external view returns (ITransferRestrictionHook);\n\n    function globalRestrictionHook() external view returns (ITransferRestrictionHook);\n\n    // Beacon Functions\n    function CyberCertPrinterBeacon() external view returns (address);\n    function CORP() external view returns (address);\n    function uriBuilder() external view returns (address);\n    function certifications(uint256) external view returns (address);\n    function companyName() external view returns (string memory);\n    function companyJurisdiction() external view returns (string memory);\n    function AUTH() external view returns (address);\n}"}, "src/libs/LexScroWLite.sol": {"content": "/*    .o.                                                                                             \n     .888.                                                                                            \n    .8\"888.                                                                                           \n   .8' `888.                                                                                          \n  .88ooo8888.                                                                                         \n .8'     `888.                                                                                        \no88o     o8888o                                                                                       \n                                                                                                      \n                                                                                                      \n                                                                                                      \nooo        ooooo               .             ooooo                  ooooooo  ooooo                    \n`88.       .888'             .o8             `888'                   `8888    d8'                     \n 888b     d'888   .ooooo.  .o888oo  .oooo.    888          .ooooo.     Y888..8P                       \n 8 Y88. .P  888  d88' `88b   888   `P  )88b   888         d88' `88b     `8888'                        \n 8  `888'   888  888ooo888   888    .oP\"888   888         888ooo888    .8PY888.                       \n 8    Y     888  888    .o   888 . d8(  888   888       o 888    .o   d8'  `888b                      \no8o        o888o `Y8bod8P'   \"888\" `Y888\"\"8o o888ooooood8 `Y8bod8P' o888o  o88888o                    \n                                                                                                      \n                                                                                                      \n                                                                                                      \n  .oooooo.                .o8                            .oooooo.                                     \n d8P'  `Y8b              \"888                           d8P'  `Y8b                                    \n888          oooo    ooo  888oooo.   .ooooo.  oooo d8b 888           .ooooo.  oooo d8b oo.ooooo.      \n888           `88.  .8'   d88' `88b d88' `88b `888\"\"8P 888          d88' `88b `888\"\"8P  888' `88b     \n888            `88..8'    888   888 888ooo888  888     888          888   888  888      888   888     \n`88b    ooo     `888'     888   888 888    .o  888     `88b    ooo  888   888  888      888   888 .o. \n `Y8bood8P'      .8'      `Y8bod8P' `Y8bod8P' d888b     `Y8bood8P'  `Y8bod8P' d888b     888bod8P' Y8P \n             .o..P'                                                                     888           \n             `Y8P'                                                                     o888o          \n_______________________________________________________________________________________________________\n\nAll software, documentation and other files and information in this repository (collectively, the \"Software\")\nare copyright MetaLeX Labs, Inc., a Delaware corporation.\n\nAll rights reserved.\n\nThe Software is proprietary and shall not, in part or in whole, be used, copied, modified, merged, published, \ndistributed, transmitted, sublicensed, sold, or otherwise used in any form or by any means, electronic or\nmechanical, including photocopying, recording, or by any information storage and retrieval system, \nexcept with the express prior written permission of the copyright holder.*/\n\npragma solidity ^0.8.30;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"../interfaces/ICyberCorp.sol\";\nimport \"../interfaces/ICyberAgreementRegistry.sol\";\nimport \"../interfaces/ICyberCertPrinter.sol\";\nimport \"../interfaces/ICondition.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport {LexScrowStorage, Escrow, Token, TokenType, EscrowStatus} from \"../storage/LexScrowStorage.sol\";\n\n\nabstract contract LexScroWLite is Initializable, ReentrancyGuard {\n    using LexScrowStorage for LexScrowStorage.LexScrowData;\n\n    error DealExpired();\n    error EscrowNotPending();\n    error EscrowNotPaid();\n    error CounterPartyNotSet();\n    error DealNotFullySigned();\n    error DealNotFinalized();\n    error DealAlreadyFinalized();\n    error DealNotVoided();\n    error DealNotPaid();\n    error DealVoided();\n\n    event DealVoidedAt(bytes32 indexed agreementId, address agreementRegistry, uint256 timestamp);\n    event DealPaidAt(bytes32 indexed agreementId, address agreementRegistry, uint256 timestamp);\n    event DealFinalizedAt(bytes32 indexed agreementId, address agreementRegistry, uint256 timestamp);\n\n    constructor() {\n    }\n\n    function __LexScroWLite_init(address _corp, address _dealRegistry) internal onlyInitializing {\n        LexScrowStorage.setCorp(_corp);\n        LexScrowStorage.setDealRegistry(_dealRegistry);\n    }\n\n    function createEscrow(bytes32 agreementId, address counterParty, Token[] memory corpAssets, Token[] memory buyerAssets, uint256 expiry) internal {\n        bytes memory blankSignature = abi.encodePacked(bytes32(0));\n        Escrow memory newEscrow = Escrow({\n            agreementId: agreementId,\n            counterParty: counterParty,\n            corpAssets: corpAssets,\n            buyerAssets: buyerAssets,\n            signature: blankSignature,\n            expiry: expiry,\n            status: EscrowStatus.PENDING\n        });\n        LexScrowStorage.setEscrow(agreementId, newEscrow);\n    }\n\n    function updateEscrow(bytes32 agreementId, address counterParty, string memory buyerName) internal {\n        Escrow storage escrow = LexScrowStorage.getEscrow(agreementId);\n        escrow.counterParty = counterParty;\n\n        Endorsement memory newEndorsement = Endorsement(\n            address(this),\n            block.timestamp,\n            escrow.signature,\n            LexScrowStorage.getDealRegistry(),\n            agreementId,\n            escrow.counterParty,\n            buyerName\n        );\n        for(uint256 i = 0; i < escrow.corpAssets.length; i++) {\n            if(escrow.corpAssets[i].tokenType == TokenType.ERC721) {\n                ICyberCertPrinter(escrow.corpAssets[i].tokenAddress).addEndorsement(escrow.corpAssets[i].tokenId, newEndorsement);\n            }\n        }\n    }\n\n    function handleCounterPartyPayment(bytes32 agreementId) internal {\n        Escrow storage escrow = LexScrowStorage.getEscrow(agreementId);\n        if(escrow.status != EscrowStatus.PENDING) revert EscrowNotPending();\n        if(escrow.counterParty == address(0)) revert CounterPartyNotSet();\n\n        for(uint256 i = 0; i < escrow.buyerAssets.length; i++) {\n            if(escrow.buyerAssets[i].tokenType == TokenType.ERC20) {\n                IERC20(escrow.buyerAssets[i].tokenAddress).transferFrom(escrow.counterParty, address(this), escrow.buyerAssets[i].amount);\n            }\n            else if(escrow.buyerAssets[i].tokenType == TokenType.ERC721) {\n                IERC721(escrow.buyerAssets[i].tokenAddress).safeTransferFrom(escrow.counterParty, address(this), escrow.buyerAssets[i].tokenId);\n            }\n            else if(escrow.buyerAssets[i].tokenType == TokenType.ERC1155) {\n                IERC1155(escrow.buyerAssets[i].tokenAddress).safeTransferFrom(escrow.counterParty, address(this), escrow.buyerAssets[i].tokenId, escrow.buyerAssets[i].amount, \"\");\n            }\n        }\n\n        emit DealPaidAt(agreementId, LexScrowStorage.getDealRegistry(), block.timestamp);\n        escrow.status = EscrowStatus.PAID;\n    }\n\n    function voidAndRefund(bytes32 agreementId) internal nonReentrant {\n        Escrow storage escrow = LexScrowStorage.getEscrow(agreementId);\n        if(escrow.status != EscrowStatus.PAID) revert EscrowNotPaid();\n        if(!ICyberAgreementRegistry(LexScrowStorage.getDealRegistry()).isVoided(agreementId)) revert DealNotVoided();\n\n        // Refund buyer assets first\n        for(uint256 i = 0; i < escrow.buyerAssets.length; i++) {\n            if(escrow.buyerAssets[i].tokenType == TokenType.ERC20) {\n                IERC20(escrow.buyerAssets[i].tokenAddress).transfer(escrow.counterParty, escrow.buyerAssets[i].amount);\n            }\n            else if(escrow.buyerAssets[i].tokenType == TokenType.ERC721) {\n                IERC721(escrow.buyerAssets[i].tokenAddress).safeTransferFrom(address(this), escrow.counterParty, escrow.buyerAssets[i].tokenId);\n            }\n            else if(escrow.buyerAssets[i].tokenType == TokenType.ERC1155) {\n                IERC1155(escrow.buyerAssets[i].tokenAddress).safeTransferFrom(address(this), escrow.counterParty, escrow.buyerAssets[i].tokenId, escrow.buyerAssets[i].amount, \"\");\n            }\n        }\n\n        voidEscrow(agreementId);\n    }\n\n    function finalizeEscrow(bytes32 agreementId) internal nonReentrant {\n        Escrow storage escrow = LexScrowStorage.getEscrow(agreementId);\n\n        // Check all conditions before proceeding\n        if(block.timestamp > escrow.expiry) revert DealExpired();\n        if(escrow.status != EscrowStatus.PAID) revert EscrowNotPaid();\n\n        // Update state before external calls\n        escrow.status = EscrowStatus.FINALIZED;\n        emit DealFinalizedAt(agreementId, LexScrowStorage.getDealRegistry(), block.timestamp);\n\n        // Transfer buyer assets to company\n        for(uint256 i = 0; i < escrow.buyerAssets.length; i++) {\n            if(escrow.buyerAssets[i].tokenType == TokenType.ERC20) {\n                IERC20(escrow.buyerAssets[i].tokenAddress).transfer(ICyberCorp(LexScrowStorage.getCorp()).companyPayable(), escrow.buyerAssets[i].amount);\n            }\n            else if(escrow.buyerAssets[i].tokenType == TokenType.ERC721) {\n                IERC721(escrow.buyerAssets[i].tokenAddress).safeTransferFrom(address(this), ICyberCorp(LexScrowStorage.getCorp()).companyPayable(), escrow.buyerAssets[i].tokenId);\n            }\n            else if(escrow.buyerAssets[i].tokenType == TokenType.ERC1155) {\n                IERC1155(escrow.buyerAssets[i].tokenAddress).safeTransferFrom(address(this), ICyberCorp(LexScrowStorage.getCorp()).companyPayable(), escrow.buyerAssets[i].tokenId, escrow.buyerAssets[i].amount, \"\");\n            }\n        }\n\n        // Transfer corp assets to counter party\n        for(uint256 i = 0; i < escrow.corpAssets.length; i++) {\n            if(escrow.corpAssets[i].tokenType == TokenType.ERC20) {\n                IERC20(escrow.corpAssets[i].tokenAddress).transfer(escrow.counterParty, escrow.corpAssets[i].amount);\n            }\n            else if(escrow.corpAssets[i].tokenType == TokenType.ERC721) {\n                IERC721(escrow.corpAssets[i].tokenAddress).safeTransferFrom(address(this), escrow.counterParty, escrow.corpAssets[i].tokenId);\n            }\n            else if(escrow.corpAssets[i].tokenType == TokenType.ERC1155) {\n                IERC1155(escrow.corpAssets[i].tokenAddress).safeTransferFrom(address(this), escrow.counterParty, escrow.corpAssets[i].tokenId, escrow.corpAssets[i].amount, \"\");\n            }\n        }\n    }\n\n    function conditionCheck(bytes32 agreementId) public view returns (bool) {\n        ICondition[] storage conditions = LexScrowStorage.getConditionsByEscrow(agreementId);\n        //convert bytes32 to bytes\n        bytes memory agreementIdBytes = abi.encodePacked(agreementId);\n\n        for(uint256 i = 0; i < conditions.length; i++) {\n            if(!ICondition(conditions[i]).checkCondition(address(this), msg.sig, agreementIdBytes))\n                return false;\n        }\n        return true;\n    }\n\n    function voidEscrow(bytes32 agreementId) internal {\n        Escrow storage escrow = LexScrowStorage.getEscrow(agreementId);\n        escrow.status = EscrowStatus.VOIDED;\n        emit DealVoidedAt(agreementId, LexScrowStorage.getDealRegistry(), block.timestamp);\n    }\n\n    function getEscrowDetails(bytes32 agreementId) public view returns (Escrow memory) {\n        return LexScrowStorage.getEscrow(agreementId);\n    }\n\n    //receiver erc721s\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    //receiver erc1155s\n    function onERC1155Received(address operator, address from, uint256 tokenId, uint256 amount, bytes calldata data) external returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n}\n"}, "src/libs/auth.sol": {"content": "/*    .o.                                                                                             \n     .888.                                                                                            \n    .8\"888.                                                                                           \n   .8' `888.                                                                                          \n  .88ooo8888.                                                                                         \n .8'     `888.                                                                                        \no88o     o8888o                                                                                       \n                                                                                                      \n                                                                                                      \n                                                                                                      \nooo        ooooo               .             ooooo                  ooooooo  ooooo                    \n`88.       .888'             .o8             `888'                   `8888    d8'                     \n 888b     d'888   .ooooo.  .o888oo  .oooo.    888          .ooooo.     Y888..8P                       \n 8 Y88. .P  888  d88' `88b   888   `P  )88b   888         d88' `88b     `8888'                        \n 8  `888'   888  888ooo888   888    .oP\"888   888         888ooo888    .8PY888.                       \n 8    Y     888  888    .o   888 . d8(  888   888       o 888    .o   d8'  `888b                      \no8o        o888o `Y8bod8P'   \"888\" `Y888\"\"8o o888ooooood8 `Y8bod8P' o888o  o88888o                    \n                                                                                                      \n                                                                                                      \n                                                                                                      \n  .oooooo.                .o8                            .oooooo.                                     \n d8P'  `Y8b              \"888                           d8P'  `Y8b                                    \n888          oooo    ooo  888oooo.   .ooooo.  oooo d8b 888           .ooooo.  oooo d8b oo.ooooo.      \n888           `88.  .8'   d88' `88b d88' `88b `888\"\"8P 888          d88' `88b `888\"\"8P  888' `88b     \n888            `88..8'    888   888 888ooo888  888     888          888   888  888      888   888     \n`88b    ooo     `888'     888   888 888    .o  888     `88b    ooo  888   888  888      888   888 .o. \n `Y8bood8P'      .8'      `Y8bod8P' `Y8bod8P' d888b     `Y8bood8P'  `Y8bod8P' d888b     888bod8P' Y8P \n             .o..P'                                                                     888           \n             `Y8P'                                                                     o888o          \n_______________________________________________________________________________________________________\n\nAll software, documentation and other files and information in this repository (collectively, the \"Software\")\nare copyright MetaLeX Labs, Inc., a Delaware corporation.\n\nAll rights reserved.\n\nThe Software is proprietary and shall not, in part or in whole, be used, copied, modified, merged, published, \ndistributed, transmitted, sublicensed, sold, or otherwise used in any form or by any means, electronic or\nmechanical, including photocopying, recording, or by any information storage and retrieval system, \nexcept with the express prior written permission of the copyright holder.*/\n\npragma solidity ^0.8.30;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"../interfaces/IAuthAdapter.sol\";\n\n/// @title  BorgAuth\n/// @author MetaLeX Labs, Inc.\n/// @notice ACL with extensibility for different role hierarchies and custom adapters\ncontract BorgAuth is Initializable {\n    //constants built-in roles, authority works as a hierarchy\n    uint256 public constant OWNER_ROLE = 99;\n    uint256 public constant ADMIN_ROLE = 98;\n    uint256 public constant PRIVILEGED_ROLE = 97;\n    address public pendingOwner;\n\n    //mappings and events\n    mapping(address => uint256) public userRoles;\n    mapping(uint256 => address) public roleAdapters;\n\n    event RoleUpdated(address indexed user, uint256 role);\n    event AdapterUpdated(uint256 indexed role, address adapter);\n\n    /// @dev user not authorized with given role\n    error BorgAuth_NotAuthorized(uint256 role, address user);\n    error BorgAuth_SetAnotherOwner();\n    error BorgAuth_ZeroAddress();\n\n    /// @notice Empty constructor for implementation contract\n    constructor(address owner) {\n        initialize(owner);\n    }\n\n    /// @notice Initializer replacing the constructor - sets the deployer/initializer as owner\n    /// @dev Use this instead of constructor when deployed behind a proxy\n    function initialize(address _owner) public initializer {\n        _updateRole(_owner, OWNER_ROLE);\n    }\n\n    /// @notice update role for user\n    /// @param user address of user\n    /// @param role role to update\n    function updateRole(\n        address user,\n        uint256 role\n    ) external {\n         onlyRole(OWNER_ROLE, msg.sender);\n        _updateRole(user, role);\n    }\n    \n    /// @notice initialize ownership transfer\n    /// @param newOwner address of new owner\n    function initTransferOwnership(address newOwner) external {\n        if (newOwner == address(0) || newOwner == msg.sender) revert BorgAuth_ZeroAddress();\n        onlyRole(OWNER_ROLE, msg.sender);\n        pendingOwner = newOwner;\n    }\n\n    /// @notice accept ownership transfer\n    function acceptOwnership() external {\n        if (msg.sender != pendingOwner) revert BorgAuth_NotAuthorized(OWNER_ROLE, msg.sender);\n        _updateRole(pendingOwner, OWNER_ROLE);\n        pendingOwner = address(0);\n        emit RoleUpdated(pendingOwner, OWNER_ROLE);\n    }\n\n    /// @notice function to purposefully revoke all roles from owner, rendering subsequent role updates impossible\n    /// @dev this function is intended for use to remove admin controls from subsequent contracts using this auth\n    function zeroOwner() external {\n        onlyRole(OWNER_ROLE, msg.sender);\n        _updateRole(msg.sender, 0);\n    }\n\n    /// @notice set adapter for role\n    /// @param _role role to set adapter for\n    /// @param _adapter address of adapter\n    function setRoleAdapter(uint256 _role, address _adapter) external {\n        onlyRole(OWNER_ROLE, msg.sender);\n        roleAdapters[_role] = _adapter;\n        emit AdapterUpdated(_role, _adapter);\n    }\n\n    /// @notice check role for user, revert if not authorized\n    /// @param user address of user\n    /// @param role of user\n    function onlyRole(uint256 role, address user) public view {\n        uint256 authorized = userRoles[user];\n\n        if (authorized < role) {\n            address adapter = roleAdapters[role];\n            if (adapter != address(0)) \n                if (IAuthAdapter(adapter).isAuthorized(user) >= role) \n                    return;\n            revert BorgAuth_NotAuthorized(role, user);\n        }\n    }\n\n    /// @notice check role for user, revert if not authorized\n    /// @param user address of user\n    /// @param role of user\n    function matchRole(uint256 role, address user) public view {\n        uint256 authorized = userRoles[user];\n\n        if (authorized != role) {\n            address adapter = roleAdapters[role];\n            if (adapter != address(0)) \n                if (IAuthAdapter(adapter).isAuthorized(user) == role) \n                    return;\n            revert BorgAuth_NotAuthorized(role, user);\n        }\n    }\n\n    /// @notice internal function to add a role to a user\n    /// @param role role to update\n    /// @param user address of user\n    function _updateRole(\n        address user,\n        uint256 role\n    ) internal {\n        userRoles[user] = role;\n        emit RoleUpdated(user, role);\n    }\n}\n\n/// @title BorgAuthACL\n/// @notice ACL with modifiers for different roles\nabstract contract BorgAuthACL is Initializable {\n    //BorgAuth instance\n    BorgAuth public AUTH;\n\n    // @dev zero address error\n    error BorgAuthACL_ZeroAddress();\n\n    /// @notice Empty constructor for implementation contract\n    constructor() {\n    }\n\n    /// @notice Initializer for BorgAuthACL\n    /// @param _auth Address of the BorgAuth contract\n    function __BorgAuthACL_init(address _auth) internal onlyInitializing {\n        if(_auth == address(0)) revert BorgAuthACL_ZeroAddress();\n        AUTH = BorgAuth(_auth);\n    }\n\n    function userRoles(address user) public view returns (uint256) {\n        return AUTH.userRoles(user);\n    }\n\n    //common modifiers and general access control onlyRole\n    modifier onlyOwner() {\n        AUTH.onlyRole(AUTH.OWNER_ROLE(), msg.sender);\n        _;\n    }\n\n    modifier onlyAdmin() {\n        AUTH.onlyRole(AUTH.ADMIN_ROLE(), msg.sender);\n        _;\n    }\n\n    modifier onlyPriv() {\n        AUTH.onlyRole(AUTH.PRIVILEGED_ROLE(), msg.sender);\n        _;\n    }\n\n    modifier onlyRole(uint256 _role) {\n        AUTH.onlyRole(_role, msg.sender);\n        _;\n    }\n\n    modifier matchRole(uint256 _role) {\n        AUTH.matchRole(_role, msg.sender);\n        _;\n    }\n}"}, "src/storage/DealManagerStorage.sol": {"content": "/*    .o.                                                                                             \n     .888.                                                                                            \n    .8\"888.                                                                                           \n   .8' `888.                                                                                          \n  .88ooo8888.                                                                                         \n .8'     `888.                                                                                        \no88o     o8888o                                                                                       \n                                                                                                      \n                                                                                                      \n                                                                                                      \nooo        ooooo               .             ooooo                  ooooooo  ooooo                    \n`88.       .888'             .o8             `888'                   `8888    d8'                     \n 888b     d'888   .ooooo.  .o888oo  .oooo.    888          .ooooo.     Y888..8P                       \n 8 Y88. .P  888  d88' `88b   888   `P  )88b   888         d88' `88b     `8888'                        \n 8  `888'   888  888ooo888   888    .oP\"888   888         888ooo888    .8PY888.                       \n 8    Y     888  888    .o   888 . d8(  888   888       o 888    .o   d8'  `888b                      \no8o        o888o `Y8bod8P'   \"888\" `Y888\"\"8o o888ooooood8 `Y8bod8P' o888o  o88888o                    \n                                                                                                      \n                                                                                                      \n                                                                                                      \n  .oooooo.                .o8                            .oooooo.                                     \n d8P'  `Y8b              \"888                           d8P'  `Y8b                                    \n888          oooo    ooo  888oooo.   .ooooo.  oooo d8b 888           .ooooo.  oooo d8b oo.ooooo.      \n888           `88.  .8'   d88' `88b d88' `88b `888\"\"8P 888          d88' `88b `888\"\"8P  888' `88b     \n888            `88..8'    888   888 888ooo888  888     888          888   888  888      888   888     \n`88b    ooo     `888'     888   888 888    .o  888     `88b    ooo  888   888  888      888   888 .o. \n `Y8bood8P'      .8'      `Y8bod8P' `Y8bod8P' d888b     `Y8bood8P'  `Y8bod8P' d888b     888bod8P' Y8P \n             .o..P'                                                                     888           \n             `Y8P'                                                                     o888o          \n_______________________________________________________________________________________________________\n\nAll software, documentation and other files and information in this repository (collectively, the \"Software\")\nare copyright MetaLeX Labs, Inc., a Delaware corporation.\n\nAll rights reserved.\n\nThe Software is proprietary and shall not, in part or in whole, be used, copied, modified, merged, published, \ndistributed, transmitted, sublicensed, sold, or otherwise used in any form or by any means, electronic or\nmechanical, including photocopying, recording, or by any information storage and retrieval system, \nexcept with the express prior written permission of the copyright holder.*/\n\npragma solidity ^0.8.30;\n\nimport \"../interfaces/IIssuanceManager.sol\";\n\n/// @title DealManagerStorage\n/// @notice Storage library for the DealManager contract that handles persistent data storage\n/// @dev Uses the unstructured storage pattern to manage deal-related data\nlibrary DealManagerStorage {\n    // Storage slot for our struct\n    bytes32 constant STORAGE_POSITION = keccak256(\"cybercorp.deal.manager.storage.v1\");\n\n    /// @notice Main storage layout struct that holds all deal manager data\n    /// @dev Uses unstructured storage pattern to avoid storage collisions\n    struct DealManagerData {\n        /// @notice Reference to the issuance manager contract\n        IIssuanceManager issuanceManager;\n        address upgradeFactory;\n        \n        /// @notice Mapping from agreement IDs to their counter party values\n        mapping(bytes32 => string[]) counterPartyValues;\n    }\n\n    /// @notice Retrieves the storage reference for the DealManagerData struct\n    /// @dev Uses assembly to compute the storage position\n    /// @return ds Reference to the DealManagerData struct in storage\n    function dealManagerStorage() internal pure returns (DealManagerData storage ds) {\n        bytes32 position = STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    /// @notice Retrieves counter party values for a specific agreement\n    /// @dev Accesses the storage mapping directly\n    /// @param agreementId The unique identifier of the agreement\n    /// @return string[] Array of counter party values\n    function getCounterPartyValues(bytes32 agreementId) internal view returns (string[] storage) {\n        return dealManagerStorage().counterPartyValues[agreementId];\n    }\n\n    /// @notice Retrieves the current issuance manager\n    /// @dev Returns the stored issuance manager reference\n    /// @return IIssuanceManager The current issuance manager contract\n    function getIssuanceManager() internal view returns (IIssuanceManager) {\n        return dealManagerStorage().issuanceManager;\n    }\n\n    /// @notice Sets counter party values for a specific agreement\n    /// @dev Updates the storage mapping with new values\n    /// @param agreementId The unique identifier of the agreement\n    /// @param values Array of counter party values to store\n    function setCounterPartyValues(bytes32 agreementId, string[] memory values) internal {\n        dealManagerStorage().counterPartyValues[agreementId] = values;\n    }\n\n    /// @notice Updates the issuance manager reference\n    /// @dev Sets a new issuance manager contract address\n    /// @param _issuanceManager Address of the new issuance manager contract\n    function setIssuanceManager(address _issuanceManager) internal {\n        dealManagerStorage().issuanceManager = IIssuanceManager(_issuanceManager);\n    }\n\n    function setUpgradeFactory(address _upgradeFactory) internal {\n        dealManagerStorage().upgradeFactory = _upgradeFactory;\n    }\n\n    function getUpgradeFactory() external view returns (address) {\n        return dealManagerStorage().upgradeFactory;\n    }\n} "}, "src/storage/BorgAuthStorage.sol": {"content": "/*    .o.                                                                                             \n     .888.                                                                                            \n    .8\"888.                                                                                           \n   .8' `888.                                                                                          \n  .88ooo8888.                                                                                         \n .8'     `888.                                                                                        \no88o     o8888o                                                                                       \n                                                                                                      \n                                                                                                      \n                                                                                                      \nooo        ooooo               .             ooooo                  ooooooo  ooooo                    \n`88.       .888'             .o8             `888'                   `8888    d8'                     \n 888b     d'888   .ooooo.  .o888oo  .oooo.    888          .ooooo.     Y888..8P                       \n 8 Y88. .P  888  d88' `88b   888   `P  )88b   888         d88' `88b     `8888'                        \n 8  `888'   888  888ooo888   888    .oP\"888   888         888ooo888    .8PY888.                       \n 8    Y     888  888    .o   888 . d8(  888   888       o 888    .o   d8'  `888b                      \no8o        o888o `Y8bod8P'   \"888\" `Y888\"\"8o o888ooooood8 `Y8bod8P' o888o  o88888o                    \n                                                                                                      \n                                                                                                      \n                                                                                                      \n  .oooooo.                .o8                            .oooooo.                                     \n d8P'  `Y8b              \"888                           d8P'  `Y8b                                    \n888          oooo    ooo  888oooo.   .ooooo.  oooo d8b 888           .ooooo.  oooo d8b oo.ooooo.      \n888           `88.  .8'   d88' `88b d88' `88b `888\"\"8P 888          d88' `88b `888\"\"8P  888' `88b     \n888            `88..8'    888   888 888ooo888  888     888          888   888  888      888   888     \n`88b    ooo     `888'     888   888 888    .o  888     `88b    ooo  888   888  888      888   888 .o. \n `Y8bood8P'      .8'      `Y8bod8P' `Y8bod8P' d888b     `Y8bood8P'  `Y8bod8P' d888b     888bod8P' Y8P \n             .o..P'                                                                     888           \n             `Y8P'                                                                     o888o          \n_______________________________________________________________________________________________________\n\nAll software, documentation and other files and information in this repository (collectively, the \"Software\")\nare copyright MetaLeX Labs, Inc., a Delaware corporation.\n\nAll rights reserved.\n\nThe Software is proprietary and shall not, in part or in whole, be used, copied, modified, merged, published, \ndistributed, transmitted, sublicensed, sold, or otherwise used in any form or by any means, electronic or\nmechanical, including photocopying, recording, or by any information storage and retrieval system, \nexcept with the express prior written permission of the copyright holder.*/\n\npragma solidity ^0.8.30;\n\nlibrary BorgAuthStorage {\n    // Storage slot for our struct\n    bytes32 constant STORAGE_POSITION = keccak256(\"cybercorp.borgauth.storage.v1\");\n\n    // Main storage layout struct\n    struct BorgAuthData {\n        address AUTH;\n    }\n\n    // Returns the storage layout\n    function borgAuthStorage() internal pure returns (BorgAuthData storage ds) {\n        bytes32 position = STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    // Getters\n    function getAuth() internal view returns (address) {\n        return borgAuthStorage().AUTH;\n    }\n\n    // Setters\n    function setAuth(address _auth) internal {\n        borgAuthStorage().AUTH = _auth;\n    }\n} "}, "dependencies/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC-721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"}, "dependencies/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"}, "dependencies/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"}, "src/interfaces/ICyberCorp.sol": {"content": "/*    .o.                                                                                             \n     .888.                                                                                            \n    .8\"888.                                                                                           \n   .8' `888.                                                                                          \n  .88ooo8888.                                                                                         \n .8'     `888.                                                                                        \no88o     o8888o                                                                                       \n                                                                                                      \n                                                                                                      \n                                                                                                      \nooo        ooooo               .             ooooo                  ooooooo  ooooo                    \n`88.       .888'             .o8             `888'                   `8888    d8'                     \n 888b     d'888   .ooooo.  .o888oo  .oooo.    888          .ooooo.     Y888..8P                       \n 8 Y88. .P  888  d88' `88b   888   `P  )88b   888         d88' `88b     `8888'                        \n 8  `888'   888  888ooo888   888    .oP\"888   888         888ooo888    .8PY888.                       \n 8    Y     888  888    .o   888 . d8(  888   888       o 888    .o   d8'  `888b                      \no8o        o888o `Y8bod8P'   \"888\" `Y888\"\"8o o888ooooood8 `Y8bod8P' o888o  o88888o                    \n                                                                                                      \n                                                                                                      \n                                                                                                      \n  .oooooo.                .o8                            .oooooo.                                     \n d8P'  `Y8b              \"888                           d8P'  `Y8b                                    \n888          oooo    ooo  888oooo.   .ooooo.  oooo d8b 888           .ooooo.  oooo d8b oo.ooooo.      \n888           `88.  .8'   d88' `88b d88' `88b `888\"\"8P 888          d88' `88b `888\"\"8P  888' `88b     \n888            `88..8'    888   888 888ooo888  888     888          888   888  888      888   888     \n`88b    ooo     `888'     888   888 888    .o  888     `88b    ooo  888   888  888      888   888 .o. \n `Y8bood8P'      .8'      `Y8bod8P' `Y8bod8P' d888b     `Y8bood8P'  `Y8bod8P' d888b     888bod8P' Y8P \n             .o..P'                                                                     888           \n             `Y8P'                                                                     o888o          \n_______________________________________________________________________________________________________\n\nAll software, documentation and other files and information in this repository (collectively, the \"Software\")\nare copyright MetaLeX Labs, Inc., a Delaware corporation.\n\nAll rights reserved.\n\nThe Software is proprietary and shall not, in part or in whole, be used, copied, modified, merged, published, \ndistributed, transmitted, sublicensed, sold, or otherwise used in any form or by any means, electronic or\nmechanical, including photocopying, recording, or by any information storage and retrieval system, \nexcept with the express prior written permission of the copyright holder.*/\n\nimport {CompanyOfficer} from \"../CyberCorpConstants.sol\";\n\npragma solidity ^0.8.30;\n\ninterface ICyberCorp {\n    function initialize(\n        address _auth,\n        string memory _cyberCORPName,\n        string memory _cyberCORPType,\n        string memory _cyberCORPJurisdiction,\n        string memory _cyberCORPContactDetails,\n        string memory _defaultDisputeResolution,\n        address _issuanceManager,\n        address _companyPayable,\n        CompanyOfficer memory _officer,\n        address _upgradeFactory \n    ) external;\n    function cyberCORPName() external view returns (string memory);\n    function cyberCORPJurisdiction() external view returns (string memory);\n    function cyberCORPContactDetails() external view returns (string memory);\n    function defaultDisputeResolution() external view returns (string memory);\n    function companyPayable() external view returns (address);\n    function companyOfficers() external view returns (address[] memory);\n    function cyberCORPType() external view returns (string memory);\n    function dealManager() external view returns (address);\n    function setDealManager(address _dealManager) external;\n\n}\n\n"}, "src/interfaces/ITransferRestrictionHook.sol": {"content": "/*    .o.                                                                                             \n     .888.                                                                                            \n    .8\"888.                                                                                           \n   .8' `888.                                                                                          \n  .88ooo8888.                                                                                         \n .8'     `888.                                                                                        \no88o     o8888o                                                                                       \n                                                                                                      \n                                                                                                      \n                                                                                                      \nooo        ooooo               .             ooooo                  ooooooo  ooooo                    \n`88.       .888'             .o8             `888'                   `8888    d8'                     \n 888b     d'888   .ooooo.  .o888oo  .oooo.    888          .ooooo.     Y888..8P                       \n 8 Y88. .P  888  d88' `88b   888   `P  )88b   888         d88' `88b     `8888'                        \n 8  `888'   888  888ooo888   888    .oP\"888   888         888ooo888    .8PY888.                       \n 8    Y     888  888    .o   888 . d8(  888   888       o 888    .o   d8'  `888b                      \no8o        o888o `Y8bod8P'   \"888\" `Y888\"\"8o o888ooooood8 `Y8bod8P' o888o  o88888o                    \n                                                                                                      \n                                                                                                      \n                                                                                                      \n  .oooooo.                .o8                            .oooooo.                                     \n d8P'  `Y8b              \"888                           d8P'  `Y8b                                    \n888          oooo    ooo  888oooo.   .ooooo.  oooo d8b 888           .ooooo.  oooo d8b oo.ooooo.      \n888           `88.  .8'   d88' `88b d88' `88b `888\"\"8P 888          d88' `88b `888\"\"8P  888' `88b     \n888            `88..8'    888   888 888ooo888  888     888          888   888  888      888   888     \n`88b    ooo     `888'     888   888 888    .o  888     `88b    ooo  888   888  888      888   888 .o. \n `Y8bood8P'      .8'      `Y8bod8P' `Y8bod8P' d888b     `Y8bood8P'  `Y8bod8P' d888b     888bod8P' Y8P \n             .o..P'                                                                     888           \n             `Y8P'                                                                     o888o          \n_______________________________________________________________________________________________________\n\nAll software, documentation and other files and information in this repository (collectively, the \"Software\")\nare copyright MetaLeX Labs, Inc., a Delaware corporation.\n\nAll rights reserved.\n\nThe Software is proprietary and shall not, in part or in whole, be used, copied, modified, merged, published, \ndistributed, transmitted, sublicensed, sold, or otherwise used in any form or by any means, electronic or\nmechanical, including photocopying, recording, or by any information storage and retrieval system, \nexcept with the express prior written permission of the copyright holder.*/\n\npragma solidity ^0.8.30;\n\n/// @title ITransferRestrictionHook\n/// @notice Interface for transfer restriction hooks\ninterface ITransferRestrictionHook {\n    /// @notice Check if a transfer is allowed\n    /// @param from The address tokens are being transferred from\n    /// @param to The address tokens are being transferred to\n    /// @param tokenId The ID of the token being transferred\n    /// @param data Additional data passed to the hook\n    /// @return allowed Whether the transfer is allowed\n    /// @return reason The reason if the transfer is not allowed\n    function checkTransferRestriction(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) external view returns (bool allowed, string memory reason);\n} "}, "src/CyberCorpConstants.sol": {"content": "/*    .o.                                                                                             \n     .888.                                                                                            \n    .8\"888.                                                                                           \n   .8' `888.                                                                                          \n  .88ooo8888.                                                                                         \n .8'     `888.                                                                                        \no88o     o8888o                                                                                       \n                                                                                                      \n                                                                                                      \n                                                                                                      \nooo        ooooo               .             ooooo                  ooooooo  ooooo                    \n`88.       .888'             .o8             `888'                   `8888    d8'                     \n 888b     d'888   .ooooo.  .o888oo  .oooo.    888          .ooooo.     Y888..8P                       \n 8 Y88. .P  888  d88' `88b   888   `P  )88b   888         d88' `88b     `8888'                        \n 8  `888'   888  888ooo888   888    .oP\"888   888         888ooo888    .8PY888.                       \n 8    Y     888  888    .o   888 . d8(  888   888       o 888    .o   d8'  `888b                      \no8o        o888o `Y8bod8P'   \"888\" `Y888\"\"8o o888ooooood8 `Y8bod8P' o888o  o88888o                    \n                                                                                                      \n                                                                                                      \n                                                                                                      \n  .oooooo.                .o8                            .oooooo.                                     \n d8P'  `Y8b              \"888                           d8P'  `Y8b                                    \n888          oooo    ooo  888oooo.   .ooooo.  oooo d8b 888           .ooooo.  oooo d8b oo.ooooo.      \n888           `88.  .8'   d88' `88b d88' `88b `888\"\"8P 888          d88' `88b `888\"\"8P  888' `88b     \n888            `88..8'    888   888 888ooo888  888     888          888   888  888      888   888     \n`88b    ooo     `888'     888   888 888    .o  888     `88b    ooo  888   888  888      888   888 .o. \n `Y8bood8P'      .8'      `Y8bod8P' `Y8bod8P' d888b     `Y8bood8P'  `Y8bod8P' d888b     888bod8P' Y8P \n             .o..P'                                                                     888           \n             `Y8P'                                                                     o888o          \n_______________________________________________________________________________________________________\n\nAll software, documentation and other files and information in this repository (collectively, the \"Software\")\nare copyright MetaLeX Labs, Inc., a Delaware corporation.\n\nAll rights reserved.\n\nThe Software is proprietary and shall not, in part or in whole, be used, copied, modified, merged, published, \ndistributed, transmitted, sublicensed, sold, or otherwise used in any form or by any means, electronic or\nmechanical, including photocopying, recording, or by any information storage and retrieval system, \nexcept with the express prior written permission of the copyright holder.*/\n\npragma solidity ^0.8.30;\n\nenum SecurityClass {\n    SAFE,\n    SAFT,\n    SAFTE,\n    TokenPurchaseAgreement,\n    TokenWarrant,\n    ConvertibleNote,\n    CommonStock,\n    StockOption,\n    PreferredStock,\n    RestrictedStockPurchaseAgreement,\n    RestrictedStockUnit,\n    RestrictedTokenPurchaseAgreement,\n    RestrictedTokenUnit\n}\n\nenum SecuritySeries {\n    SeriesPreSeed,\n    SeriesSeed,\n    SeriesA,\n    SeriesB,\n    SeriesC,\n    SeriesD,\n    SeriesE,\n    SeriesF,\n    NA\n}\n\nenum SecurityStatus {\n    Unassigned,\n    Assigned,\n    Void\n}\n\nstruct CompanyOfficer {\n    address eoa;\n    string name;\n    string contact;\n    string title;\n}\n\nenum ExercisePriceMethod {\n    perToken,\n    perWarrant\n}\n\nenum TokenCalculationMethod {\n    equityProRataToCompanyReserve,\n    equityProRataToTokenSupply \n}\n\nenum UnlockStartTimeType {\n    tokenWarrentTime,\n    tgeTime,\n    setTime\n}\n\nenum UnlockingIntervalType {\n    blockly,\n    secondly,\n    hourly,\n    daily,\n    monthly\n}\n\n\n\n\n\n\n"}, "src/storage/CyberCertPrinterStorage.sol": {"content": "/*    .o.                                                                                             \n     .888.                                                                                            \n    .8\"888.                                                                                           \n   .8' `888.                                                                                          \n  .88ooo8888.                                                                                         \n .8'     `888.                                                                                        \no88o     o8888o                                                                                       \n                                                                                                      \n                                                                                                      \n                                                                                                      \nooo        ooooo               .             ooooo                  ooooooo  ooooo                    \n`88.       .888'             .o8             `888'                   `8888    d8'                     \n 888b     d'888   .ooooo.  .o888oo  .oooo.    888          .ooooo.     Y888..8P                       \n 8 Y88. .P  888  d88' `88b   888   `P  )88b   888         d88' `88b     `8888'                        \n 8  `888'   888  888ooo888   888    .oP\"888   888         888ooo888    .8PY888.                       \n 8    Y     888  888    .o   888 . d8(  888   888       o 888    .o   d8'  `888b                      \no8o        o888o `Y8bod8P'   \"888\" `Y888\"\"8o o888ooooood8 `Y8bod8P' o888o  o88888o                    \n                                                                                                      \n                                                                                                      \n                                                                                                      \n  .oooooo.                .o8                            .oooooo.                                     \n d8P'  `Y8b              \"888                           d8P'  `Y8b                                    \n888          oooo    ooo  888oooo.   .ooooo.  oooo d8b 888           .ooooo.  oooo d8b oo.ooooo.      \n888           `88.  .8'   d88' `88b d88' `88b `888\"\"8P 888          d88' `88b `888\"\"8P  888' `88b     \n888            `88..8'    888   888 888ooo888  888     888          888   888  888      888   888     \n`88b    ooo     `888'     888   888 888    .o  888     `88b    ooo  888   888  888      888   888 .o. \n `Y8bood8P'      .8'      `Y8bod8P' `Y8bod8P' d888b     `Y8bood8P'  `Y8bod8P' d888b     888bod8P' Y8P \n             .o..P'                                                                     888           \n             `Y8P'                                                                     o888o           \n_______________________________________________________________________________________________________\n\nAll software, documentation and other files and information in this repository (collectively, the \"Software\")\nare copyright MetaLeX Labs, Inc., a Delaware corporation.\n\nAll rights reserved.\n\nThe Software is proprietary and shall not, in part or in whole, be used, copied, modified, merged, published, \ndistributed, transmitted, sublicensed, sold, or otherwise used in any form or by any means, electronic or\nmechanical, including photocopying, recording, or by any information storage and retrieval system, \nexcept with the express prior written permission of the copyright holder.*/\n\npragma solidity ^0.8.30;\n\nimport \"../CyberCorpConstants.sol\";\nimport \"../interfaces/ITransferRestrictionHook.sol\";\nimport \"./extensions/ICertificateExtension.sol\";\n\nstruct CertificateDetails {\n    string signingOfficerName;\n    string signingOfficerTitle;\n    uint256 investmentAmountUSD;\n    uint256 issuerUSDValuationAtTimeOfInvestment;\n    uint256 unitsRepresented;\n    string legalDetails;\n    bytes extensionData;\n}\n\nstruct Endorsement {\n    address endorser;\n    uint256 timestamp;\n    bytes signatureHash;\n    address registry;  //optional\n    bytes32 agreementId; //optional\n    address endorsee;\n    string endorseeName;\n}\n\nstruct OwnerDetails {\n    string name;\n    address ownerAddress;\n}\n\nlibrary CyberCertPrinterStorage {\n    // Storage slot for our struct\n    bytes32 constant STORAGE_POSITION = keccak256(\"cybercorp.cert.printer.storage.v1\");\n\n    // Main storage layout struct\n    struct CyberCertStorage {\n        // Token data\n        mapping(uint256 => CertificateDetails) certificateDetails;\n        mapping(uint256 => Endorsement[]) endorsements;\n        mapping(uint256 => OwnerDetails) owners;\n        mapping(uint256 => SecurityStatus) securityStatus;\n        mapping(uint256 => string[]) certLegend;\n        // Restriction hooks\n        mapping(uint256 => ITransferRestrictionHook) restrictionHooksById;\n        ITransferRestrictionHook globalRestrictionHook;\n        address extension;\n        // Contract configuration - making these public\n        address issuanceManager;\n        SecurityClass securityType;\n        SecuritySeries securitySeries;\n        string certificateUri;\n        string[] defaultLegend;\n        bool transferable;\n        bool endorsementRequired;\n        \n    }\n\n    // Returns the storage layout\n    function cyberCertStorage() internal pure returns (CyberCertStorage storage s) {\n        bytes32 position = STORAGE_POSITION;\n        assembly {\n            s.slot := position\n        }\n    }\n\n    // Internal getters for complex types\n    function getCertificateDetails(uint256 tokenId) internal view returns (CertificateDetails storage) {\n        return cyberCertStorage().certificateDetails[tokenId];\n    }\n\n    function getEndorsements(uint256 tokenId) internal view returns (Endorsement[] storage) {\n        return cyberCertStorage().endorsements[tokenId];\n    }\n\n    function getOwnerDetails(uint256 tokenId) internal view returns (OwnerDetails storage) {\n        return cyberCertStorage().owners[tokenId];\n    }\n\n    function getSecurityStatus(uint256 tokenId) internal view returns (SecurityStatus) {\n        return cyberCertStorage().securityStatus[tokenId];\n    }\n\n    // Setters\n    function setCertificateDetails(uint256 tokenId, CertificateDetails memory details) internal {\n        cyberCertStorage().certificateDetails[tokenId] = details;\n    }\n\n    function addEndorsement(uint256 tokenId, Endorsement memory endorsement) internal {\n        cyberCertStorage().endorsements[tokenId].push(endorsement);\n    }\n\n    function setOwnerDetails(uint256 tokenId, OwnerDetails memory details) internal {\n        cyberCertStorage().owners[tokenId] = details;\n    }\n\n    function setSecurityStatus(uint256 tokenId, SecurityStatus status) internal {\n        cyberCertStorage().securityStatus[tokenId] = status;\n    }\n\n    // Configuration setters\n    function setIssuanceManager(address _issuanceManager) internal {\n        cyberCertStorage().issuanceManager = _issuanceManager;\n    }\n\n    function setCertificateUri(string memory _certificateUri) internal {\n        cyberCertStorage().certificateUri = _certificateUri;\n    }\n\n    function setTransferable(bool _transferable) internal {\n        cyberCertStorage().transferable = _transferable;\n    }\n\n    function setRestrictionHook(uint256 tokenId, ITransferRestrictionHook hook) internal {\n        cyberCertStorage().restrictionHooksById[tokenId] = hook;\n    }\n\n    function setGlobalRestrictionHook(ITransferRestrictionHook hook) internal {\n        cyberCertStorage().globalRestrictionHook = hook;\n    }\n\n    // Update the getter/setter for defaultLegend\n    function getDefaultLegend() internal view returns (string[] memory) {\n        return cyberCertStorage().defaultLegend;\n    }\n\n    function setDefaultLegend(string[] memory _defaultLegend) internal {\n        cyberCertStorage().defaultLegend = _defaultLegend;\n    }\n\n    // Extension management\n    function setExtension(uint256 tokenId, address extension) internal {\n        cyberCertStorage().extension = extension;\n    }\n\n    function getExtension(uint256 tokenId) internal view returns (address) {\n        return cyberCertStorage().extension;\n    }\n\n    function _getExtensionData(uint256 tokenId) internal view returns (bytes memory) {\n        return cyberCertStorage().certificateDetails[tokenId].extensionData;\n    }\n\n} "}, "dependencies/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"}, "dependencies/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC-1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[ERC].\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the zero address.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {IERC1155Receiver-onERC1155Received} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {IERC1155Receiver-onERC1155BatchReceived} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\n     *\n     * Requirements:\n     *\n     * - `ids` and `values` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external;\n}\n"}, "src/interfaces/ICyberAgreementRegistry.sol": {"content": "/*    .o.                                                                                             \n     .888.                                                                                            \n    .8\"888.                                                                                           \n   .8' `888.                                                                                          \n  .88ooo8888.                                                                                         \n .8'     `888.                                                                                        \no88o     o8888o                                                                                       \n                                                                                                      \n                                                                                                      \n                                                                                                      \nooo        ooooo               .             ooooo                  ooooooo  ooooo                    \n`88.       .888'             .o8             `888'                   `8888    d8'                     \n 888b     d'888   .ooooo.  .o888oo  .oooo.    888          .ooooo.     Y888..8P                       \n 8 Y88. .P  888  d88' `88b   888   `P  )88b   888         d88' `88b     `8888'                        \n 8  `888'   888  888ooo888   888    .oP\"888   888         888ooo888    .8PY888.                       \n 8    Y     888  888    .o   888 . d8(  888   888       o 888    .o   d8'  `888b                      \no8o        o888o `Y8bod8P'   \"888\" `Y888\"\"8o o888ooooood8 `Y8bod8P' o888o  o88888o                    \n                                                                                                      \n                                                                                                      \n                                                                                                      \n  .oooooo.                .o8                            .oooooo.                                     \n d8P'  `Y8b              \"888                           d8P'  `Y8b                                    \n888          oooo    ooo  888oooo.   .ooooo.  oooo d8b 888           .ooooo.  oooo d8b oo.ooooo.      \n888           `88.  .8'   d88' `88b d88' `88b `888\"\"8P 888          d88' `88b `888\"\"8P  888' `88b     \n888            `88..8'    888   888 888ooo888  888     888          888   888  888      888   888     \n`88b    ooo     `888'     888   888 888    .o  888     `88b    ooo  888   888  888      888   888 .o. \n `Y8bood8P'      .8'      `Y8bod8P' `Y8bod8P' d888b     `Y8bood8P'  `Y8bod8P' d888b     888bod8P' Y8P \n             .o..P'                                                                     888           \n             `Y8P'                                                                     o888o          \n_______________________________________________________________________________________________________\n\nAll software, documentation and other files and information in this repository (collectively, the \"Software\")\nare copyright MetaLeX Labs, Inc., a Delaware corporation.\n\nAll rights reserved.\n\nThe Software is proprietary and shall not, in part or in whole, be used, copied, modified, merged, published, \ndistributed, transmitted, sublicensed, sold, or otherwise used in any form or by any means, electronic or\nmechanical, including photocopying, recording, or by any information storage and retrieval system, \nexcept with the express prior written permission of the copyright holder.*/\n\npragma solidity ^0.8.30;\n\ninterface ICyberAgreementRegistry {\n    struct Template {\n        string legalContractUri;\n        string title;\n        string[] globalFields;\n        string[] partyFields;\n    }\n\n    struct ContractData {\n        bytes32 templateId;\n        string[] globalValues;\n        address[] parties;\n        uint256 numSignatures;\n        bytes32 transactionHash;\n    }\n\n    event TemplateCreated(\n        bytes32 indexed templateId,\n        string indexed title,\n        string legalContractUri,\n        string[] globalFields,\n        string[] signerFields\n    );\n\n    event ContractCreated(\n        bytes32 indexed contractId,\n        bytes32 indexed templateId,\n        address[] parties\n    );\n\n    event AgreementSigned(\n        bytes32 indexed contractId,\n        address indexed party,\n        uint256 timestamp\n    );\n\n    event ContractFullySigned(bytes32 indexed contractId, uint256 timestamp);\n\n    function createTemplate(\n        bytes32 templateId,\n        string memory title,\n        string memory legalContractUri,\n        string[] memory globalFields,\n        string[] memory partyFields\n    ) external;\n\n    function createContract(\n        bytes32 templateId,\n        uint256 salt,\n        string[] memory globalValues,\n        address[] memory parties,\n        string[][] memory partyValues,\n        bytes32 secretHash,\n        address finalizer, \n        uint256 expiry\n    ) external returns (bytes32);\n\n    function signContract(\n        bytes32 contractId,\n        string[] memory partyValues,\n        bool fillUnallocated,\n        string memory secret\n    ) external;\n\n    function signContractFor(\n        address signer,\n        bytes32 contractId,\n        string[] memory partyValues,\n        bytes calldata signature, \n        bool fillUnallocated, // to fill a 0 address or not\n        string memory secret \n    ) external;\n\n    //function voidContractFor(bytes32 contractId, address party, bytes calldata signature) public {\n    function voidContractFor(\n        bytes32 contractId,\n        address party,\n        bytes calldata signature\n    ) external;\n\n    function finalizeContract(bytes32 contractId) external;\n\n    function getParties(bytes32 contractId) external view returns (address[] memory);\n\n    function hasSigned(bytes32 contractId, address signer) external view returns (bool);\n\n    function getSignatureTimestamp(bytes32 contractId, address signer) external view returns (uint256);\n\n    function allPartiesSigned(bytes32 contractId) external view returns (bool);\n\n    function getContractDetails(\n        bytes32 contractId\n    )\n        external\n        view\n        returns (\n            bytes32 templateId,\n            string memory legalContractUri,\n            string[] memory globalFields,\n            string[] memory partyFields,\n            string[] memory globalValues,\n            address[] memory parties,\n            string[][] memory partyValues,\n            uint256[] memory signedAt,\n            uint256 numSignatures,\n            bool isComplete,\n            bytes32 transactionHash\n        );\n\n    function getTemplateDetails(\n        bytes32 templateId\n    )\n        external\n        view\n        returns (\n            string memory legalContractUri,\n            string[] memory globalFields,\n            string[] memory signerFields\n        );\n\n    function getSignerValues(\n        bytes32 contractId,\n        address signer\n    ) external view returns (string[] memory signerValues);\n\n    function isVoided(bytes32 contractId) external view returns (bool);\n\n    function getAgreementsForParty(address party) external view returns (bytes32[] memory);\n\n    function getContractJson(bytes32 contractId) external view returns (string memory);\n\n    function getContractTransactionHash(bytes32 contractId) external view returns (bytes32);\n\n    function isFinalized(bytes32 contractId) external view returns (bool);\n\n    function allPartiesFinalized(bytes32 contractId) external view returns (bool);\n}\n"}, "src/interfaces/ICyberCertPrinter.sol": {"content": "/*    .o.                                                                                             \n     .888.                                                                                            \n    .8\"888.                                                                                           \n   .8' `888.                                                                                          \n  .88ooo8888.                                                                                         \n .8'     `888.                                                                                        \no88o     o8888o                                                                                       \n                                                                                                      \n                                                                                                      \n                                                                                                      \nooo        ooooo               .             ooooo                  ooooooo  ooooo                    \n`88.       .888'             .o8             `888'                   `8888    d8'                     \n 888b     d'888   .ooooo.  .o888oo  .oooo.    888          .ooooo.     Y888..8P                       \n 8 Y88. .P  888  d88' `88b   888   `P  )88b   888         d88' `88b     `8888'                        \n 8  `888'   888  888ooo888   888    .oP\"888   888         888ooo888    .8PY888.                       \n 8    Y     888  888    .o   888 . d8(  888   888       o 888    .o   d8'  `888b                      \no8o        o888o `Y8bod8P'   \"888\" `Y888\"\"8o o888ooooood8 `Y8bod8P' o888o  o88888o                    \n                                                                                                      \n                                                                                                      \n                                                                                                      \n  .oooooo.                .o8                            .oooooo.                                     \n d8P'  `Y8b              \"888                           d8P'  `Y8b                                    \n888          oooo    ooo  888oooo.   .ooooo.  oooo d8b 888           .ooooo.  oooo d8b oo.ooooo.      \n888           `88.  .8'   d88' `88b d88' `88b `888\"\"8P 888          d88' `88b `888\"\"8P  888' `88b     \n888            `88..8'    888   888 888ooo888  888     888          888   888  888      888   888     \n`88b    ooo     `888'     888   888 888    .o  888     `88b    ooo  888   888  888      888   888 .o. \n `Y8bood8P'      .8'      `Y8bod8P' `Y8bod8P' d888b     `Y8bood8P'  `Y8bod8P' d888b     888bod8P' Y8P \n             .o..P'                                                                     888           \n             `Y8P'                                                                     o888o          \n_______________________________________________________________________________________________________\n\nAll software, documentation and other files and information in this repository (collectively, the \"Software\")\nare copyright MetaLeX Labs, Inc., a Delaware corporation.\n\nAll rights reserved.\n\nThe Software is proprietary and shall not, in part or in whole, be used, copied, modified, merged, published, \ndistributed, transmitted, sublicensed, sold, or otherwise used in any form or by any means, electronic or\nmechanical, including photocopying, recording, or by any information storage and retrieval system, \nexcept with the express prior written permission of the copyright holder.*/\n\npragma solidity ^0.8.30;\n\nimport \"./IIssuanceManager.sol\";\nimport \"../CyberCorpConstants.sol\";\n\ninterface ICyberCertPrinter {\n    function initialize(\n        string[] memory defaultLegend,\n        string memory name,\n        string memory ticker,\n        string memory _certificateUri,\n        address _issuanceManager,\n        SecurityClass _securityType,\n        SecuritySeries _securitySeries,\n        address _extension\n    ) external;\n    function updateIssuanceManager(address _issuanceManager) external;\n    function updateDefaultLegend(string[] memory _ledger) external;\n    function defaultLegend() external view returns (string[] memory);\n    function setRestrictionHook(uint256 _id, address _hookAddress) external;\n    function setGlobalRestrictionHook(address hookAddress) external;\n    function safeMint(\n        uint256 tokenId,\n        address to,\n        CertificateDetails memory details\n    ) external returns (uint256);\n    function setGlobalTransferable(bool _transferable) external;\n    function safeMintAndAssign(\n        address to,\n        uint256 tokenId,\n        CertificateDetails memory details\n    ) external returns (uint256);\n    function assignCert(\n        address from,\n        uint256 tokenId,\n        address to,\n        CertificateDetails memory details\n    ) external returns (uint256);\n    function addIssuerSignature(\n        uint256 tokenId,\n        string calldata signatureURI\n    ) external;\n    function addEndorsement(\n        uint256 tokenId,\n        Endorsement memory newEndorsement\n    ) external;\n    function endorseAndTransfer(\n        uint256 tokenId,\n        Endorsement memory newEndorsement,\n        address from,\n        address to\n    ) external;\n    function updateCertificateDetails(\n        uint256 tokenId,\n        CertificateDetails calldata details\n    ) external;\n    function burn(uint256 tokenId) external;\n    function voidCert(uint256 tokenId) external;\n    function getCertificateDetails(\n        uint256 tokenId\n    ) external view returns (CertificateDetails memory);\n    function addCertLegend(uint256 tokenId, string memory newLegend) external;\n    function removeCertLegendAt(uint256 tokenId, uint256 index) external;\n    function addDefaultLegend(string memory newLegend) external;\n    function removeDefaultLegendAt(uint256 index) external;\n    function getEndorsementHistory(\n        uint256 tokenId,\n        uint256 index\n    )\n        external\n        view\n        returns (\n            address endorser,\n            string memory endorseeName,\n            address registry,\n            bytes32 agreementId,\n            uint256 timestamp,\n            bytes memory signatureHash,\n            address endorsee\n        );\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n    function totalSupply() external view returns (uint256);\n}\n"}, "src/interfaces/ICondition.sol": {"content": "/*    .o.                                                                                             \n     .888.                                                                                            \n    .8\"888.                                                                                           \n   .8' `888.                                                                                          \n  .88ooo8888.                                                                                         \n .8'     `888.                                                                                        \no88o     o8888o                                                                                       \n                                                                                                      \n                                                                                                      \n                                                                                                      \nooo        ooooo               .             ooooo                  ooooooo  ooooo                    \n`88.       .888'             .o8             `888'                   `8888    d8'                     \n 888b     d'888   .ooooo.  .o888oo  .oooo.    888          .ooooo.     Y888..8P                       \n 8 Y88. .P  888  d88' `88b   888   `P  )88b   888         d88' `88b     `8888'                        \n 8  `888'   888  888ooo888   888    .oP\"888   888         888ooo888    .8PY888.                       \n 8    Y     888  888    .o   888 . d8(  888   888       o 888    .o   d8'  `888b                      \no8o        o888o `Y8bod8P'   \"888\" `Y888\"\"8o o888ooooood8 `Y8bod8P' o888o  o88888o                    \n                                                                                                      \n                                                                                                      \n                                                                                                      \n  .oooooo.                .o8                            .oooooo.                                     \n d8P'  `Y8b              \"888                           d8P'  `Y8b                                    \n888          oooo    ooo  888oooo.   .ooooo.  oooo d8b 888           .ooooo.  oooo d8b oo.ooooo.      \n888           `88.  .8'   d88' `88b d88' `88b `888\"\"8P 888          d88' `88b `888\"\"8P  888' `88b     \n888            `88..8'    888   888 888ooo888  888     888          888   888  888      888   888     \n`88b    ooo     `888'     888   888 888    .o  888     `88b    ooo  888   888  888      888   888 .o. \n `Y8bood8P'      .8'      `Y8bod8P' `Y8bod8P' d888b     `Y8bood8P'  `Y8bod8P' d888b     888bod8P' Y8P \n             .o..P'                                                                     888           \n             `Y8P'                                                                     o888o          \n_______________________________________________________________________________________________________\n\nAll software, documentation and other files and information in this repository (collectively, the \"Software\")\nare copyright MetaLeX Labs, Inc., a Delaware corporation.\n\nAll rights reserved.\n\nThe Software is proprietary and shall not, in part or in whole, be used, copied, modified, merged, published, \ndistributed, transmitted, sublicensed, sold, or otherwise used in any form or by any means, electronic or\nmechanical, including photocopying, recording, or by any information storage and retrieval system, \nexcept with the express prior written permission of the copyright holder.*/\n\npragma solidity ^0.8.30;\n\ninterface ICondition {\n    function checkCondition(address _contract, bytes4 _functionSignature, bytes memory data) external view returns (bool);\n}"}, "dependencies/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"}, "src/storage/LexScrowStorage.sol": {"content": "/*    .o.                                                                                             \n     .888.                                                                                            \n    .8\"888.                                                                                           \n   .8' `888.                                                                                          \n  .88ooo8888.                                                                                         \n .8'     `888.                                                                                        \no88o     o8888o                                                                                       \n                                                                                                      \n                                                                                                      \n                                                                                                      \nooo        ooooo               .             ooooo                  ooooooo  ooooo                    \n`88.       .888'             .o8             `888'                   `8888    d8'                     \n 888b     d'888   .ooooo.  .o888oo  .oooo.    888          .ooooo.     Y888..8P                       \n 8 Y88. .P  888  d88' `88b   888   `P  )88b   888         d88' `88b     `8888'                        \n 8  `888'   888  888ooo888   888    .oP\"888   888         888ooo888    .8PY888.                       \n 8    Y     888  888    .o   888 . d8(  888   888       o 888    .o   d8'  `888b                      \no8o        o888o `Y8bod8P'   \"888\" `Y888\"\"8o o888ooooood8 `Y8bod8P' o888o  o88888o                    \n                                                                                                      \n                                                                                                      \n                                                                                                      \n  .oooooo.                .o8                            .oooooo.                                     \n d8P'  `Y8b              \"888                           d8P'  `Y8b                                    \n888          oooo    ooo  888oooo.   .ooooo.  oooo d8b 888           .ooooo.  oooo d8b oo.ooooo.      \n888           `88.  .8'   d88' `88b d88' `88b `888\"\"8P 888          d88' `88b `888\"\"8P  888' `88b     \n888            `88..8'    888   888 888ooo888  888     888          888   888  888      888   888     \n`88b    ooo     `888'     888   888 888    .o  888     `88b    ooo  888   888  888      888   888 .o. \n `Y8bood8P'      .8'      `Y8bod8P' `Y8bod8P' d888b     `Y8bood8P'  `Y8bod8P' d888b     888bod8P' Y8P \n             .o..P'                                                                     888           \n             `Y8P'                                                                     o888o          \n_______________________________________________________________________________________________________\n\nAll software, documentation and other files and information in this repository (collectively, the \"Software\")\nare copyright MetaLeX Labs, Inc., a Delaware corporation.\n\nAll rights reserved.\n\nThe Software is proprietary and shall not, in part or in whole, be used, copied, modified, merged, published, \ndistributed, transmitted, sublicensed, sold, or otherwise used in any form or by any means, electronic or\nmechanical, including photocopying, recording, or by any information storage and retrieval system, \nexcept with the express prior written permission of the copyright holder.*/\n\npragma solidity ^0.8.30;\n\nimport \"../interfaces/ICondition.sol\";\n\nenum TokenType {\n    ERC20,\n    ERC721,\n    ERC1155\n}\n\nenum EscrowStatus {\n    PENDING,\n    PAID,\n    FINALIZED,\n    VOIDED\n}\n\nstruct Token {\n    TokenType tokenType;\n    address tokenAddress;\n    uint256 tokenId;\n    uint256 amount;\n}\n\nstruct Escrow {\n    bytes32 agreementId;\n    address counterParty;\n    Token[] corpAssets;\n    Token[] buyerAssets;\n    bytes signature;\n    uint256 expiry;\n    EscrowStatus status;\n}\n\nlibrary LexScrowStorage {\n    // Storage slot for our struct\n    bytes32 constant STORAGE_POSITION = keccak256(\"cybercorp.lexscrow.storage.v1\");\n\n    // Main storage layout struct\n    struct LexScrowData {\n        address CORP;\n        address DEAL_REGISTRY;\n        mapping(bytes32 => Escrow) escrows;\n        mapping(bytes32 => ICondition[]) conditionsByEscrow;\n    }\n\n    // Returns the storage layout\n    function lexScrowStorage() internal pure returns (LexScrowData storage ds) {\n        bytes32 position = STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    // Getters\n    function getCorp() internal view returns (address) {\n        return lexScrowStorage().CORP;\n    }\n\n    function getDealRegistry() internal view returns (address) {\n        return lexScrowStorage().DEAL_REGISTRY;\n    }\n\n    function getEscrow(bytes32 agreementId) internal view returns (Escrow storage) {\n        return lexScrowStorage().escrows[agreementId];\n    }\n\n    function getConditionsByEscrow(bytes32 agreementId) internal view returns (ICondition[] storage) {\n        return lexScrowStorage().conditionsByEscrow[agreementId];\n    }\n\n    // Setters\n    function setCorp(address _corp) internal {\n        lexScrowStorage().CORP = _corp;\n    }\n\n    function setDealRegistry(address _dealRegistry) internal {\n        lexScrowStorage().DEAL_REGISTRY = _dealRegistry;\n    }\n\n    function setEscrow(bytes32 agreementId, Escrow memory escrow) internal {\n        lexScrowStorage().escrows[agreementId] = escrow;\n    }\n\n    function addConditionToEscrow(bytes32 agreementId, ICondition condition) internal {\n        lexScrowStorage().conditionsByEscrow[agreementId].push(condition);\n    }\n\n    function removeConditionFromEscrow(bytes32 agreementId, uint256 index) internal {\n        ICondition[] storage conditions = lexScrowStorage().conditionsByEscrow[agreementId];\n        require(index < conditions.length, \"Index out of bounds\");\n        \n        for (uint i = index; i < conditions.length - 1; i++) {\n            conditions[i] = conditions[i + 1];\n        }\n        conditions.pop();\n    }\n} "}, "src/interfaces/IAuthAdapter.sol": {"content": "/*    .o.                                                                                             \n     .888.                                                                                            \n    .8\"888.                                                                                           \n   .8' `888.                                                                                          \n  .88ooo8888.                                                                                         \n .8'     `888.                                                                                        \no88o     o8888o                                                                                       \n                                                                                                      \n                                                                                                      \n                                                                                                      \nooo        ooooo               .             ooooo                  ooooooo  ooooo                    \n`88.       .888'             .o8             `888'                   `8888    d8'                     \n 888b     d'888   .ooooo.  .o888oo  .oooo.    888          .ooooo.     Y888..8P                       \n 8 Y88. .P  888  d88' `88b   888   `P  )88b   888         d88' `88b     `8888'                        \n 8  `888'   888  888ooo888   888    .oP\"888   888         888ooo888    .8PY888.                       \n 8    Y     888  888    .o   888 . d8(  888   888       o 888    .o   d8'  `888b                      \no8o        o888o `Y8bod8P'   \"888\" `Y888\"\"8o o888ooooood8 `Y8bod8P' o888o  o88888o                    \n                                                                                                      \n                                                                                                      \n                                                                                                      \n  .oooooo.                .o8                            .oooooo.                                     \n d8P'  `Y8b              \"888                           d8P'  `Y8b                                    \n888          oooo    ooo  888oooo.   .ooooo.  oooo d8b 888           .ooooo.  oooo d8b oo.ooooo.      \n888           `88.  .8'   d88' `88b d88' `88b `888\"\"8P 888          d88' `88b `888\"\"8P  888' `88b     \n888            `88..8'    888   888 888ooo888  888     888          888   888  888      888   888     \n`88b    ooo     `888'     888   888 888    .o  888     `88b    ooo  888   888  888      888   888 .o. \n `Y8bood8P'      .8'      `Y8bod8P' `Y8bod8P' d888b     `Y8bood8P'  `Y8bod8P' d888b     888bod8P' Y8P \n             .o..P'                                                                     888           \n             `Y8P'                                                                     o888o          \n_______________________________________________________________________________________________________\n\nAll software, documentation and other files and information in this repository (collectively, the \"Software\")\nare copyright MetaLeX Labs, Inc., a Delaware corporation.\n\nAll rights reserved.\n\nThe Software is proprietary and shall not, in part or in whole, be used, copied, modified, merged, published, \ndistributed, transmitted, sublicensed, sold, or otherwise used in any form or by any means, electronic or\nmechanical, including photocopying, recording, or by any information storage and retrieval system, \nexcept with the express prior written permission of the copyright holder.*/\n\npragma solidity ^0.8.30;\n\n//Adapter interface for custom auth roles. Allows extensibility for different auth protocols i.e. hats.\ninterface IAuthAdapter {\n    function isAuthorized(address user) external view returns (uint256);\n}"}, "dependencies/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"}, "src/storage/extensions/ICertificateExtension.sol": {"content": "/*    .o.                                                                                             \n     .888.                                                                                            \n    .8\"888.                                                                                           \n   .8' `888.                                                                                          \n  .88ooo8888.                                                                                         \n .8'     `888.                                                                                        \no88o     o8888o                                                                                       \n                                                                                                      \n                                                                                                      \n                                                                                                      \nooo        ooooo               .             ooooo                  ooooooo  ooooo                    \n`88.       .888'             .o8             `888'                   `8888    d8'                     \n 888b     d'888   .ooooo.  .o888oo  .oooo.    888          .ooooo.     Y888..8P                       \n 8 Y88. .P  888  d88' `88b   888   `P  )88b   888         d88' `88b     `8888'                        \n 8  `888'   888  888ooo888   888    .oP\"888   888         888ooo888    .8PY888.                       \n 8    Y     888  888    .o   888 . d8(  888   888       o 888    .o   d8'  `888b                      \no8o        o888o `Y8bod8P'   \"888\" `Y888\"\"8o o888ooooood8 `Y8bod8P' o888o  o88888o                    \n                                                                                                      \n                                                                                                      \n                                                                                                      \n  .oooooo.                .o8                            .oooooo.                                     \n d8P'  `Y8b              \"888                           d8P'  `Y8b                                    \n888          oooo    ooo  888oooo.   .ooooo.  oooo d8b 888           .ooooo.  oooo d8b oo.ooooo.      \n888           `88.  .8'   d88' `88b d88' `88b `888\"\"8P 888          d88' `88b `888\"\"8P  888' `88b     \n888            `88..8'    888   888 888ooo888  888     888          888   888  888      888   888     \n`88b    ooo     `888'     888   888 888    .o  888     `88b    ooo  888   888  888      888   888 .o. \n `Y8bood8P'      .8'      `Y8bod8P' `Y8bod8P' d888b     `Y8bood8P'  `Y8bod8P' d888b     888bod8P' Y8P \n             .o..P'                                                                     888           \n             `Y8P'                                                                     o888o           \n_______________________________________________________________________________________________________\n\nAll software, documentation and other files and information in this repository (collectively, the \"Software\")\nare copyright MetaLeX Labs, Inc., a Delaware corporation.\n\nAll rights reserved.\n\nThe Software is proprietary and shall not, in part or in whole, be used, copied, modified, merged, published, \ndistributed, transmitted, sublicensed, sold, or otherwise used in any form or by any means, electronic or\nmechanical, including photocopying, recording, or by any information storage and retrieval system, \nexcept with the express prior written permission of the copyright holder.*/\n\npragma solidity ^0.8.30;\n\ninterface ICertificateExtension {\n    function supportsExtensionType(bytes32 extensionType) external pure returns (bool);\n    function getExtensionURI(bytes memory data) external view returns (string memory);\n}"}}, "settings": {"remappings": ["openzeppelin-contracts/=dependencies/openzeppelin-contracts/contracts/", "erc721a/=dependencies/erc721a-4.3.0/", "forge-std/=dependencies/forge-std/src/", "ConditionManager/=dependencies/ConditionManager/src/", "@openzeppelin/contracts-upgradeable/=dependencies/openzeppelin-contracts-upgradeable/contracts/", "@openzeppelin/contracts/=dependencies/openzeppelin-contracts/contracts/", "erc4626-tests/=dependencies/openzeppelin-contracts/lib/erc4626-tests/", "halmos-cheatcodes/=dependencies/openzeppelin-contracts/lib/halmos-cheatcodes/src/", "openzeppelin-contracts-upgradeable/=dependencies/openzeppelin-contracts-upgradeable/"], "optimizer": {"enabled": true}, "metadata": {"useLiteralContent": false, "bytecodeHash": "ipfs", "appendCBOR": true}, "outputSelection": {"*": {"*": ["evm.legacyAssembly"]}}, "evmVersion": "cancun", "viaIR": false, "libraries": {}}}
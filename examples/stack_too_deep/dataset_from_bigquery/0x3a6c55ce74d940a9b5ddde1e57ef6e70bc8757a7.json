{"language": "Solidity", "sources": {"MarginalV1Pool.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport {SafeCast} from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\n\nimport {TickMath} from \"@uniswap/v3-core/contracts/libraries/TickMath.sol\";\nimport {IUniswapV3Pool} from \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\";\n\nimport {LiquidityMath} from \"./libraries/LiquidityMath.sol\";\nimport {OracleLibrary} from \"./libraries/OracleLibrary.sol\";\nimport {Position} from \"./libraries/Position.sol\";\nimport {SqrtPriceMath} from \"./libraries/SqrtPriceMath.sol\";\nimport {SwapMath} from \"./libraries/SwapMath.sol\";\nimport {TransferHelper} from \"./libraries/TransferHelper.sol\";\n\nimport {IMarginalV1AdjustCallback} from \"./interfaces/callback/IMarginalV1AdjustCallback.sol\";\nimport {IMarginalV1MintCallback} from \"./interfaces/callback/IMarginalV1MintCallback.sol\";\nimport {IMarginalV1OpenCallback} from \"./interfaces/callback/IMarginalV1OpenCallback.sol\";\nimport {IMarginalV1SettleCallback} from \"./interfaces/callback/IMarginalV1SettleCallback.sol\";\nimport {IMarginalV1SwapCallback} from \"./interfaces/callback/IMarginalV1SwapCallback.sol\";\n\nimport {IMarginalV1Factory} from \"./interfaces/IMarginalV1Factory.sol\";\nimport {IMarginalV1Pool} from \"./interfaces/IMarginalV1Pool.sol\";\n\ncontract MarginalV1Pool is IMarginalV1Pool, ERC20 {\n    using Position for mapping(bytes32 => Position.Info);\n    using Position for Position.Info;\n    using SafeCast for uint256;\n\n    /// @inheritdoc IMarginalV1Pool\n    address public immutable factory;\n    /// @inheritdoc IMarginalV1Pool\n    address public immutable oracle;\n\n    /// @inheritdoc IMarginalV1Pool\n    address public immutable token0;\n    /// @inheritdoc IMarginalV1Pool\n    address public immutable token1;\n    /// @inheritdoc IMarginalV1Pool\n    uint24 public immutable maintenance;\n\n    /// @inheritdoc IMarginalV1Pool\n    uint24 public constant fee = 1000; // 10 bps across all pools\n    /// @inheritdoc IMarginalV1Pool\n    uint24 public constant rewardPremium = 2000000; // 2x base fee as liquidation rewards\n    /// @inheritdoc IMarginalV1Pool\n    uint24 public constant tickCumulativeRateMax = 920; // bound on funding rate of ~10% per funding period\n\n    /// @inheritdoc IMarginalV1Pool\n    uint32 public constant secondsAgo = 43200; // 12 hr TWAP for oracle price\n    /// @inheritdoc IMarginalV1Pool\n    uint32 public constant fundingPeriod = 604800; // 7 day funding period\n\n    // @dev varies for different chains\n    uint256 internal constant blockBaseFeeMin = 40e9; // min base fee for liquidation rewards\n    uint256 internal constant gasLiquidate = 150000; // gas required to call liquidate\n\n    uint128 internal constant MINIMUM_LIQUIDITY = 10000; // liquidity locked on initial mint always available for swaps\n    uint128 internal constant MINIMUM_SIZE = 10000; // minimum position size, debt, insurance amounts to prevent dust sizes\n\n    struct State {\n        uint160 sqrtPriceX96;\n        uint96 totalPositions; // > ~ 2e20 years at max per block to fill on mainnet\n        uint128 liquidity;\n        int24 tick;\n        uint32 blockTimestamp;\n        int56 tickCumulative;\n        uint8 feeProtocol;\n        bool initialized;\n    }\n    /// @inheritdoc IMarginalV1Pool\n    State public state;\n\n    /// @inheritdoc IMarginalV1Pool\n    uint128 public liquidityLocked;\n\n    struct ProtocolFees {\n        uint128 token0;\n        uint128 token1;\n    }\n    /// @inheritdoc IMarginalV1Pool\n    ProtocolFees public protocolFees;\n\n    /// @inheritdoc IMarginalV1Pool\n    mapping(bytes32 => Position.Info) public positions;\n\n    uint256 private unlocked = 2; // uses OZ convention of 1 for false and 2 for true\n    modifier lock() {\n        if (unlocked == 1) revert Locked();\n        unlocked = 1;\n        _;\n        unlocked = 2;\n    }\n\n    modifier onlyFactoryOwner() {\n        if (msg.sender != IMarginalV1Factory(factory).owner())\n            revert Unauthorized();\n        _;\n    }\n\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n    event Open(\n        address sender,\n        address indexed owner,\n        uint256 indexed id,\n        uint128 liquidityAfter,\n        uint160 sqrtPriceX96After,\n        uint128 margin\n    );\n    event Adjust(\n        address indexed owner,\n        uint256 indexed id,\n        address recipient,\n        uint256 marginAfter\n    );\n    event Settle(\n        address indexed owner,\n        uint256 indexed id,\n        address recipient,\n        uint128 liquidityAfter,\n        uint160 sqrtPriceX96After,\n        int256 amount0,\n        int256 amount1,\n        uint256 rewards\n    );\n    event Liquidate(\n        address indexed owner,\n        uint256 indexed id,\n        address recipient,\n        uint128 liquidityAfter,\n        uint160 sqrtPriceX96After,\n        uint256 rewards\n    );\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n    event Mint(\n        address sender,\n        address indexed owner,\n        uint128 liquidityDelta,\n        uint256 amount0,\n        uint256 amount1\n    );\n    event Burn(\n        address indexed owner,\n        address recipient,\n        uint128 liquidityDelta,\n        uint256 amount0,\n        uint256 amount1\n    );\n    event SetFeeProtocol(uint8 oldFeeProtocol, uint8 newFeeProtocol);\n    event CollectProtocol(\n        address sender,\n        address indexed recipient,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    error Locked();\n    error Unauthorized();\n    error InvalidLiquidityDelta();\n    error InvalidSqrtPriceLimitX96();\n    error SqrtPriceX96ExceedsLimit();\n    error MarginLessThanMin();\n    error RewardsLessThanMin();\n    error Amount0LessThanMin();\n    error Amount1LessThanMin();\n    error InvalidPosition();\n    error PositionSafe();\n    error InvalidAmountSpecified();\n    error InvalidFeeProtocol();\n\n    constructor(\n        address _factory,\n        address _token0,\n        address _token1,\n        uint24 _maintenance,\n        address _oracle\n    ) ERC20(\"Marginal V1 LP Token\", \"MARGV1-LP\") {\n        factory = _factory;\n        token0 = _token0;\n        token1 = _token1;\n        maintenance = _maintenance;\n        oracle = _oracle;\n    }\n\n    function initialize() private {\n        // reverts if not enough historical observations\n        uint32[] memory secondsAgos = new uint32[](2);\n        secondsAgos[0] = secondsAgo;\n        int56[] memory oracleTickCumulativesLast = oracleTickCumulatives(\n            secondsAgos\n        );\n\n        // use oracle price to initialize\n        uint160 _sqrtPriceX96 = OracleLibrary.oracleSqrtPriceX96(\n            OracleLibrary.oracleTickCumulativeDelta(\n                oracleTickCumulativesLast[0],\n                oracleTickCumulativesLast[1]\n            ),\n            secondsAgo\n        );\n        int24 tick = TickMath.getTickAtSqrtRatio(_sqrtPriceX96);\n\n        state = State({\n            sqrtPriceX96: _sqrtPriceX96,\n            totalPositions: 0,\n            liquidity: 0,\n            tick: tick,\n            blockTimestamp: _blockTimestamp(),\n            tickCumulative: 0,\n            feeProtocol: 0,\n            initialized: true\n        });\n        emit Initialize(_sqrtPriceX96, tick);\n    }\n\n    function _blockTimestamp() internal view virtual returns (uint32) {\n        return uint32(block.timestamp);\n    }\n\n    function balance0() private view returns (uint256) {\n        return IERC20(token0).balanceOf(address(this));\n    }\n\n    function balance1() private view returns (uint256) {\n        return IERC20(token1).balanceOf(address(this));\n    }\n\n    function oracleTickCumulatives(\n        uint32[] memory secondsAgos\n    ) private view returns (int56[] memory) {\n        (int56[] memory tickCumulatives, ) = IUniswapV3Pool(oracle).observe(\n            secondsAgos\n        );\n        return tickCumulatives;\n    }\n\n    function stateSynced() private view returns (State memory) {\n        State memory _state = state;\n        // oracle update\n        unchecked {\n            uint32 delta = _blockTimestamp() - _state.blockTimestamp;\n            if (delta == 0) return _state; // early exit if nothing to update\n            _state.tickCumulative += int56(_state.tick) * int56(uint56(delta)); // overflow desired\n            _state.blockTimestamp = _blockTimestamp();\n        }\n        return _state;\n    }\n\n    /// @inheritdoc IMarginalV1Pool\n    function open(\n        address recipient,\n        bool zeroForOne,\n        uint128 liquidityDelta,\n        uint160 sqrtPriceLimitX96,\n        uint128 margin,\n        bytes calldata data\n    )\n        external\n        payable\n        lock\n        returns (\n            uint256 id,\n            uint256 size,\n            uint256 debt,\n            uint256 amount0,\n            uint256 amount1\n        )\n    {\n        State memory _state = stateSynced();\n        if (\n            liquidityDelta == 0 ||\n            liquidityDelta + MINIMUM_LIQUIDITY >= _state.liquidity\n        ) revert InvalidLiquidityDelta();\n        if (\n            zeroForOne\n                ? !(sqrtPriceLimitX96 < _state.sqrtPriceX96 &&\n                    sqrtPriceLimitX96 > SqrtPriceMath.MIN_SQRT_RATIO)\n                : !(sqrtPriceLimitX96 > _state.sqrtPriceX96 &&\n                    sqrtPriceLimitX96 < SqrtPriceMath.MAX_SQRT_RATIO)\n        ) revert InvalidSqrtPriceLimitX96();\n\n        uint160 sqrtPriceX96Next = SqrtPriceMath.sqrtPriceX96NextOpen(\n            _state.liquidity,\n            _state.sqrtPriceX96,\n            liquidityDelta,\n            zeroForOne,\n            maintenance\n        );\n        if (\n            zeroForOne\n                ? sqrtPriceX96Next < sqrtPriceLimitX96\n                : sqrtPriceX96Next > sqrtPriceLimitX96\n        ) revert SqrtPriceX96ExceedsLimit();\n\n        // zero seconds ago for oracle tickCumulative\n        int56 oracleTickCumulative = oracleTickCumulatives(new uint32[](1))[0];\n\n        Position.Info memory position = Position.assemble(\n            _state.liquidity,\n            _state.sqrtPriceX96,\n            sqrtPriceX96Next,\n            liquidityDelta,\n            zeroForOne,\n            _state.tick,\n            _state.blockTimestamp,\n            _state.tickCumulative,\n            oracleTickCumulative\n        );\n        if (\n            position.size < MINIMUM_SIZE ||\n            position.debt0 < MINIMUM_SIZE ||\n            position.debt1 < MINIMUM_SIZE ||\n            position.insurance0 < MINIMUM_SIZE ||\n            position.insurance1 < MINIMUM_SIZE\n        ) revert InvalidPosition();\n\n        uint128 marginMinimum = position.marginMinimum(maintenance);\n        if (marginMinimum == 0 || margin < marginMinimum)\n            revert MarginLessThanMin();\n        position.margin = margin;\n\n        uint256 rewardsMinimum = Position.liquidationRewards(\n            block.basefee,\n            blockBaseFeeMin,\n            gasLiquidate,\n            rewardPremium\n        );\n        if (msg.value < rewardsMinimum) revert RewardsLessThanMin();\n        position.rewards = msg.value;\n\n        _state.liquidity -= liquidityDelta;\n        _state.sqrtPriceX96 = sqrtPriceX96Next;\n\n        liquidityLocked += liquidityDelta;\n\n        // callback for margin amount\n        if (!zeroForOne) {\n            // long token0 (out) relative to token1 (in); margin in token0\n            uint256 fees0 = Position.fees(position.size, fee);\n            amount0 = uint256(margin) + fees0;\n\n            uint256 balance0Before = balance0();\n            IMarginalV1OpenCallback(msg.sender).marginalV1OpenCallback(\n                amount0,\n                0,\n                data\n            );\n            if (balance0Before + amount0 > balance0())\n                revert Amount0LessThanMin();\n\n            // account for protocol fees if fee on\n            if (_state.feeProtocol > 0) {\n                uint256 delta = fees0 / _state.feeProtocol;\n                fees0 -= delta;\n                protocolFees.token0 += uint128(delta);\n            }\n\n            // fees added to available liquidity\n            (uint128 liquidityAfter, uint160 sqrtPriceX96After) = LiquidityMath\n                .liquiditySqrtPriceX96Next(\n                    _state.liquidity,\n                    _state.sqrtPriceX96,\n                    int256(fees0),\n                    0\n                );\n            _state.liquidity = liquidityAfter;\n            _state.sqrtPriceX96 = sqrtPriceX96After;\n            _state.tick = TickMath.getTickAtSqrtRatio(sqrtPriceX96After);\n        } else {\n            // long token1 (out) relative to token0 (in); margin in token1\n            uint256 fees1 = Position.fees(position.size, fee);\n            amount1 = uint256(margin) + fees1;\n\n            uint256 balance1Before = balance1();\n            IMarginalV1OpenCallback(msg.sender).marginalV1OpenCallback(\n                0,\n                amount1,\n                data\n            );\n            if (balance1Before + amount1 > balance1())\n                revert Amount1LessThanMin();\n\n            // account for protocol fees if fee on\n            if (_state.feeProtocol > 0) {\n                uint256 delta = fees1 / _state.feeProtocol;\n                fees1 -= delta;\n                protocolFees.token1 += uint128(delta);\n            }\n\n            // fees added to available liquidity\n            (uint128 liquidityAfter, uint160 sqrtPriceX96After) = LiquidityMath\n                .liquiditySqrtPriceX96Next(\n                    _state.liquidity,\n                    _state.sqrtPriceX96,\n                    0,\n                    int256(fees1)\n                );\n            _state.liquidity = liquidityAfter;\n            _state.sqrtPriceX96 = sqrtPriceX96After;\n            _state.tick = TickMath.getTickAtSqrtRatio(sqrtPriceX96After);\n        }\n\n        id = _state.totalPositions;\n        size = position.size;\n        debt = zeroForOne ? position.debt0 : position.debt1;\n\n        positions.set(recipient, _state.totalPositions, position);\n        _state.totalPositions++;\n\n        // update pool state to latest\n        state = _state;\n\n        emit Open(\n            msg.sender,\n            recipient,\n            id,\n            _state.liquidity,\n            _state.sqrtPriceX96,\n            margin\n        );\n    }\n\n    /// @inheritdoc IMarginalV1Pool\n    function adjust(\n        address recipient,\n        uint96 id,\n        int128 marginDelta,\n        bytes calldata data\n    ) external lock returns (uint256 margin0, uint256 margin1) {\n        State memory _state = stateSynced();\n        Position.Info memory position = positions.get(msg.sender, id);\n        if (position.size == 0) revert InvalidPosition();\n\n        // don't update position stored debts for funding to avoid short circuiting and min margin zero issues\n        uint128 marginMinimum = position.marginMinimum(maintenance);\n        if (\n            int256(uint256(position.margin)) + int256(marginDelta) <\n            int256(uint256(marginMinimum))\n        ) revert MarginLessThanMin();\n\n        // flash margin out then callback for margin in\n        if (!position.zeroForOne) {\n            margin0 = uint256(\n                int256(uint256(position.margin)) + int256(marginDelta)\n            ); // position margin after\n            TransferHelper.safeTransfer(token0, recipient, position.margin);\n\n            uint256 balance0Before = balance0();\n            IMarginalV1AdjustCallback(msg.sender).marginalV1AdjustCallback(\n                margin0,\n                0,\n                data\n            );\n            if (balance0Before + margin0 > balance0())\n                revert Amount0LessThanMin();\n\n            position.margin = margin0.toUint128();\n        } else {\n            margin1 = uint256(\n                int256(uint256(position.margin)) + int256(marginDelta)\n            ); // position margin after\n            TransferHelper.safeTransfer(token1, recipient, position.margin);\n\n            uint256 balance1Before = balance1();\n            IMarginalV1AdjustCallback(msg.sender).marginalV1AdjustCallback(\n                0,\n                margin1,\n                data\n            );\n            if (balance1Before + margin1 > balance1())\n                revert Amount1LessThanMin();\n\n            position.margin = margin1.toUint128();\n        }\n\n        positions.set(msg.sender, id, position);\n\n        // update pool state to latest\n        state = _state;\n\n        emit Adjust(msg.sender, uint256(id), recipient, position.margin);\n    }\n\n    /// @inheritdoc IMarginalV1Pool\n    function settle(\n        address recipient,\n        uint96 id,\n        bytes calldata data\n    ) external lock returns (int256 amount0, int256 amount1, uint256 rewards) {\n        State memory _state = stateSynced();\n        Position.Info memory position = positions.get(msg.sender, id);\n        if (position.size == 0) revert InvalidPosition();\n\n        // zero seconds ago for oracle tickCumulative\n        int56 oracleTickCumulative = oracleTickCumulatives(new uint32[](1))[0];\n\n        // update debts for funding\n        position = position.sync(\n            _state.blockTimestamp,\n            _state.tickCumulative,\n            oracleTickCumulative,\n            tickCumulativeRateMax,\n            fundingPeriod\n        );\n\n        liquidityLocked -= position.liquidityLocked;\n        (uint256 amount0Unlocked, uint256 amount1Unlocked) = position\n            .amountsLocked();\n\n        // flash size + margin + rewards out then callback for debt owed in\n        rewards = position.rewards;\n        TransferHelper.safeTransferETH(recipient, rewards); // ok given lock\n\n        if (!position.zeroForOne) {\n            amount0 = -int256(\n                uint256(position.size) + uint256(position.margin)\n            ); // size + margin out\n            amount1 = int256(uint256(position.debt1)); // debt in\n\n            if (amount0 < 0)\n                TransferHelper.safeTransfer(\n                    token0,\n                    recipient,\n                    uint256(-amount0)\n                );\n\n            (uint128 liquidityNext, uint160 sqrtPriceX96Next) = LiquidityMath\n                .liquiditySqrtPriceX96Next(\n                    _state.liquidity,\n                    _state.sqrtPriceX96,\n                    int256(\n                        amount0Unlocked -\n                            uint256(position.size) -\n                            uint256(position.margin)\n                    ), // insurance0 + debt0\n                    int256(amount1Unlocked) + amount1 // insurance1 + debt1\n                );\n            _state.liquidity = liquidityNext;\n            _state.sqrtPriceX96 = sqrtPriceX96Next;\n            _state.tick = TickMath.getTickAtSqrtRatio(sqrtPriceX96Next);\n\n            uint256 balance1Before = balance1();\n            IMarginalV1SettleCallback(msg.sender).marginalV1SettleCallback(\n                amount0,\n                amount1,\n                data\n            );\n            if (balance1Before + uint256(amount1) > balance1())\n                revert Amount1LessThanMin();\n        } else {\n            amount0 = int256(uint256(position.debt0)); // debt in\n            amount1 = -int256(\n                uint256(position.size) + uint256(position.margin)\n            ); // size + margin out\n\n            if (amount1 < 0)\n                TransferHelper.safeTransfer(\n                    token1,\n                    recipient,\n                    uint256(-amount1)\n                );\n\n            (uint128 liquidityNext, uint160 sqrtPriceX96Next) = LiquidityMath\n                .liquiditySqrtPriceX96Next(\n                    _state.liquidity,\n                    _state.sqrtPriceX96,\n                    int256(amount0Unlocked) + amount0, // insurance0 + debt0\n                    int256(\n                        amount1Unlocked -\n                            uint256(position.size) -\n                            uint256(position.margin)\n                    ) // insurance1 + debt1\n                );\n            _state.liquidity = liquidityNext;\n            _state.sqrtPriceX96 = sqrtPriceX96Next;\n            _state.tick = TickMath.getTickAtSqrtRatio(sqrtPriceX96Next);\n\n            uint256 balance0Before = balance0();\n            IMarginalV1SettleCallback(msg.sender).marginalV1SettleCallback(\n                amount0,\n                amount1,\n                data\n            );\n            if (balance0Before + uint256(amount0) > balance0())\n                revert Amount0LessThanMin();\n        }\n\n        positions.set(msg.sender, id, position.settle());\n\n        // update pool state to latest\n        state = _state;\n\n        emit Settle(\n            msg.sender,\n            uint256(id),\n            recipient,\n            _state.liquidity,\n            _state.sqrtPriceX96,\n            amount0,\n            amount1,\n            rewards\n        );\n    }\n\n    /// @inheritdoc IMarginalV1Pool\n    function liquidate(\n        address recipient,\n        address owner,\n        uint96 id\n    ) external lock returns (uint256 rewards) {\n        State memory _state = stateSynced();\n        Position.Info memory position = positions.get(owner, id);\n        if (position.size == 0) revert InvalidPosition();\n\n        // oracle price averaged over seconds ago for liquidation calc\n        uint32[] memory secondsAgos = new uint32[](2);\n        secondsAgos[0] = secondsAgo;\n\n        int56[] memory oracleTickCumulativesLast = oracleTickCumulatives(\n            secondsAgos\n        );\n        uint160 oracleSqrtPriceX96 = OracleLibrary.oracleSqrtPriceX96(\n            OracleLibrary.oracleTickCumulativeDelta(\n                oracleTickCumulativesLast[0],\n                oracleTickCumulativesLast[1]\n            ),\n            secondsAgo\n        );\n\n        // update debts for funding\n        position = position.sync(\n            _state.blockTimestamp,\n            _state.tickCumulative,\n            oracleTickCumulativesLast[1], // zero seconds ago\n            tickCumulativeRateMax,\n            fundingPeriod\n        );\n        if (position.safe(oracleSqrtPriceX96, maintenance))\n            revert PositionSafe();\n\n        liquidityLocked -= position.liquidityLocked;\n        (uint256 amount0, uint256 amount1) = position.amountsLocked();\n\n        (_state.liquidity, _state.sqrtPriceX96) = LiquidityMath\n            .liquiditySqrtPriceX96Next(\n                _state.liquidity,\n                _state.sqrtPriceX96,\n                int256(amount0),\n                int256(amount1)\n            );\n        _state.tick = TickMath.getTickAtSqrtRatio(_state.sqrtPriceX96);\n\n        rewards = position.rewards;\n        TransferHelper.safeTransferETH(recipient, rewards); // ok given lock\n\n        positions.set(owner, id, position.liquidate());\n\n        // update pool state to latest\n        state = _state;\n\n        emit Liquidate(\n            owner,\n            uint256(id),\n            recipient,\n            _state.liquidity,\n            _state.sqrtPriceX96,\n            rewards\n        );\n    }\n\n    /// @inheritdoc IMarginalV1Pool\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external lock returns (int256 amount0, int256 amount1) {\n        State memory _state = stateSynced();\n        if (amountSpecified == 0) revert InvalidAmountSpecified();\n        if (\n            zeroForOne\n                ? !(sqrtPriceLimitX96 < _state.sqrtPriceX96 &&\n                    sqrtPriceLimitX96 > SqrtPriceMath.MIN_SQRT_RATIO)\n                : !(sqrtPriceLimitX96 > _state.sqrtPriceX96 &&\n                    sqrtPriceLimitX96 < SqrtPriceMath.MAX_SQRT_RATIO)\n        ) revert InvalidSqrtPriceLimitX96();\n\n        // add fees back in after swap calcs if exact input\n        bool exactInput = amountSpecified > 0;\n        int256 amountSpecifiedLessFee = exactInput\n            ? amountSpecified -\n                int256(SwapMath.swapFees(uint256(amountSpecified), fee, false))\n            : amountSpecified;\n\n        uint160 sqrtPriceX96Next = SqrtPriceMath.sqrtPriceX96NextSwap(\n            _state.liquidity,\n            _state.sqrtPriceX96,\n            zeroForOne,\n            amountSpecifiedLessFee\n        );\n        if (\n            zeroForOne\n                ? sqrtPriceX96Next < sqrtPriceLimitX96\n                : sqrtPriceX96Next > sqrtPriceLimitX96\n        ) revert SqrtPriceX96ExceedsLimit();\n\n        // amounts without fees\n        (amount0, amount1) = SwapMath.swapAmounts(\n            _state.liquidity,\n            _state.sqrtPriceX96,\n            sqrtPriceX96Next\n        );\n\n        // optimistic amount out with callback for amount in\n        if (!zeroForOne) {\n            amount0 = !exactInput ? amountSpecified : amount0; // in case of rounding issues\n            if (amount0 < 0)\n                TransferHelper.safeTransfer(\n                    token0,\n                    recipient,\n                    uint256(-amount0)\n                );\n\n            uint256 fees1 = exactInput\n                ? uint256(amountSpecified) - uint256(amount1)\n                : SwapMath.swapFees(uint256(amount1), fee, true);\n            amount1 += int256(fees1);\n\n            uint256 balance1Before = balance1();\n            IMarginalV1SwapCallback(msg.sender).marginalV1SwapCallback(\n                amount0,\n                amount1,\n                data\n            );\n            if (amount1 == 0 || balance1Before + uint256(amount1) > balance1())\n                revert Amount1LessThanMin();\n\n            // account for protocol fees if fee on\n            uint256 delta = _state.feeProtocol > 0\n                ? fees1 / _state.feeProtocol\n                : 0;\n            if (delta > 0) protocolFees.token1 += uint128(delta);\n\n            // update state liquidity, sqrt price accounting for fee growth\n            (uint128 liquidityAfter, uint160 sqrtPriceX96After) = LiquidityMath\n                .liquiditySqrtPriceX96Next(\n                    _state.liquidity,\n                    _state.sqrtPriceX96,\n                    amount0,\n                    amount1 - int256(delta) // exclude protocol fees if any\n                );\n            _state.liquidity = liquidityAfter;\n            _state.sqrtPriceX96 = sqrtPriceX96After;\n            _state.tick = TickMath.getTickAtSqrtRatio(sqrtPriceX96After);\n        } else {\n            amount1 = !exactInput ? amountSpecified : amount1; // in case of rounding issues\n            if (amount1 < 0)\n                TransferHelper.safeTransfer(\n                    token1,\n                    recipient,\n                    uint256(-amount1)\n                );\n\n            uint256 fees0 = exactInput\n                ? uint256(amountSpecified) - uint256(amount0)\n                : SwapMath.swapFees(uint256(amount0), fee, true);\n            amount0 += int256(fees0);\n\n            uint256 balance0Before = balance0();\n            IMarginalV1SwapCallback(msg.sender).marginalV1SwapCallback(\n                amount0,\n                amount1,\n                data\n            );\n            if (amount0 == 0 || balance0Before + uint256(amount0) > balance0())\n                revert Amount0LessThanMin();\n\n            // account for protocol fees if fee on\n            uint256 delta = _state.feeProtocol > 0\n                ? fees0 / _state.feeProtocol\n                : 0;\n            if (delta > 0) protocolFees.token0 += uint128(delta);\n\n            // update state liquidity, sqrt price accounting for fee growth\n            (uint128 liquidityAfter, uint160 sqrtPriceX96After) = LiquidityMath\n                .liquiditySqrtPriceX96Next(\n                    _state.liquidity,\n                    _state.sqrtPriceX96,\n                    amount0 - int256(delta), // exclude protocol fees if any\n                    amount1\n                );\n            _state.liquidity = liquidityAfter;\n            _state.sqrtPriceX96 = sqrtPriceX96After;\n            _state.tick = TickMath.getTickAtSqrtRatio(sqrtPriceX96After);\n        }\n\n        // update pool state to latest\n        state = _state;\n\n        emit Swap(\n            msg.sender,\n            recipient,\n            amount0,\n            amount1,\n            _state.sqrtPriceX96,\n            _state.liquidity,\n            _state.tick\n        );\n    }\n\n    /// @inheritdoc IMarginalV1Pool\n    function mint(\n        address recipient,\n        uint128 liquidityDelta,\n        bytes calldata data\n    ) external lock returns (uint256 shares, uint256 amount0, uint256 amount1) {\n        uint256 _totalSupply = totalSupply();\n\n        bool initializing = (_totalSupply == 0);\n        if (initializing) initialize();\n\n        State memory _state = stateSynced();\n        uint128 liquidityDeltaMinimum = (initializing ? MINIMUM_LIQUIDITY : 0);\n        if (liquidityDelta <= liquidityDeltaMinimum)\n            revert InvalidLiquidityDelta();\n\n        (amount0, amount1) = LiquidityMath.toAmounts(\n            liquidityDelta,\n            _state.sqrtPriceX96\n        );\n        amount0 += 1; // rough round up on amounts in when add liquidity\n        amount1 += 1;\n\n        // total liquidity is available liquidity if all locked liquidity was returned to pool\n        uint128 totalLiquidityAfter = _state.liquidity +\n            liquidityLocked +\n            liquidityDelta;\n        shares = initializing\n            ? totalLiquidityAfter\n            : Math.mulDiv(\n                _totalSupply,\n                liquidityDelta,\n                totalLiquidityAfter - liquidityDelta\n            );\n\n        _state.liquidity += liquidityDelta;\n\n        // callback for amounts owed\n        uint256 balance0Before = balance0();\n        uint256 balance1Before = balance1();\n        IMarginalV1MintCallback(msg.sender).marginalV1MintCallback(\n            amount0,\n            amount1,\n            data\n        );\n        if (balance0Before + amount0 > balance0()) revert Amount0LessThanMin();\n        if (balance1Before + amount1 > balance1()) revert Amount1LessThanMin();\n\n        // update pool state to latest\n        state = _state;\n\n        // lock min liquidity on initial mint to avoid stuck states with price\n        if (initializing) {\n            shares -= uint256(MINIMUM_LIQUIDITY);\n            _mint(address(this), MINIMUM_LIQUIDITY);\n        }\n\n        _mint(recipient, shares);\n\n        emit Mint(msg.sender, recipient, liquidityDelta, amount0, amount1);\n    }\n\n    /// @inheritdoc IMarginalV1Pool\n    function burn(\n        address recipient,\n        uint256 shares\n    )\n        external\n        lock\n        returns (uint128 liquidityDelta, uint256 amount0, uint256 amount1)\n    {\n        State memory _state = stateSynced();\n        uint256 _totalSupply = totalSupply();\n\n        // total liquidity is available liquidity if all locked liquidity were returned to pool\n        uint128 totalLiquidityBefore = _state.liquidity + liquidityLocked;\n        liquidityDelta = uint128(\n            Math.mulDiv(totalLiquidityBefore, shares, _totalSupply)\n        );\n        if (liquidityDelta > _state.liquidity) revert InvalidLiquidityDelta();\n\n        (amount0, amount1) = LiquidityMath.toAmounts(\n            liquidityDelta,\n            _state.sqrtPriceX96\n        );\n        _state.liquidity -= liquidityDelta;\n\n        if (amount0 > 0)\n            TransferHelper.safeTransfer(token0, recipient, amount0);\n        if (amount1 > 0)\n            TransferHelper.safeTransfer(token1, recipient, amount1);\n\n        // update pool state to latest\n        state = _state;\n\n        _burn(msg.sender, shares);\n\n        emit Burn(msg.sender, recipient, liquidityDelta, amount0, amount1);\n    }\n\n    /// @inheritdoc IMarginalV1Pool\n    function setFeeProtocol(uint8 feeProtocol) external lock onlyFactoryOwner {\n        if (!(feeProtocol == 0 || (feeProtocol >= 4 && feeProtocol <= 10)))\n            revert InvalidFeeProtocol();\n        emit SetFeeProtocol(state.feeProtocol, feeProtocol);\n        state.feeProtocol = feeProtocol;\n    }\n\n    /// @inheritdoc IMarginalV1Pool\n    function collectProtocol(\n        address recipient\n    )\n        external\n        lock\n        onlyFactoryOwner\n        returns (uint128 amount0, uint128 amount1)\n    {\n        // no zero check on protocolFees as will revert in amounts calculation\n        amount0 = protocolFees.token0 - 1; // ensure slot not cleared for gas savings\n        amount1 = protocolFees.token1 - 1;\n\n        protocolFees.token0 = 1;\n        TransferHelper.safeTransfer(token0, recipient, amount0);\n\n        protocolFees.token1 = 1;\n        TransferHelper.safeTransfer(token1, recipient, amount1);\n\n        emit CollectProtocol(msg.sender, recipient, amount0, amount1);\n    }\n}\n"}, ".cache/uniswap-v3-core/v0.8/interfaces/IUniswapV3Pool.sol": {"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.30;\n\nimport {IUniswapV3PoolImmutables} from './pool/IUniswapV3PoolImmutables.sol';\nimport {IUniswapV3PoolState} from './pool/IUniswapV3PoolState.sol';\nimport {IUniswapV3PoolDerivedState} from './pool/IUniswapV3PoolDerivedState.sol';\nimport {IUniswapV3PoolActions} from './pool/IUniswapV3PoolActions.sol';\nimport {IUniswapV3PoolOwnerActions} from './pool/IUniswapV3PoolOwnerActions.sol';\nimport {IUniswapV3PoolErrors} from './pool/IUniswapV3PoolErrors.sol';\nimport {IUniswapV3PoolEvents} from './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolErrors,\n    IUniswapV3PoolEvents\n{\n\n}\n"}, ".cache/uniswap-v3-core/v0.8/interfaces/pool/IUniswapV3PoolImmutables.sol": {"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.30;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"}, ".cache/uniswap-v3-core/v0.8/interfaces/pool/IUniswapV3PoolEvents.sol": {"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.30;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"}, ".cache/uniswap-v3-core/v0.8/interfaces/pool/IUniswapV3PoolErrors.sol": {"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.30;\n\n/// @title Errors emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolErrors {\n    error LOK();\n    error TLU();\n    error TLM();\n    error TUM();\n    error AI();\n    error M0();\n    error M1();\n    error AS();\n    error IIA();\n    error L();\n    error F0();\n    error F1();\n}\n"}, ".cache/uniswap-v3-core/v0.8/interfaces/pool/IUniswapV3PoolState.sol": {"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.30;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// @return tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// @return observationIndex The index of the last oracle observation that was written,\n    /// @return observationCardinality The current maximum number of observations stored in the pool,\n    /// @return observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// @return feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    /// @return The liquidity at the current price of the pool\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper\n    /// @return liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// @return feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// @return feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// @return tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// @return secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// @return secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// @return initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return liquidity The amount of liquidity in the position,\n    /// @return feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// @return feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// @return tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// @return tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// @return tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// @return secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// @return initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"}, ".cache/uniswap-v3-core/v0.8/interfaces/pool/IUniswapV3PoolActions.sol": {"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.30;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"}, ".cache/uniswap-v3-core/v0.8/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.30;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"}, ".cache/uniswap-v3-core/v0.8/interfaces/pool/IUniswapV3PoolDerivedState.sol": {"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.30;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"}, "libraries/SqrtPriceMath.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport {FixedPoint96} from \"./FixedPoint96.sol\";\n\n/// @title Math library for sqrt price changes\n/// @notice Determines sqrt price changes after a opening leverage position and swapping on the pool\nlibrary SqrtPriceMath {\n    /// @dev Adopts Uni V3 tick limits of (-887272, 887272)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    uint160 internal constant MAX_SQRT_RATIO =\n        1461446703485210103287273052203988822378723970342;\n\n    error InvalidSqrtPriceX96();\n    error Amount0ExceedsReserve0();\n    error Amount1ExceedsReserve1();\n\n    /// @notice Calculates sqrtP after opening a leverage position\n    /// @dev Choice of insurance function made in this function\n    /// @param liquidity Pool liquidity before opening the position\n    /// @param sqrtPriceX96 Pool price before opening the position\n    /// @param liquidityDelta Liquidity removed from pool to collateralize position\n    /// @param zeroForOne Whether long token1 and short token0 (true), or long token0 and short token1 (false)\n    /// @param maintenance Minimum maintenance margin for the pool\n    /// @return The price after opening the position\n    function sqrtPriceX96NextOpen(\n        uint128 liquidity,\n        uint160 sqrtPriceX96,\n        uint128 liquidityDelta,\n        bool zeroForOne,\n        uint24 maintenance\n    ) internal pure returns (uint160) {\n        uint256 prod = uint256(liquidityDelta) *\n            uint256(liquidity - liquidityDelta);\n        prod = Math.mulDiv(prod, 1e6, 1e6 + uint256(maintenance));\n\n        // root round down ensures no free size but can have nextX96 go opposite of intended direction\n        // as liquidityDelta -> 0. position.assemble will revert tho if so\n        uint256 under = uint256(liquidity) ** 2 - 4 * prod;\n        uint256 root = Math.sqrt(under);\n\n        uint256 nextX96 = !zeroForOne\n            ? Math.mulDiv(\n                sqrtPriceX96,\n                uint256(liquidity) + root,\n                2 * uint256(liquidity - liquidityDelta)\n            )\n            : Math.mulDiv(\n                sqrtPriceX96,\n                2 * uint256(liquidity - liquidityDelta),\n                uint256(liquidity) + root\n            );\n        if (!(nextX96 >= MIN_SQRT_RATIO && nextX96 < MAX_SQRT_RATIO))\n            revert InvalidSqrtPriceX96();\n\n        return uint160(nextX96);\n    }\n\n    /// @notice Calculates sqrtP after swapping tokens\n    /// @dev Assumes amountSpecified != 0\n    /// @param liquidity Pool liquidity before swapping\n    /// @param sqrtPriceX96 Pool price before swapping\n    /// @param zeroForOne Whether swapping token0 for token1 (true), or token1 for token0 (false)\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @return The price after swapping\n    function sqrtPriceX96NextSwap(\n        uint128 liquidity,\n        uint160 sqrtPriceX96,\n        bool zeroForOne,\n        int256 amountSpecified\n    ) internal pure returns (uint160) {\n        bool exactInput = amountSpecified > 0;\n\n        uint256 nextX96;\n        if (exactInput) {\n            if (!zeroForOne) {\n                // 1 is known\n                // sqrt(P') = sqrt(P) + del y / L\n                uint256 prod = (\n                    uint256(amountSpecified) <= type(uint160).max\n                        ? (uint256(amountSpecified) <<\n                            FixedPoint96.RESOLUTION) / liquidity\n                        : Math.mulDiv(\n                            uint256(amountSpecified),\n                            FixedPoint96.Q96,\n                            liquidity\n                        )\n                );\n                nextX96 = uint256(sqrtPriceX96) + prod;\n            } else {\n                // 0 is known\n                // sqrt(P') = sqrt(P) - (del x * sqrt(P)) / (L / sqrt(P) + del x)\n                uint256 reserve0 = (uint256(liquidity) <<\n                    FixedPoint96.RESOLUTION) / sqrtPriceX96;\n                uint256 prod = (\n                    uint256(amountSpecified) <= type(uint96).max\n                        ? (uint256(amountSpecified) * uint256(sqrtPriceX96)) /\n                            (reserve0 + uint256(amountSpecified))\n                        : Math.mulDiv(\n                            uint256(amountSpecified),\n                            sqrtPriceX96,\n                            reserve0 + uint256(amountSpecified)\n                        )\n                );\n                nextX96 = uint256(sqrtPriceX96) - prod;\n            }\n        } else {\n            if (!zeroForOne) {\n                // 0 is known\n                // sqrt(P') = sqrt(P) - (del x * sqrt(P)) / (L / sqrt(P) + del x)\n                uint256 reserve0 = (uint256(liquidity) <<\n                    FixedPoint96.RESOLUTION) / sqrtPriceX96;\n                if (reserve0 <= uint256(-amountSpecified))\n                    revert Amount0ExceedsReserve0();\n\n                uint256 prod = (\n                    uint256(-amountSpecified) <= type(uint96).max\n                        ? (uint256(-amountSpecified) * uint256(sqrtPriceX96)) /\n                            (reserve0 - uint256(-amountSpecified))\n                        : Math.mulDiv(\n                            uint256(-amountSpecified),\n                            sqrtPriceX96,\n                            reserve0 - uint256(-amountSpecified)\n                        )\n                );\n                nextX96 = uint256(sqrtPriceX96) + prod;\n            } else {\n                // 1 is known\n                // sqrt(P') = sqrt(P) + del y / L\n                uint256 reserve1 = Math.mulDiv(\n                    liquidity,\n                    sqrtPriceX96,\n                    FixedPoint96.Q96\n                );\n                if (reserve1 <= uint256(-amountSpecified))\n                    revert Amount1ExceedsReserve1();\n\n                uint256 prod = (\n                    uint256(-amountSpecified) <= type(uint160).max\n                        ? (uint256(-amountSpecified) <<\n                            FixedPoint96.RESOLUTION) / liquidity\n                        : Math.mulDiv(\n                            uint256(-amountSpecified),\n                            FixedPoint96.Q96,\n                            liquidity\n                        )\n                );\n                nextX96 = uint256(sqrtPriceX96) - prod;\n            }\n        }\n        if (!(nextX96 >= MIN_SQRT_RATIO && nextX96 < MAX_SQRT_RATIO))\n            revert InvalidSqrtPriceX96();\n        return uint160(nextX96);\n    }\n}\n"}, ".cache/openzeppelin/v4.8.3/utils/math/Math.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"}, "libraries/FixedPoint96.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\n/// @title FixedPoint96\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\nlibrary FixedPoint96 {\n    uint8 internal constant RESOLUTION = 96;\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\n}\n"}, ".cache/openzeppelin/v4.8.3/token/ERC20/ERC20.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.30;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"}, ".cache/openzeppelin/v4.8.3/token/ERC20/IERC20.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"}, ".cache/openzeppelin/v4.8.3/token/ERC20/extensions/IERC20Metadata.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"}, ".cache/openzeppelin/v4.8.3/utils/Context.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"}, "libraries/Position.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport {SafeCast} from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\n\nimport {TickMath} from \"@uniswap/v3-core/contracts/libraries/TickMath.sol\";\n\nimport {FixedPoint64} from \"./FixedPoint64.sol\";\nimport {FixedPoint96} from \"./FixedPoint96.sol\";\nimport {FixedPoint128} from \"./FixedPoint128.sol\";\nimport {FixedPoint192} from \"./FixedPoint192.sol\";\n\nimport {OracleLibrary} from \"./OracleLibrary.sol\";\n\n/// @title Position library\n/// @notice Facilitates calculations, updates, and retrieval of leverage position info\n/// @dev Positions are represented in (x, y) space\nlibrary Position {\n    using SafeCast for uint256;\n\n    // info stored for each trader's leverage position\n    struct Info {\n        // size of position in token1 if zeroForOne = true or token0 if zeroForOne = false\n        uint128 size;\n        // debt owed by trader at settlement if zeroForOne = true, otherwise used for internal accounting only\n        uint128 debt0;\n        // debt owed by trader at settlement if zeroForOne = false, otherwise used for internal accounting only\n        uint128 debt1;\n        // insurance balances set aside by LPs to prevent liquidity shortfall in case of late liquidation\n        uint128 insurance0;\n        uint128 insurance1;\n        // whether the position is long token1 and short token0 (true), or long token0 and short token1 (false)\n        bool zeroForOne;\n        // whether the position has been liquidated\n        bool liquidated;\n        // tick before position was opened, used in maintenance margin requirements\n        int24 tick;\n        // timestamp when position was last synced for funding payments\n        uint32 blockTimestamp;\n        // delta between oracle and pool tick cumulatives at last funding sync (bar{a}_t - a_t)\n        int56 tickCumulativeDelta;\n        // margin backing position in token1 if zeroForOne = true or token0 if zeroForOne = false\n        uint128 margin;\n        // liquidity locked by LPs to collateralize the position. liability owed to pool\n        uint128 liquidityLocked;\n        // liquidation rewards escrowed with position in the native (gas) token to incentivize liquidations\n        uint256 rewards;\n    }\n\n    /// @notice Gets a position from positions mapping\n    /// @param positions The pool mapping that stores the leverage positions\n    /// @param owner The owner of the position\n    /// @param id The ID of the position\n    /// @return The position info associated with the (owner, ID) key\n    function get(\n        mapping(bytes32 => Info) storage positions,\n        address owner,\n        uint96 id\n    ) internal view returns (Info memory) {\n        return positions[keccak256(abi.encodePacked(owner, id))];\n    }\n\n    /// @notice Stores the given position in positions mapping\n    /// @dev Used to create a new position or to update existing positions\n    /// @param positions The pool mapping that stores the leverage positions\n    /// @param owner The owner of the position\n    /// @param id The ID of the position\n    /// @param position The position information to store\n    function set(\n        mapping(bytes32 => Info) storage positions,\n        address owner,\n        uint96 id,\n        Info memory position\n    ) internal {\n        positions[keccak256(abi.encodePacked(owner, id))] = position;\n    }\n\n    /// @notice Realizes funding payments via updates to position debt amounts\n    /// @param position The position to sync\n    /// @param blockTimestampLast The latest `block.timestamp` to sync to\n    /// @param tickCumulativeLast The `tickCumulative` from the pool at `blockTimestampLast`\n    /// @param oracleTickCumulativeLast The `tickCumulative` from the oracle at `blockTimestampLast`\n    /// @param tickCumulativeRateMax The maximum rate of change in tick cumulative between the oracle and pool `tickCumulative` values\n    /// @param fundingPeriod The pool funding period to benchmark funding payments to\n    /// @return The synced position\n    function sync(\n        Info memory position,\n        uint32 blockTimestampLast,\n        int56 tickCumulativeLast,\n        int56 oracleTickCumulativeLast,\n        uint24 tickCumulativeRateMax,\n        uint32 fundingPeriod\n    ) internal pure returns (Info memory) {\n        // early exit if nothing to update\n        if (blockTimestampLast == position.blockTimestamp) return position;\n\n        // oracle tick - marginal tick (bar{a}_t - a_t)\n        int56 tickCumulativeDeltaLast = OracleLibrary.oracleTickCumulativeDelta(\n            tickCumulativeLast,\n            oracleTickCumulativeLast\n        );\n        (uint128 debt0, uint128 debt1) = debtsAfterFunding(\n            position,\n            blockTimestampLast,\n            tickCumulativeDeltaLast,\n            tickCumulativeRateMax,\n            fundingPeriod\n        );\n\n        position.debt0 = debt0;\n        position.debt1 = debt1;\n        position.blockTimestamp = blockTimestampLast;\n        position.tickCumulativeDelta = tickCumulativeDeltaLast;\n        return position;\n    }\n\n    /// @notice Liquidates an existing position\n    /// @param position The position to liquidate\n    /// @return positionAfter The liquidated position info\n    function liquidate(\n        Info memory position\n    ) internal pure returns (Info memory positionAfter) {\n        positionAfter.zeroForOne = position.zeroForOne;\n        positionAfter.liquidated = true;\n        positionAfter.tick = position.tick;\n        positionAfter.blockTimestamp = position.blockTimestamp;\n        positionAfter.tickCumulativeDelta = position.tickCumulativeDelta;\n    }\n\n    /// @notice Settles existing position\n    /// @param position The position to settle\n    /// @return positionAfter The settled position info\n    function settle(\n        Info memory position\n    ) internal pure returns (Info memory positionAfter) {\n        positionAfter.zeroForOne = position.zeroForOne;\n        positionAfter.liquidated = position.liquidated;\n        positionAfter.tick = position.tick;\n        positionAfter.blockTimestamp = position.blockTimestamp;\n        positionAfter.tickCumulativeDelta = position.tickCumulativeDelta;\n    }\n\n    /// @notice Assembles a new position from pool state\n    /// @dev zeroForOne = true means short position (long token1, short token0)\n    /// @param liquidity The pool liquidity before opening the position\n    /// @param sqrtPriceX96 The pool sqrt price before opening the position\n    /// @param sqrtPriceX96Next The pool sqrt price after opening the position\n    /// @param liquidityDelta The delta in pool liquidity used to collateralize the position\n    /// @param zeroForOne Whether the position is long token1 and short token0 (true), or long token0 and short token1 (false)\n    /// @param tick The pool tick before opening the position\n    /// @param blockTimestampStart The timestamp at which the pool state was last synced before opening the position\n    /// @param tickCumulativeStart The tick cumulative value from the pool at `blockTimestampStart`\n    /// @param oracleTickCumulativeStart The tick cumulative value from the oracle at `blockTimestampStart`\n    /// @return position The assembled position info\n    function assemble(\n        uint128 liquidity,\n        uint160 sqrtPriceX96,\n        uint160 sqrtPriceX96Next,\n        uint128 liquidityDelta,\n        bool zeroForOne,\n        int24 tick,\n        uint32 blockTimestampStart,\n        int56 tickCumulativeStart,\n        int56 oracleTickCumulativeStart\n    ) internal pure returns (Info memory position) {\n        position.zeroForOne = zeroForOne;\n        position.tick = tick;\n        position.blockTimestamp = blockTimestampStart;\n        position.tickCumulativeDelta =\n            oracleTickCumulativeStart -\n            tickCumulativeStart;\n        position.liquidityLocked = liquidityDelta;\n\n        position.size = size(\n            liquidity,\n            sqrtPriceX96,\n            sqrtPriceX96Next,\n            zeroForOne\n        );\n        (position.insurance0, position.insurance1) = insurances(\n            liquidity,\n            sqrtPriceX96,\n            sqrtPriceX96Next,\n            liquidityDelta,\n            zeroForOne\n        );\n        (position.debt0, position.debt1) = debts(\n            sqrtPriceX96Next,\n            liquidityDelta,\n            position.insurance0,\n            position.insurance1\n        );\n    }\n\n    /// @notice Size of position in (x, y) amounts\n    /// @dev Size amount in token1 if zeroForOne = true, or in token0 if zeroForOne = false\n    /// @param liquidity The pool liquidity before opening the position\n    /// @param sqrtPriceX96 The pool sqrt price before opening the position\n    /// @param sqrtPriceX96Next The pool sqrt price after opening the position\n    /// @param zeroForOne Whether the position is long token1 and short token0 (true), or long token0 and short token1 (false)\n    /// @return The position size\n    function size(\n        uint128 liquidity,\n        uint160 sqrtPriceX96,\n        uint160 sqrtPriceX96Next,\n        bool zeroForOne\n    ) internal pure returns (uint128) {\n        if (!zeroForOne) {\n            // L / sqrt(P) - L / sqrt(P')\n            return\n                ((uint256(liquidity) << FixedPoint96.RESOLUTION) /\n                    sqrtPriceX96 -\n                    (uint256(liquidity) << FixedPoint96.RESOLUTION) /\n                    sqrtPriceX96Next).toUint128();\n        } else {\n            // L * sqrt(P) - L * sqrt(P')\n            return\n                (\n                    Math.mulDiv(\n                        liquidity,\n                        sqrtPriceX96 - sqrtPriceX96Next,\n                        FixedPoint96.Q96\n                    )\n                ).toUint128();\n        }\n    }\n\n    /// @notice Insurance balances to back position in (x, y) amounts\n    /// @param liquidity The pool liquidity before opening the position\n    /// @param sqrtPriceX96 The pool sqrt price before opening the position\n    /// @param sqrtPriceX96Next The pool sqrt price after opening the position\n    /// @param liquidityDelta The delta in pool liquidity used to collateralize the position\n    /// @param zeroForOne Whether the position is long token1 and short token0 (true), or long token0 and short token1 (false)\n    /// @return insurance0 The insurance reserves in token0 needed to prevent liquidity shortfall for late liquidations\n    /// @return insurance1 The insurance reserves in token1 needed to prevent liquidity shortfall for late liquidations\n    function insurances(\n        uint128 liquidity,\n        uint160 sqrtPriceX96,\n        uint160 sqrtPriceX96Next,\n        uint128 liquidityDelta,\n        bool zeroForOne\n    ) internal pure returns (uint128 insurance0, uint128 insurance1) {\n        uint256 prod = !zeroForOne\n            ? Math.mulDiv(\n                liquidity - liquidityDelta,\n                sqrtPriceX96Next,\n                sqrtPriceX96\n            ) // iy / y = 1 - sqrt(P'/P) * (1 - del L / L)\n            : Math.mulDiv(\n                liquidity - liquidityDelta,\n                sqrtPriceX96,\n                sqrtPriceX96Next\n            ); // iy / y = 1 - sqrt(P/P') * (1 - del L / L)\n\n        insurance0 = (((uint256(liquidity) - prod) << FixedPoint96.RESOLUTION) /\n            sqrtPriceX96).toUint128();\n        insurance1 = (\n            Math.mulDiv(\n                uint256(liquidity) - prod,\n                sqrtPriceX96,\n                FixedPoint96.Q96\n            )\n        ).toUint128();\n    }\n\n    /// @notice Debts owed by position in (x, y) amounts\n    /// @dev Uses invariant (insurance0 + debt0) * (insurance1 + debt1) = liquidityDelta * sqrtPriceNext\n    /// @param sqrtPriceX96Next The pool sqrt price after opening the position\n    /// @param liquidityDelta The delta in pool liquidity used to collateralize the position\n    /// @param insurance0 The position insurance reserves in token0\n    /// @param insurance1 The position insurance reserves in token1\n    /// @return debt0 The debt in token0 the position owes to the pool\n    /// @return debt1 The debt in token1 the position owes to the pool\n    function debts(\n        uint160 sqrtPriceX96Next,\n        uint128 liquidityDelta,\n        uint128 insurance0,\n        uint128 insurance1\n    ) internal pure returns (uint128 debt0, uint128 debt1) {\n        // ix + dx = del L / sqrt(P'); iy + dy = del L * sqrt(P')\n        debt0 = ((uint256(liquidityDelta) << FixedPoint96.RESOLUTION) /\n            sqrtPriceX96Next -\n            uint256(insurance0)).toUint128();\n        debt1 = (Math.mulDiv(\n            liquidityDelta,\n            sqrtPriceX96Next,\n            FixedPoint96.Q96\n        ) - uint256(insurance1)).toUint128();\n    }\n\n    /// @notice Fees owed when opening the position in (x, y) amounts\n    /// @dev Fees taken proportional to size\n    /// @param size The position size\n    /// @param fee The fee rate charged on position size\n    /// @return The amount of fees charged to open the position\n    function fees(uint128 size, uint24 fee) internal pure returns (uint256) {\n        return (uint256(size) * fee) / 1e6;\n    }\n\n    /// @notice Liquidation rewards required to set aside for liquidator in native (gas) token amount\n    /// @dev Returned on settle to position owner or used as incentive for liquidator to liquidate position when unsafe\n    /// @param blockBaseFee Current block base fee\n    /// @param blockBaseFeeMin Minimum block base fee to use in calculating cost to execute call to liquidate\n    /// @param gas Estimated gas required to execute call to liquidate\n    /// @param premium Liquidation premium to incentivize potential liquidators with\n    /// @return The liquidation rewards to set aside for liquidator if position unsafe\n    function liquidationRewards(\n        uint256 blockBaseFee,\n        uint256 blockBaseFeeMin,\n        uint256 gas,\n        uint24 premium\n    ) internal pure returns (uint256) {\n        uint256 baseFee = (\n            blockBaseFee > blockBaseFeeMin ? blockBaseFee : blockBaseFeeMin\n        );\n        // need base fee of ~4e62 for possible overflow with gas limit of 30e6\n        return (baseFee * gas * uint256(premium)) / 1e6;\n    }\n\n    /// @notice Absolute minimum margin amount required to be held in position\n    /// @dev Uses `position.tick` prior to position open (alongside insurance balances) to ensure repayment to pool of at least liquidityDelta liability if ignore funding\n    /// @param position The position to check minimum margin amounts for\n    /// @param maintenance The minimum maintenance margin requirement for the pool\n    /// @return The minimum amount of margin the position must hold\n    function marginMinimum(\n        Info memory position,\n        uint24 maintenance\n    ) internal pure returns (uint128) {\n        uint160 sqrtPriceX96 = TickMath.getSqrtRatioAtTick(position.tick); // price before open\n        if (!position.zeroForOne) {\n            // cx >= (1+M) * dy / P - sx\n            uint256 debt1Adjusted = (uint256(position.debt1) *\n                (1e6 + uint256(maintenance))) / 1e6;\n\n            uint256 prod = sqrtPriceX96 <= type(uint128).max\n                ? Math.mulDiv(\n                    debt1Adjusted,\n                    FixedPoint192.Q192,\n                    uint256(sqrtPriceX96) * uint256(sqrtPriceX96)\n                )\n                : Math.mulDiv(\n                    debt1Adjusted,\n                    FixedPoint128.Q128,\n                    Math.mulDiv(sqrtPriceX96, sqrtPriceX96, FixedPoint64.Q64)\n                );\n            return\n                prod > uint256(position.size)\n                    ? (prod - uint256(position.size)).toUint128()\n                    : 0; // check necessary due to funding\n        } else {\n            // cy >= (1+M) * dx * P - sy\n            uint256 debt0Adjusted = (uint256(position.debt0) *\n                (1e6 + uint256(maintenance))) / 1e6;\n\n            uint256 prod = sqrtPriceX96 <= type(uint128).max\n                ? Math.mulDiv(\n                    debt0Adjusted,\n                    uint256(sqrtPriceX96) * uint256(sqrtPriceX96),\n                    FixedPoint192.Q192\n                )\n                : Math.mulDiv(\n                    debt0Adjusted,\n                    Math.mulDiv(sqrtPriceX96, sqrtPriceX96, FixedPoint64.Q64),\n                    FixedPoint128.Q128\n                );\n            return\n                prod > uint256(position.size)\n                    ? (prod - uint256(position.size)).toUint128()\n                    : 0; // check necessary due to funding\n        }\n    }\n\n    /// @notice Amounts (x, y) of pool reserves locked in position\n    /// @dev Includes margin in the event position were to be liquidated\n    /// @param position The position\n    /// @return amount0 The amount of token0 set aside for the position\n    /// @return amount1 The amount of token1 set aside for the position\n    function amountsLocked(\n        Info memory position\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\n        if (!position.zeroForOne) {\n            amount0 =\n                uint256(position.size) +\n                uint256(position.margin) +\n                uint256(position.debt0) +\n                uint256(position.insurance0);\n            amount1 = position.insurance1;\n        } else {\n            amount0 = position.insurance0;\n            amount1 =\n                uint256(position.size) +\n                uint256(position.margin) +\n                uint256(position.debt1) +\n                uint256(position.insurance1);\n        }\n    }\n\n    /// @notice Debt adjusted for funding\n    /// @dev Ref @with-backed/papr/src/UniswapOracleFundingRateController.sol#L156\n    /// Follows debt0Next = debt0 * (oracleTwap / poolTwap) ** (dt / fundingPeriod) if zeroForOne = true\n    //  or debt1Next = debt1 * (poolTwap / oracleTwap) ** (dt / fundingPeriod) if zeroForOne = false\n    /// @param position The position to update debts for funding\n    /// @param blockTimestampLast The block timestamp at the last pool state sync\n    /// @param tickCumulativeDeltaLast The delta in oracle tick cumulative minus pool tick cumulative values at `blockTimestampLast`\n    /// @param tickCumulativeRateMax The maximum rate of change in tick cumulative between the oracle and pool `tickCumulative` values\n    /// @param fundingPeriod The pool funding period to benchmark funding payments to\n    /// @return debt0 The position debt in token0 after funding\n    /// @return debt1 The position debt in token1 after funding\n    function debtsAfterFunding(\n        Info memory position,\n        uint32 blockTimestampLast,\n        int56 tickCumulativeDeltaLast,\n        uint24 tickCumulativeRateMax,\n        uint32 fundingPeriod\n    ) internal pure returns (uint128 debt0, uint128 debt1) {\n        int56 deltaMax;\n        unchecked {\n            deltaMax =\n                int56(uint56(tickCumulativeRateMax)) *\n                int56(uint56(blockTimestampLast - position.blockTimestamp));\n        }\n        if (!position.zeroForOne) {\n            // debt1Now = debt1Start * (P / bar{P}) ** (now - start) / fundingPeriod\n            // delta = (a_t - bar{a}_t) - (a_0 - bar{a}_0), clamped by funding rate bounds\n            int56 delta = OracleLibrary.oracleTickCumulativeDelta(\n                tickCumulativeDeltaLast,\n                position.tickCumulativeDelta\n            );\n            if (delta > deltaMax) delta = deltaMax;\n            else if (delta < -deltaMax) delta = -deltaMax;\n\n            // @dev ok as position is unsafe well before arithmeticMeanTick reaches min/max tick given fundingPeriod, tickCumulativeRateMax values\n            uint160 numeratorX96 = OracleLibrary.oracleSqrtPriceX96(\n                delta,\n                fundingPeriod / 2 // div by 2 given sqrt price result\n            );\n            debt0 = position.debt0;\n            debt1 = Math\n                .mulDiv(position.debt1, numeratorX96, FixedPoint96.Q96)\n                .toUint128();\n        } else {\n            // debt0Now = debt0Start * (bar{P} / P) ** (now - start) / fundingPeriod\n            // delta = (bar{a}_t - a_t) - (bar{a}_0 - a_0), clamped by funding rate bounds\n            int56 delta = OracleLibrary.oracleTickCumulativeDelta(\n                position.tickCumulativeDelta,\n                tickCumulativeDeltaLast\n            );\n            if (delta > deltaMax) delta = deltaMax;\n            else if (delta < -deltaMax) delta = -deltaMax;\n\n            // @dev ok as position is unsafe well before arithmeticMeanTick reaches min/max tick given fundingPeriod, tickCumulativeRateMax values\n            uint160 numeratorX96 = OracleLibrary.oracleSqrtPriceX96(\n                delta,\n                fundingPeriod / 2 // div by 2 given sqrt price result\n            );\n            debt0 = Math\n                .mulDiv(position.debt0, numeratorX96, FixedPoint96.Q96)\n                .toUint128();\n            debt1 = position.debt1;\n        }\n    }\n\n    /// @notice Whether the position is safe from liquidation\n    /// @dev If not safe, position can be liquidated\n    /// Considered safe if (`position.margin` + `position.size`) / oracleTwap >= (1 + `maintenance`) * `position.debt0` when position.zeroForOne = true\n    /// or (`position.margin` + `position.size`) * oracleTwap >= (1 + `maintenance`) * `position.debt1` when position.zeroForOne = false\n    /// @param position The position to check safety of\n    /// @param sqrtPriceX96 The oracle time weighted average sqrt price\n    /// @param maintenance The minimum maintenance margin requirement for the pool\n    /// @return true if safe and false if not safe\n    function safe(\n        Info memory position,\n        uint160 sqrtPriceX96,\n        uint24 maintenance\n    ) internal pure returns (bool) {\n        if (!position.zeroForOne) {\n            uint256 debt1Adjusted = (uint256(position.debt1) *\n                (1e6 + uint256(maintenance))) / 1e6;\n            uint256 liquidityCollateral = Math.mulDiv(\n                uint256(position.margin) + uint256(position.size),\n                sqrtPriceX96,\n                FixedPoint96.Q96\n            );\n            uint256 liquidityDebt = (debt1Adjusted << FixedPoint96.RESOLUTION) /\n                sqrtPriceX96;\n            return liquidityCollateral >= liquidityDebt;\n        } else {\n            uint256 debt0Adjusted = (uint256(position.debt0) *\n                (1e6 + uint256(maintenance))) / 1e6;\n            uint256 liquidityCollateral = ((uint256(position.margin) +\n                uint256(position.size)) << FixedPoint96.RESOLUTION) /\n                sqrtPriceX96;\n            uint256 liquidityDebt = Math.mulDiv(\n                debt0Adjusted,\n                sqrtPriceX96,\n                FixedPoint96.Q96\n            );\n            return liquidityCollateral >= liquidityDebt;\n        }\n    }\n}\n"}, "libraries/OracleLibrary.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\nimport {TickMath} from \"@uniswap/v3-core/contracts/libraries/TickMath.sol\";\n\n/// @title Oracle library\n/// @notice Enables calculation of the geometric time weighted average price\nlibrary OracleLibrary {\n    /// @notice Returns the geometric time weighted average sqrtP\n    /// @dev Rounds toward zero for both positive and negative tick delta\n    /// @param tickCumulativeDelta The delta in tick cumulative over the averaging interval\n    /// @param timeDelta The time to average over\n    /// @return The geometric time weighted average price\n    function oracleSqrtPriceX96(\n        int56 tickCumulativeDelta,\n        uint32 timeDelta\n    ) internal pure returns (uint160) {\n        // @uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol#L35\n        int24 arithmeticMeanTick = int24(\n            tickCumulativeDelta / int56(uint56(timeDelta))\n        );\n        return TickMath.getSqrtRatioAtTick(arithmeticMeanTick);\n    }\n\n    /// @notice Returns the tick cumulative delta over an interval\n    /// @dev Allows for tick cumulative overflow\n    /// @param tickCumulativeStart The tick cumulative value at the start of the interval\n    /// @param tickCumulativeEnd The tick cumulative value at the end of the interval\n    /// @return The delta in tick cumulative over the averaging interval\n    function oracleTickCumulativeDelta(\n        int56 tickCumulativeStart,\n        int56 tickCumulativeEnd\n    ) internal pure returns (int56) {\n        unchecked {\n            return tickCumulativeEnd - tickCumulativeStart;\n        }\n    }\n}\n"}, ".cache/uniswap-v3-core/v0.8/libraries/TickMath.sol": {"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.30;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    error T();\n    error R();\n\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        unchecked {\n            uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n            if (absTick > uint256(int256(MAX_TICK))) revert T();\n\n            uint256 ratio = absTick & 0x1 != 0\n                ? 0xfffcb933bd6fad37aa2d162d1a594001\n                : 0x100000000000000000000000000000000;\n            if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n            if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n            if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n            if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n            if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n            if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n            if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n            if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n            if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n            if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n            if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n            if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n            if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n            if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n            if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n            if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n            if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n            if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n            if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n            if (tick > 0) ratio = type(uint256).max / ratio;\n\n            // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n            // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n            // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n            sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n        }\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        unchecked {\n            // second inequality must be < because the price can never reach the price at the max tick\n            if (!(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO)) revert R();\n            uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n            uint256 r = ratio;\n            uint256 msb = 0;\n\n            assembly {\n                let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(5, gt(r, 0xFFFFFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(4, gt(r, 0xFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(3, gt(r, 0xFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(2, gt(r, 0xF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(1, gt(r, 0x3))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := gt(r, 0x1)\n                msb := or(msb, f)\n            }\n\n            if (msb >= 128) r = ratio >> (msb - 127);\n            else r = ratio << (127 - msb);\n\n            int256 log_2 = (int256(msb) - 128) << 64;\n\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(63, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(62, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(61, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(60, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(59, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(58, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(57, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(56, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(55, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(54, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(53, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(52, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(51, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(50, f))\n            }\n\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n            tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n        }\n    }\n}\n"}, "libraries/FixedPoint192.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\n/// @title FixedPoint192\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\nlibrary FixedPoint192 {\n    uint8 internal constant RESOLUTION = 192;\n    uint256 internal constant Q192 =\n        0x1000000000000000000000000000000000000000000000000;\n}\n"}, ".cache/openzeppelin/v4.8.3/utils/math/SafeCast.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        require(value <= type(uint248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        require(value <= type(uint240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        require(value <= type(uint232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        require(value <= type(uint216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        require(value <= type(uint208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        require(value <= type(uint200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        require(value <= type(uint192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        require(value <= type(uint184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        require(value <= type(uint176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        require(value <= type(uint168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        require(value <= type(uint160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        require(value <= type(uint152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        require(value <= type(uint144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        require(value <= type(uint136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        require(value <= type(uint120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        require(value <= type(uint112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        require(value <= type(uint104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        require(value <= type(uint88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        require(value <= type(uint80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        require(value <= type(uint72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        require(value <= type(uint56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        require(value <= type(uint48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        require(value <= type(uint40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        require(value <= type(uint24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     *\n     * _Available since v3.0._\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 248 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 240 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 232 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 224 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 216 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 208 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 200 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 192 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 184 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 176 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 168 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 160 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 152 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 144 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 136 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 128 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 120 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 112 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 104 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 96 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 88 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 80 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 72 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 64 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 56 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 48 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 40 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 32 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 24 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 16 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 8 bits\");\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     *\n     * _Available since v3.0._\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"}, "libraries/FixedPoint128.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\n/// @title FixedPoint128\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\nlibrary FixedPoint128 {\n    uint8 internal constant RESOLUTION = 128;\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\n}\n"}, "libraries/FixedPoint64.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\n/// @title FixedPoint64\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\nlibrary FixedPoint64 {\n    uint8 internal constant RESOLUTION = 64;\n    uint256 internal constant Q64 = 0x10000000000000000;\n}\n"}, "interfaces/IMarginalV1Pool.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @title The interface for a Marginal v1 pool\n/// @notice A Marginal v1 pool facilitates leverage trading, swapping, and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev Inherits from IERC20 as liquidity providers are minted fungible pool tokens\ninterface IMarginalV1Pool is IERC20 {\n    /// @notice The Marginal v1 factory that created the pool\n    /// @return The address of the Marginal v1 factory\n    function factory() external view returns (address);\n\n    /// @notice The Uniswap v3 oracle referenced by the pool for funding and position safety\n    /// @return The address of the Uniswap v3 oracle referenced by the pool\n    function oracle() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The address of the token0 contract\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The address of the token1 contract\n    function token1() external view returns (address);\n\n    /// @notice The minimum maintenance requirement for leverage positions on the pool\n    /// @return The minimum maintenance requirement\n    function maintenance() external view returns (uint24);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The premium multiplier on liquidation rewards in hundredths of a bip, i.e. 1e-6\n    /// @dev Liquidation rewards set aside in native (gas) token.\n    /// Premium acts as an incentive above the expected gas cost to call IMarginalV1Pool#liquidate.\n    /// @return The premium multiplier\n    function rewardPremium() external view returns (uint24);\n\n    /// @notice The maximum rate of change in tick cumulative between the Marginal v1 pool and the Uniswap v3 oracle\n    /// @dev Puts a ceiling on funding paid per second\n    /// @return The maximum tick cumulative rate per second\n    function tickCumulativeRateMax() external view returns (uint24);\n\n    /// @notice The amount of time in seconds to average the Uniswap v3 oracle TWAP over to assess position safety\n    /// @return The averaging time for the Uniswap v3 oracle TWAP in seconds\n    function secondsAgo() external view returns (uint32);\n\n    /// @notice The period in seconds to benchmark funding payments with respect to\n    /// @dev Acts as an averaging period on tick cumulative changes between the Marginal v1 pool and the Uniswap v3 oracle\n    /// @return The funding period in seconds\n    function fundingPeriod() external view returns (uint32);\n\n    /// @notice The pool state represented in (L, sqrt(P)) space\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// totalPositions The total number of leverage positions that have ever been taken out on the pool\n    /// liquidity The currently available liquidity offered by the pool for swaps and leverage positions\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// blockTimestamp The last `block.timestamp` at which state was synced\n    /// tickCumulative The tick cumulative running sum of the pool, used in funding calculations\n    /// feeProtocol The protocol fee for both tokens of the pool\n    /// initialized Whether the pool has been initialized\n    function state()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            uint96 totalPositions,\n            uint128 liquidity,\n            int24 tick,\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint8 feeProtocol,\n            bool initialized\n        );\n\n    /// @notice The liquidity used to capitalize outstanding leverage positions\n    /// @return The liquidity locked for outstanding leverage positions\n    function liquidityLocked() external view returns (uint128);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    /// @return protocolFees0 The amount of token0 owed to the protocol\n    /// @return protocolFees1 The amount of token1 owed to the protocol\n    function protocolFees()\n        external\n        view\n        returns (uint128 protocolFees0, uint128 protocolFees1);\n\n    /// @notice Returns information about a leverage position by the position's key\n    /// @dev Either debt0 (zeroForOne = true) or debt1 (zeroForOne = false) will be updated each funding sync\n    /// @param key The position's key is a hash of the packed encoding of the owner and the position ID\n    /// @return size The position size in the token the owner is long\n    /// debt0 The position debt in token0 owed to the pool at settlement. If long token1 (zeroForOne = true), this is the debt to be repaid at settlement by owner. Otherwise, simply used for internal accounting\n    /// debt1 The position debt in token1 owed to the pool at settlement. If long token0 (zeroForOne = false), this is the debt to be repaid at settlement by owner. Otherwise, simply used for internal accounting\n    /// insurance0 The insurance in token0 set aside to backstop the position in case of late liquidations\n    /// insurance1 The insurance in token1 set aside to backstop the position in case of late liquidations\n    /// zeroForOne Whether the position is long token1 and short token0 (true) or long token0 and short token1 (false)\n    /// liquidated Whether the position has been liquidated\n    /// tick The pool tick prior to opening the position\n    /// blockTimestamp The `block.timestamp` at which the position was last synced for funding\n    /// tickCumulativeDelta The difference in the Uniswap v3 oracle tick cumulative and the Marginal v1 pool tick cumulative at the last funding sync\n    /// margin The position margin in the token the owner is long\n    /// liquidityLocked The liquidity locked by the pool to collateralize the position\n    /// rewards The liquidation rewards in the native (gas) token received by liquidator if position becomes unsafe\n    function positions(\n        bytes32 key\n    )\n        external\n        view\n        returns (\n            uint128 size,\n            uint128 debt0,\n            uint128 debt1,\n            uint128 insurance0,\n            uint128 insurance1,\n            bool zeroForOne,\n            bool liquidated,\n            int24 tick,\n            uint32 blockTimestamp,\n            int56 tickCumulativeDelta,\n            uint128 margin,\n            uint128 liquidityLocked,\n            uint256 rewards\n        );\n\n    /// @notice Opens a leverage position on the pool\n    /// @dev The caller of this method receives a callback in the form of IMarginalV1OpenCallback#marginalV1OpenCallback.\n    /// The caller must forward liquidation rewards in the native (gas) token to be escrowed by the pool contract\n    /// Rewards determined by current `block.basefee` * estimated gas cost to call IMarginalV1Pool#liquidate * rewardPremium\n    /// @param recipient The address of the owner of the opened position\n    /// @param zeroForOne Whether long token1 and short token0 (true), or long token0 and short token1 (false)\n    /// @param liquidityDelta The amount of liquidity for the pool to lock to capitalize the position\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after opening the position otherwise the call reverts. If one for zero, the price cannot be greater than this value after opening\n    /// @param margin The amount of margin used to back the position in the token the position is long\n    /// @param data Any data to be passed through to the callback\n    /// @return id The ID of the opened position\n    /// @return size The size of the opened position in the token the position is long. Excludes margin amount provided by caller\n    /// @return debt The debt of the opened position in the token the position is short\n    /// @return amount0 The amount of token0 caller must send to pool to open the position\n    /// @return amount1 The amount of token1 caller must send to pool to open the position\n    function open(\n        address recipient,\n        bool zeroForOne,\n        uint128 liquidityDelta,\n        uint160 sqrtPriceLimitX96,\n        uint128 margin,\n        bytes calldata data\n    )\n        external\n        payable\n        returns (\n            uint256 id,\n            uint256 size,\n            uint256 debt,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    /// @notice Adjusts the margin used to back a position on the pool\n    /// @dev The caller of this method receives a callback in the form of IMarginalV1AdjustCallback#marginalV1AdjustCallback\n    /// Old position margin is flashed out to recipient prior to the callback\n    /// @param recipient The address to receive the old position margin\n    /// @param id The ID of the position to adjust\n    /// @param marginDelta The delta of the margin backing the position on the pool. Adding margin to the position when positive, removing margin when negative\n    /// @param data Any data to be passed through to the callback\n    /// @return margin0 The amount of token0 to be used as the new margin backing the position\n    /// @return margin1 The amount of token1 to be used as the new margin backing the position\n    function adjust(\n        address recipient,\n        uint96 id,\n        int128 marginDelta,\n        bytes calldata data\n    ) external returns (uint256 margin0, uint256 margin1);\n\n    /// @notice Settles a position on the pool\n    /// @dev The caller of this method receives a callback in the form of IMarginalV1SettleCallback#marginalV1SettleCallback.\n    /// If a contract, `recipient` must implement a `receive()` function to receive the escrowed liquidation rewards in the native (gas) token from the pool.\n    /// Position size, margin, and liquidation rewards are flashed out before the callback to allow the caller to swap to repay the debt to the pool\n    /// @param recipient The address to receive the size, margin, and liquidation rewards of the settled position\n    /// @param id The ID of the position to settle\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool. Position debt into the pool (> 0) if long token1 (zeroForOne = true), or position size and margin out of the pool (< 0) if long token0 (zeroForOne = false)\n    /// @return amount1 The delta of the balance of token1 of the pool. Position size and margin out of the pool (< 0) if long token1 (zeroForOne = true), or position debt into the pool (> 0) if long token0 (zeroForOne = false)\n    /// @return rewards The amount of escrowed native (gas) token sent to `recipient`\n    function settle(\n        address recipient,\n        uint96 id,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1, uint256 rewards);\n\n    /// @notice Liquidates a position on the pool\n    /// @dev Reverts if position is safe from liquidation. Position is considered safe if\n    /// (`position.margin` + `position.size`) / oracleTwap >= (1 + `maintenance`) * `position.debt0` when position.zeroForOne = true\n    /// (`position.margin` + `position.size`) * oracleTwap >= (1 + `maintenance`) * `position.debt1` when position.zeroForOne = false\n    /// Safety checks are performed after syncing the position debts for funding payments\n    /// If a contract, `recipient` must implement a `receive()` function to receive the escrowed liquidation rewards in the native (gas) token from the pool.\n    /// @param recipient The address to receive liquidation rewards escrowed with the position\n    /// @param owner The address of the owner of the position to liquidate\n    /// @param id The ID of the position to liquidate\n    /// @return rewards The amount of escrowed native (gas) token sent to `recipient`\n    function liquidate(\n        address recipient,\n        address owner,\n        uint96 id\n    ) external returns (uint256 rewards);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IMarginalV1SwapCallback#marginalV1SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap otherwise the call reverts. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Adds liquidity to the pool\n    /// @dev The caller of this method receives a callback in the form of IMarginalV1MintCallback#marginalV1MintCallback.\n    /// The pool is initialized through the first call to mint\n    /// @param recipient The address to mint LP tokens to after adding liquidity to the pool\n    /// @param liquidityDelta The liquidity added to the pool\n    /// @param data Any data to be passed through to the callback\n    /// @return shares The amount of LP token shares minted to recipient\n    /// @return amount0 The amount of token0 added to the pool reserves\n    /// @return amount1 The amount of token1 added to the pool reserves\n    function mint(\n        address recipient,\n        uint128 liquidityDelta,\n        bytes calldata data\n    ) external returns (uint256 shares, uint256 amount0, uint256 amount1);\n\n    /// @notice Removes liquidity from the pool\n    /// @dev Reverts if not enough liquidity available to exit due to outstanding leverage positions\n    /// @param recipient The address to send token amounts to after removing liquidity from the pool\n    /// @param shares The amount of LP token shares to burn\n    /// @return liquidityDelta The liquidity removed from the pool\n    /// @return amount0 The amount of token0 removed from pool reserves\n    /// @return amount1 The amount of token1 removed from pool reserves\n    function burn(\n        address recipient,\n        uint256 shares\n    )\n        external\n        returns (uint128 liquidityDelta, uint256 amount0, uint256 amount1);\n\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol new protocol fee denominator for the pool\n    function setFeeProtocol(uint8 feeProtocol) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"}, "interfaces/callback/IMarginalV1SettleCallback.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\n/// @title The interface for the Marginal v1 settle callback\n/// @notice Callbacks called by Marginal v1 pools when settling the debt owed by a position to the pool\n/// @dev Any contract that calls IMarginalV1Pool#settle must implement this interface\ninterface IMarginalV1SettleCallback {\n    /// @notice Called to `msg.sender` after settling a position via IMarginalV1Pool#settle\n    /// @dev In the implementation you must pay the pool tokens owed to settle the debt owed by a position to the pool.\n    /// Position size and margin are flashed out to `recipient` in the IMarginalV1Pool#settle call prior to enable debt repayment via swaps.\n    /// The caller of this method must be checked to be a MarginalV1Pool deployed by the canonical MarginalV1Factory.\n    /// Amount that must be payed to pool is > 0 as IMarginalV1Pool#open would have reverted otherwise.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of position settlement. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of position settlement. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IMarginalV1Pool#settle call\n    function marginalV1SettleCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"}, "libraries/LiquidityMath.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport {SafeCast} from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\n\nimport {FixedPoint96} from \"./FixedPoint96.sol\";\nimport {SqrtPriceMath} from \"./SqrtPriceMath.sol\";\n\n/// @title Math library for liquidity\n/// @notice Facilitates transformations between (L, sqrtP) space and (x, y) token reserves\nlibrary LiquidityMath {\n    using SafeCast for uint256;\n\n    /// @notice Transforms (L, sqrtP) values into (x, y) reserve amounts\n    /// @param liquidity Pool liquidity in (L, sqrtP) space\n    /// @param sqrtPriceX96 Pool price in (L, sqrtP) space\n    /// @return amount0 The amount of token0 associated with the given (L, sqrtP) values\n    /// @return amount1 The amount of token1 associated with the given (L, sqrtP) values\n    function toAmounts(\n        uint128 liquidity,\n        uint160 sqrtPriceX96\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\n        // x = L / sqrt(P); y = L * sqrt(P)\n        amount0 =\n            (uint256(liquidity) << FixedPoint96.RESOLUTION) /\n            sqrtPriceX96;\n        amount1 = Math.mulDiv(liquidity, sqrtPriceX96, FixedPoint96.Q96);\n    }\n\n    /// @notice Transforms (x, y) reserve amounts into (L, sqrtP) values\n    /// @dev Reverts on overflow if reserve0 * reserve1 > type(uint256).max as liquidity must fit into uint128\n    /// @param reserve0 The amount of token0 in reserves\n    /// @param reserve1 The amount of token1 in reserves\n    /// @return liquidity Pool liquidity associated with reserve amounts\n    /// @return sqrtPriceX96 Pool price associated with reserve amounts\n    function toLiquiditySqrtPriceX96(\n        uint256 reserve0,\n        uint256 reserve1\n    ) internal pure returns (uint128 liquidity, uint160 sqrtPriceX96) {\n        // L = sqrt(x * y); sqrt(P) = sqrt(y / x)\n        liquidity = Math.sqrt(reserve0 * reserve1).toUint128();\n\n        uint256 _sqrtPriceX96 = (uint256(liquidity) <<\n            FixedPoint96.RESOLUTION) / reserve0;\n        if (\n            !(_sqrtPriceX96 >= SqrtPriceMath.MIN_SQRT_RATIO &&\n                _sqrtPriceX96 < SqrtPriceMath.MAX_SQRT_RATIO)\n        ) revert SqrtPriceMath.InvalidSqrtPriceX96();\n        sqrtPriceX96 = uint160(_sqrtPriceX96);\n    }\n\n    /// @notice Calculates (L, sqrtP) after adding/removing amounts to/from pool reserves\n    /// @param liquidity Pool liquidity before adding/removing reserves\n    /// @param sqrtPriceX96 Pool price before adding/removing reserves\n    /// @param amount0 The amount of token0 to add (positive) or remove (negative)\n    /// @param amount1 The amount of token1 to add (positive) or remove (negative)\n    /// @return liquidityNext Pool liquidity after adding/removing reserves\n    /// @return sqrtPriceX96Next Pool price after adding/removing reserves\n    function liquiditySqrtPriceX96Next(\n        uint128 liquidity,\n        uint160 sqrtPriceX96,\n        int256 amount0,\n        int256 amount1\n    ) internal pure returns (uint128 liquidityNext, uint160 sqrtPriceX96Next) {\n        (uint256 reserve0, uint256 reserve1) = toAmounts(\n            liquidity,\n            sqrtPriceX96\n        );\n\n        if (amount0 < 0 && uint256(-amount0) >= reserve0)\n            revert SqrtPriceMath.Amount0ExceedsReserve0();\n        if (amount1 < 0 && uint256(-amount1) >= reserve1)\n            revert SqrtPriceMath.Amount1ExceedsReserve1();\n\n        uint256 reserve0Next = amount0 >= 0\n            ? reserve0 + uint256(amount0)\n            : reserve0 - uint256(-amount0);\n        uint256 reserve1Next = amount1 >= 0\n            ? reserve1 + uint256(amount1)\n            : reserve1 - uint256(-amount1);\n\n        (liquidityNext, sqrtPriceX96Next) = toLiquiditySqrtPriceX96(\n            reserve0Next,\n            reserve1Next\n        );\n    }\n}\n"}, "interfaces/callback/IMarginalV1OpenCallback.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\n/// @title The interface for the Marginal v1 open callback\n/// @notice Callbacks called by Marginal v1 pools when opening a position\n/// @dev Any contract that calls IMarginalV1Pool#open must implement this interface\ninterface IMarginalV1OpenCallback {\n    /// @notice Called to `msg.sender` after opening a position via IMarginalV1Pool#open\n    /// @dev In the implementation you must pay the pool tokens owed to open a position.\n    /// The pool tokens owed are the margin and fees required to open the position.\n    /// The caller of this method must be checked to be a MarginalV1Pool deployed by the canonical MarginalV1Factory.\n    /// @param amount0Owed The amount of token0 that must be payed to pool to successfully open a position\n    /// @param amount1Owed The amount of token1 that must be payed to pool to successfully open a position\n    /// @param data Any data passed through by the caller via the IMarginalV1Pool#open call\n    function marginalV1OpenCallback(\n        uint256 amount0Owed,\n        uint256 amount1Owed,\n        bytes calldata data\n    ) external;\n}\n"}, "interfaces/callback/IMarginalV1SwapCallback.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\n/// @title The interface for the Marginal v1 swap callback\n/// @notice Callbacks called by Marginal v1 pools when executing a swap\n/// @dev Any contract that calls IMarginalV1Pool#swap must implement this interface\ninterface IMarginalV1SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IMarginalV1Pool#swap\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a MarginalV1Pool deployed by the canonical MarginalV1Factory.\n    /// Amount that must be payed to pool is > 0 as IMarginalV1Pool#swap reverts otherwise.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IMarginalV1Pool#swap call\n    function marginalV1SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"}, "interfaces/IMarginalV1Factory.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\n/// @title The interface for the Marginal v1 factory\n/// @notice The Marginal v1 factory creates pools and enables leverage tiers\ninterface IMarginalV1Factory {\n    /// @notice Returns the Marginal v1 pool deployer to use when creating pools\n    /// @return The address of the Marginal v1 pool deployer\n    function marginalV1Deployer() external view returns (address);\n\n    /// @notice Returns the Uniswap v3 factory to reference for pool oracles\n    /// @return The address of the Uniswap v3 factory\n    function uniswapV3Factory() external view returns (address);\n\n    /// @notice Returns the minimum observation cardinality the Uniswap v3 oracle must have\n    /// @dev Used as a check that averaging over `secondsAgo` in the Marginal v1 pool is likely to succeed\n    /// @return The minimum observation cardinality the Uniswap v3 oracle must have\n    function observationCardinalityMinimum() external view returns (uint16);\n\n    /// @notice Returns the current owner of the Marginal v1 factory contract\n    /// @dev Changed via permissioned `setOwner` function on the factory\n    /// @return The address of the current owner of the Marginal v1 factory\n    function owner() external view returns (address);\n\n    /// @notice Returns the pool address for the given unique Marginal v1 pool key\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The address of either token0/token1\n    /// @param tokenB The address of the other token token1/token0\n    /// @param maintenance The minimum maintenance requirement for the pool\n    /// @param oracle The address of the Uniswap v3 oracle used by the pool\n    /// @return The address of the Marginal v1 pool\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 maintenance,\n        address oracle\n    ) external view returns (address);\n\n    /// @notice Returns whether given address is a Marginal v1 pool deployed by the factory\n    /// @return Whether address is a pool\n    function isPool(address pool) external view returns (bool);\n\n    /// @notice Returns the maximum leverage associated with the pool maintenance if pool exists\n    /// @param maintenance The minimum maintenance margin requirement for the pool\n    /// @return The maximum leverage for the pool maintenance if pool exists\n    function getLeverage(uint24 maintenance) external view returns (uint256);\n\n    /// @notice Creates a new Marginal v1 pool for the given unique pool key\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The address of either token0/token1\n    /// @param tokenB The address of the other token token1/token0\n    /// @param maintenance The minimum maintenance requirement for the pool\n    /// @param uniswapV3Fee The fee tier of the Uniswap v3 oracle used by the Marginal v1 pool\n    /// @return pool The address of the created Marginal v1 pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 maintenance,\n        uint24 uniswapV3Fee\n    ) external returns (address pool);\n\n    /// @notice Sets the owner of the Marginal v1 factory contract\n    /// @dev Can only be called by the current factory owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a new leverage tier for Marginal v1 pool deployments\n    /// @dev Can only be called by the current factory owner\n    /// @dev Set leverage tier obeys: l = 1 + 1/M; M = maintenance\n    /// @param maintenance The minimum maintenance requirement associated with the leverage tier\n    function enableLeverage(uint24 maintenance) external;\n}\n"}, "libraries/SwapMath.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport {FixedPoint96} from \"./FixedPoint96.sol\";\n\n/// @title Math library for swaps\n/// @notice Determines amounts involved in swaps\nlibrary SwapMath {\n    /// @notice Computes amounts in and out on swap without fees\n    /// @dev amount > 0 is amountIn, amount < 0 is amountOut\n    /// @param liquidity Pool liquidity before the swap\n    /// @param sqrtPriceX96 Pool price at the start of the swap\n    /// @param sqrtPriceX96Next Pool price at the end of the swap\n    /// @return amount0Delta The delta in token0 balance for the pool\n    /// @return amount1Delta The delta in token1 balance for the pool\n    function swapAmounts(\n        uint128 liquidity,\n        uint160 sqrtPriceX96,\n        uint160 sqrtPriceX96Next\n    ) internal pure returns (int256 amount0Delta, int256 amount1Delta) {\n        // del x = L * del (1 / sqrt(P)); del y = L * del sqrt(P)\n        bool zeroForOne = sqrtPriceX96Next < sqrtPriceX96;\n        amount0Delta =\n            int256(\n                (uint256(liquidity) << FixedPoint96.RESOLUTION) /\n                    sqrtPriceX96Next\n            ) -\n            int256(\n                (uint256(liquidity) << FixedPoint96.RESOLUTION) / sqrtPriceX96\n            );\n        amount1Delta = zeroForOne\n            ? -int256(\n                Math.mulDiv(\n                    liquidity,\n                    sqrtPriceX96 - sqrtPriceX96Next,\n                    FixedPoint96.Q96\n                )\n            )\n            : int256(\n                Math.mulDiv(\n                    liquidity,\n                    sqrtPriceX96Next - sqrtPriceX96,\n                    FixedPoint96.Q96\n                )\n            );\n    }\n\n    /// @notice Computes swap fee on amount in\n    /// @dev Can revert when amount > type(uint232).max, but irrelevant for SwapMath.sol::swapAmounts output and pool fee rate constant\n    /// @param amount Amount in to calculate swap fees off of\n    /// @param fee Fee rate applied on amount in to pool\n    /// @param lessFee Whether `amount` excludes swap fee amount\n    /// @return Total swap fees taken from amount in to pool\n    function swapFees(\n        uint256 amount,\n        uint24 fee,\n        bool lessFee\n    ) internal pure returns (uint256) {\n        return (!lessFee ? (amount * fee) / 1e6 : (amount * fee) / (1e6 - fee));\n    }\n}\n"}, "interfaces/callback/IMarginalV1AdjustCallback.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\n/// @title The interface for the Marginal v1 adjust callback\n/// @notice Callbacks called by Marginal v1 pools when adjusting the margin backing a position\n/// @dev Any contract that calls IMarginalV1Pool#adjust must implement this interface\ninterface IMarginalV1AdjustCallback {\n    /// @notice Called to `msg.sender` after adjusting the margin backing a position via IMarginalV1Pool#adjust\n    /// @dev In the implementation you must pay the pool tokens owed to adjust the margin backing a position. The tokens owed\n    /// is the new position margin, as the original margin is flashed out to `recipient` in the IMarginalV1Pool#adjust call.\n    /// The caller of this method must be checked to be a MarginalV1Pool deployed by the canonical MarginalV1Factory.\n    /// @param amount0Owed The amount of token0 that must be payed to pool to successfully adjust the margin backing a position\n    /// @param amount1Owed The amount of token1 that must be payed to pool to successfully adjust the margin backing a position\n    /// @param data Any data passed through by the caller via the IMarginalV1Pool#adjust call\n    function marginalV1AdjustCallback(\n        uint256 amount0Owed,\n        uint256 amount1Owed,\n        bytes calldata data\n    ) external;\n}\n"}, "interfaces/callback/IMarginalV1MintCallback.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\n/// @title The interface for the Marginal v1 mint callback\n/// @notice Callbacks called by Marginal v1 pools when adding liquidity\n/// @dev Any contract that calls IMarginalV1Pool#mint must implement this interface\ninterface IMarginalV1MintCallback {\n    /// @notice Called to `msg.sender` after adding liquidity via IMarginalV1Pool#mint\n    /// @dev In the implementation you must pay the pool tokens owed to add liquidity to the pool and mint LP tokens.\n    /// The caller of this method must be checked to be a MarginalV1Pool deployed by the canonical MarginalV1Factory.\n    /// @param amount0Owed The amount of token0 that must be payed to pool to successfully mint LP tokens\n    /// @param amount1Owed The amount of token1 that must be payed to pool to successfully mint LP tokens\n    /// @param data Any data passed through by the caller via the IMarginalV1Pool#mint call\n    function marginalV1MintCallback(\n        uint256 amount0Owed,\n        uint256 amount1Owed,\n        bytes calldata data\n    ) external;\n}\n"}, "libraries/TransferHelper.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.30;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/// @title Transfer library\n/// @notice Facilitates safe transfers of ERC20 tokens and native chain token\nlibrary TransferHelper {\n    using SafeERC20 for IERC20;\n\n    /// @notice Transfers an ERC20 token amount from this address\n    /// @dev If value > balance, transfers balance of this address\n    /// @param token The address of the ERC20 to transfer\n    /// @param to The address of the recipient\n    /// @param value The desired amount of tokens to transfer\n    function safeTransfer(address token, address to, uint256 value) internal {\n        // in case of dust errors due to (L, sqrtP) <=> (x, y) transforms\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        uint256 amount = value <= balance ? value : balance;\n        IERC20(token).safeTransfer(to, amount);\n    }\n\n    /// @notice Transfers an amount of native (gas) token from this address\n    /// @dev Ref @uniswap/v3-periphery/contracts/libraries/TransferHelper.sol#L56\n    /// @param to The address of the recipient\n    /// @param value The amount of ETH to transfer\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(\"\");\n        require(success, \"STE\");\n    }\n}\n"}, ".cache/openzeppelin/v4.8.3/token/ERC20/utils/SafeERC20.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"}, ".cache/openzeppelin/v4.8.3/token/ERC20/extensions/draft-IERC20Permit.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"}, ".cache/openzeppelin/v4.8.3/utils/Address.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"}}, "settings": {"optimizer": {"enabled": true}, "outputSelection": {"*": {"*": ["evm.legacyAssembly"]}}, "remappings": ["@openzeppelin/contracts=.cache/openzeppelin/v4.8.3", "@uniswap/v3-core/contracts=.cache/uniswap-v3-core/v0.8"], "viaIR": false}}
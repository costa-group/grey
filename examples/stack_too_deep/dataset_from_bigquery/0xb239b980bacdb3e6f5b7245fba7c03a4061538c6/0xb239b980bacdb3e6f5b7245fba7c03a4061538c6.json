{"language": "Solidity", "sources": {"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.30;\n\nimport \"./IAccessControlEnumerableUpgradeable.sol\";\nimport \"./AccessControlUpgradeable.sol\";\nimport \"../utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\n    function __AccessControlEnumerable_init() internal onlyInitializing {\n    }\n\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\n    }\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"}, "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.30;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"}, "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.30;\n\nimport \"./IAccessControlUpgradeable.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"}, "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"}, "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"}, "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"}, "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.30;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"}, "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"}, "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.30;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"}, "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.30;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"}, "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"}, "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"}, "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMathUpgradeable {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"}, "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.30;\n\nimport \"./math/MathUpgradeable.sol\";\nimport \"./math/SignedMathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMathUpgradeable.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"}, "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"}, "@openzeppelin/contracts/access/Ownable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"}, "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"}, "@openzeppelin/contracts/interfaces/IERC1967.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"}, "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\n\npragma solidity ^0.8.30;\n\nimport \"./IBeacon.sol\";\nimport \"../Proxy.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n}\n"}, "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"}, "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/IERC1967.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967Upgrade is IERC1967 {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"}, "@openzeppelin/contracts/proxy/Proxy.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"}, "@openzeppelin/contracts/security/ReentrancyGuard.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"}, "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"}, "@openzeppelin/contracts/token/ERC20/IERC20.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"}, "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"}, "@openzeppelin/contracts/utils/Address.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"}, "@openzeppelin/contracts/utils/Context.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"}, "@openzeppelin/contracts/utils/StorageSlot.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"}, "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"}, "contracts/wombat-core/interfaces/IAsset.sol": {"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.30;\n\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ninterface IAsset is IERC20 {\n    function underlyingToken() external view returns (address);\n\n    function pool() external view returns (address);\n\n    function cash() external view returns (uint120);\n\n    function liability() external view returns (uint120);\n\n    function decimals() external view returns (uint8);\n\n    function underlyingTokenDecimals() external view returns (uint8);\n\n    function setPool(address pool_) external;\n\n    function underlyingTokenBalance() external view returns (uint256);\n\n    function transferUnderlyingToken(address to, uint256 amount) external;\n\n    function mint(address to, uint256 amount) external;\n\n    function burn(address to, uint256 amount) external;\n\n    function addCash(uint256 amount) external;\n\n    function removeCash(uint256 amount) external;\n\n    function addLiability(uint256 amount) external;\n\n    function removeLiability(uint256 amount) external;\n}\n"}, "contracts/wombat-governance/gauge/BribeRewarderFactory.sol": {"content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.30;\n\nimport '@openzeppelin/contracts/proxy/beacon/IBeacon.sol';\nimport '@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\n\nimport '../../wombat-core/interfaces/IAsset.sol';\nimport '../interfaces/IBribeRewarderFactory.sol';\nimport '../interfaces/IBoostedMasterWombat.sol';\nimport '../interfaces/IVoter.sol';\nimport '../rewarders/BoostedMultiRewarder.sol';\nimport './BribeV2.sol';\n\ncontract BribeRewarderFactory is IBribeRewarderFactory, Initializable, OwnableUpgradeable {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    IBoostedMasterWombat public masterWombat;\n    IBeacon public rewarderBeacon;\n\n    IVoter public voter;\n    IBeacon public bribeBeacon;\n\n    /// @notice Rewarder deployer is able to deploy rewarders, and it will become the rewarder operator\n    mapping(IAsset => address) public rewarderDeployers;\n    /// @notice Bribe deployer is able to deploy bribe, and it will become the bribe operator\n    mapping(IAsset => address) public bribeDeployers;\n    /// @notice whitelisted reward tokens can be added to rewarders and bribes\n    EnumerableSet.AddressSet internal whitelistedRewardTokens;\n\n    event DeployRewarderContract(\n        IAsset _lpToken,\n        uint256 _startTimestamp,\n        IERC20 _rewardToken,\n        uint96 _tokenPerSec,\n        address rewarder\n    );\n    event SetRewarderContract(IAsset _lpToken, address rewarder);\n    event SetRewarderBeacon(IBeacon beacon);\n    event SetRewarderDeployer(IAsset token, address deployer);\n    event DeployBribeContract(\n        IAsset _lpToken,\n        uint256 _startTimestamp,\n        IERC20 _rewardToken,\n        uint96 _tokenPerSec,\n        address bribe\n    );\n    event SetBribeContract(IAsset _lpToken, address bribe);\n    event SetBribeBeacon(IBeacon beacon);\n    event SetBribeDeployer(IAsset token, address deployer);\n    event WhitelistRewardTokenUpdated(IERC20 token, bool isAdded);\n    event SetVoter(IVoter voter);\n\n    function initialize(\n        IBeacon _rewarderBeacon,\n        IBeacon _bribeBeacon,\n        IBoostedMasterWombat _masterWombat,\n        IVoter _voter\n    ) public initializer {\n        require(Address.isContract(address(_rewarderBeacon)), 'initialize: _rewarderBeacon must be a valid contract');\n        require(Address.isContract(address(_bribeBeacon)), 'initialize: _bribeBeacon must be a valid contract');\n        require(Address.isContract(address(_masterWombat)), 'initialize: mw must be a valid contract');\n\n        rewarderBeacon = _rewarderBeacon;\n        bribeBeacon = _bribeBeacon;\n        masterWombat = _masterWombat;\n        voter = _voter;\n\n        __Ownable_init();\n    }\n\n    function isRewardTokenWhitelisted(IERC20 _token) public view returns (bool) {\n        return whitelistedRewardTokens.contains(address(_token));\n    }\n\n    function getWhitelistedRewardTokens() external view returns (address[] memory) {\n        return whitelistedRewardTokens.values();\n    }\n\n    /// @notice Deploy bribe contract behind a beacon proxy, and add it to the voter\n    function deployRewarderContractAndSetRewarder(\n        IAsset _lpToken,\n        uint256 _startTimestamp,\n        IERC20 _rewardToken,\n        uint96 _tokenPerSec\n    ) external returns (address rewarder) {\n        uint256 pid = masterWombat.getAssetPid(address(_lpToken));\n        require(address(masterWombat.boostedRewarders(pid)) == address(0), 'rewarder contract alrealdy exists');\n\n        rewarder = address(_deployRewarderContract(_lpToken, pid, _startTimestamp, _rewardToken, _tokenPerSec));\n        masterWombat.setBoostedRewarder(pid, BoostedMultiRewarder(payable(rewarder)));\n        emit SetRewarderContract(_lpToken, rewarder);\n    }\n\n    /// @notice Deploy bribe contract behind a beacon proxy, and add it to the voter\n    function deployRewarderContract(\n        IAsset _lpToken,\n        uint256 _startTimestamp,\n        IERC20 _rewardToken,\n        uint96 _tokenPerSec\n    ) external returns (address rewarder) {\n        uint256 pid = masterWombat.getAssetPid(address(_lpToken));\n        rewarder = address(_deployRewarderContract(_lpToken, pid, _startTimestamp, _rewardToken, _tokenPerSec));\n    }\n\n    function _deployRewarderContract(\n        IAsset _lpToken,\n        uint256 _pid,\n        uint256 _startTimestamp,\n        IERC20 _rewardToken,\n        uint96 _tokenPerSec\n    ) internal returns (BoostedMultiRewarder rewarder) {\n        if (Address.isContract(address(voter))) {\n            (, , , , , IGauge gaugeManager, ) = voter.infos(_lpToken);\n            require(address(gaugeManager) != address(0), 'gauge does not exist');\n        }\n        require(address(masterWombat.boostedRewarders(_pid)) == address(0), 'rewarder contract alrealdy exists');\n\n        require(rewarderDeployers[_lpToken] == msg.sender, 'Not authurized.');\n        require(isRewardTokenWhitelisted(_rewardToken), 'reward token is not whitelisted');\n\n        // deploy a rewarder contract behind a proxy\n        // BoostedMultiRewarder rewarder = new BoostedMultiRewarder()\n        rewarder = BoostedMultiRewarder(payable(new BeaconProxy(address(rewarderBeacon), bytes(''))));\n\n        rewarder.initialize(this, masterWombat, _lpToken, _startTimestamp, _rewardToken, _tokenPerSec);\n        rewarder.addOperator(msg.sender);\n        rewarder.transferOwnership(owner());\n\n        emit DeployRewarderContract(_lpToken, _startTimestamp, _rewardToken, _tokenPerSec, address(rewarder));\n    }\n\n    /// @notice Deploy bribe contract behind a beacon proxy, and add it to the voter\n    function deployBribeContractAndSetBribe(\n        IAsset _lpToken,\n        uint256 _startTimestamp,\n        IERC20 _rewardToken,\n        uint96 _tokenPerSec\n    ) external returns (address bribe) {\n        (, , , , bool whitelist, IGauge gaugeManager, IBribe currentBribe) = voter.infos(_lpToken);\n        require(address(currentBribe) == address(0), 'bribe contract already exists for gauge');\n        require(address(gaugeManager) != address(0), 'gauge does not exist');\n        require(whitelist, 'bribe contract is paused');\n\n        bribe = address(_deployBribeContract(_lpToken, _startTimestamp, _rewardToken, _tokenPerSec));\n        voter.setBribe(_lpToken, IBribe(address(bribe)));\n        emit SetBribeContract(_lpToken, bribe);\n    }\n\n    /// @notice Deploy bribe contract behind a beacon proxy, and add it to the voter\n    function deployBribeContract(\n        IAsset _lpToken,\n        uint256 _startTimestamp,\n        IERC20 _rewardToken,\n        uint96 _tokenPerSec\n    ) external returns (address bribe) {\n        bribe = address(_deployBribeContract(_lpToken, _startTimestamp, _rewardToken, _tokenPerSec));\n    }\n\n    function _deployBribeContract(\n        IAsset _lpToken,\n        uint256 _startTimestamp,\n        IERC20 _rewardToken,\n        uint96 _tokenPerSec\n    ) internal returns (BribeV2 bribe) {\n        (, , , , , IGauge gaugeManager, ) = voter.infos(_lpToken);\n        require(address(gaugeManager) != address(0), 'gauge does not exist');\n\n        require(bribeDeployers[_lpToken] == msg.sender, 'Not authurized.');\n        require(isRewardTokenWhitelisted(_rewardToken), 'reward token is not whitelisted');\n\n        // deploy a bribe contract behind a proxy\n        // BribeV2 bribe = new BribeV2();\n        bribe = BribeV2(payable(new BeaconProxy(address(bribeBeacon), bytes(''))));\n\n        bribe.initialize(this, address(voter), _lpToken, _startTimestamp, _rewardToken, _tokenPerSec);\n        bribe.addOperator(msg.sender);\n        bribe.transferOwnership(owner());\n\n        emit DeployBribeContract(_lpToken, _startTimestamp, _rewardToken, _tokenPerSec, address(bribe));\n    }\n\n    function setVoter(IVoter _voter) external onlyOwner {\n        require(Address.isContract(address(_voter)), 'invalid address');\n        voter = _voter;\n\n        emit SetVoter(_voter);\n    }\n\n    function setRewarderBeacon(IBeacon _rewarderBeacon) external onlyOwner {\n        require(Address.isContract(address(_rewarderBeacon)), 'invalid address');\n        rewarderBeacon = _rewarderBeacon;\n\n        emit SetRewarderBeacon(_rewarderBeacon);\n    }\n\n    function setBribeBeacon(IBeacon _bribeBeacon) external onlyOwner {\n        require(Address.isContract(address(_bribeBeacon)), 'invalid address');\n        bribeBeacon = _bribeBeacon;\n\n        emit SetBribeBeacon(_bribeBeacon);\n    }\n\n    function setRewarderDeployer(IAsset _token, address _deployer) external onlyOwner {\n        require(rewarderDeployers[_token] != _deployer, 'already set as deployer');\n        rewarderDeployers[_token] = _deployer;\n        emit SetRewarderDeployer(_token, _deployer);\n    }\n\n    function setBribeDeployer(IAsset _token, address _deployer) external onlyOwner {\n        require(bribeDeployers[_token] != _deployer, 'already set as deployer');\n        bribeDeployers[_token] = _deployer;\n        emit SetBribeDeployer(_token, _deployer);\n    }\n\n    function whitelistRewardToken(IERC20 _token) external onlyOwner {\n        require(!isRewardTokenWhitelisted(_token), 'already whitelisted');\n        whitelistedRewardTokens.add(address(_token));\n        emit WhitelistRewardTokenUpdated(_token, true);\n    }\n\n    function revokeRewardToken(IERC20 _token) external onlyOwner {\n        require(isRewardTokenWhitelisted(_token), 'reward token is not whitelisted');\n        whitelistedRewardTokens.remove(address(_token));\n        emit WhitelistRewardTokenUpdated(_token, false);\n    }\n}\n"}, "contracts/wombat-governance/gauge/BribeV2.sol": {"content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.30;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\nimport '../interfaces/IBribeRewarderFactory.sol';\nimport '../interfaces/IBribe.sol';\nimport '../interfaces/IVoter.sol';\nimport '../rewarders/MultiRewarderPerSecV2.sol';\n\n/**\n * Simple bribe per sec. Distribute bribe rewards to voters\n * Bribe.onVote->updateReward() is a bit different from SimpleRewarder.\n * Here we reduce the original total amount of share\n */\ncontract BribeV2 is IBribe, MultiRewarderPerSecV2 {\n    using SafeERC20 for IERC20;\n\n    function onVote(\n        address _user,\n        uint256 _newVote,\n        uint256 _originalTotalVotes\n    ) external override onlyMaster nonReentrant returns (uint256[] memory rewards) {\n        _updateReward(_originalTotalVotes);\n        return _onReward(_user, _newVote);\n    }\n\n    function onReward(address, uint256) external override onlyMaster nonReentrant returns (uint256[] memory) {\n        revert('Call BribeV2.onVote instead');\n    }\n\n    function _getTotalShare() internal view override returns (uint256 voteWeight) {\n        (, voteWeight) = IVoter(master).weights(lpToken);\n    }\n\n    function rewardLength() public view override(IBribe, MultiRewarderPerSecV2) returns (uint256) {\n        return MultiRewarderPerSecV2.rewardLength();\n    }\n\n    function rewardTokens() public view override(IBribe, MultiRewarderPerSecV2) returns (IERC20[] memory tokens) {\n        return MultiRewarderPerSecV2.rewardTokens();\n    }\n\n    function pendingTokens(\n        address _user\n    ) public view override(IBribe, MultiRewarderPerSecV2) returns (uint256[] memory tokens) {\n        return MultiRewarderPerSecV2.pendingTokens(_user);\n    }\n}\n"}, "contracts/wombat-governance/interfaces/IBoostedMasterWombat.sol": {"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.30;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nimport './IMasterWombatV3.sol';\nimport './IBoostedMultiRewarder.sol';\n\n/**\n * @dev Interface of BoostedMasterWombat\n */\ninterface IBoostedMasterWombat is IMasterWombatV3 {\n    function getSumOfFactors(uint256 pid) external view returns (uint256 sum);\n\n    function basePartition() external view returns (uint16);\n\n    function add(IERC20 _lpToken, IBoostedMultiRewarder _boostedRewarder) external;\n\n    function boostedRewarders(uint256 _pid) external view returns (IBoostedMultiRewarder);\n\n    function setBoostedRewarder(uint256 _pid, IBoostedMultiRewarder _boostedRewarder) external;\n}\n"}, "contracts/wombat-governance/interfaces/IBoostedMultiRewarder.sol": {"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.30;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ninterface IBoostedMultiRewarder {\n    function lpToken() external view returns (IERC20 lpToken);\n\n    function onReward(\n        address _user,\n        uint256 _newLpAmount,\n        uint256 _newFactor\n    ) external returns (uint256[] memory rewards);\n\n    function addRewardToken(IERC20 _rewardToken, uint40 _startTimestamp, uint96 _tokenPerSec) external;\n\n    function pendingTokens(address _user) external view returns (uint256[] memory rewards);\n\n    function rewardTokens() external view returns (IERC20[] memory tokens);\n\n    function rewardLength() external view returns (uint256);\n\n    function onUpdateFactor(address _user, uint256 _newFactor) external;\n}\n"}, "contracts/wombat-governance/interfaces/IBribe.sol": {"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.30;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ninterface IBribe {\n    function onVote(\n        address user,\n        uint256 newVote,\n        uint256 originalTotalVotes\n    ) external returns (uint256[] memory rewards);\n\n    function pendingTokens(address _user) external view returns (uint256[] memory rewards);\n\n    function rewardTokens() external view returns (IERC20[] memory tokens);\n\n    function rewardLength() external view returns (uint256);\n}\n"}, "contracts/wombat-governance/interfaces/IBribeRewarderFactory.sol": {"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.30;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ninterface IBribeRewarderFactory {\n    function isRewardTokenWhitelisted(IERC20 _token) external view returns (bool);\n}\n"}, "contracts/wombat-governance/interfaces/IMasterWombatV3.sol": {"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.30;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\n/**\n * @dev Interface of the MasterWombatV3\n */\ninterface IMasterWombatV3 {\n    function getAssetPid(address asset) external view returns (uint256 pid);\n\n    function poolLength() external view returns (uint256);\n\n    function pendingTokens(\n        uint256 _pid,\n        address _user\n    )\n        external\n        view\n        returns (\n            uint256 pendingRewards,\n            IERC20[] memory bonusTokenAddresses,\n            string[] memory bonusTokenSymbols,\n            uint256[] memory pendingBonusRewards\n        );\n\n    function rewarderBonusTokenInfo(\n        uint256 _pid\n    ) external view returns (IERC20[] memory bonusTokenAddresses, string[] memory bonusTokenSymbols);\n\n    function massUpdatePools() external;\n\n    function updatePool(uint256 _pid) external;\n\n    function deposit(uint256 _pid, uint256 _amount) external returns (uint256, uint256[] memory);\n\n    function multiClaim(\n        uint256[] memory _pids\n    ) external returns (uint256 transfered, uint256[] memory rewards, uint256[][] memory additionalRewards);\n\n    function withdraw(uint256 _pid, uint256 _amount) external returns (uint256, uint256[] memory);\n\n    function emergencyWithdraw(uint256 _pid) external;\n\n    function migrate(uint256[] calldata _pids) external;\n\n    function depositFor(uint256 _pid, uint256 _amount, address _user) external;\n\n    function updateFactor(address _user, uint256 _newVeWomBalance) external;\n\n    function notifyRewardAmount(address _lpToken, uint256 _amount) external;\n}\n"}, "contracts/wombat-governance/interfaces/IMultiRewarder.sol": {"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.30;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ninterface IMultiRewarder {\n    function lpToken() external view returns (IERC20 lpToken);\n\n    function onReward(address _user, uint256 _lpAmount) external returns (uint256[] memory rewards);\n\n    function pendingTokens(address _user) external view returns (uint256[] memory rewards);\n\n    function rewardTokens() external view returns (IERC20[] memory tokens);\n\n    function rewardLength() external view returns (uint256);\n}\n"}, "contracts/wombat-governance/interfaces/IMultiRewarderV2.sol": {"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.30;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ninterface IMultiRewarderV2 {\n    function lpToken() external view returns (IERC20 lpToken);\n\n    function onReward(address _user, uint256 _lpAmount) external returns (uint256[] memory rewards);\n\n    function addRewardToken(IERC20 _rewardToken, uint40 _startTimestamp, uint96 _tokenPerSec) external;\n\n    function pendingTokens(address _user) external view returns (uint256[] memory rewards);\n\n    function rewardTokens() external view returns (IERC20[] memory tokens);\n\n    function rewardLength() external view returns (uint256);\n}\n"}, "contracts/wombat-governance/interfaces/IVoter.sol": {"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.30;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nimport './IBribe.sol';\n\ninterface IGauge {\n    function notifyRewardAmount(IERC20 token, uint256 amount) external;\n}\n\ninterface IVoter {\n    struct GaugeWeight {\n        uint128 allocPoint;\n        uint128 voteWeight; // total amount of votes for an LP-token\n    }\n\n    function infos(\n        IERC20 _lpToken\n    )\n        external\n        view\n        returns (\n            uint104 supplyBaseIndex,\n            uint104 supplyVoteIndex,\n            uint40 nextEpochStartTime,\n            uint128 claimable,\n            bool whitelist,\n            IGauge gaugeManager,\n            IBribe bribe\n        );\n\n    // lpToken => weight, equals to sum of votes for a LP token\n    function weights(IERC20 _lpToken) external view returns (uint128 allocPoint, uint128 voteWeight);\n\n    // user address => lpToken => votes\n    function votes(address _user, IERC20 _lpToken) external view returns (uint256);\n\n    function setBribe(IERC20 _lpToken, IBribe _bribe) external;\n\n    function distribute(IERC20 _lpToken) external;\n}\n"}, "contracts/wombat-governance/mocks/RewarderCaller.sol": {"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.30;\n\nimport '../interfaces/IMultiRewarder.sol';\nimport '../rewarders/MultiRewarderPerSec.sol';\nimport '../rewarders/MultiRewarderPerSecV2.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\n/**\n * This contract simulates MasterWombat for MultiRewarderPerSec.\n */\ncontract RewarderCaller {\n    using SafeERC20 for IERC20;\n\n    // Proxy onReward calls to rewarder.\n    function onReward(address rewarder, address user, uint256 lpAmount) public returns (uint256[] memory rewards) {\n        IERC20 lpToken = IMultiRewarder(rewarder).lpToken();\n        // Rewarder use master's lpToken balance as totalShare. Make sure we have enough.\n        require(lpToken.balanceOf(address(this)) >= lpAmount, 'RewarderCaller must have sufficient lpToken balance');\n\n        return IMultiRewarder(rewarder).onReward(user, lpAmount);\n    }\n\n    // Simulate a deposit to MasterWombatV3\n    // Note: MasterWombatV3 calls onRewarder before transfer\n    function depositFor(address rewarder, address user, uint256 amount) public {\n        (uint128 userAmount, , ) = MultiRewarderPerSec(payable(rewarder)).userInfo(0, user);\n        IMultiRewarder(rewarder).onReward(user, userAmount + amount);\n\n        IERC20 lpToken = IMultiRewarder(rewarder).lpToken();\n        lpToken.safeTransferFrom(msg.sender, address(this), amount);\n    }\n\n    // Simulate a withdrawal from MasterWombatV3\n    // Note: MasterWombatV3 calls onRewarder before transfer\n    function withdrawFor(address rewarder, address user, uint256 amount) public {\n        (uint128 userAmount, , ) = MultiRewarderPerSec(payable(rewarder)).userInfo(0, user);\n        IMultiRewarder(rewarder).onReward(user, userAmount - amount);\n\n        IERC20 lpToken = IMultiRewarder(rewarder).lpToken();\n        lpToken.safeTransfer(msg.sender, amount);\n    }\n}\n\n/**\n * This contract simulates MasterWombat for MultiRewarderPerSecV2.\n */\ncontract RewarderCallerV2 {\n    using SafeERC20 for IERC20;\n\n    // Proxy onReward calls to rewarder.\n    function onReward(address rewarder, address user, uint256 lpAmount) public returns (uint256[] memory rewards) {\n        IERC20 lpToken = IMultiRewarder(rewarder).lpToken();\n        // Rewarder use master's lpToken balance as totalShare. Make sure we have enough.\n        require(lpToken.balanceOf(address(this)) >= lpAmount, 'RewarderCaller must have sufficient lpToken balance');\n\n        return IMultiRewarder(rewarder).onReward(user, lpAmount);\n    }\n\n    // Simulate a deposit to MasterWombatV3\n    // Note: MasterWombatV3 calls onRewarder before transfer\n    function depositFor(address rewarder, address user, uint256 amount) public {\n        uint256 userAmount = MultiRewarderPerSecV2(payable(rewarder)).userBalanceInfo(user);\n        IMultiRewarder(rewarder).onReward(user, userAmount + amount);\n\n        IERC20 lpToken = IMultiRewarder(rewarder).lpToken();\n        lpToken.safeTransferFrom(msg.sender, address(this), amount);\n    }\n\n    // Simulate a withdrawal from MasterWombatV3\n    // Note: MasterWombatV3 calls onRewarder before transfer\n    function withdrawFor(address rewarder, address user, uint256 amount) public {\n        uint256 userAmount = MultiRewarderPerSecV2(payable(rewarder)).userBalanceInfo(user);\n        IMultiRewarder(rewarder).onReward(user, userAmount - amount);\n\n        IERC20 lpToken = IMultiRewarder(rewarder).lpToken();\n        lpToken.safeTransfer(msg.sender, amount);\n    }\n}\n"}, "contracts/wombat-governance/rewarders/BoostedMultiRewarder.sol": {"content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.30;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\nimport '../interfaces/IBribeRewarderFactory.sol';\nimport '../interfaces/IBoostedMultiRewarder.sol';\nimport '../interfaces/IBoostedMasterWombat.sol';\n\n/**\n * This is a sample contract to be used in the Master Wombat contract for partners to reward\n * stakers with their native token alongside WOM.\n *\n * It assumes no minting rights, so requires a set amount of reward tokens to be transferred to this contract prior.\n * E.g. say you've allocated 100,000 XYZ to the WOM-XYZ farm over 30 days. Then you would need to transfer\n * 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.\n *\n * This contract has no knowledge on the LP amount and factor. Master Wombat is responsible to pass these values to this contract\n * Change log (since MultiRewarderPerSecV2):\n * - Rewarders are now boosted by veWom balance!\n */\ncontract BoostedMultiRewarder is\n    IBoostedMultiRewarder,\n    Initializable,\n    OwnableUpgradeable,\n    AccessControlEnumerableUpgradeable,\n    ReentrancyGuardUpgradeable\n{\n    using SafeERC20 for IERC20;\n\n    bytes32 public constant ROLE_OPERATOR = keccak256('operator');\n    uint256 public constant ACC_TOKEN_PRECISION = 1e18;\n    uint256 public constant TOTAL_PARTITION = 1000;\n    uint256 public constant MAX_TOKEN_RATE = 10000e18;\n    uint256 public constant MAX_REWARD_TOKENS = 10;\n\n    struct UserBalanceInfo {\n        uint128 amount; // 20.18 fixed point.\n        uint128 factor; // 20.18 fixed point.\n    }\n\n    struct UserRewardInfo {\n        uint128 rewardDebt; // 20.18 fixed point. distributed reward per weight\n        // if the pool is activated, rewardDebt must be > 0\n        uint128 unpaidRewards; // 20.18 fixed point.\n    }\n\n    /// @notice Info of each reward token.\n    struct RewardInfo {\n        /// slot\n        IERC20 rewardToken; // if rewardToken is 0, native token is used as reward token\n        uint96 tokenPerSec; // 10.18 fixed point. The emission rate in tokens per second.\n        // This rate may not reflect the current rate in cases where emission has not started or has stopped due to surplus <= 0.\n        /// slot\n        uint128 accTokenPerShare; // 20.18 fixed point. Amount of reward token each LP token is worth.\n        // This value increases when rewards are being distributed.\n        uint128 accTokenPerFactorShare; // 20.18 fixed point. Accumulated WOM per factor share\n        /// slot\n        uint128 distributedAmount; // 20.18 fixed point, depending on the decimals of the reward token. This value is used to\n        // track the amount of distributed tokens. If `distributedAmount` is closed to the amount of total received\n        // tokens, we should refill reward or prepare to stop distributing reward.\n        uint128 claimedAmount; // 20.18 fixed point. Total amount claimed by all users.\n        // We can derive the unclaimed amount: distributedAmount - claimedAmount\n\n        /// slot\n        uint40 lastRewardTimestamp; // The timestamp up to which rewards have already been distributed.\n        // If set to a future value, it indicates that the emission has not started yet.\n    }\n\n    /**\n     * Visualization of the relationship between distributedAmount, claimedAmount, rewardToDistribute, availableReward, surplus and balance:\n     *\n     * Case: emission is active. rewardToDistribute is growing at the rate of tokenPerSec.\n     * |<--------------distributedAmount------------->|<--rewardToDistribute*-->|\n     * |<-----claimedAmount----->|<-------------------------balance------------------------->|\n     *                                                |<-----------availableReward*--------->|\n     *                           |<-unclaimedAmount*->|                         |<-surplus*->|\n     *\n     * Case: reward running out. rewardToDistribute stopped growing. it is capped at availableReward.\n     * |<--------------distributedAmount------------->|<---------rewardToDistribute*-------->|\n     * |<-----claimedAmount----->|<-------------------------balance------------------------->|\n     *                                                |<-----------availableReward*--------->|\n     *                           |<-unclaimedAmount*->|                                       surplus* = 0\n     *\n     * Case: balance emptied after emergencyWithdraw.\n     * |<--------------distributedAmount------------->| rewardToDistribute* = 0\n     * |<-----claimedAmount----->|                      balance = 0, availableReward* = 0\n     *                           |<-unclaimedAmount*->| surplus* = - unclaimedAmount* (negative to indicate deficit)\n     *\n     * (Variables with * are not in the RewardInfo state, but can be derived from it.)\n     *\n     * balance, is the amount of reward token in this contract. Not all of them are available for distribution as some are reserved for\n     * unclaimed rewards.\n     * distributedAmount, is the amount of reward token that has been distributed up to lastRewardTimestamp.\n     * claimedAmount, is the amount of reward token that has been claimed by users. claimedAmount always <= distributedAmount.\n     * unclaimedAmount = distributedAmount - claimedAmount, is the amount of reward token in balance that is reserved to be claimed by users.\n     * availableReward = balance - unclaimedAmount, is the amount inside balance that is available for distribution (not reserved for\n     * unclaimed rewards).\n     * rewardToDistribute is the accumulated reward from [lastRewardTimestamp, now] that is yet to be distributed. as distributedAmount only\n     * accounts for the distributed amount up to lastRewardTimestamp. it is used in _updateReward(), and to be added to distributedAmount.\n     * to prevent bad debt, rewardToDistribute is capped at availableReward. as we cannot distribute more than the availableReward.\n     * rewardToDistribute = min(tokenPerSec * (now - lastRewardTimestamp), availableReward)\n     * surplus = availableReward - rewardToDistribute, is the amount inside balance that is available for future distribution.\n     */\n\n    IERC20 public lpToken;\n    IBoostedMasterWombat public masterWombat;\n\n    /// @notice Info of the reward tokens.\n    RewardInfo[] public rewardInfos;\n    /// @notice userAddr => UserBalanceInfo\n    mapping(address => UserBalanceInfo) public userBalanceInfo;\n    /// @notice tokenId => userAddr => UserRewardInfo\n    mapping(uint256 => mapping(address => UserRewardInfo)) public userRewardInfo;\n\n    IBribeRewarderFactory public bribeFactory;\n    bool public isDeprecated;\n\n    event OnReward(address indexed rewardToken, address indexed user, uint256 amount);\n    event RewardRateUpdated(address indexed rewardToken, uint256 oldRate, uint256 newRate);\n    event StartTimeUpdated(address indexed rewardToken, uint40 newStartTime);\n    event IsDeprecatedUpdated(bool isDeprecated);\n\n    modifier onlyMasterWombat() {\n        require(\n            msg.sender == address(masterWombat),\n            'BoostedMultiRewarderPerSec: only Master Wombat can call this function'\n        );\n        _;\n    }\n\n    /// @notice payable function needed to receive BNB\n    receive() external payable {}\n\n    /**\n     * @notice Initializes pool. Dev is set to be the account calling this function.\n     */\n    function initialize(\n        IBribeRewarderFactory _bribeFactory,\n        IBoostedMasterWombat _masterWombat,\n        IERC20 _lpToken,\n        uint256 _startTimestamp,\n        IERC20 _rewardToken,\n        uint96 _tokenPerSec\n    ) public virtual initializer {\n        require(\n            Address.isContract(address(_rewardToken)) || address(_rewardToken) == address(0),\n            'constructor: reward token must be a valid contract'\n        );\n        require(Address.isContract(address(_lpToken)), 'constructor: LP token must be a valid contract');\n        require(Address.isContract(address(_masterWombat)), 'constructor: Master Wombat must be a valid contract');\n        require(_startTimestamp >= block.timestamp, 'constructor: invalid _startTimestamp');\n\n        __Ownable_init();\n        __AccessControlEnumerable_init_unchained();\n        __ReentrancyGuard_init_unchained();\n\n        bribeFactory = _bribeFactory; // bribeFactory can be 0 address\n        masterWombat = _masterWombat;\n        lpToken = _lpToken;\n\n        // use non-zero amount for accTokenPerShare as we want to check if user\n        // has activated the pool by checking rewardDebt > 0\n        RewardInfo memory reward = RewardInfo({\n            rewardToken: _rewardToken,\n            tokenPerSec: _tokenPerSec,\n            accTokenPerShare: 1e18,\n            accTokenPerFactorShare: 0,\n            distributedAmount: 0,\n            claimedAmount: 0,\n            lastRewardTimestamp: uint40(_startTimestamp)\n        });\n        emit RewardRateUpdated(address(reward.rewardToken), 0, _tokenPerSec);\n        emit StartTimeUpdated(address(reward.rewardToken), uint40(_startTimestamp));\n        rewardInfos.push(reward);\n    }\n\n    function addOperator(address _operator) external onlyOwner {\n        _grantRole(ROLE_OPERATOR, _operator);\n    }\n\n    function removeOperator(address _operator) external onlyOwner {\n        _revokeRole(ROLE_OPERATOR, _operator);\n    }\n\n    function setIsDeprecated(bool _isDeprecated) external onlyOwner {\n        isDeprecated = _isDeprecated;\n        emit IsDeprecatedUpdated(_isDeprecated);\n    }\n\n    function addRewardToken(IERC20 _rewardToken, uint40 _startTimestampOrNow, uint96 _tokenPerSec) external override {\n        require(hasRole(ROLE_OPERATOR, msg.sender) || msg.sender == owner(), 'not authorized');\n        // Check `bribeFactory.isRewardTokenWhitelisted` if needed\n        require(\n            address(bribeFactory) == address(0) || bribeFactory.isRewardTokenWhitelisted(_rewardToken),\n            'reward token must be whitelisted by bribe factory'\n        );\n\n        _addRewardToken(_rewardToken, _startTimestampOrNow, _tokenPerSec);\n    }\n\n    function _addRewardToken(IERC20 _rewardToken, uint40 _startTimestampOrNow, uint96 _tokenPerSec) internal {\n        require(\n            Address.isContract(address(_rewardToken)) || address(_rewardToken) == address(0),\n            'reward token must be a valid contract'\n        );\n        require(_startTimestampOrNow == 0 || _startTimestampOrNow >= block.timestamp, 'invalid _startTimestamp');\n        uint256 length = rewardInfos.length;\n        require(length < MAX_REWARD_TOKENS, 'reward token length exceeded');\n        for (uint256 i; i < length; ++i) {\n            require(rewardInfos[i].rewardToken != _rewardToken, 'token has already been added');\n        }\n        _updateReward();\n        uint40 startTimestamp = _startTimestampOrNow == 0 ? uint40(block.timestamp) : _startTimestampOrNow;\n        // use non-zero amount for accTokenPerShare as we want to check if user\n        // has activated the pool by checking rewardDebt > 0\n        RewardInfo memory reward = RewardInfo({\n            rewardToken: _rewardToken,\n            tokenPerSec: _tokenPerSec,\n            accTokenPerShare: 1e18,\n            accTokenPerFactorShare: 0,\n            distributedAmount: 0,\n            claimedAmount: 0,\n            lastRewardTimestamp: startTimestamp\n        });\n        rewardInfos.push(reward);\n        emit StartTimeUpdated(address(reward.rewardToken), startTimestamp);\n        emit RewardRateUpdated(address(reward.rewardToken), 0, _tokenPerSec);\n    }\n\n    function updateReward() public {\n        _updateReward();\n    }\n\n    /// @dev This function should be called before lpSupply and sumOfFactors update\n    function _updateReward() internal {\n        uint256 lpSupply = _getTotalShare();\n        uint256 pid = masterWombat.getAssetPid(address(lpToken));\n        uint256 sumOfFactors = masterWombat.getSumOfFactors(pid);\n        uint256[] memory toDistribute = _rewardsToDistribute();\n\n        uint256 length = rewardInfos.length;\n\n        for (uint256 i; i < length; ++i) {\n            RewardInfo storage info = rewardInfos[i];\n            uint256 rewardToDistribute = toDistribute[i];\n            if (rewardToDistribute > 0) {\n                (uint256 tokenPerShare, uint256 tokenPerFactorShare) = _getRewardsToDistributeFor(\n                    rewardToDistribute,\n                    lpSupply,\n                    sumOfFactors\n                );\n                info.accTokenPerShare += toUint128(tokenPerShare);\n                info.accTokenPerFactorShare += toUint128(tokenPerFactorShare);\n                info.distributedAmount += toUint128(rewardToDistribute);\n            }\n            // update lastRewardTimestamp even if no reward is distributed.\n            if (info.lastRewardTimestamp < block.timestamp) {\n                // but don't update if info.lastRewardTimestamp is set in the future,\n                // otherwise we would be starting the emission earlier than it's supposed to.\n                info.lastRewardTimestamp = uint40(block.timestamp);\n            }\n        }\n    }\n\n    /// @notice Sets the distribution reward rate, and updates the emission start time if specified.\n    /// @param _tokenId The token id\n    /// @param _tokenPerSec The number of tokens to distribute per second\n    /// @param _startTimestampToOverride the start time for the token emission. A value of 0 indicates no changes, while a future\n    ///        timestamp starts the emission at the specified time.\n    function setRewardRate(uint256 _tokenId, uint96 _tokenPerSec, uint40 _startTimestampToOverride) external {\n        require(hasRole(ROLE_OPERATOR, msg.sender) || msg.sender == owner(), 'not authorized');\n        require(_tokenId < rewardInfos.length, 'invalid _tokenId');\n        require(\n            _startTimestampToOverride == 0 || _startTimestampToOverride >= block.timestamp,\n            'invalid _startTimestampToOverride'\n        );\n        require(_tokenPerSec <= MAX_TOKEN_RATE, 'reward rate too high'); // in case of accTokenPerShare overflow\n        _updateReward();\n        RewardInfo storage info = rewardInfos[_tokenId];\n        uint256 oldRate = info.tokenPerSec;\n        info.tokenPerSec = _tokenPerSec;\n        if (_startTimestampToOverride > 0) {\n            info.lastRewardTimestamp = _startTimestampToOverride;\n            emit StartTimeUpdated(address(info.rewardToken), _startTimestampToOverride);\n        }\n        emit RewardRateUpdated(address(rewardInfos[_tokenId].rewardToken), oldRate, _tokenPerSec);\n    }\n\n    /// @notice Function called by Master Wombat whenever staker claims WOM harvest.\n    /// @notice Allows staker to also receive a 2nd reward token.\n    /// @dev Assume `_getTotalShare` isn't updated yet when this function is called\n    /// @param _user Address of user\n    /// @param _newLpAmount The new amount of LP\n    /// @param _newFactor The new factor of LP\n    function onReward(\n        address _user,\n        uint256 _newLpAmount,\n        uint256 _newFactor\n    ) external virtual override onlyMasterWombat nonReentrant returns (uint256[] memory rewards) {\n        _updateReward();\n        return _onReward(_user, _newLpAmount, _newFactor);\n    }\n\n    /// @notice Function called by Master Wombat when factor is updated\n    /// @dev Assume lpSupply and sumOfFactors isn't updated yet when this function is called\n    /// @notice user.unpaidRewards will be updated\n    function onUpdateFactor(address _user, uint256 _newFactor) external override onlyMasterWombat {\n        if (basePartition() == TOTAL_PARTITION) {\n            // base partition only\n            return;\n        }\n\n        updateReward();\n        uint256 length = rewardInfos.length;\n\n        for (uint256 i; i < length; ++i) {\n            RewardInfo storage pool = rewardInfos[i];\n            UserRewardInfo storage user = userRewardInfo[i][_user];\n\n            if (user.rewardDebt > 0) {\n                // rewardDebt > 0 indicates the user has activated the pool and we should calculate rewards\n                user.unpaidRewards += toUint128(\n                    _getRewardDebt(\n                        userBalanceInfo[_user].amount,\n                        pool.accTokenPerShare,\n                        userBalanceInfo[_user].factor,\n                        pool.accTokenPerFactorShare\n                    ) - user.rewardDebt\n                );\n            }\n\n            user.rewardDebt = toUint128(\n                _getRewardDebt(\n                    userBalanceInfo[_user].amount,\n                    pool.accTokenPerShare,\n                    _newFactor,\n                    pool.accTokenPerFactorShare\n                )\n            );\n        }\n\n        userBalanceInfo[_user].factor = toUint128(_newFactor);\n    }\n\n    function basePartition() public view returns (uint256) {\n        return masterWombat.basePartition();\n    }\n\n    function _onReward(\n        address _user,\n        uint256 _newLpAmount,\n        uint256 _newFactor\n    ) internal virtual returns (uint256[] memory rewards) {\n        uint256 length = rewardInfos.length;\n        rewards = new uint256[](length);\n        for (uint256 i; i < length; ++i) {\n            RewardInfo storage info = rewardInfos[i];\n            UserRewardInfo storage user = userRewardInfo[i][_user];\n            IERC20 rewardToken = info.rewardToken;\n\n            if (user.rewardDebt > 0 || user.unpaidRewards > 0) {\n                // rewardDebt > 0 indicates the user has activated the pool and we should distribute rewards\n                uint256 pending = _getRewardDebt(\n                    userBalanceInfo[_user].amount,\n                    info.accTokenPerShare,\n                    userBalanceInfo[_user].factor,\n                    info.accTokenPerFactorShare\n                ) +\n                    user.unpaidRewards -\n                    user.rewardDebt;\n\n                if (address(rewardToken) == address(0)) {\n                    // is native token\n                    uint256 tokenBalance = address(this).balance;\n                    if (pending > tokenBalance) {\n                        // Note: this line may fail if the receiver is a contract and refuse to receive BNB\n                        (bool success, ) = _user.call{value: tokenBalance}('');\n                        require(success, 'Transfer failed');\n                        rewards[i] = tokenBalance;\n                        info.claimedAmount += toUint128(tokenBalance);\n                        user.unpaidRewards = toUint128(pending - tokenBalance);\n                    } else {\n                        (bool success, ) = _user.call{value: pending}('');\n                        require(success, 'Transfer failed');\n                        rewards[i] = pending;\n                        info.claimedAmount += toUint128(pending);\n                        user.unpaidRewards = 0;\n                    }\n                } else {\n                    // ERC20 token\n                    uint256 tokenBalance = rewardToken.balanceOf(address(this));\n                    if (pending > tokenBalance) {\n                        rewardToken.safeTransfer(_user, tokenBalance);\n                        rewards[i] = tokenBalance;\n                        info.claimedAmount += toUint128(tokenBalance);\n                        user.unpaidRewards = toUint128(pending - tokenBalance);\n                    } else {\n                        rewardToken.safeTransfer(_user, pending);\n                        rewards[i] = pending;\n                        info.claimedAmount += toUint128(pending);\n                        user.unpaidRewards = 0;\n                    }\n                }\n            }\n\n            user.rewardDebt = toUint128(\n                _getRewardDebt(_newLpAmount, info.accTokenPerShare, _newFactor, info.accTokenPerFactorShare)\n            );\n            emit OnReward(address(rewardToken), _user, rewards[i]);\n        }\n\n        userBalanceInfo[_user].amount = toUint128(_newLpAmount);\n        userBalanceInfo[_user].factor = toUint128(_newFactor);\n    }\n\n    function emergencyClaimReward() external nonReentrant returns (uint256[] memory rewards) {\n        _updateReward();\n        require(isDeprecated, 'rewarder / bribe is not deprecated');\n        return _onReward(msg.sender, 0, 0);\n    }\n\n    /// @notice returns reward length\n    function rewardLength() external view virtual override returns (uint256) {\n        return rewardInfos.length;\n    }\n\n    /// @notice View function to see pending tokens that have been distributed but not claimed by the user yet.\n    /// @param _user Address of user.\n    /// @return rewards_ reward for a given user.\n    function pendingTokens(address _user) external view virtual override returns (uint256[] memory rewards_) {\n        return _pendingTokens(_user, userBalanceInfo[_user].amount, userBalanceInfo[_user].factor);\n    }\n\n    function _pendingTokens(\n        address _user,\n        uint256 _lpAmount,\n        uint256 _factor\n    ) internal view returns (uint256[] memory rewards_) {\n        uint256 pid = masterWombat.getAssetPid(address(lpToken));\n        uint256 sumOfFactors = masterWombat.getSumOfFactors(pid);\n\n        uint256 length = rewardInfos.length;\n        rewards_ = new uint256[](length);\n\n        uint256[] memory toDistribute = _rewardsToDistribute();\n        for (uint256 i; i < length; ++i) {\n            RewardInfo memory info = rewardInfos[i];\n            UserRewardInfo storage user = userRewardInfo[i][_user];\n\n            uint256 accTokenPerShare = info.accTokenPerShare;\n            uint256 accTokenPerFactorShare = info.accTokenPerFactorShare;\n\n            uint256 lpSupply = _getTotalShare();\n            if (lpSupply > 0) {\n                (uint256 tokenPerShare, uint256 tokenPerFactorShare) = _getRewardsToDistributeFor(\n                    toDistribute[i],\n                    lpSupply,\n                    sumOfFactors\n                );\n                accTokenPerShare += tokenPerShare;\n                accTokenPerFactorShare += tokenPerFactorShare;\n            }\n\n            rewards_[i] =\n                _getRewardDebt(_lpAmount, accTokenPerShare, _factor, accTokenPerFactorShare) +\n                user.unpaidRewards -\n                user.rewardDebt;\n        }\n    }\n\n    function _getRewardsToDistributeFor(\n        uint256 rewardToDistribute,\n        uint256 lpSupply,\n        uint256 sumOfFactors\n    ) internal view returns (uint256 tokenPerShare, uint256 tokenPerFactorShare) {\n        // use `max(totalShare, 1e18)` in case of overflow\n        uint256 _basePartition = basePartition();\n        tokenPerShare =\n            (rewardToDistribute * ACC_TOKEN_PRECISION * _basePartition) /\n            max(lpSupply, 1e18) /\n            TOTAL_PARTITION;\n\n        if (sumOfFactors > 0) {\n            tokenPerFactorShare =\n                (rewardToDistribute * ACC_TOKEN_PRECISION * (TOTAL_PARTITION - _basePartition)) /\n                sumOfFactors /\n                TOTAL_PARTITION;\n        }\n    }\n\n    function _getRewardDebt(\n        uint256 userAmount,\n        uint256 accTokenPerShare,\n        uint256 userFactor,\n        uint256 accTokenPerFactorShare\n    ) internal pure returns (uint256) {\n        return (userAmount * accTokenPerShare + userFactor * accTokenPerFactorShare) / ACC_TOKEN_PRECISION;\n    }\n\n    /// @notice the amount of reward accumulated since the lastRewardTimestamp and is to be distributed.\n    function rewardsToDistribute() public view returns (uint256[] memory rewards_) {\n        return _rewardsToDistribute();\n    }\n\n    /// @notice the amount of reward accumulated since the lastRewardTimestamp and is to be distributed.\n    /// the case that lastRewardTimestamp is in the future is also handled\n    function _rewardsToDistribute() internal view returns (uint256[] memory rewards_) {\n        uint256 length = rewardInfos.length;\n        rewards_ = new uint256[](length);\n\n        uint256[] memory rewardBalances = _balances();\n\n        for (uint256 i; i < length; ++i) {\n            RewardInfo memory info = rewardInfos[i];\n            // if (block.timestamp < info.lastRewardTimestamp), then emission has not started yet.\n            if (block.timestamp < info.lastRewardTimestamp) continue;\n\n            uint40 timeElapsed = uint40(block.timestamp) - info.lastRewardTimestamp;\n            uint256 accumulatedReward = uint256(info.tokenPerSec) * timeElapsed;\n\n            // To prevent bad debt, need to cap at availableReward\n            uint256 availableReward;\n            // this is to handle the underflow case if claimedAmount + balance < distributedAmount,\n            // which happens only if balance was emergencyWithdrawn.\n            if (info.claimedAmount + rewardBalances[i] > info.distributedAmount) {\n                availableReward = info.claimedAmount + rewardBalances[i] - info.distributedAmount;\n            }\n            rewards_[i] = min(accumulatedReward, availableReward);\n        }\n    }\n\n    function _getTotalShare() internal view virtual returns (uint256) {\n        return lpToken.balanceOf(address(masterWombat));\n    }\n\n    /// @notice return an array of reward tokens\n    function _rewardTokens() internal view returns (IERC20[] memory tokens_) {\n        uint256 length = rewardInfos.length;\n        tokens_ = new IERC20[](length);\n        for (uint256 i; i < length; ++i) {\n            RewardInfo memory info = rewardInfos[i];\n            tokens_[i] = info.rewardToken;\n        }\n    }\n\n    function rewardTokens() external view virtual override returns (IERC20[] memory tokens) {\n        return _rewardTokens();\n    }\n\n    /// @notice View function to see surplus of each reward, i.e. reward balance - unclaimed amount\n    /// it would be negative if there's bad debt/deficit, which would happend only if some token was emergencyWithdrawn.\n    /// @return surpluses_ surpluses of the reward tokens.\n    // override.\n    function rewardTokenSurpluses() external view virtual returns (int256[] memory surpluses_) {\n        return _rewardTokenSurpluses();\n    }\n\n    /// @notice View function to see surplus of each reward, i.e. reward balance - unclaimed amount\n    /// surplus = claimed amount + balance - distributed amount - rewardToDistribute\n    /// @return surpluses_ surpluses of the reward tokens.\n    function _rewardTokenSurpluses() internal view returns (int256[] memory surpluses_) {\n        uint256 length = rewardInfos.length;\n        surpluses_ = new int256[](length);\n        uint256[] memory toDistribute = _rewardsToDistribute();\n        uint256[] memory rewardBalances = _balances();\n\n        for (uint256 i; i < length; ++i) {\n            RewardInfo memory info = rewardInfos[i];\n\n            surpluses_[i] =\n                int256(uint256(info.claimedAmount)) +\n                int256(rewardBalances[i]) -\n                int256(uint256(info.distributedAmount)) -\n                int256(toDistribute[i]);\n        }\n    }\n\n    function isEmissionActive() external view returns (bool[] memory isActive_) {\n        return _isEmissionActive();\n    }\n\n    function _isEmissionActive() internal view returns (bool[] memory isActive_) {\n        uint256 length = rewardInfos.length;\n        isActive_ = new bool[](length);\n        int256[] memory surpluses = _rewardTokenSurpluses();\n        for (uint256 i; i < length; ++i) {\n            RewardInfo memory info = rewardInfos[i];\n\n            // conditions for emission to be active:\n            // 1. surplus > 0\n            // 2. tokenPerSec > 0\n            // 3. lastRewardTimestamp <= block.timestamp\n            isActive_[i] = surpluses[i] > 0 && info.tokenPerSec > 0 && info.lastRewardTimestamp <= block.timestamp;\n        }\n    }\n\n    /// @notice In case rewarder is stopped before emissions finished, this function allows\n    /// withdrawal of remaining tokens.\n    /// there will be deficit which is equal to the unclaimed amount\n    function emergencyWithdraw() external onlyOwner {\n        uint256 length = rewardInfos.length;\n        for (uint256 i; i < length; ++i) {\n            RewardInfo storage info = rewardInfos[i];\n            info.tokenPerSec = 0;\n            info.lastRewardTimestamp = uint40(block.timestamp);\n            emergencyTokenWithdraw(address(info.rewardToken));\n        }\n    }\n\n    /// @notice avoids loosing funds in case there is any tokens sent to this contract\n    /// the reward token will not be stopped and keep accumulating debts\n    /// @dev only to be called by owner\n    function emergencyTokenWithdraw(address token) public onlyOwner {\n        // send that balance back to owner\n        if (token == address(0)) {\n            // is native token\n            (bool success, ) = msg.sender.call{value: address(this).balance}('');\n            require(success, 'Transfer failed');\n        } else {\n            IERC20(token).safeTransfer(msg.sender, IERC20(token).balanceOf(address(this)));\n        }\n    }\n\n    /// @notice View function to see the timestamp when the reward will runout based on current emission rate and balance left.\n    /// a timestamp of 0 indicates that the token is not emitting or already run out.\n    /// also works for the case that emission start time (lastRewardTimestamp) is in the future.\n    function runoutTimestamps() external view returns (uint40[] memory timestamps_) {\n        uint256 length = rewardInfos.length;\n        timestamps_ = new uint40[](length);\n        uint256[] memory rewardBalances = _balances();\n        int256[] memory surpluses = _rewardTokenSurpluses();\n\n        for (uint256 i; i < length; ++i) {\n            RewardInfo memory info = rewardInfos[i];\n\n            if (surpluses[i] > 0 && info.tokenPerSec > 0) {\n                // we have: surplus = claimedAmount + balance - distributedAmount - tokenPerSec * (block.timestamp - lastRewardTimestamp)\n                // surplus would reach 0 at runoutTimestamp. therefore, we have the formula:\n                // 0 = claimedAmount + balance - distributedAmount - tokenPerSec * (runoutTimestamp - lastRewardTimestamp)\n                // Solving for runoutTimestamp:\n                // runoutTimestamp = (claimedAmount + balance - distributedAmount + tokenPerSec * lastRewardTimestamp) / tokenPerSec\n\n                timestamps_[i] = uint40(\n                    (info.claimedAmount +\n                        rewardBalances[i] -\n                        info.distributedAmount +\n                        info.tokenPerSec *\n                        info.lastRewardTimestamp) / info.tokenPerSec\n                );\n            }\n        }\n    }\n\n    /// @notice View function to preserve backward compatibility, as the previous version uses rewardInfo instead of rewardInfos\n    function rewardInfo(uint256 i) external view returns (RewardInfo memory info) {\n        return rewardInfos[i];\n    }\n\n    /// @notice View function to see balances of reward token.\n    function balances() external view returns (uint256[] memory balances_) {\n        return _balances();\n    }\n\n    function _balances() internal view returns (uint256[] memory balances_) {\n        uint256 length = rewardInfos.length;\n        balances_ = new uint256[](length);\n\n        for (uint256 i; i < length; ++i) {\n            RewardInfo storage info = rewardInfos[i];\n            if (address(info.rewardToken) == address(0)) {\n                // is native token\n                balances_[i] = address(this).balance;\n            } else {\n                balances_[i] = info.rewardToken.balanceOf(address(this));\n            }\n        }\n    }\n\n    function toUint128(uint256 val) internal pure returns (uint128) {\n        if (val > type(uint128).max) revert('uint128 overflow');\n        return uint128(val);\n    }\n\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\n        return x >= y ? x : y;\n    }\n\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\n        return x <= y ? x : y;\n    }\n}\n"}, "contracts/wombat-governance/rewarders/MultiRewarderPerSec.sol": {"content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.30;\n\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '../interfaces/IMultiRewarder.sol';\n\n/**\n * This is a sample contract to be used in the Master contract for partners to reward\n * stakers with their native token alongside WOM.\n *\n * It assumes no minting rights, so requires a set amount of reward tokens to be transferred to this contract prior.\n * E.g. say you've allocated 100,000 XYZ to the WOM-XYZ farm over 30 days. Then you would need to transfer\n * 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.\n *\n * - This contract has no knowledge on the LP amount and Master is\n *   responsible to pass the amount into this contract\n * - Supports multiple reward tokens\n */\ncontract MultiRewarderPerSec is IMultiRewarder, Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    uint256 public constant ACC_TOKEN_PRECISION = 1e18;\n    IERC20 public immutable lpToken;\n    address public immutable master;\n\n    struct UserInfo {\n        uint128 amount; // 20.18 fixed point.\n        // if the pool is activated, rewardDebt should be > 0\n        uint128 rewardDebt; // 20.18 fixed point. distributed reward per weight\n        uint256 unpaidRewards; // 20.18 fixed point.\n    }\n\n    /// @notice Info of each rewardInfo.\n    struct RewardInfo {\n        IERC20 rewardToken; // if rewardToken is 0, native token is used as reward token\n        uint96 tokenPerSec; // 10.18 fixed point\n        uint128 accTokenPerShare; // 26.12 fixed point. Amount of reward token each LP token is worth.\n        uint128 distributedAmount; // 20.18 fixed point, depending on the decimals of the reward token. This value is used to\n        // track the amount of distributed tokens. If `distributedAmount` is closed to the amount of total received\n        // tokens, we should refill reward or prepare to stop distributing reward.\n    }\n\n    /// @notice address of the operator\n    /// @dev operator is able to set emission rate\n    address public operator;\n\n    uint256 public lastRewardTimestamp;\n\n    /// @notice Info of the rewardInfo.\n    RewardInfo[] public rewardInfo;\n    /// @notice tokenId => userId => UserInfo\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n\n    event OnReward(address indexed rewardToken, address indexed user, uint256 amount);\n    event RewardRateUpdated(address indexed rewardToken, uint256 oldRate, uint256 newRate);\n\n    modifier onlyMaster() {\n        require(msg.sender == address(master), 'onlyMaster: only Master can call this function');\n        _;\n    }\n\n    modifier onlyOperatorOrOwner() {\n        require(msg.sender == owner() || msg.sender == operator, 'onlyOperatorOrOwner');\n        _;\n    }\n\n    /// @notice payable function needed to receive BNB\n    receive() external payable {}\n\n    constructor(address _master, IERC20 _lpToken, uint256 _startTimestamp, IERC20 _rewardToken, uint96 _tokenPerSec) {\n        require(\n            Address.isContract(address(_rewardToken)) || address(_rewardToken) == address(0),\n            'constructor: reward token must be a valid contract'\n        );\n        require(Address.isContract(address(_lpToken)), 'constructor: LP token must be a valid contract');\n        require(Address.isContract(address(_master)), 'constructor: Master must be a valid contract');\n        require(_startTimestamp >= block.timestamp);\n\n        master = _master;\n        lpToken = _lpToken;\n\n        lastRewardTimestamp = _startTimestamp;\n\n        // use non-zero amount for accTokenPerShare as we want to check if user\n        // has activated the pool by checking rewardDebt > 0\n        RewardInfo memory reward = RewardInfo({\n            rewardToken: _rewardToken,\n            tokenPerSec: _tokenPerSec,\n            accTokenPerShare: 1e18,\n            distributedAmount: 0\n        });\n        rewardInfo.push(reward);\n        emit RewardRateUpdated(address(_rewardToken), 0, _tokenPerSec);\n    }\n\n    /// @notice Set operator address\n    function setOperator(address _operator) external onlyOwner {\n        operator = _operator;\n    }\n\n    function addRewardToken(IERC20 _rewardToken, uint96 _tokenPerSec) external onlyOwner {\n        _updateReward();\n        // use non-zero amount for accTokenPerShare as we want to check if user\n        // has activated the pool by checking rewardDebt > 0\n        RewardInfo memory reward = RewardInfo({\n            rewardToken: _rewardToken,\n            tokenPerSec: _tokenPerSec,\n            accTokenPerShare: 1e18,\n            distributedAmount: 0\n        });\n        rewardInfo.push(reward);\n        emit RewardRateUpdated(address(_rewardToken), 0, _tokenPerSec);\n    }\n\n    function updateReward() public {\n        _updateReward();\n    }\n\n    /// @dev This function should be called before lpSupply and sumOfFactors update\n    function _updateReward() internal {\n        _updateReward(_getTotalShare());\n    }\n\n    function _updateReward(uint256 totalShare) internal {\n        if (block.timestamp > lastRewardTimestamp) {\n            uint256 length = rewardInfo.length;\n            for (uint256 i; i < length; ++i) {\n                RewardInfo storage reward = rewardInfo[i];\n                uint256 timeElapsed = block.timestamp - lastRewardTimestamp;\n                uint256 tokenReward = timeElapsed * reward.tokenPerSec;\n                // use `max(totalShare, 1e18)` in case of overflow\n                reward.accTokenPerShare += toUint128((tokenReward * ACC_TOKEN_PRECISION) / max(totalShare, 1e18));\n                reward.distributedAmount += toUint128(tokenReward);\n            }\n            lastRewardTimestamp = block.timestamp;\n        }\n    }\n\n    /// @notice Sets the distribution reward rate. This will also update the rewardInfo.\n    /// @param _tokenPerSec The number of tokens to distribute per second\n    function setRewardRate(uint256 _tokenId, uint96 _tokenPerSec) external onlyOperatorOrOwner {\n        require(_tokenPerSec <= 10000e18, 'reward rate too high'); // in case of accTokenPerShare overflow\n        _updateReward();\n\n        uint256 oldRate = rewardInfo[_tokenId].tokenPerSec;\n        rewardInfo[_tokenId].tokenPerSec = _tokenPerSec;\n\n        emit RewardRateUpdated(address(rewardInfo[_tokenId].rewardToken), oldRate, _tokenPerSec);\n    }\n\n    /// @notice Function called by Master whenever staker claims WOM harvest.\n    /// @notice Allows staker to also receive a 2nd reward token.\n    /// @dev Assume `_getTotalShare` isn't updated yet when this function is called\n    /// @param _user Address of user\n    /// @param _lpAmount The new amount of LP\n    function onReward(\n        address _user,\n        uint256 _lpAmount\n    ) external virtual override onlyMaster nonReentrant returns (uint256[] memory rewards) {\n        _updateReward();\n        return _onReward(_user, _lpAmount);\n    }\n\n    function _onReward(address _user, uint256 _lpAmount) internal virtual returns (uint256[] memory rewards) {\n        uint256 length = rewardInfo.length;\n        rewards = new uint256[](length);\n        for (uint256 i; i < length; ++i) {\n            RewardInfo storage reward = rewardInfo[i];\n            UserInfo storage user = userInfo[i][_user];\n            IERC20 rewardToken = reward.rewardToken;\n\n            if (user.rewardDebt > 0) {\n                // rewardDebt > 0 indicates the user has activated the pool and we should distribute rewards\n                uint256 pending = ((user.amount * uint256(reward.accTokenPerShare)) / ACC_TOKEN_PRECISION) +\n                    user.unpaidRewards -\n                    user.rewardDebt;\n\n                if (address(rewardToken) == address(0)) {\n                    // is native token\n                    uint256 tokenBalance = address(this).balance;\n                    if (pending > tokenBalance) {\n                        // Note: this line may fail if the receiver is a contract and refuse to receive BNB\n                        (bool success, ) = _user.call{value: tokenBalance}('');\n                        require(success, 'Transfer failed');\n                        rewards[i] = tokenBalance;\n                        user.unpaidRewards = pending - tokenBalance;\n                    } else {\n                        (bool success, ) = _user.call{value: pending}('');\n                        require(success, 'Transfer failed');\n                        rewards[i] = pending;\n                        user.unpaidRewards = 0;\n                    }\n                } else {\n                    // ERC20 token\n                    uint256 tokenBalance = rewardToken.balanceOf(address(this));\n                    if (pending > tokenBalance) {\n                        rewardToken.safeTransfer(_user, tokenBalance);\n                        rewards[i] = tokenBalance;\n                        user.unpaidRewards = pending - tokenBalance;\n                    } else {\n                        rewardToken.safeTransfer(_user, pending);\n                        rewards[i] = pending;\n                        user.unpaidRewards = 0;\n                    }\n                }\n            }\n\n            user.amount = toUint128(_lpAmount);\n            user.rewardDebt = toUint128((_lpAmount * reward.accTokenPerShare) / ACC_TOKEN_PRECISION);\n            emit OnReward(address(rewardToken), _user, rewards[i]);\n        }\n    }\n\n    /// @notice returns reward length\n    function rewardLength() external view virtual override returns (uint256) {\n        return _rewardLength();\n    }\n\n    function _rewardLength() internal view returns (uint256) {\n        return rewardInfo.length;\n    }\n\n    /// @notice View function to see pending tokens\n    /// @param _user Address of user.\n    /// @return rewards reward for a given user.\n    function pendingTokens(address _user) external view virtual override returns (uint256[] memory rewards) {\n        return _pendingTokens(_user);\n    }\n\n    function _pendingTokens(address _user) internal view returns (uint256[] memory rewards) {\n        uint256 length = rewardInfo.length;\n        rewards = new uint256[](length);\n\n        for (uint256 i; i < length; ++i) {\n            RewardInfo memory pool = rewardInfo[i];\n            UserInfo storage user = userInfo[i][_user];\n\n            uint256 accTokenPerShare = pool.accTokenPerShare;\n            uint256 totalShare = _getTotalShare();\n\n            if (block.timestamp > lastRewardTimestamp && totalShare > 0) {\n                uint256 timeElapsed = block.timestamp - lastRewardTimestamp;\n                uint256 tokenReward = timeElapsed * pool.tokenPerSec;\n                // use `max(totalShare, 1e18)` in case of overflow\n                accTokenPerShare += (tokenReward * ACC_TOKEN_PRECISION) / max(totalShare, 1e18);\n            }\n\n            rewards[i] =\n                ((user.amount * uint256(accTokenPerShare)) / ACC_TOKEN_PRECISION) -\n                user.rewardDebt +\n                user.unpaidRewards;\n        }\n    }\n\n    function _getTotalShare() internal view virtual returns (uint256) {\n        return lpToken.balanceOf(address(master));\n    }\n\n    /// @notice return an array of reward tokens\n    function _rewardTokens() internal view returns (IERC20[] memory tokens) {\n        uint256 length = rewardInfo.length;\n        tokens = new IERC20[](length);\n        for (uint256 i; i < length; ++i) {\n            RewardInfo memory pool = rewardInfo[i];\n            tokens[i] = pool.rewardToken;\n        }\n    }\n\n    function rewardTokens() external view virtual override returns (IERC20[] memory tokens) {\n        return _rewardTokens();\n    }\n\n    /// @notice In case rewarder is stopped before emissions finished, this function allows\n    /// withdrawal of remaining tokens.\n    function emergencyWithdraw() external onlyOwner {\n        uint256 length = rewardInfo.length;\n\n        for (uint256 i; i < length; ++i) {\n            RewardInfo storage pool = rewardInfo[i];\n            emergencyTokenWithdraw(address(pool.rewardToken));\n        }\n    }\n\n    /// @notice avoids loosing funds in case there is any tokens sent to this contract\n    /// @dev only to be called by owner\n    function emergencyTokenWithdraw(address token) public onlyOwner {\n        // send that balance back to owner\n        if (token == address(0)) {\n            // is native token\n            (bool success, ) = msg.sender.call{value: address(this).balance}('');\n            require(success, 'Transfer failed');\n        } else {\n            IERC20(token).safeTransfer(msg.sender, IERC20(token).balanceOf(address(this)));\n        }\n    }\n\n    /// @notice View function to see balances of reward token.\n    function balances() external view returns (uint256[] memory balances_) {\n        uint256 length = rewardInfo.length;\n        balances_ = new uint256[](length);\n\n        for (uint256 i; i < length; ++i) {\n            RewardInfo storage pool = rewardInfo[i];\n            if (address(pool.rewardToken) == address(0)) {\n                // is native token\n                balances_[i] = address(this).balance;\n            } else {\n                balances_[i] = pool.rewardToken.balanceOf(address(this));\n            }\n        }\n    }\n\n    function toUint128(uint256 val) internal pure returns (uint128) {\n        if (val > type(uint128).max) revert('uint128 overflow');\n        return uint128(val);\n    }\n\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\n        return x >= y ? x : y;\n    }\n}\n"}, "contracts/wombat-governance/rewarders/MultiRewarderPerSecV2.sol": {"content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.30;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\nimport '../interfaces/IBribeRewarderFactory.sol';\nimport '../interfaces/IMultiRewarderV2.sol';\n\n/**\n * This is a sample contract to be used in the Master contract for partners to reward\n * stakers with their native token alongside WOM.\n *\n * It assumes no minting rights, so requires a set amount of reward tokens to be transferred to this contract prior.\n * E.g. say you've allocated 100,000 XYZ to the WOM-XYZ farm over 30 days. Then you would need to transfer\n * 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.\n *\n * - This contract has no knowledge on the LP amount and Master is\n *   responsible to pass the amount into this contract\n * - Supports multiple reward tokens\n * - Supports bribe rewarder factory\n */\ncontract MultiRewarderPerSecV2 is\n    IMultiRewarderV2,\n    Initializable,\n    OwnableUpgradeable,\n    AccessControlEnumerableUpgradeable,\n    ReentrancyGuardUpgradeable\n{\n    using SafeERC20 for IERC20;\n\n    bytes32 public constant ROLE_OPERATOR = keccak256('operator');\n    uint256 public constant ACC_TOKEN_PRECISION = 1e18;\n    uint256 public constant MAX_REWARD_TOKENS = 10;\n\n    struct UserBalanceInfo {\n        uint256 amount;\n    }\n\n    struct UserRewardInfo {\n        // if the pool is activated, rewardDebt should be > 0\n        uint128 rewardDebt; // 20.18 fixed point. distributed reward per weight\n        uint128 unpaidRewards; // 20.18 fixed point.\n    }\n\n    /// @notice Info of each reward token.\n    struct RewardInfo {\n        /// slot\n        IERC20 rewardToken; // if rewardToken is 0, native token is used as reward token\n        uint96 tokenPerSec; // 10.18 fixed point. The emission rate in tokens per second.\n        // This rate may not reflect the current rate in cases where emission has not started or has stopped due to surplus <= 0.\n\n        /// slot\n        uint128 accTokenPerShare; // 26.12 fixed point. Amount of reward token each LP token is worth.\n        // This value increases when rewards are being distributed.\n        uint128 distributedAmount; // 20.18 fixed point, depending on the decimals of the reward token. This value is used to\n        // track the amount of distributed tokens. If `distributedAmount` is closed to the amount of total received\n        // tokens, we should refill reward or prepare to stop distributing reward.\n\n        /// slot\n        uint128 claimedAmount; // 20.18 fixed point. Total amount claimed by all users.\n        // We can derive the unclaimed amount: distributedAmount - claimedAmount\n        uint40 lastRewardTimestamp; // The timestamp up to which rewards have already been distributed.\n        // If set to a future value, it indicates that the emission has not started yet.\n    }\n\n    /**\n     * Visualization of the relationship between distributedAmount, claimedAmount, rewardToDistribute, availableReward, surplus and balance:\n     *\n     * Case: emission is active. rewardToDistribute is growing at the rate of tokenPerSec.\n     * |<--------------distributedAmount------------->|<--rewardToDistribute*-->|\n     * |<-----claimedAmount----->|<-------------------------balance------------------------->|\n     *                                                |<-----------availableReward*--------->|\n     *                           |<-unclaimedAmount*->|                         |<-surplus*->|\n     *\n     * Case: reward running out. rewardToDistribute stopped growing. it is capped at availableReward.\n     * |<--------------distributedAmount------------->|<---------rewardToDistribute*-------->|\n     * |<-----claimedAmount----->|<-------------------------balance------------------------->|\n     *                                                |<-----------availableReward*--------->|\n     *                           |<-unclaimedAmount*->|                                       surplus* = 0\n     *\n     * Case: balance emptied after emergencyWithdraw.\n     * |<--------------distributedAmount------------->| rewardToDistribute* = 0\n     * |<-----claimedAmount----->|                      balance = 0, availableReward* = 0\n     *                           |<-unclaimedAmount*->| surplus* = - unclaimedAmount* (negative to indicate deficit)\n     *\n     * (Variables with * are not in the RewardInfo state, but can be derived from it.)\n     *\n     * balance, is the amount of reward token in this contract. Not all of them are available for distribution as some are reserved\n     * for unclaimed rewards.\n     * distributedAmount, is the amount of reward token that has been distributed up to lastRewardTimestamp.\n     * claimedAmount, is the amount of reward token that has been claimed by users. claimedAmount always <= distributedAmount.\n     * unclaimedAmount = distributedAmount - claimedAmount, is the amount of reward token in balance that is reserved to be claimed by users.\n     * availableReward = balance - unclaimedAmount, is the amount inside balance that is available for distribution (not reserved for\n     * unclaimed rewards).\n     * rewardToDistribute is the accumulated reward from [lastRewardTimestamp, now] that is yet to be distributed. as distributedAmount only\n     * accounts for the distributed amount up to lastRewardTimestamp. it is used in _updateReward(), and to be added to distributedAmount.\n     * to prevent bad debt, rewardToDistribute is capped at availableReward. as we cannot distribute more than the availableReward.\n     * rewardToDistribute = min(tokenPerSec * (now - lastRewardTimestamp), availableReward)\n     * surplus = availableReward - rewardToDistribute, is the amount inside balance that is available for future distribution.\n     */\n\n    IERC20 public lpToken;\n    address public master;\n\n    /// @notice Info of the reward tokens.\n    RewardInfo[] public rewardInfos;\n    /// @notice userAddr => UserBalanceInfo\n    mapping(address => UserBalanceInfo) public userBalanceInfo;\n    /// @notice tokenId => userId => UserRewardInfo\n    mapping(uint256 => mapping(address => UserRewardInfo)) public userRewardInfo;\n\n    IBribeRewarderFactory public bribeFactory;\n    bool public isDeprecated;\n\n    event OnReward(address indexed rewardToken, address indexed user, uint256 amount);\n    event RewardRateUpdated(address indexed rewardToken, uint256 oldRate, uint256 newRate);\n    event StartTimeUpdated(address indexed rewardToken, uint40 newStartTime);\n    event IsDeprecatedUpdated(bool isDeprecated);\n\n    modifier onlyMaster() {\n        require(msg.sender == address(master), 'onlyMaster: only Master can call this function');\n        _;\n    }\n\n    /// @notice payable function needed to receive BNB\n    receive() external payable {}\n\n    /**\n     * @notice Initializes pool. Dev is set to be the account calling this function.\n     */\n    function initialize(\n        IBribeRewarderFactory _bribeFactory,\n        address _master,\n        IERC20 _lpToken,\n        uint256 _startTimestamp,\n        IERC20 _rewardToken,\n        uint96 _tokenPerSec\n    ) public virtual initializer {\n        require(\n            Address.isContract(address(_rewardToken)) || address(_rewardToken) == address(0),\n            'constructor: reward token must be a valid contract'\n        );\n        require(Address.isContract(address(_lpToken)), 'constructor: LP token must be a valid contract');\n        require(Address.isContract(address(_master)), 'constructor: Master must be a valid contract');\n        require(_startTimestamp >= block.timestamp, 'constructor: invalid _startTimestamp');\n\n        __Ownable_init();\n        __AccessControlEnumerable_init_unchained();\n        __ReentrancyGuard_init_unchained();\n\n        bribeFactory = _bribeFactory; // bribeFactory can be 0 address\n        master = _master;\n        lpToken = _lpToken;\n\n        // use non-zero amount for accTokenPerShare as we want to check if user\n        // has activated the pool by checking rewardDebt > 0\n        RewardInfo memory reward = RewardInfo({\n            rewardToken: _rewardToken,\n            tokenPerSec: _tokenPerSec,\n            accTokenPerShare: 1e18,\n            distributedAmount: 0,\n            claimedAmount: 0,\n            lastRewardTimestamp: uint40(_startTimestamp)\n        });\n        emit RewardRateUpdated(address(reward.rewardToken), 0, _tokenPerSec);\n        emit StartTimeUpdated(address(reward.rewardToken), uint40(_startTimestamp));\n        rewardInfos.push(reward);\n    }\n\n    function addOperator(address _operator) external onlyOwner {\n        _grantRole(ROLE_OPERATOR, _operator);\n    }\n\n    function removeOperator(address _operator) external onlyOwner {\n        _revokeRole(ROLE_OPERATOR, _operator);\n    }\n\n    function setIsDeprecated(bool _isDeprecated) external onlyOwner {\n        isDeprecated = _isDeprecated;\n        emit IsDeprecatedUpdated(_isDeprecated);\n    }\n\n    function addRewardToken(IERC20 _rewardToken, uint40 _startTimestampOrNow, uint96 _tokenPerSec) external virtual {\n        require(hasRole(ROLE_OPERATOR, msg.sender) || msg.sender == owner(), 'not authorized');\n        // Check `bribeFactory.isRewardTokenWhitelisted` if needed\n        require(\n            address(bribeFactory) == address(0) || bribeFactory.isRewardTokenWhitelisted(_rewardToken),\n            'reward token must be whitelisted by bribe factory'\n        );\n\n        _addRewardToken(_rewardToken, _startTimestampOrNow, _tokenPerSec);\n    }\n\n    function _addRewardToken(IERC20 _rewardToken, uint40 _startTimestampOrNow, uint96 _tokenPerSec) internal {\n        require(\n            Address.isContract(address(_rewardToken)) || address(_rewardToken) == address(0),\n            'reward token must be a valid contract'\n        );\n        require(_startTimestampOrNow == 0 || _startTimestampOrNow >= block.timestamp, 'invalid _startTimestamp');\n        uint256 length = rewardInfos.length;\n        require(length < MAX_REWARD_TOKENS, 'reward token length exceeded');\n        for (uint256 i; i < length; ++i) {\n            require(rewardInfos[i].rewardToken != _rewardToken, 'token has already been added');\n        }\n        _updateReward();\n        uint40 startTimestamp = _startTimestampOrNow == 0 ? uint40(block.timestamp) : _startTimestampOrNow;\n        // use non-zero amount for accTokenPerShare as we want to check if user\n        // has activated the pool by checking rewardDebt > 0\n        RewardInfo memory reward = RewardInfo({\n            rewardToken: _rewardToken,\n            tokenPerSec: _tokenPerSec,\n            accTokenPerShare: 1e18,\n            distributedAmount: 0,\n            claimedAmount: 0,\n            lastRewardTimestamp: startTimestamp\n        });\n        rewardInfos.push(reward);\n        emit StartTimeUpdated(address(reward.rewardToken), startTimestamp);\n        emit RewardRateUpdated(address(reward.rewardToken), 0, _tokenPerSec);\n    }\n\n    function updateReward() public {\n        _updateReward();\n    }\n\n    /// @dev This function should be called before lpSupply and sumOfFactors update\n    function _updateReward() internal {\n        _updateReward(_getTotalShare());\n    }\n\n    function _updateReward(uint256 totalShare) internal {\n        uint256 length = rewardInfos.length;\n        uint256[] memory toDistribute = rewardsToDistribute();\n        for (uint256 i; i < length; ++i) {\n            RewardInfo storage info = rewardInfos[i];\n            uint256 rewardToDistribute = toDistribute[i];\n            if (rewardToDistribute > 0) {\n                // use `max(totalShare, 1e18)` in case of overflow\n                info.accTokenPerShare += toUint128((rewardToDistribute * ACC_TOKEN_PRECISION) / max(totalShare, 1e18));\n                info.distributedAmount += toUint128(rewardToDistribute);\n            }\n            // update lastRewardTimestamp even if no reward is distributed.\n            if (info.lastRewardTimestamp < block.timestamp) {\n                // but don't update if info.lastRewardTimestamp is set in the future,\n                // otherwise we would be starting the emission earlier than it's supposed to.\n                info.lastRewardTimestamp = uint40(block.timestamp);\n            }\n        }\n    }\n\n    /// @notice Sets the distribution reward rate, and updates the emission start time if specified.\n    /// @param _tokenId The token id\n    /// @param _tokenPerSec The number of tokens to distribute per second\n    /// @param _startTimestampToOverride the start time for the token emission.\n    ///        A value of 0 indicates no changes, while a future timestamp starts the emission at the specified time.\n    function setRewardRate(uint256 _tokenId, uint96 _tokenPerSec, uint40 _startTimestampToOverride) external {\n        require(hasRole(ROLE_OPERATOR, msg.sender) || msg.sender == owner(), 'not authorized');\n        require(_tokenId < rewardInfos.length, 'invalid _tokenId');\n        require(\n            _startTimestampToOverride == 0 || _startTimestampToOverride >= block.timestamp,\n            'invalid _startTimestampToOverride'\n        );\n        require(_tokenPerSec <= 10000e18, 'reward rate too high'); // in case of accTokenPerShare overflow\n        _updateReward();\n        RewardInfo storage info = rewardInfos[_tokenId];\n        uint256 oldRate = info.tokenPerSec;\n        info.tokenPerSec = _tokenPerSec;\n        if (_startTimestampToOverride > 0) {\n            info.lastRewardTimestamp = _startTimestampToOverride;\n            emit StartTimeUpdated(address(info.rewardToken), _startTimestampToOverride);\n        }\n        emit RewardRateUpdated(address(rewardInfos[_tokenId].rewardToken), oldRate, _tokenPerSec);\n    }\n\n    /// @notice Function called by Master whenever staker claims WOM harvest.\n    /// @notice Allows staker to also receive a 2nd reward token.\n    /// @dev Assume `_getTotalShare` isn't updated yet when this function is called\n    /// @param _user Address of user\n    /// @param _lpAmount The new amount of LP\n    function onReward(\n        address _user,\n        uint256 _lpAmount\n    ) external virtual override onlyMaster nonReentrant returns (uint256[] memory rewards) {\n        _updateReward();\n        return _onReward(_user, _lpAmount);\n    }\n\n    function _onReward(address _user, uint256 _lpAmount) internal virtual returns (uint256[] memory rewards) {\n        uint256 length = rewardInfos.length;\n        rewards = new uint256[](length);\n        for (uint256 i; i < length; ++i) {\n            RewardInfo storage info = rewardInfos[i];\n            UserRewardInfo storage user = userRewardInfo[i][_user];\n            IERC20 rewardToken = info.rewardToken;\n\n            if (user.rewardDebt > 0 || user.unpaidRewards > 0) {\n                // rewardDebt > 0 indicates the user has activated the pool and we should distribute rewards\n                uint256 pending = ((userBalanceInfo[_user].amount * uint256(info.accTokenPerShare)) /\n                    ACC_TOKEN_PRECISION) +\n                    user.unpaidRewards -\n                    user.rewardDebt;\n\n                if (address(rewardToken) == address(0)) {\n                    // is native token\n                    uint256 tokenBalance = address(this).balance;\n                    if (pending > tokenBalance) {\n                        // Note: this line may fail if the receiver is a contract and refuse to receive BNB\n                        (bool success, ) = _user.call{value: tokenBalance}('');\n                        require(success, 'Transfer failed');\n                        rewards[i] = tokenBalance;\n                        info.claimedAmount += toUint128(tokenBalance);\n                        user.unpaidRewards = toUint128(pending - tokenBalance);\n                    } else {\n                        (bool success, ) = _user.call{value: pending}('');\n                        require(success, 'Transfer failed');\n                        rewards[i] = pending;\n                        info.claimedAmount += toUint128(pending);\n                        user.unpaidRewards = 0;\n                    }\n                } else {\n                    // ERC20 token\n                    uint256 tokenBalance = rewardToken.balanceOf(address(this));\n                    if (pending > tokenBalance) {\n                        rewardToken.safeTransfer(_user, tokenBalance);\n                        rewards[i] = tokenBalance;\n                        info.claimedAmount += toUint128(tokenBalance);\n                        user.unpaidRewards = toUint128(pending - tokenBalance);\n                    } else {\n                        rewardToken.safeTransfer(_user, pending);\n                        rewards[i] = pending;\n                        info.claimedAmount += toUint128(pending);\n                        user.unpaidRewards = 0;\n                    }\n                }\n            }\n\n            user.rewardDebt = toUint128((_lpAmount * info.accTokenPerShare) / ACC_TOKEN_PRECISION);\n            emit OnReward(address(rewardToken), _user, rewards[i]);\n        }\n        userBalanceInfo[_user].amount = toUint128(_lpAmount);\n    }\n\n    function emergencyClaimReward() external nonReentrant returns (uint256[] memory rewards) {\n        _updateReward();\n        require(isDeprecated, 'rewarder / bribe is not deprecated');\n        return _onReward(msg.sender, 0);\n    }\n\n    /// @notice returns reward length\n    function rewardLength() public view virtual override returns (uint256) {\n        return rewardInfos.length;\n    }\n\n    /// @notice View function to see pending tokens that have been distributed but not claimed by the user yet.\n    /// @param _user Address of user.\n    /// @return rewards_ reward for a given user.\n    function pendingTokens(address _user) public view virtual override returns (uint256[] memory rewards_) {\n        uint256 length = rewardInfos.length;\n        rewards_ = new uint256[](length);\n\n        uint256[] memory toDistribute = rewardsToDistribute();\n        for (uint256 i; i < length; ++i) {\n            RewardInfo memory info = rewardInfos[i];\n            UserRewardInfo storage user = userRewardInfo[i][_user];\n\n            uint256 accTokenPerShare = info.accTokenPerShare;\n            uint256 totalShare = _getTotalShare();\n            if (totalShare > 0) {\n                uint256 rewardToDistribute = toDistribute[i];\n                // use `max(totalShare, 1e18)` in case of overflow\n                accTokenPerShare += (rewardToDistribute * ACC_TOKEN_PRECISION) / max(totalShare, 1e18);\n            }\n\n            rewards_[i] =\n                ((userBalanceInfo[_user].amount * uint256(accTokenPerShare)) / ACC_TOKEN_PRECISION) -\n                user.rewardDebt +\n                user.unpaidRewards;\n        }\n    }\n\n    /// @notice the amount of reward accumulated since the lastRewardTimestamp and is to be distributed.\n    /// the case that lastRewardTimestamp is in the future is also handled\n    function rewardsToDistribute() public view returns (uint256[] memory rewards_) {\n        uint256 length = rewardInfos.length;\n        rewards_ = new uint256[](length);\n\n        uint256[] memory rewardBalances = balances();\n\n        for (uint256 i; i < length; ++i) {\n            RewardInfo memory info = rewardInfos[i];\n            // if (block.timestamp < info.lastRewardTimestamp), then emission has not started yet.\n            if (block.timestamp < info.lastRewardTimestamp) continue;\n\n            uint40 timeElapsed = uint40(block.timestamp) - info.lastRewardTimestamp;\n            uint256 accumulatedReward = uint256(info.tokenPerSec) * timeElapsed;\n\n            // To prevent bad debt, need to cap at availableReward\n            uint256 availableReward;\n            // this is to handle the underflow case if claimedAmount + balance < distributedAmount,\n            // which could happend only if balance was emergencyWithdrawn.\n            if (info.claimedAmount + rewardBalances[i] > info.distributedAmount) {\n                availableReward = info.claimedAmount + rewardBalances[i] - info.distributedAmount;\n            }\n            rewards_[i] = min(accumulatedReward, availableReward);\n        }\n    }\n\n    function _getTotalShare() internal view virtual returns (uint256) {\n        return lpToken.balanceOf(address(master));\n    }\n\n    /// @notice return an array of reward tokens\n    function rewardTokens() public view virtual override returns (IERC20[] memory tokens_) {\n        uint256 length = rewardInfos.length;\n        tokens_ = new IERC20[](length);\n        for (uint256 i; i < length; ++i) {\n            RewardInfo memory info = rewardInfos[i];\n            tokens_[i] = info.rewardToken;\n        }\n    }\n\n    /// @notice View function to see surplus of each reward, i.e. reward balance - unclaimed amount\n    /// it would be negative if there's bad debt/deficit, which would happend only if some token was emergencyWithdrawn.\n    /// @return surpluses_ surpluses of the reward tokens.\n    // override.\n    function rewardTokenSurpluses() external view virtual returns (int256[] memory surpluses_) {\n        return _rewardTokenSurpluses();\n    }\n\n    /// @notice View function to see surplus of each reward, i.e. reward balance - unclaimed amount\n    /// surplus = claimed amount + balance - distributed amount - rewardToDistribute\n    /// @return surpluses_ surpluses of the reward tokens.\n    function _rewardTokenSurpluses() internal view returns (int256[] memory surpluses_) {\n        uint256 length = rewardInfos.length;\n        surpluses_ = new int256[](length);\n        uint256[] memory toDistribute = rewardsToDistribute();\n        uint256[] memory rewardBalances = balances();\n\n        for (uint256 i; i < length; ++i) {\n            RewardInfo memory info = rewardInfos[i];\n\n            surpluses_[i] =\n                int256(uint256(info.claimedAmount)) +\n                int256(rewardBalances[i]) -\n                int256(uint256(info.distributedAmount)) -\n                int256(toDistribute[i]);\n        }\n    }\n\n    function isEmissionActive() external view returns (bool[] memory isActive_) {\n        return _isEmissionActive();\n    }\n\n    function _isEmissionActive() internal view returns (bool[] memory isActive_) {\n        uint256 length = rewardInfos.length;\n        isActive_ = new bool[](length);\n        int256[] memory surpluses = _rewardTokenSurpluses();\n        for (uint256 i; i < length; ++i) {\n            RewardInfo memory info = rewardInfos[i];\n\n            // conditions for emission to be active:\n            // 1. surplus > 0\n            // 2. tokenPerSec > 0\n            // 3. lastRewardTimestamp <= block.timestamp\n            isActive_[i] = surpluses[i] > 0 && info.tokenPerSec > 0 && info.lastRewardTimestamp <= block.timestamp;\n        }\n    }\n\n    /// @notice In case rewarder is stopped before emissions finished, this function allows\n    /// withdrawal of remaining tokens.\n    /// there will be deficit which is equal to the unclaimed amount\n    function emergencyWithdraw() external onlyOwner {\n        uint256 length = rewardInfos.length;\n        for (uint256 i; i < length; ++i) {\n            RewardInfo storage info = rewardInfos[i];\n            info.tokenPerSec = 0;\n            info.lastRewardTimestamp = uint40(block.timestamp);\n            emergencyTokenWithdraw(address(info.rewardToken));\n        }\n    }\n\n    /// @notice avoids loosing funds in case there is any tokens sent to this contract\n    /// the reward token will not be stopped and keep accumulating debts\n    /// @dev only to be called by owner\n    function emergencyTokenWithdraw(address token) public onlyOwner {\n        // send that balance back to owner\n        if (token == address(0)) {\n            // is native token\n            (bool success, ) = msg.sender.call{value: address(this).balance}('');\n            require(success, 'Transfer failed');\n        } else {\n            IERC20(token).safeTransfer(msg.sender, IERC20(token).balanceOf(address(this)));\n        }\n    }\n\n    /// @notice View function to see the timestamp when the reward will runout based on current emission rate and balance left.\n    /// a timestamp of 0 indicates that the token is not emitting or already run out.\n    /// also works for the case that emission start time (lastRewardTimestamp) is in the future.\n    function runoutTimestamps() external view returns (uint40[] memory timestamps_) {\n        uint256 length = rewardInfos.length;\n        timestamps_ = new uint40[](length);\n        uint256[] memory rewardBalances = balances();\n        int256[] memory surpluses = _rewardTokenSurpluses();\n\n        for (uint256 i; i < length; ++i) {\n            RewardInfo memory info = rewardInfos[i];\n\n            if (surpluses[i] > 0 && info.tokenPerSec > 0) {\n                // we have: surplus = claimedAmount + balance - distributedAmount - tokenPerSec * (block.timestamp - lastRewardTimestamp)\n                // surplus would reach 0 at runoutTimestamp. therefore, we have the formula:\n                // 0 = claimedAmount + balance - distributedAmount - tokenPerSec * (runoutTimestamp - lastRewardTimestamp)\n                // Solving for runoutTimestamp:\n                // runoutTimestamp = (claimedAmount + balance - distributedAmount + tokenPerSec * lastRewardTimestamp) / tokenPerSec\n\n                timestamps_[i] = uint40(\n                    (info.claimedAmount +\n                        rewardBalances[i] -\n                        info.distributedAmount +\n                        info.tokenPerSec *\n                        info.lastRewardTimestamp) / info.tokenPerSec\n                );\n            }\n        }\n    }\n\n    /// @notice View function to preserve backward compatibility, as the previous version uses rewardInfo instead of rewardInfos\n    function rewardInfo(uint256 i) external view returns (RewardInfo memory info) {\n        return rewardInfos[i];\n    }\n\n    /// @notice View function to see balances of reward token.\n    function balances() public view returns (uint256[] memory balances_) {\n        uint256 length = rewardInfos.length;\n        balances_ = new uint256[](length);\n\n        for (uint256 i; i < length; ++i) {\n            RewardInfo storage info = rewardInfos[i];\n            if (address(info.rewardToken) == address(0)) {\n                // is native token\n                balances_[i] = address(this).balance;\n            } else {\n                balances_[i] = info.rewardToken.balanceOf(address(this));\n            }\n        }\n    }\n\n    function toUint128(uint256 val) internal pure returns (uint128) {\n        if (val > type(uint128).max) revert('uint128 overflow');\n        return uint128(val);\n    }\n\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\n        return x >= y ? x : y;\n    }\n\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\n        return x <= y ? x : y;\n    }\n\n    uint256[50] private __gap;\n}\n"}}, "settings": {"viaIR": false, "optimizer": {"enabled": true}, "outputSelection": {"*": {"*": ["evm.legacyAssembly"]}}, "metadata": {"useLiteralContent": true}, "libraries": {}}}
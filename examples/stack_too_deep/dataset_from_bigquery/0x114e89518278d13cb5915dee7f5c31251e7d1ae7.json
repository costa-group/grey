{"language": "Solidity", "sources": {"contracts/BullRun.sol": {"content": "// SPDX-License-Identifier: MIT LICENSE\npragma solidity ^0.8.30;\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./interfaces/IMetatopiaCoinFlipRNG.sol\";\nimport \"./interfaces/ITopia.sol\";\nimport \"./interfaces/IBullpen.sol\";\nimport \"./interfaces/IArena.sol\";\nimport \"./interfaces/IRandomizer.sol\";\nimport \"./interfaces/IHub.sol\";\n\ncontract BullRun is IERC721Receiver, Ownable, ReentrancyGuard {\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    address payable public RandomizerContract; // VRF contract to decide nft stealing\n    address public BullpenContract; // stores staked Bulls\n    address public ArenaContract; // stores staked Matadors\n    IERC721 public Genesis; // Genesis NFT contract\n    IERC721 public Alpha; // Alpha NFT contract\n\n    IMetatopiaCoinFlipRNG private MetatopiaCoinFlipRNGInterface;\n    ITopia private TopiaInterface;\n    IBullpen private BullpenInterface;\n    IArena private ArenaInterface;\n    IRandomizer private RandomizerInterface;\n    IHub public HubInterface;\n\n    mapping(uint16 => uint8) public NFTType; // tokenID (ID #) => nftID (1 = runner, 2 = bull.. etc)\n    mapping(uint8 => uint8) public Risk; // NFT TYPE (not NFT ID) => % chance to get stolen\n    mapping(uint16 => bool) public IsNFTStaked; // whether or not an NFT ID # is staked\n    mapping(address => mapping(uint256 => uint16[])) public BetNFTsPerEncierro; // keeps track of each players token IDs bet for each encierro\n    mapping(uint16 => mapping(uint256 => NFTBet)) public BetNFTInfo; // tokenID to bet info (each staked NFT is its own separate bet) per session\n    mapping(address => mapping(uint256 => bool)) public HasBet; // keeps track of whether or not a user has bet in a certain encierro\n    mapping(address => mapping(uint256 => bool)) public HasClaimed; // keeps track of users and whether or not they have claimed reward for an encierro bet (not for daily topia)\n    mapping(uint256 => Encierro) public Encierros; // mapping for Encierro id to unlock corresponding encierro params\n    mapping(address => uint256[]) public EnteredEncierros; // list of Encierro ID's that a particular address has bet in\n    mapping(uint16 => Stake) public StakedNFTInfo; // tokenID to stake info\n    mapping(address => uint16) public NumberOfStakedNFTs; // the number of NFTs a wallet has staked;\n    mapping(address => EnumerableSet.UintSet) StakedTokensOfWallet; // list of token IDs a user has staked\n    mapping(address => EnumerableSet.UintSet) MatadorsStakedPerWallet; // list of matador IDs a user has staked\n    mapping(address => EnumerableSet.UintSet) StakedAlphasOfWallet; // list of Alpha token IDs a user has staked\n    mapping(uint16 => Stake) public StakedAlphaInfo; // tokenID to stake info\n    mapping(uint16 => bool) public IsAlphaStaked; // whether or not an NFT ID # is staked\n    mapping(address => uint16) public NumberOfStakedAlphas; // the number of NFTs a wallet has staked;\n\n    // ID used to identify type of NFT being staked\n    uint8 public constant RunnerId = 1;\n    uint8 public constant BullId = 2;\n    uint8 public constant MatadorId = 3;\n\n    // keeps track of total NFT's staked\n    uint16 public stakedRunners;\n    uint16 public stakedBulls;\n    uint16 public stakedMatadors;\n    uint16 public stakedAlphas;\n    uint256 public currentEncierroId;\n\n    uint80 public minimumStakeTime;\n    uint256 public maxDuration;\n    uint256 public minDuration;\n\n    // any rewards distributed when no Matadors are staked\n    uint256 private unaccountedMatadorRewards;\n    // amount of $TOPIA due for each Matador staked\n    uint256 private TOPIAPerMatador;\n\n    uint256 public runnerRewardMult;\n    uint256 public bullRewardMult;\n    uint256 public alphaRewardMult;\n    uint256 public matadorCut; // numerator with 10000 divisor. ie 5% = 500 \n\n    uint256 public totalTOPIAEarned;\n    // the last time $TOPIA can be earned\n    uint80 public claimEndTime;\n    uint256 public constant PERIOD = 1440 minutes;\n\n    uint256 public SEED_COST = 0.0008 ether;\n\n    // an individual NFT being bet\n    struct NFTBet {\n        address player;\n        uint256 amount; \n        uint8 choice; // (0) BULLS or (1) RUNNERS;\n        uint16 tokenID;\n        uint8 typeOfNFT;\n    }\n\n    // struct to store a stake's token, owner, and earning values\n    struct Stake {\n        uint16 tokenID;\n        address owner; // the wallet that staked it\n        uint80 stakeTimestamp; // when this particular NFT is staked.\n        uint8 typeOfNFT; // (1 = runner, 2 = bull, 3 = matador, etc)\n        uint256 value; // for matador reward calcs - irrelevant unless typeOfNFT = 3.\n    }\n\n    // status for bull run betting Encierros\n    enum Status {\n        Closed,\n        Open,\n        Standby,\n        Claimable\n    }\n\n    // BULL RUN Encierro ( EL ENCIERRO ) ----------------------------------------------------\n\n    struct Encierro {\n        Status status;\n        uint256 encierroId; // increments monotonically \n        uint256 startTime; // unix timestamp\n        uint256 endTime; // unix timestamp\n        uint256 minBet;\n        uint256 maxBet;\n        uint16 numRunners; // number of runners entered\n        uint16 numBulls; // number of bulls entered\n        uint16 numMatadors; // number of matadors entered\n        uint16 numberOfBetsOnRunnersWinning; // # of people betting for runners\n        uint16 numberOfBetsOnBullsWinning; // # of people betting for bulls\n        uint256 topiaBetByRunners; // all TOPIA bet by runners\n        uint256 topiaBetByBulls; // all TOPIA bet by bulls\n        uint256 topiaBetByMatadors; // all TOPIA bet by matadors\n        uint256 topiaBetOnRunners; // all TOPIA bet that runners will win\n        uint256 topiaBetOnBulls; // all TOPIA bet that bulls will win\n        uint256 totalTopiaCollected; // total TOPIA collected from bets for the entire round\n        uint256 flipResult; // 0 for bulls, 1 for runners\n    }\n\n    event RunnerStolen (address indexed victim, address indexed theif);\n    event BullStolen (address indexed victim, address indexed theif);\n    event RunnerStaked (address indexed staker, uint16 stakedID);\n    event BullStaked (address indexed staker, uint16 stakedID);\n    event MatadorStaked (address indexed staker, uint16 stakedID);\n    event AlphaStaked (address indexed staker, uint16 stakedID);\n    event RunnerUnstaked (address indexed staker, uint16 unstakedID);\n    event BullUnstaked (address indexed staker, uint16 unstakedID);\n    event MatadorUnstaked (address indexed staker, uint16 unstakedID);\n    event AlphaUnstaked (address indexed staker, uint16 unstakedID);\n    event TopiaClaimed (address indexed claimer, uint256 amount);\n    event AlphaClaimed(uint16 indexed tokenId, bool indexed unstaked, uint256 earned);\n    event BetRewardClaimed (address indexed claimer, uint256 amount);\n    event BullsWin (uint80 timestamp, uint256 encierroID);\n    event RunnersWin (uint80 timestamp, uint256 encierroID);\n   \n    event EncierroOpened(\n        uint256 indexed encierroId,\n        uint256 startTime,\n        uint256 endTime,\n        uint256 minBet,\n        uint256 maxBet\n    );\n\n    event BetPlaced(\n        address indexed player, \n        uint256 indexed encierroId, \n        uint256 amount,\n        uint8 choice,\n        uint16[] tokenIDs\n    );\n\n    event EncierroClosed(\n        uint256 indexed encierroId, \n        uint256 endTime,\n        uint16 numRunners,\n        uint16 numBulls,\n        uint16 numMatadors,\n        uint16 numberOfBetsOnRunnersWinning,\n        uint16 numberOfBetsOnBullsWinning,\n        uint256 topiaBetByRunners, // all TOPIA bet by runners\n        uint256 topiaBetByBulls, // all TOPIA bet by bulls\n        uint256 topiaBetByMatadors, // all TOPIA bet by matadors\n        uint256 topiaBetOnRunners, // all TOPIA bet that runners will win\n        uint256 topiaBetOnBulls, // all TOPIA bet that bulls will win\n        uint256 totalTopiaCollected\n    );\n\n    event CoinFlipped(\n        uint256 flipResult,\n        uint256 indexed encierroId\n    );\n\n    // @param: _minStakeTime should be # of SECONDS (ex: if minStakeTime is 1 day, pass 86400)\n    // @param: _runner/bull/alphaMult = number of topia per period\n    // topia 0x218BF48694bb196F8dFCC0661b16ba03635459B0\n    // coinflip 0x03A9F201E77Ad456e3f48fE6dCd37f300107372F\n    // rando 0xF9439027c8A21E1375CCDFf31c46ca21f8603305\n    // bullpen 0x9c215c9Ab78b544345047b9aB604c9c9AC391100\n    // arena 0xF84BD9d391c9d4874032809BE3Fd121103de5F60\n    // genesis 0x810FeDb4a6927D02A6427f7441F6110d7A1096d5\n    // alpha 0x96Af517c414B3726c1B2Ecc744ebf9d292DCbF60\n    // hub 0x9FAd19Ecf23d440B87fF91Dd9424155e03D755cE\n    // 0\n    // 18000000000000000000\n    // 20000000000000000000\n    // 35000000000000000000\n    // 500\n    constructor(\n        address _topiaToken, \n        address _coinFlipContract,\n        address _randomizer,\n        address _bullpen,\n        address _arena,\n        address _genesis,\n        address _alpha,\n        address _hub,\n        uint80 _minStakeTime,\n        uint256 _runnerMult,\n        uint256 _bullMult,\n        uint256 _alphaMult,\n        uint256 _matadorCut) {\n\n        Risk[1] = 10; // runners\n        Risk[2] = 10; // bulls\n\n        minimumStakeTime = _minStakeTime;\n\n        Genesis = IERC721(_genesis);\n        Alpha = IERC721(_alpha);\n\n        HubInterface = IHub(_hub);\n\n        TopiaInterface = ITopia(_topiaToken);\n\n        RandomizerContract = payable(_randomizer);\n        RandomizerInterface = IRandomizer(_randomizer);\n\n        MetatopiaCoinFlipRNGInterface = IMetatopiaCoinFlipRNG(_coinFlipContract);\n\n        BullpenContract = _bullpen;\n        BullpenInterface = IBullpen(_bullpen);\n\n        ArenaContract = _arena;\n        ArenaInterface = IArena(_arena);\n\n        runnerRewardMult = _runnerMult;\n        bullRewardMult = _bullMult;\n        alphaRewardMult = _alphaMult;\n        matadorCut = _matadorCut;\n    }\n\n    receive() external payable {}\n\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    // INTERNAL HELPERS ----------------------------------------------------\n\n    function _flipCoin() internal returns (uint256) {\n        uint256 result = MetatopiaCoinFlipRNGInterface.oneOutOfTwo();\n        Encierros[currentEncierroId].status = Status.Standby;\n        if (result == 0) {\n            Encierros[currentEncierroId].flipResult = 0;\n            emit BullsWin(uint80(block.timestamp), currentEncierroId);\n        } else {\n            Encierros[currentEncierroId].flipResult = 1;\n            emit RunnersWin(uint80(block.timestamp), currentEncierroId);\n        }\n        emit CoinFlipped(result, currentEncierroId);\n        return result;\n    }\n\n    function _isContract(address _addr) internal view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(_addr)\n        }\n        return size > 0;\n    }\n\n    modifier notContract() {\n        require(!_isContract(msg.sender), \"Contract not allowed\");\n        require(msg.sender == tx.origin, \"no proxy\");\n        _;\n    }\n\n    // SETTERS ----------------------------------------------------\n\n    function setTopiaToken(address _topiaToken) external onlyOwner {\n        TopiaInterface = ITopia(_topiaToken);\n    }\n\n    function setRNGContract(address _coinFlipContract) external onlyOwner {\n        MetatopiaCoinFlipRNGInterface = IMetatopiaCoinFlipRNG(_coinFlipContract);\n    }\n\n    function setBullpenContract(address _bullpenContract) external onlyOwner {\n        BullpenContract = _bullpenContract;\n        BullpenInterface = IBullpen(_bullpenContract);\n    }\n\n    function setArenaContract(address _arenaContract) external onlyOwner {\n        ArenaContract = _arenaContract;\n        ArenaInterface = IArena(_arenaContract);\n    }\n\n    function setHUB(address _hub) external onlyOwner {\n        HubInterface = IHub(_hub);\n    }\n\n    // IN SECONDS\n    function setMinStakeTime(uint80 _minStakeTime) external onlyOwner {\n        minimumStakeTime = _minStakeTime;\n    }\n    \n    function setPaymentMultipliers(uint8 _runnerMult, uint8 _bullMult, uint8 _alphaMult, uint8 _matadorCut) external onlyOwner {\n        runnerRewardMult = _runnerMult;\n        bullRewardMult = _bullMult;\n        alphaRewardMult = _alphaMult;\n        matadorCut = _matadorCut;\n    }\n\n    function setRisks(uint8 _runnerRisk, uint8 _bullRisk) external onlyOwner {\n        Risk[0] = _runnerRisk;\n        Risk[1] = _bullRisk;\n    }\n\n    function setSeedCost(uint256 _cost) external onlyOwner {\n        SEED_COST = _cost;\n    }\n\n    function setClaimEndTime(uint80 _time) external onlyOwner {\n        claimEndTime = _time;\n    }\n\n    // mass update the nftType mapping\n    function setBatchNFTType(uint16[] calldata _idNumbers, uint8[] calldata _types) external onlyOwner {\n        require(_idNumbers.length == _types.length);\n        for (uint16 i = 0; i < _idNumbers.length; i++) {\n            require(_types[i] != 0 && _types[i] <= 3);\n            NFTType[_idNumbers[i]] = _types[i];\n        }\n    }\n\n    function setMinMaxDuration(uint256 _min, uint256 _max) external onlyOwner {\n        minDuration = _min;\n        maxDuration = _max;\n    }\n\n    // GETTERS ----------------------------------------------------\n\n    function viewEncierroById(uint256 _encierroId) external view returns (Encierro memory) {\n        return Encierros[_encierroId];\n    }\n\n    function getEnteredEncierrosLength(address _better) external view returns (uint256) {\n        return EnteredEncierros[_better].length;\n    }\n\n    // CLAIM FUNCTIONS ----------------------------------------------------    \n\n    function claimManyGenesis(uint16[] calldata tokenIds, bool unstake) external payable nonReentrant returns (uint16[] memory stolenNFTs) {\n        uint256 numWords = tokenIds.length;\n        uint256[] memory seed;\n\n        if(unstake) {\n            require(msg.value == SEED_COST * numWords, \"Invalid value for randomness\");\n            RandomizerContract.transfer(msg.value);\n            uint256 remainingWords = RandomizerInterface.getRemainingWords();\n            require(remainingWords >= numWords, \"Not enough random numbers. Please try again soon.\");\n            seed = RandomizerInterface.getRandomWords(numWords);\n            HubInterface.emitGenesisUnstaked(msg.sender, tokenIds);\n            stolenNFTs = new uint16[](numWords);\n        } else {\n            stolenNFTs = new uint16[](1);\n            stolenNFTs[0] = 0;\n        }\n        \n        uint256 owed = 0;\n        for (uint i = 0; i < tokenIds.length; i++) {\n            if (NFTType[tokenIds[i]] == 1) {\n                (uint256 _owed, uint16 _stolenId) = claimRunner(tokenIds[i], unstake, unstake ? seed[i] : 0);\n                owed += _owed;\n                if(unstake) { stolenNFTs[i] = _stolenId; }\n            } else if (NFTType[tokenIds[i]] == 2) {\n                (uint256 _owed, uint16 _stolenId) = claimBull(tokenIds[i], unstake, unstake ? seed[i] : 0);\n                owed += _owed;\n                if(unstake) { stolenNFTs[i] = _stolenId; }\n            } else if (NFTType[tokenIds[i]] == 3) {\n                owed += claimMatador(tokenIds[i], unstake);\n                if(unstake) { stolenNFTs[i] = 0;}\n            } else if (NFTType[tokenIds[i]] == 0) {\n                revert(\"Invalid Token Id\");\n            }\n        }\n        if (owed == 0) {\n            return stolenNFTs;\n        }\n        totalTOPIAEarned += owed;\n        emit TopiaClaimed(msg.sender, owed);\n        TopiaInterface.mint(msg.sender, owed);\n        HubInterface.emitTopiaClaimed(msg.sender, owed);\n    }\n\n    function claimManyAlphas(uint16[] calldata _tokenIds, bool unstake) external nonReentrant {\n        uint256 owed = 0;\n        for (uint i = 0; i < _tokenIds.length; i++) { \n            require(StakedAlphaInfo[_tokenIds[i]].owner == msg.sender, \"not owner\");\n            owed += (block.timestamp - StakedAlphaInfo[_tokenIds[i]].value) * alphaRewardMult / PERIOD;\n            if (unstake) {\n                delete StakedAlphaInfo[_tokenIds[i]];\n                stakedAlphas -= 1;\n                StakedAlphasOfWallet[msg.sender].remove(_tokenIds[i]);\n                Alpha.safeTransferFrom(address(this), msg.sender, _tokenIds[i]);\n                HubInterface.emitAlphaUnstaked(msg.sender, _tokenIds);\n                emit AlphaUnstaked(msg.sender, _tokenIds[i]);\n            } else {\n                StakedAlphaInfo[_tokenIds[i]].value = uint80(block.timestamp);\n            }\n            emit AlphaClaimed(_tokenIds[i], unstake, owed);\n        }\n        if (owed == 0) {\n            return;\n        }\n        TopiaInterface.mint(msg.sender, owed);\n        HubInterface.emitTopiaClaimed(msg.sender, owed);\n        emit TopiaClaimed(msg.sender, owed);\n    }\n\n    // this fxn allows caller to claim winnings from their BET (not daily TOPIA)\n    // @param: the calldata array is each of the tokenIDs they are attempting to claim FOR\n    function claimManyBetRewards() external \n    nonReentrant notContract() {\n\n        uint256 owed; // what caller collects for winning\n        for(uint i = 1; i < EnteredEncierros[msg.sender].length; i++) {\n            if(Encierros[i].status == Status.Claimable && !HasClaimed[msg.sender][i] && HasBet[msg.sender][i]) {\n                uint8 winningResult = uint8(Encierros[i].flipResult);\n                require(winningResult <= 1 , \"Invalid flip result\");\n                for (uint16 z = 0; z < BetNFTsPerEncierro[msg.sender][i].length; z++) { // fetch their bet NFT ids for this encierro\n                    require(BetNFTInfo[BetNFTsPerEncierro[msg.sender][i][z]][i].player == msg.sender , \n                    \"not owner\");\n                    \n                    // calculate winnings\n                    if (BetNFTInfo[BetNFTsPerEncierro[msg.sender][i][z]][i].choice == winningResult && \n                        BetNFTInfo[BetNFTsPerEncierro[msg.sender][i][z]][i].typeOfNFT == 1) {\n                            // get how much topia was bet on this NFT id in this session\n                            uint256 topiaBetOnThisNFT = BetNFTInfo[BetNFTsPerEncierro[msg.sender][i][z]][i].amount;\n                            owed += (topiaBetOnThisNFT * 5) / 4;\n\n                    } else if (BetNFTInfo[BetNFTsPerEncierro[msg.sender][i][z]][i].choice == winningResult && \n                               BetNFTInfo[BetNFTsPerEncierro[msg.sender][i][z]][i].typeOfNFT == 2) {\n                            // get how much topia was bet on this NFT id in this session\n                            uint256 topiaBetOnThisNFT = BetNFTInfo[BetNFTsPerEncierro[msg.sender][i][z]][i].amount;\n                            owed += (topiaBetOnThisNFT * 3) / 2;\n\n                    } else if (BetNFTInfo[BetNFTsPerEncierro[msg.sender][i][z]][i].choice == winningResult && \n                               BetNFTInfo[BetNFTsPerEncierro[msg.sender][i][z]][i].typeOfNFT == 3) {\n                            // get how much topia was bet on this NFT id in this session\n                            uint256 topiaBetOnThisNFT = BetNFTInfo[BetNFTsPerEncierro[msg.sender][i][z]][i].amount;\n                            owed += (topiaBetOnThisNFT * 2);\n                    } else {\n                        continue;\n                    }\n                }\n                HasClaimed[msg.sender][i] = true;\n            } else {\n                continue;\n            }\n        }\n\n        TopiaInterface.mint(msg.sender, owed);\n        HubInterface.emitTopiaClaimed(msg.sender, owed);\n        emit BetRewardClaimed(msg.sender, owed);\n    }\n\n    // STAKING FUNCTIONS ----------------------------------------------------\n\n    function stakeMany(uint16[] calldata _tokenIds) external nonReentrant {\n        require(msg.sender == tx.origin, \"account to send mismatch\");\n        for (uint i = 0; i < _tokenIds.length; i++) {\n            require(Genesis.ownerOf(_tokenIds[i]) == msg.sender, \"not owner\");\n\n            if (NFTType[_tokenIds[i]] == 1) {\n                stakeRunner(_tokenIds[i]);\n            } else if (NFTType[_tokenIds[i]] == 2) {\n                stakeBull(_tokenIds[i]);\n            } else if (NFTType[_tokenIds[i]] == 3) {\n                stakeMatador(_tokenIds[i]);\n            } else if (NFTType[_tokenIds[i]] == 0) {\n                revert(\"invalid NFT\");\n            }\n\n        }\n        HubInterface.emitGenesisStaked(msg.sender, _tokenIds, 4);\n    }\n\n    function stakeRunner(uint16 tokenID) internal {\n\n        IsNFTStaked[tokenID] = true;\n        StakedTokensOfWallet[msg.sender].add(tokenID);\n        StakedNFTInfo[tokenID].tokenID = tokenID;\n        StakedNFTInfo[tokenID].owner = msg.sender;\n        StakedNFTInfo[tokenID].stakeTimestamp = uint80(block.timestamp);\n        StakedNFTInfo[tokenID].value = uint80(block.timestamp);\n        StakedNFTInfo[tokenID].typeOfNFT = 1;\n        Genesis.safeTransferFrom(msg.sender, address(this), tokenID);\n\n        stakedRunners++;\n        NumberOfStakedNFTs[msg.sender]++;\n        emit RunnerStaked(msg.sender, tokenID);     \n    }\n\n    function stakeBull(uint16 tokenID) internal {\n        \n        IsNFTStaked[tokenID] = true;\n        StakedTokensOfWallet[msg.sender].add(tokenID);\n        StakedNFTInfo[tokenID].tokenID = tokenID;\n        StakedNFTInfo[tokenID].owner = msg.sender;\n        StakedNFTInfo[tokenID].stakeTimestamp = uint80(block.timestamp);\n        StakedNFTInfo[tokenID].value = uint80(block.timestamp);\n        StakedNFTInfo[tokenID].typeOfNFT = 2;\n        Genesis.safeTransferFrom(msg.sender, BullpenContract, tokenID); // bulls go to the pen\n        BullpenInterface.receiveBull(msg.sender, tokenID); // tell the bullpen they're getting a new bull\n\n        stakedBulls++;\n        NumberOfStakedNFTs[msg.sender]++;\n        emit BullStaked(msg.sender, tokenID);    \n    }\n\n    function stakeMatador(uint16 tokenID) internal {\n\n        IsNFTStaked[tokenID] = true;\n        StakedTokensOfWallet[msg.sender].add(tokenID);\n        MatadorsStakedPerWallet[msg.sender].add(tokenID);\n        StakedNFTInfo[tokenID].tokenID = tokenID;\n        StakedNFTInfo[tokenID].owner = msg.sender;\n        StakedNFTInfo[tokenID].stakeTimestamp = uint80(block.timestamp);\n        StakedNFTInfo[tokenID].typeOfNFT = 3;\n        StakedNFTInfo[tokenID].value = TOPIAPerMatador; // for matadors only\n        Genesis.safeTransferFrom(msg.sender, ArenaContract, tokenID); // matadors go to the arena\n        ArenaInterface.receiveMatador(msg.sender, tokenID); // tell the arena they are receiving a new matador\n\n        stakedMatadors++;\n        NumberOfStakedNFTs[msg.sender]++;\n        emit MatadorStaked(msg.sender, tokenID);   \n    }\n\n    function claimRunner(uint16 tokenId, bool unstake, uint256 seed) internal returns (uint256 owed, uint16 stolenId) {\n        require(StakedNFTInfo[tokenId].owner == msg.sender, \"not owner\");\n        require(block.timestamp - StakedNFTInfo[tokenId].stakeTimestamp > minimumStakeTime, \"wait minimum stake time\");\n        stolenId = 0;\n        \n        if(block.timestamp <= claimEndTime) {\n            owed = (block.timestamp - StakedNFTInfo[tokenId].value) * runnerRewardMult / PERIOD;\n        } else if (StakedNFTInfo[tokenId].value < claimEndTime) {\n            owed = (claimEndTime - StakedNFTInfo[tokenId].value) * runnerRewardMult / PERIOD;\n        } else {\n            owed = 0;\n        }\n\n        if(unstake) {\n            IsNFTStaked[tokenId] = false;\n            delete StakedNFTInfo[tokenId]; // reset the struct for this token ID\n            StakedTokensOfWallet[msg.sender].remove(tokenId);\n\n            if (BullpenInterface.bullCount() > 0 && (seed % 100) < Risk[1]) { \n                // nft gets stolen\n                address thief = BullpenInterface.selectRandomBullOwnerToReceiveStolenRunner(seed);\n                Genesis.safeTransferFrom(address(this), thief, tokenId);\n                stolenId = tokenId;\n                emit RunnerStolen(msg.sender, thief);\n            } else {\n                Genesis.safeTransferFrom(address(this), msg.sender, tokenId);\n                emit RunnerUnstaked(msg.sender, tokenId);\n            }\n            \n            stakedRunners--;\n            NumberOfStakedNFTs[msg.sender]--;\n        } else {\n            StakedNFTInfo[tokenId].value = uint80(block.timestamp); // reset the stakeTime for this NFT\n        }\n    }\n\n    function claimBull(uint16 tokenId, bool unstake, uint256 seed) internal returns (uint256 owed, uint16 stolenId) {\n        require(StakedNFTInfo[tokenId].owner == msg.sender, \"not owner\");\n        require(block.timestamp - StakedNFTInfo[tokenId].stakeTimestamp > minimumStakeTime, \"wait minimum stake time\");\n        stolenId = 0;\n        \n        if(block.timestamp <= claimEndTime) {\n            owed = (block.timestamp - StakedNFTInfo[tokenId].value) * bullRewardMult / PERIOD;\n        } else if (StakedNFTInfo[tokenId].value < claimEndTime) {\n            owed = (claimEndTime - StakedNFTInfo[tokenId].value) * bullRewardMult / PERIOD;\n        } else {\n            owed = 0;\n        }\n\n        if(unstake) {\n            IsNFTStaked[tokenId] = false;\n            delete StakedNFTInfo[tokenId]; // reset the struct for this token ID\n            StakedTokensOfWallet[msg.sender].remove(tokenId);\n\n            if (ArenaInterface.matadorCount() > 0 && (seed % 100) < Risk[2]) { \n                // nft gets stolen\n                address thief = ArenaInterface.selectRandomMatadorOwnerToReceiveStolenBull(seed);\n                BullpenInterface.stealBull(thief, tokenId);\n                stolenId = tokenId;\n                emit BullStolen(msg.sender, thief);\n            } else {\n                BullpenInterface.returnBullToOwner(msg.sender, tokenId);\n                emit BullUnstaked(msg.sender, tokenId);\n            }\n\n            stakedBulls--;\n            NumberOfStakedNFTs[msg.sender]--;\n        } else {\n            StakedNFTInfo[tokenId].value = uint80(block.timestamp); // reset the stakeTime for this NFT \n        }\n    }\n\n    function claimMatador(uint16 tokenID, bool unstake) internal returns (uint256 owed) {\n        require(StakedNFTInfo[tokenID].owner == msg.sender, \"not owner\");\n        require(block.timestamp - StakedNFTInfo[tokenID].stakeTimestamp > minimumStakeTime, \"wait minimum stake time\");\n\n        owed += (TOPIAPerMatador - StakedNFTInfo[tokenID].value);\n\n        if(unstake) {\n            IsNFTStaked[tokenID] = false;\n            delete StakedNFTInfo[tokenID]; // reset the struct for this token ID\n            StakedTokensOfWallet[msg.sender].remove(tokenID);\n            MatadorsStakedPerWallet[msg.sender].remove(tokenID);\n            ArenaInterface.returnMatadorToOwner(msg.sender, tokenID);\n\n            stakedMatadors--;\n            NumberOfStakedNFTs[msg.sender]--;\n            emit MatadorUnstaked(msg.sender, tokenID);\n        } else {\n            StakedNFTInfo[tokenID].value = TOPIAPerMatador;\n        }\n    }\n\n    function stakeManyAlphas(uint16[] calldata _tokenIds) external nonReentrant {\n        require(tx.origin == msg.sender, \"Only EOA\");\n        for (uint i = 0; i < _tokenIds.length; i++) {\n            require(Alpha.ownerOf(_tokenIds[i]) == msg.sender, \"not owner\");\n            \n            IsAlphaStaked[_tokenIds[i]] = true;\n            StakedAlphasOfWallet[msg.sender].add(_tokenIds[i]);\n            StakedAlphaInfo[_tokenIds[i]].tokenID = _tokenIds[i];\n            StakedAlphaInfo[_tokenIds[i]].owner = msg.sender;\n            StakedAlphaInfo[_tokenIds[i]].stakeTimestamp = uint80(block.timestamp);\n            StakedAlphaInfo[_tokenIds[i]].value = uint80(block.timestamp);\n            StakedAlphaInfo[_tokenIds[i]].typeOfNFT = 0;\n            Alpha.safeTransferFrom(msg.sender, address(this), _tokenIds[i]);\n\n            stakedAlphas++;\n            NumberOfStakedAlphas[msg.sender]++;\n            emit AlphaStaked(msg.sender, _tokenIds[i]);\n            }\n        \n        HubInterface.emitAlphaStaked(msg.sender, _tokenIds, 4);\n    }\n\n    function getUnclaimedAlpha(uint16 tokenId) external view returns (uint256) {\n        return (block.timestamp - StakedAlphaInfo[tokenId].value) * alphaRewardMult / PERIOD;\n    }\n\n    function getUnclaimedGenesis(uint16 tokenId) external view returns (uint256 owed) {\n        if (!IsNFTStaked[tokenId]) { return 0; }\n        if (NFTType[tokenId] == 1) {\n            if(block.timestamp <= claimEndTime) {\n                owed = (block.timestamp - StakedNFTInfo[tokenId].value) * runnerRewardMult / PERIOD;\n            } else if (StakedNFTInfo[tokenId].value < claimEndTime) {\n                owed = (claimEndTime - StakedNFTInfo[tokenId].value) * runnerRewardMult / PERIOD;\n            } else {\n                owed = 0;\n            }\n        } else if (NFTType[tokenId] == 2) {\n            if(block.timestamp <= claimEndTime) {\n                owed = (block.timestamp - StakedNFTInfo[tokenId].value) * bullRewardMult / PERIOD;\n            } else if (StakedNFTInfo[tokenId].value < claimEndTime) {\n                owed = (claimEndTime - StakedNFTInfo[tokenId].value) * bullRewardMult / PERIOD;\n            } else {\n                owed = 0;\n            }\n        } else if (NFTType[tokenId] == 3) {\n            owed = (TOPIAPerMatador - StakedNFTInfo[tokenId].value);\n        }\n        return owed;\n    }\n\n    function getUnclaimedTopiaForUser(address _account) external view returns (uint256) {\n        uint256 owed;\n        uint256 genesisLength = StakedTokensOfWallet[_account].length();\n        uint256 alphaLength = StakedAlphasOfWallet[_account].length();\n        \n        for (uint i = 0; i < genesisLength; i++) {\n            uint16 tokenId = uint16(StakedTokensOfWallet[_account].at(i));\n            if (NFTType[tokenId] == 1) {\n                if(block.timestamp <= claimEndTime) {\n                    owed += (block.timestamp - StakedNFTInfo[tokenId].value) * runnerRewardMult / PERIOD;\n                } else if (StakedNFTInfo[tokenId].value < claimEndTime) {\n                    owed += (claimEndTime - StakedNFTInfo[tokenId].value) * runnerRewardMult / PERIOD;\n                } else {\n                    owed += 0;\n                }\n            } else if (NFTType[tokenId] == 2) {\n                if(block.timestamp <= claimEndTime) {\n                    owed += (block.timestamp - StakedNFTInfo[tokenId].value) * bullRewardMult / PERIOD;\n                } else if (StakedNFTInfo[tokenId].value < claimEndTime) {\n                    owed += (claimEndTime - StakedNFTInfo[tokenId].value) * bullRewardMult / PERIOD;\n                } else {\n                    owed += 0;\n                }\n            } else if (NFTType[tokenId] == 3) {\n                owed += (TOPIAPerMatador - StakedNFTInfo[tokenId].value);\n            } else if (NFTType[tokenId] == 0) {\n                continue;\n            }\n        }\n        for (uint i = 0; i < alphaLength; i++) {\n            uint16 tokenId = uint16(StakedAlphasOfWallet[_account].at(i));\n            owed += (block.timestamp - StakedAlphaInfo[tokenId].value) * alphaRewardMult / PERIOD;\n        }\n\n        return owed;\n    }\n\n    function getStakedGenesisForUser(address _account) external view returns (uint16[] memory stakedGensis) {\n        uint256 length = StakedTokensOfWallet[_account].length();\n        stakedGensis = new uint16[](length);\n        for (uint i = 0; i < length; i++) {\n            stakedGensis[i] = uint16(StakedTokensOfWallet[_account].at(i));\n        }\n    }\n\n    function getStakedAlphasForUser(address _account) external view returns (uint16[] memory _stakedAlphas) {\n        uint256 length = StakedAlphasOfWallet[_account].length();\n        _stakedAlphas = new uint16[](length);\n        for (uint i = 0; i < length; i++) {\n            _stakedAlphas[i] = uint16(StakedAlphasOfWallet[_account].at(i));\n        }\n    }\n\n    // BET FUNCTIONS ----------------------------------------------------\n\n    // @param: choice is FOR ALL NFTS being passed. Each NFT ID gets assigned the same choice (0 = bulls, 1 = runners)\n    // @param: betAmount is PER NFT. If 10 NFTs are bet, and amount passed in is 10 TOPIA, total is 100 TOPIA BET\n    function betMany(uint16[] calldata _tokenIds, uint256 _encierroId, uint256 _betAmount, uint8 _choice) external \n    nonReentrant {\n        require(Encierros[_encierroId].endTime > block.timestamp , \"Betting over\");\n        require(_encierroId <= currentEncierroId, \"Non-existent id!\");\n        require(TopiaInterface.balanceOf(address(msg.sender)) >= (_betAmount * _tokenIds.length), \"not enough TOPIA\");\n        require(_choice == 1 || _choice == 0, \"Invalid choice\");\n        require(Encierros[_encierroId].status == Status.Open, \"not open\");\n        require(_betAmount >= Encierros[_encierroId].minBet && _betAmount <= Encierros[_encierroId].maxBet, \"Bet not within limits\");\n\n        uint16 numberOfNFTs = uint16(_tokenIds.length);\n        uint256 totalBet = _betAmount * numberOfNFTs;\n        for (uint i = 0; i < numberOfNFTs; i++) {\n            require(StakedNFTInfo[_tokenIds[i]].owner == msg.sender, \"not owner\");\n\n            if (NFTType[_tokenIds[i]] == 1) {\n                betRunner(_tokenIds[i], _encierroId, _betAmount, _choice);\n            } else if (NFTType[_tokenIds[i]] == 2) {\n                betBull(_tokenIds[i], _encierroId, _betAmount, _choice);\n            } else if (NFTType[_tokenIds[i]] == 3) {\n                betMatador(_tokenIds[i], _encierroId, _betAmount, _choice);\n            } else if (NFTType[_tokenIds[i]] == 0) {\n                continue;\n            }\n\n        Encierros[_encierroId].totalTopiaCollected += totalBet;\n        \n        if (_choice == 0) {\n            Encierros[_encierroId].numberOfBetsOnBullsWinning += numberOfNFTs; // increase the number of bets on bulls winning by # of NFTs being bet\n            Encierros[_encierroId].topiaBetOnBulls += totalBet; // multiply the bet amount per NFT by the number of NFTs\n        } else {\n            Encierros[_encierroId].numberOfBetsOnRunnersWinning += numberOfNFTs; // increase number of bets on runners...\n            Encierros[_encierroId].topiaBetOnRunners += totalBet;\n        }\n\n        if (!HasBet[msg.sender][_encierroId]) {\n            HasBet[msg.sender][_encierroId] = true;\n            EnteredEncierros[msg.sender].push(_encierroId);\n        }\n        TopiaInterface.burnFrom(msg.sender, totalBet);\n        emit BetPlaced(msg.sender, _encierroId, totalBet, _choice, _tokenIds);\n        }\n    }\n\n    function betRunner(uint16 _runnerID, uint256 _encierroId, uint256 _betAmount, uint8 _choice) internal {\n\n        require(IsNFTStaked[_runnerID] , \"not staked\");\n        require(StakedNFTInfo[_runnerID].owner == msg.sender , \"not owner\");\n        BetNFTsPerEncierro[msg.sender][_encierroId].push(_runnerID); // add the token IDs being bet to their personal mapping for this session\n        BetNFTInfo[_runnerID][_encierroId].player = msg.sender; // map bet token id to caller for this session\n        BetNFTInfo[_runnerID][_encierroId].amount = _betAmount; // map bet token id to bet amount for this session\n        BetNFTInfo[_runnerID][_encierroId].choice = _choice; // map bet token id to choice for this session\n        BetNFTInfo[_runnerID][_encierroId].tokenID = _runnerID; // map bet token id to struct id for this session\n        BetNFTInfo[_runnerID][_encierroId].typeOfNFT = 1; // 1 = runner\n\n        Encierros[_encierroId].topiaBetByRunners += _betAmount;\n        Encierros[_encierroId].numRunners++;\n    }\n\n    function betBull(uint16 _bullID, uint256 _encierroId, uint256 _betAmount, uint8 _choice) internal {\n\n        require(IsNFTStaked[_bullID] , \"not staked\");\n        require(StakedNFTInfo[_bullID].owner == msg.sender , \"not owner\");\n        BetNFTsPerEncierro[msg.sender][_encierroId].push(_bullID); // add the token IDs being bet to their personal mapping for this session\n        BetNFTInfo[_bullID][_encierroId].player = msg.sender; // map bet token id to caller for this session\n        BetNFTInfo[_bullID][_encierroId].amount = _betAmount; // map bet token id to bet amount for this session\n        BetNFTInfo[_bullID][_encierroId].choice = _choice; // map bet token id to choice for this session\n        BetNFTInfo[_bullID][_encierroId].tokenID = _bullID; // map bet token id to struct id for this session\n        BetNFTInfo[_bullID][_encierroId].typeOfNFT = 2; // 2 = bull\n\n        Encierros[_encierroId].topiaBetByBulls += _betAmount;\n        Encierros[_encierroId].numBulls++;\n    }\n\n    function betMatador(uint16 _matadorID, uint256 _encierroId, uint256 _betAmount, uint8 _choice) internal {\n\n        require(IsNFTStaked[_matadorID] , \"not staked\");\n        require(StakedNFTInfo[_matadorID].owner == msg.sender , \"not owner\");\n        BetNFTsPerEncierro[msg.sender][_encierroId].push(_matadorID); // add the token IDs being bet to their personal mapping for this session\n        BetNFTInfo[_matadorID][_encierroId].player = msg.sender; // map bet token id to caller for this session\n        BetNFTInfo[_matadorID][_encierroId].amount = _betAmount; // map bet token id to bet amount for this session\n        BetNFTInfo[_matadorID][_encierroId].choice = _choice; // map bet token id to choice for this session\n        BetNFTInfo[_matadorID][_encierroId].tokenID = _matadorID; // map bet token id to struct id for this session\n        BetNFTInfo[_matadorID][_encierroId].typeOfNFT = 3; // 3 = matador\n\n        Encierros[_encierroId].topiaBetByMatadors += _betAmount;\n        Encierros[_encierroId].numMatadors++;\n    }\n\n    // Encierro SESSION LOGIC ---------------------------------------------------- \n\n    function startEncierro(\n        uint256 _endTime,\n        uint256 _minBet,\n        uint256 _maxBet) \n        external\n        payable\n        nonReentrant\n        {\n        require(\n            (currentEncierroId == 0) || \n            (Encierros[currentEncierroId].status == Status.Claimable), \"session not claimable\");\n\n        require(((_endTime - block.timestamp) >= minDuration) && ((_endTime - block.timestamp) <= maxDuration), \"invalid time\");\n        require(msg.value == SEED_COST, \"seed cost\");\n\n        currentEncierroId++;\n\n        Encierros[currentEncierroId] = Encierro({\n            status: Status.Open,\n            encierroId: currentEncierroId,\n            startTime: block.timestamp,\n            endTime: _endTime,\n            minBet: _minBet,\n            maxBet: _maxBet,\n            numRunners: 0,\n            numBulls: 0,\n            numMatadors: 0,\n            numberOfBetsOnRunnersWinning: 0,\n            numberOfBetsOnBullsWinning: 0,\n            topiaBetByRunners: 0,\n            topiaBetByBulls: 0,\n            topiaBetByMatadors: 0,\n            topiaBetOnRunners: 0,\n            topiaBetOnBulls: 0,\n            totalTopiaCollected: 0,\n            flipResult: 2 // init to 2 to avoid conflict with 0 (bulls) or 1 (runners). is set to 0 or 1 later depending on coin flip result.\n        });\n\n        RandomizerContract.transfer(msg.value);\n        \n        emit EncierroOpened(\n            currentEncierroId,\n            block.timestamp,\n            _endTime,\n            _minBet,\n            _maxBet\n        );\n    }\n\n    // bulls = 0, runners = 1\n    function closeEncierro(uint256 _encierroId) external nonReentrant {\n        require(Encierros[_encierroId].status == Status.Open , \"must be open first\");\n        require(block.timestamp > Encierros[_encierroId].endTime, \"not over yet\");\n        MetatopiaCoinFlipRNGInterface.requestRandomWords();\n        Encierros[_encierroId].status = Status.Closed;\n        emit EncierroClosed(\n            _encierroId,\n            block.timestamp,\n            Encierros[_encierroId].numRunners,\n            Encierros[_encierroId].numBulls,\n            Encierros[_encierroId].numMatadors,\n            Encierros[_encierroId].numberOfBetsOnRunnersWinning,\n            Encierros[_encierroId].numberOfBetsOnBullsWinning,\n            Encierros[_encierroId].topiaBetByRunners,\n            Encierros[_encierroId].topiaBetByBulls,\n            Encierros[_encierroId].topiaBetByMatadors,\n            Encierros[_encierroId].topiaBetOnRunners,\n            Encierros[_encierroId].topiaBetOnBulls,\n            Encierros[_encierroId].totalTopiaCollected\n        );\n    }\n\n    /**\n     * add $TOPIA to claimable pot for the Matador Yield\n     * @param amount $TOPIA to add to the pot\n   */\n    function _payMatadorTax(uint256 amount) internal {\n        if (stakedMatadors == 0) {// if there's no staked matadors\n            unaccountedMatadorRewards += amount;\n            return;\n        }\n        TOPIAPerMatador += (amount + unaccountedMatadorRewards) / stakedMatadors;\n        unaccountedMatadorRewards = 0;\n    }\n\n    function flipCoinAndMakeClaimable(uint256 _encierroId) external nonReentrant notContract() returns (uint256) {\n        require(_encierroId <= currentEncierroId , \"Nonexistent session!\");\n        require(Encierros[_encierroId].status == Status.Closed , \"must be closed\");\n        uint256 encierroFlipResult = _flipCoin();\n        Encierros[_encierroId].flipResult = encierroFlipResult;\n\n        if (encierroFlipResult == 0) { // if bulls win\n            uint256 amountToMatadors = (Encierros[_encierroId].topiaBetOnRunners * matadorCut) / 10000;\n            _payMatadorTax(amountToMatadors);\n        } else { // if runners win\n            uint256 amountToMatadors = (Encierros[_encierroId].topiaBetOnBulls * matadorCut) / 10000;\n            _payMatadorTax(amountToMatadors);\n        }\n\n        Encierros[_encierroId].status = Status.Claimable;\n        return encierroFlipResult;\n    }\n}"}, "contracts/interfaces/IHub.sol": {"content": "// SPDX-License-Identifier: MIT LICENSE\n\npragma solidity ^0.8.30;\n\ninterface IHub {\n    function emitGenesisStaked(address owner, uint16[] calldata tokenIds, uint8 gameId) external;\n    function emitAlphaStaked(address owner, uint16[] calldata tokenIds, uint8 gameId) external;\n    function emitGenesisUnstaked(address owner, uint16[] calldata tokenIds) external;\n    function emitAlphaUnstaked(address owner, uint16[] calldata tokenIds) external;\n    function emitTopiaClaimed(address owner, uint256 amount) external;\n    function balanceOf(address owner) external view returns (uint256);\n}"}, "contracts/interfaces/IRandomizer.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\ninterface IRandomizer {\n\n    function requestRandomWords() external;\n    function getRandomWords(uint256 number) external returns (uint256[] memory);\n    function getRemainingWords() external view returns (uint256);\n    \n}"}, "contracts/interfaces/IArena.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\ninterface IArena {\n    \n    function matadorCount() external view returns (uint16);\n    function receiveMatador(address _originalOwner, uint16 _id) external;\n    function returnMatadorToOwner(address _returnee, uint16 _id) external;\n    function getMatadorOwner(uint16 _id) external view returns (address);\n    function selectRandomMatadorOwnerToReceiveStolenBull(uint256 seed) external view returns (address);\n    \n}"}, "contracts/interfaces/IBullpen.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\ninterface IBullpen {\n    \n    function bullCount() external view returns (uint16);\n    function receiveBull(address _originalOwner, uint16 _id) external;\n    function returnBullToOwner(address _returnee, uint16 _id) external;\n    function getBullOwner(uint16 _id) external view returns (address);\n    function selectRandomBullOwnerToReceiveStolenRunner(uint256 seed) external returns (address);\n    function stealBull(address _thief, uint16 _id) external;\n\n}"}, "contracts/interfaces/ITopia.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\ninterface ITopia {\n\n    function burn(uint256 _amount) external;\n    function mint(address _to, uint256 _amount) external;  \n    function burnFrom(address _from, uint256 _amount) external;\n    function decimals() external pure returns (uint8);\n    function balanceOf(address owner) external view returns (uint);\n}"}, "contracts/interfaces/IMetatopiaCoinFlipRNG.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\ninterface IMetatopiaCoinFlipRNG {\n    \n    function oneOutOfTwo() external view returns (uint256);\n    function requestRandomWords() external;\n    \n}"}, "@openzeppelin/contracts/security/ReentrancyGuard.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"}, "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"}, "@openzeppelin/contracts/access/Ownable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"}, "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"}, "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"}, "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"}, "@openzeppelin/contracts/token/ERC721/ERC721.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.30;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"}, "@openzeppelin/contracts/utils/Context.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"}, "@openzeppelin/contracts/token/ERC721/IERC721.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"}, "@openzeppelin/contracts/utils/introspection/ERC165.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.30;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"}, "@openzeppelin/contracts/utils/Strings.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"}, "@openzeppelin/contracts/utils/Address.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"}, "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"}, "@openzeppelin/contracts/utils/introspection/IERC165.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"}}, "settings": {"optimizer": {"enabled": true}, "viaIR": false, "evmVersion": "byzantium", "outputSelection": {"*": {"*": ["evm.legacyAssembly"]}}}}
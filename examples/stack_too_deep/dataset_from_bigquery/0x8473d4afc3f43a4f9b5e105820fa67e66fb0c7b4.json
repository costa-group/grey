{"language": "Solidity", "sources": {"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"}, "@openzeppelin/contracts/access/Ownable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"}, "@openzeppelin/contracts/access/Ownable2Step.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.30;\n\nimport \"./Ownable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\n        _transferOwnership(sender);\n    }\n}\n"}, "@openzeppelin/contracts/security/ReentrancyGuard.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"}, "@openzeppelin/contracts/token/ERC20/ERC20.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.30;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"}, "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"}, "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"}, "@openzeppelin/contracts/token/ERC20/IERC20.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"}, "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.30;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"}, "@openzeppelin/contracts/utils/Address.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"}, "@openzeppelin/contracts/utils/Context.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"}, "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proofLen - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            require(proofPos == proofLen, \"MerkleProof: invalid multiproof\");\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proofLen - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            require(proofPos == proofLen, \"MerkleProof: invalid multiproof\");\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"}, "@openzeppelin/contracts/utils/math/Math.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"}, "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"}, "@solarity/solidity-lib/libs/arrays/ArrayHelper.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\n\n/**\n * @notice A simple library to work with arrays\n */\nlibrary ArrayHelper {\n    /**\n     * @notice The function that searches for the index of the first occurring element, which is\n     * greater than or equal to the `element_`. The time complexity is O(log n)\n     * @param array the array to search in\n     * @param element_ the element\n     * @return index_ the index of the found element or the length of the `array` if no such element\n     */\n    function lowerBound(\n        uint256[] storage array,\n        uint256 element_\n    ) internal view returns (uint256 index_) {\n        (uint256 low_, uint256 high_) = (0, array.length);\n\n        while (low_ < high_) {\n            uint256 mid_ = Math.average(low_, high_);\n\n            if (array[mid_] >= element_) {\n                high_ = mid_;\n            } else {\n                low_ = mid_ + 1;\n            }\n        }\n\n        return high_;\n    }\n\n    /**\n     * @notice The function that searches for the index of the first occurring element, which is\n     * greater than the `element_`. The time complexity is O(log n)\n     * @param array the array to search in\n     * @param element_ the element\n     * @return index_ the index of the found element or the length of the `array` if no such element\n     */\n    function upperBound(\n        uint256[] storage array,\n        uint256 element_\n    ) internal view returns (uint256 index_) {\n        (uint256 low_, uint256 high_) = (0, array.length);\n\n        while (low_ < high_) {\n            uint256 mid_ = Math.average(low_, high_);\n\n            if (array[mid_] > element_) {\n                high_ = mid_;\n            } else {\n                low_ = mid_ + 1;\n            }\n        }\n\n        return high_;\n    }\n\n    /**\n     * @notice The function that calculates the sum of all array elements from `beginIndex_` to\n     * `endIndex_` inclusive using its prefix sum array\n     * @param beginIndex_ the index of the first range element\n     * @param endIndex_ the index of the last range element\n     * @return the sum of all elements of the range\n     */\n    function getRangeSum(\n        uint256[] storage prefixes,\n        uint256 beginIndex_,\n        uint256 endIndex_\n    ) internal view returns (uint256) {\n        require(beginIndex_ <= endIndex_, \"ArrayHelper: wrong range\");\n\n        if (beginIndex_ == 0) {\n            return prefixes[endIndex_];\n        }\n\n        return prefixes[endIndex_] - prefixes[beginIndex_ - 1];\n    }\n\n    /**\n     * @notice The function to compute the prefix sum array\n     * @param arr_ the initial array to be turned into the prefix sum array\n     * @return prefixes_ the prefix sum array\n     */\n    function countPrefixes(\n        uint256[] memory arr_\n    ) internal pure returns (uint256[] memory prefixes_) {\n        if (arr_.length == 0) {\n            return prefixes_;\n        }\n\n        prefixes_ = new uint256[](arr_.length);\n        prefixes_[0] = arr_[0];\n\n        for (uint256 i = 1; i < prefixes_.length; i++) {\n            prefixes_[i] = prefixes_[i - 1] + arr_[i];\n        }\n    }\n\n    /**\n     * @notice The function to reverse an array\n     * @param arr_ the array to reverse\n     * @return reversed_ the reversed array\n     */\n    function reverse(uint256[] memory arr_) internal pure returns (uint256[] memory reversed_) {\n        reversed_ = new uint256[](arr_.length);\n        uint256 i = arr_.length;\n\n        while (i > 0) {\n            i--;\n            reversed_[arr_.length - 1 - i] = arr_[i];\n        }\n    }\n\n    function reverse(address[] memory arr_) internal pure returns (address[] memory reversed_) {\n        reversed_ = new address[](arr_.length);\n        uint256 i = arr_.length;\n\n        while (i > 0) {\n            i--;\n            reversed_[arr_.length - 1 - i] = arr_[i];\n        }\n    }\n\n    function reverse(string[] memory arr_) internal pure returns (string[] memory reversed_) {\n        reversed_ = new string[](arr_.length);\n        uint256 i = arr_.length;\n\n        while (i > 0) {\n            i--;\n            reversed_[arr_.length - 1 - i] = arr_[i];\n        }\n    }\n\n    function reverse(bytes32[] memory arr_) internal pure returns (bytes32[] memory reversed_) {\n        reversed_ = new bytes32[](arr_.length);\n        uint256 i = arr_.length;\n\n        while (i > 0) {\n            i--;\n            reversed_[arr_.length - 1 - i] = arr_[i];\n        }\n    }\n\n    /**\n     * @notice The function to insert an array into the other array\n     * @param to_ the array to insert into\n     * @param index_ the insertion starting index\n     * @param what_ the array to be inserted\n     * @return the index to start the next insertion from\n     */\n    function insert(\n        uint256[] memory to_,\n        uint256 index_,\n        uint256[] memory what_\n    ) internal pure returns (uint256) {\n        for (uint256 i = 0; i < what_.length; i++) {\n            to_[index_ + i] = what_[i];\n        }\n\n        return index_ + what_.length;\n    }\n\n    function insert(\n        address[] memory to_,\n        uint256 index_,\n        address[] memory what_\n    ) internal pure returns (uint256) {\n        for (uint256 i = 0; i < what_.length; i++) {\n            to_[index_ + i] = what_[i];\n        }\n\n        return index_ + what_.length;\n    }\n\n    function insert(\n        string[] memory to_,\n        uint256 index_,\n        string[] memory what_\n    ) internal pure returns (uint256) {\n        for (uint256 i = 0; i < what_.length; i++) {\n            to_[index_ + i] = what_[i];\n        }\n\n        return index_ + what_.length;\n    }\n\n    function insert(\n        bytes32[] memory to_,\n        uint256 index_,\n        bytes32[] memory what_\n    ) internal pure returns (uint256) {\n        for (uint256 i = 0; i < what_.length; i++) {\n            to_[index_ + i] = what_[i];\n        }\n\n        return index_ + what_.length;\n    }\n\n    /**\n     * @notice The function that free memory that was allocated for array\n     * @param array_ the array to crop\n     * @param newLength_ the new length of the array\n     * @return ref to cropped array\n     */\n    function crop(\n        uint256[] memory array_,\n        uint256 newLength_\n    ) internal pure returns (uint256[] memory) {\n        if (newLength_ < array_.length) {\n            assembly {\n                mstore(array_, newLength_)\n            }\n        }\n\n        return array_;\n    }\n\n    function crop(\n        address[] memory array_,\n        uint256 newLength_\n    ) internal pure returns (address[] memory) {\n        if (newLength_ < array_.length) {\n            assembly {\n                mstore(array_, newLength_)\n            }\n        }\n\n        return array_;\n    }\n\n    function crop(bool[] memory array_, uint256 newLength_) internal pure returns (bool[] memory) {\n        if (newLength_ < array_.length) {\n            assembly {\n                mstore(array_, newLength_)\n            }\n        }\n\n        return array_;\n    }\n\n    function crop(\n        string[] memory array_,\n        uint256 newLength_\n    ) internal pure returns (string[] memory) {\n        if (newLength_ < array_.length) {\n            assembly {\n                mstore(array_, newLength_)\n            }\n        }\n\n        return array_;\n    }\n\n    function crop(\n        bytes32[] memory array_,\n        uint256 newLength_\n    ) internal pure returns (bytes32[] memory) {\n        if (newLength_ < array_.length) {\n            assembly {\n                mstore(array_, newLength_)\n            }\n        }\n\n        return array_;\n    }\n}\n"}, "@solarity/solidity-lib/libs/arrays/SetHelper.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nimport {StringSet} from \"../data-structures/StringSet.sol\";\n\n/**\n * @notice A simple library to work with sets\n */\nlibrary SetHelper {\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using StringSet for StringSet.Set;\n\n    /**\n     * @notice The function to insert an array of elements into the set\n     * @param set the set to insert the elements into\n     * @param array_ the elements to be inserted\n     */\n    function add(EnumerableSet.AddressSet storage set, address[] memory array_) internal {\n        for (uint256 i = 0; i < array_.length; i++) {\n            set.add(array_[i]);\n        }\n    }\n\n    function add(EnumerableSet.UintSet storage set, uint256[] memory array_) internal {\n        for (uint256 i = 0; i < array_.length; i++) {\n            set.add(array_[i]);\n        }\n    }\n\n    function add(StringSet.Set storage set, string[] memory array_) internal {\n        for (uint256 i = 0; i < array_.length; i++) {\n            set.add(array_[i]);\n        }\n    }\n\n    /**\n     * @notice The function to remove an array of elements from the set\n     * @param set the set to remove the elements from\n     * @param array_ the elements to be removed\n     */\n    function remove(EnumerableSet.AddressSet storage set, address[] memory array_) internal {\n        for (uint256 i = 0; i < array_.length; i++) {\n            set.remove(array_[i]);\n        }\n    }\n\n    function remove(EnumerableSet.UintSet storage set, uint256[] memory array_) internal {\n        for (uint256 i = 0; i < array_.length; i++) {\n            set.remove(array_[i]);\n        }\n    }\n\n    function remove(StringSet.Set storage set, string[] memory array_) internal {\n        for (uint256 i = 0; i < array_.length; i++) {\n            set.remove(array_[i]);\n        }\n    }\n}\n"}, "@solarity/solidity-lib/libs/data-structures/StringSet.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\n/**\n * @notice ## Usage example:\n *\n * ```\n * using StringSet for StringSet.Set;\n *\n * StringSet.Set internal set;\n * ```\n */\nlibrary StringSet {\n    struct Set {\n        string[] _values;\n        mapping(string => uint256) _indexes;\n    }\n\n    /**\n     * @notice The function add value to set\n     * @param set the set object\n     * @param value_ the value to add\n     */\n    function add(Set storage set, string memory value_) internal returns (bool) {\n        if (!contains(set, value_)) {\n            set._values.push(value_);\n            set._indexes[value_] = set._values.length;\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @notice The function remove value to set\n     * @param set the set object\n     * @param value_ the value to remove\n     */\n    function remove(Set storage set, string memory value_) internal returns (bool) {\n        uint256 valueIndex_ = set._indexes[value_];\n\n        if (valueIndex_ != 0) {\n            uint256 toDeleteIndex_ = valueIndex_ - 1;\n            uint256 lastIndex_ = set._values.length - 1;\n\n            if (lastIndex_ != toDeleteIndex_) {\n                string memory lastValue_ = set._values[lastIndex_];\n\n                set._values[toDeleteIndex_] = lastValue_;\n                set._indexes[lastValue_] = valueIndex_;\n            }\n\n            set._values.pop();\n\n            delete set._indexes[value_];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @notice The function returns true if value in the set\n     * @param set the set object\n     * @param value_ the value to search in set\n     * @return true if value is in the set, false otherwise\n     */\n    function contains(Set storage set, string memory value_) internal view returns (bool) {\n        return set._indexes[value_] != 0;\n    }\n\n    /**\n     * @notice The function returns length of set\n     * @param set the set object\n     * @return the the number of elements in the set\n     */\n    function length(Set storage set) internal view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @notice The function returns value from set by index\n     * @param set the set object\n     * @param index_ the index of slot in set\n     * @return the value at index\n     */\n    function at(Set storage set, uint256 index_) internal view returns (string memory) {\n        return set._values[index_];\n    }\n\n    /**\n     * @notice The function that returns values the set stores, can be very expensive to call\n     * @param set the set object\n     * @return the memory array of values\n     */\n    function values(Set storage set) internal view returns (string[] memory) {\n        return set._values;\n    }\n}\n"}, "@solarity/solidity-lib/libs/decimals/DecimalsConverter.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport {ERC20, IERC20, IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * @notice This library is used to convert numbers that use token's N decimals to M decimals.\n * Comes extremely handy with standardizing the business logic that is intended to work with many different ERC20 tokens\n * that have different precision (decimals). One can perform calculations with 18 decimals only and resort to convertion\n * only when the payouts (or interactions) with the actual tokes have to be made.\n *\n * The best usage scenario involves accepting and calculating values with 18 decimals throughout the project, despite the tokens decimals.\n *\n * Also it is recommended to call `round18()` function on the first execution line in order to get rid of the\n * trailing numbers if the destination decimals are less than 18\n *\n * ## Usage example:\n *\n * ```\n * contract Taker {\n *     ERC20 public USDC;\n *     uint256 public paid;\n *\n *     . . .\n *\n *     function pay(uint256 amount) external {\n *         uint256 decimals = USDC.decimals();\n *         amount = amount.round18(decimals);\n *\n *         paid += amount;\n *         USDC.transferFrom(msg.sender, address(this), amount.from18(decimals));\n *     }\n * }\n * ```\n */\nlibrary DecimalsConverter {\n    /**\n     * @notice The function to get the decimals of ERC20 token. Needed for bytecode optimization\n     * @param token_ the ERC20 token\n     * @return the decimals of provided token\n     */\n    function decimals(address token_) internal view returns (uint8) {\n        return ERC20(token_).decimals();\n    }\n\n    /**\n     * @notice The function to bring the number to 18 decimals of precision\n     * @param amount_ the number to convert\n     * @param token_ the token, whose decimals will be precised to 18\n     * @return the number brought to 18 decimals of precision\n     */\n    function to18(uint256 amount_, address token_) internal view returns (uint256) {\n        return to18(amount_, decimals(token_));\n    }\n\n    /**\n     * @notice The function to bring the number to 18 decimals of precision\n     * @param amount_ the number to convert\n     * @param baseDecimals_ the current precision of the number\n     * @return the number brought to 18 decimals of precision\n     */\n    function to18(uint256 amount_, uint256 baseDecimals_) internal pure returns (uint256) {\n        return convert(amount_, baseDecimals_, 18);\n    }\n\n    /**\n     * @notice The function to bring the number to 18 decimals of precision. Reverts if output is zero\n     * @param amount_ the number to convert\n     * @param token_ the token, whose decimals will be precised to 18\n     * @return the number brought to 18 decimals of precision\n     */\n    function to18Safe(uint256 amount_, address token_) internal view returns (uint256) {\n        return to18Safe(amount_, decimals(token_));\n    }\n\n    /**\n     * @notice The function to bring the number to 18 decimals of precision. Reverts if output is zero\n     * @param amount_ the number to convert\n     * @param baseDecimals_ the current precision of the number\n     * @return the number brought to 18 decimals of precision\n     */\n    function to18Safe(uint256 amount_, uint256 baseDecimals_) internal pure returns (uint256) {\n        return _convertSafe(amount_, baseDecimals_, _to18);\n    }\n\n    /**\n     * @notice The function to bring the number from 18 decimals to the desired decimals of precision\n     * @param amount_ the number to covert\n     * @param token_ the token, whose decimals will be used as desired decimals of precision\n     * @return the number brought from 18 to desired decimals of precision\n     */\n    function from18(uint256 amount_, address token_) internal view returns (uint256) {\n        return from18(amount_, decimals(token_));\n    }\n\n    /**\n     * @notice The function to bring the number from 18 decimals to the desired decimals of precision\n     * @param amount_ the number to covert\n     * @param destDecimals_ the desired precision decimals\n     * @return the number brought from 18 to desired decimals of precision\n     */\n    function from18(uint256 amount_, uint256 destDecimals_) internal pure returns (uint256) {\n        return convert(amount_, 18, destDecimals_);\n    }\n\n    /**\n     * @notice The function to bring the number from 18 decimals to the desired decimals of precision.\n     * Reverts if output is zero\n     * @param amount_ the number to covert\n     * @param token_ the token, whose decimals will be used as desired decimals of precision\n     * @return the number brought from 18 to desired decimals of precision\n     */\n    function from18Safe(uint256 amount_, address token_) internal view returns (uint256) {\n        return from18Safe(amount_, decimals(token_));\n    }\n\n    /**\n     * @notice The function to bring the number from 18 decimals to the desired decimals of precision.\n     * Reverts if output is zero\n     * @param amount_ the number to covert\n     * @param destDecimals_ the desired precision decimals\n     * @return the number brought from 18 to desired decimals of precision\n     */\n    function from18Safe(uint256 amount_, uint256 destDecimals_) internal pure returns (uint256) {\n        return _convertSafe(amount_, destDecimals_, _from18);\n    }\n\n    /**\n     * @notice The function to substitute the trailing digits of a number with zeros\n     * @param amount_ the number to round. Should be with 18 precision decimals\n     * @param decimals_ the required number precision\n     * @return the rounded number. Comes with 18 precision decimals\n     */\n    function round18(uint256 amount_, uint256 decimals_) internal pure returns (uint256) {\n        return to18(from18(amount_, decimals_), decimals_);\n    }\n\n    /**\n     * @notice The function to substitute the trailing digits of a number with zeros. Reverts if output is zero\n     * @param amount_ the number to round. Should be with 18 precision decimals\n     * @param decimals_ the required number precision\n     * @return the rounded number. Comes with 18 precision decimals\n     */\n    function round18Safe(uint256 amount_, uint256 decimals_) internal pure returns (uint256) {\n        return _convertSafe(amount_, decimals_, round18);\n    }\n\n    /**\n     * @notice The function to do the token precision convertion\n     * @param amount_ the amount to convert\n     * @param baseToken_ current token\n     * @param destToken_ desired token\n     * @return the converted number\n     */\n    function convert(\n        uint256 amount_,\n        address baseToken_,\n        address destToken_\n    ) internal view returns (uint256) {\n        return convert(amount_, uint256(decimals(baseToken_)), uint256(decimals(destToken_)));\n    }\n\n    /**\n     * @notice The function to do the precision convertion\n     * @param amount_ the amount to covert\n     * @param baseDecimals_ current number precision\n     * @param destDecimals_ desired number precision\n     * @return the converted number\n     */\n    function convert(\n        uint256 amount_,\n        uint256 baseDecimals_,\n        uint256 destDecimals_\n    ) internal pure returns (uint256) {\n        if (baseDecimals_ > destDecimals_) {\n            amount_ = amount_ / 10 ** (baseDecimals_ - destDecimals_);\n        } else if (baseDecimals_ < destDecimals_) {\n            amount_ = amount_ * 10 ** (destDecimals_ - baseDecimals_);\n        }\n\n        return amount_;\n    }\n\n    /**\n     * @notice The function to do the token precision convertion. Reverts if output is zero\n     * @param amount_ the amount to convert\n     * @param baseToken_ current token\n     * @param destToken_ desired token\n     * @return the converted number\n     */\n    function convertTokensSafe(\n        uint256 amount_,\n        address baseToken_,\n        address destToken_\n    ) internal view returns (uint256) {\n        return _convertTokensSafe(amount_, baseToken_, destToken_, _convertTokens);\n    }\n\n    /**\n     * @notice The function to bring the number to 18 decimals of precision\n     * @param amount_ the number to convert\n     * @param baseDecimals_ the current precision of the number\n     * @return the number brought to 18 decimals of precision\n     */\n    function _to18(uint256 amount_, uint256 baseDecimals_) private pure returns (uint256) {\n        return convert(amount_, baseDecimals_, 18);\n    }\n\n    /**\n     * @notice The function to bring the number from 18 decimals to the desired decimals of precision\n     * @param amount_ the number to covert\n     * @param destDecimals_ the desired precision decimals\n     * @return the number brought from 18 to desired decimals of precision\n     */\n    function _from18(uint256 amount_, uint256 destDecimals_) private pure returns (uint256) {\n        return convert(amount_, 18, destDecimals_);\n    }\n\n    /**\n     * @notice The function to do the token precision convertion\n     * @param amount_ the amount to convert\n     * @param baseToken_ current token\n     * @param destToken_ desired token\n     * @return the converted number\n     */\n    function _convertTokens(\n        uint256 amount_,\n        address baseToken_,\n        address destToken_\n    ) private view returns (uint256) {\n        return convert(amount_, uint256(decimals(baseToken_)), uint256(decimals(destToken_)));\n    }\n\n    /**\n     * @notice The function wrapper to do the safe precision convertion. Reverts if output is zero\n     * @param amount_ the amount to covert\n     * @param decimals_ the precision decimals\n     * @param _convertFunc the internal function pointer to \"from\", \"to\", or \"round\" functions\n     * @return conversionResult_ the convertion result\n     */\n    function _convertSafe(\n        uint256 amount_,\n        uint256 decimals_,\n        function(uint256, uint256) internal pure returns (uint256) _convertFunc\n    ) private pure returns (uint256 conversionResult_) {\n        conversionResult_ = _convertFunc(amount_, decimals_);\n\n        require(conversionResult_ > 0, \"DecimalsConverter: conversion failed\");\n    }\n\n    /**\n     * @notice The function wrapper to do the safe precision convertion for ERC20 tokens. Reverts if output is zero\n     * @param amount_ the amount to covert\n     * @param baseToken_ current token\n     * @param destToken_ desired token\n     * @param _convertFunc the internal function pointer to \"from\", \"to\", or \"round\" functions\n     * @return conversionResult_ the convertion result\n     */\n    function _convertTokensSafe(\n        uint256 amount_,\n        address baseToken_,\n        address destToken_,\n        function(uint256, address, address) internal view returns (uint256) _convertFunc\n    ) private view returns (uint256 conversionResult_) {\n        conversionResult_ = _convertFunc(amount_, baseToken_, destToken_);\n\n        require(conversionResult_ > 0, \"DecimalsConverter: conversion failed\");\n    }\n}\n"}, "@solarity/solidity-lib/libs/utils/TypeCaster.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\n/**\n * @notice This library simplifies non-obvious type castings\n */\nlibrary TypeCaster {\n    /**\n     * @notice The function that casts the list of `X`-type elements to the list of uint256\n     * @param from_ the list of `X`-type elements\n     * @return array_ the list of uint256\n     */\n    function asUint256Array(\n        bytes32[] memory from_\n    ) internal pure returns (uint256[] memory array_) {\n        assembly {\n            array_ := from_\n        }\n    }\n\n    function asUint256Array(\n        address[] memory from_\n    ) internal pure returns (uint256[] memory array_) {\n        assembly {\n            array_ := from_\n        }\n    }\n\n    /**\n     * @notice The function that casts the list of `X`-type elements to the list of addresses\n     * @param from_ the list of `X`-type elements\n     * @return array_ the list of addresses\n     */\n    function asAddressArray(\n        bytes32[] memory from_\n    ) internal pure returns (address[] memory array_) {\n        assembly {\n            array_ := from_\n        }\n    }\n\n    function asAddressArray(\n        uint256[] memory from_\n    ) internal pure returns (address[] memory array_) {\n        assembly {\n            array_ := from_\n        }\n    }\n\n    /**\n     * @notice The function that casts the list of `X`-type elements to the list of bytes32\n     * @param from_ the list of `X`-type elements\n     * @return array_ the list of bytes32\n     */\n    function asBytes32Array(\n        uint256[] memory from_\n    ) internal pure returns (bytes32[] memory array_) {\n        assembly {\n            array_ := from_\n        }\n    }\n\n    function asBytes32Array(\n        address[] memory from_\n    ) internal pure returns (bytes32[] memory array_) {\n        assembly {\n            array_ := from_\n        }\n    }\n\n    /**\n     * @notice The function to transform an element into an array\n     * @param from_ the element\n     * @return array_ the element as an array\n     */\n    function asSingletonArray(uint256 from_) internal pure returns (uint256[] memory array_) {\n        array_ = new uint256[](1);\n        array_[0] = from_;\n    }\n\n    function asSingletonArray(address from_) internal pure returns (address[] memory array_) {\n        array_ = new address[](1);\n        array_[0] = from_;\n    }\n\n    function asSingletonArray(bool from_) internal pure returns (bool[] memory array_) {\n        array_ = new bool[](1);\n        array_[0] = from_;\n    }\n\n    function asSingletonArray(string memory from_) internal pure returns (string[] memory array_) {\n        array_ = new string[](1);\n        array_[0] = from_;\n    }\n\n    function asSingletonArray(bytes32 from_) internal pure returns (bytes32[] memory array_) {\n        array_ = new bytes32[](1);\n        array_[0] = from_;\n    }\n\n    /**\n     * @notice The function to convert static array to dynamic\n     * @param static_ the static array to convert\n     * @return dynamic_ the converted dynamic array\n     */\n    function asDynamic(\n        uint256[1] memory static_\n    ) internal pure returns (uint256[] memory dynamic_) {\n        return asSingletonArray(static_[0]);\n    }\n\n    function asDynamic(\n        uint256[2] memory static_\n    ) internal pure returns (uint256[] memory dynamic_) {\n        dynamic_ = new uint256[](2);\n\n        uint256 pointerS_;\n        uint256 pointerD_;\n\n        assembly {\n            pointerS_ := static_\n            pointerD_ := dynamic_\n        }\n\n        _copy(pointerS_, pointerD_, 2);\n    }\n\n    function asDynamic(\n        uint256[3] memory static_\n    ) internal pure returns (uint256[] memory dynamic_) {\n        dynamic_ = new uint256[](3);\n\n        uint256 pointerS_;\n        uint256 pointerD_;\n\n        assembly {\n            pointerS_ := static_\n            pointerD_ := dynamic_\n        }\n\n        _copy(pointerS_, pointerD_, 3);\n    }\n\n    function asDynamic(\n        uint256[4] memory static_\n    ) internal pure returns (uint256[] memory dynamic_) {\n        dynamic_ = new uint256[](4);\n\n        uint256 pointerS_;\n        uint256 pointerD_;\n\n        assembly {\n            pointerS_ := static_\n            pointerD_ := dynamic_\n        }\n\n        _copy(pointerS_, pointerD_, 4);\n    }\n\n    function asDynamic(\n        uint256[5] memory static_\n    ) internal pure returns (uint256[] memory dynamic_) {\n        dynamic_ = new uint256[](5);\n\n        uint256 pointerS_;\n        uint256 pointerD_;\n\n        assembly {\n            pointerS_ := static_\n            pointerD_ := dynamic_\n        }\n\n        _copy(pointerS_, pointerD_, 5);\n    }\n\n    function asDynamic(\n        address[1] memory static_\n    ) internal pure returns (address[] memory dynamic_) {\n        return asSingletonArray(static_[0]);\n    }\n\n    function asDynamic(\n        address[2] memory static_\n    ) internal pure returns (address[] memory dynamic_) {\n        dynamic_ = new address[](2);\n\n        uint256 pointerS_;\n        uint256 pointerD_;\n\n        assembly {\n            pointerS_ := static_\n            pointerD_ := dynamic_\n        }\n\n        _copy(pointerS_, pointerD_, 2);\n    }\n\n    function asDynamic(\n        address[3] memory static_\n    ) internal pure returns (address[] memory dynamic_) {\n        dynamic_ = new address[](3);\n\n        uint256 pointerS_;\n        uint256 pointerD_;\n\n        assembly {\n            pointerS_ := static_\n            pointerD_ := dynamic_\n        }\n\n        _copy(pointerS_, pointerD_, 3);\n    }\n\n    function asDynamic(\n        address[4] memory static_\n    ) internal pure returns (address[] memory dynamic_) {\n        dynamic_ = new address[](4);\n\n        uint256 pointerS_;\n        uint256 pointerD_;\n\n        assembly {\n            pointerS_ := static_\n            pointerD_ := dynamic_\n        }\n\n        _copy(pointerS_, pointerD_, 4);\n    }\n\n    function asDynamic(\n        address[5] memory static_\n    ) internal pure returns (address[] memory dynamic_) {\n        dynamic_ = new address[](5);\n\n        uint256 pointerS_;\n        uint256 pointerD_;\n\n        assembly {\n            pointerS_ := static_\n            pointerD_ := dynamic_\n        }\n\n        _copy(pointerS_, pointerD_, 5);\n    }\n\n    function asDynamic(bool[1] memory static_) internal pure returns (bool[] memory dynamic_) {\n        return asSingletonArray(static_[0]);\n    }\n\n    function asDynamic(bool[2] memory static_) internal pure returns (bool[] memory dynamic_) {\n        dynamic_ = new bool[](2);\n\n        uint256 pointerS_;\n        uint256 pointerD_;\n\n        assembly {\n            pointerS_ := static_\n            pointerD_ := dynamic_\n        }\n\n        _copy(pointerS_, pointerD_, 2);\n    }\n\n    function asDynamic(bool[3] memory static_) internal pure returns (bool[] memory dynamic_) {\n        dynamic_ = new bool[](3);\n\n        uint256 pointerS_;\n        uint256 pointerD_;\n\n        assembly {\n            pointerS_ := static_\n            pointerD_ := dynamic_\n        }\n\n        _copy(pointerS_, pointerD_, 3);\n    }\n\n    function asDynamic(bool[4] memory static_) internal pure returns (bool[] memory dynamic_) {\n        dynamic_ = new bool[](4);\n\n        uint256 pointerS_;\n        uint256 pointerD_;\n\n        assembly {\n            pointerS_ := static_\n            pointerD_ := dynamic_\n        }\n\n        _copy(pointerS_, pointerD_, 4);\n    }\n\n    function asDynamic(bool[5] memory static_) internal pure returns (bool[] memory dynamic_) {\n        dynamic_ = new bool[](5);\n\n        uint256 pointerS_;\n        uint256 pointerD_;\n\n        assembly {\n            pointerS_ := static_\n            pointerD_ := dynamic_\n        }\n\n        _copy(pointerS_, pointerD_, 5);\n    }\n\n    function asDynamic(string[1] memory static_) internal pure returns (string[] memory dynamic_) {\n        return asSingletonArray(static_[0]);\n    }\n\n    function asDynamic(string[2] memory static_) internal pure returns (string[] memory dynamic_) {\n        dynamic_ = new string[](2);\n\n        uint256 pointerS_;\n        uint256 pointerD_;\n\n        assembly {\n            pointerS_ := static_\n            pointerD_ := dynamic_\n        }\n\n        _copy(pointerS_, pointerD_, 2);\n    }\n\n    function asDynamic(string[3] memory static_) internal pure returns (string[] memory dynamic_) {\n        dynamic_ = new string[](3);\n\n        uint256 pointerS_;\n        uint256 pointerD_;\n\n        assembly {\n            pointerS_ := static_\n            pointerD_ := dynamic_\n        }\n\n        _copy(pointerS_, pointerD_, 3);\n    }\n\n    function asDynamic(string[4] memory static_) internal pure returns (string[] memory dynamic_) {\n        dynamic_ = new string[](4);\n\n        uint256 pointerS_;\n        uint256 pointerD_;\n\n        assembly {\n            pointerS_ := static_\n            pointerD_ := dynamic_\n        }\n\n        _copy(pointerS_, pointerD_, 4);\n    }\n\n    function asDynamic(string[5] memory static_) internal pure returns (string[] memory dynamic_) {\n        dynamic_ = new string[](5);\n\n        uint256 pointerS_;\n        uint256 pointerD_;\n\n        assembly {\n            pointerS_ := static_\n            pointerD_ := dynamic_\n        }\n\n        _copy(pointerS_, pointerD_, 5);\n    }\n\n    function asDynamic(\n        bytes32[1] memory static_\n    ) internal pure returns (bytes32[] memory dynamic_) {\n        return asSingletonArray(static_[0]);\n    }\n\n    function asDynamic(\n        bytes32[2] memory static_\n    ) internal pure returns (bytes32[] memory dynamic_) {\n        dynamic_ = new bytes32[](2);\n\n        uint256 pointerS_;\n        uint256 pointerD_;\n\n        assembly {\n            pointerS_ := static_\n            pointerD_ := dynamic_\n        }\n\n        _copy(pointerS_, pointerD_, 2);\n    }\n\n    function asDynamic(\n        bytes32[3] memory static_\n    ) internal pure returns (bytes32[] memory dynamic_) {\n        dynamic_ = new bytes32[](3);\n\n        uint256 pointerS_;\n        uint256 pointerD_;\n\n        assembly {\n            pointerS_ := static_\n            pointerD_ := dynamic_\n        }\n\n        _copy(pointerS_, pointerD_, 3);\n    }\n\n    function asDynamic(\n        bytes32[4] memory static_\n    ) internal pure returns (bytes32[] memory dynamic_) {\n        dynamic_ = new bytes32[](4);\n\n        uint256 pointerS_;\n        uint256 pointerD_;\n\n        assembly {\n            pointerS_ := static_\n            pointerD_ := dynamic_\n        }\n\n        _copy(pointerS_, pointerD_, 4);\n    }\n\n    function asDynamic(\n        bytes32[5] memory static_\n    ) internal pure returns (bytes32[] memory dynamic_) {\n        dynamic_ = new bytes32[](5);\n\n        uint256 pointerS_;\n        uint256 pointerD_;\n\n        assembly {\n            pointerS_ := static_\n            pointerD_ := dynamic_\n        }\n\n        _copy(pointerS_, pointerD_, 5);\n    }\n\n    function _copy(uint256 locationS_, uint256 locationD_, uint256 length_) private pure {\n        assembly {\n            for {\n                let i := 0\n            } lt(i, length_) {\n                i := add(i, 1)\n            } {\n                locationD_ := add(locationD_, 0x20)\n\n                mstore(locationD_, mload(locationS_))\n\n                locationS_ := add(locationS_, 0x20)\n            }\n        }\n    }\n}\n"}, "@solarity/solidity-lib/utils/Globals.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nuint256 constant PRECISION = 10 ** 25;\nuint256 constant DECIMAL = 10 ** 18;\nuint256 constant PERCENTAGE_100 = 10 ** 27;\n"}, "contracts/interfaces/IP2PSports.sol": {"content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\n/**\n * @title IP2PSports\n * @dev Interface for a peer-to-peer sports betting platform.\n * This interface defines the basic events, enums, and structs required for creating, joining, resolving,\n * and canceling challenges, as well as managing and withdrawing bets and admin shares in a decentralized sports betting platform.\n */\ninterface IP2PSports {\n    /**\n     * @dev Emitted when the backend address changes.\n     * @param backend The new backend address.\n     * @param by The address of the user who changed the backend address.\n     */\n    event BackendChanged(address backend, address by);\n\n    /**\n     * @dev Emitted when the merkle root is updated.\n     * @param root The new merkle root.\n     * @param by The address of the user who updated the merkle root.\n     */\n    event MerkleRootUpdated(bytes32 root, address by);\n\n    /**\n     * @dev Emitted when the maximum number of challengers is updated.\n     * @param maxChallengersEachSide The maximum number of challengers on each side.\n     * @param maxChallengersForPickem The maximum number of challengers for pickem.\n     * @param by The address of the user who updated the maximum number of challengers.\n     */\n    event MaxChallengersUpdated(\n        uint256 maxChallengersEachSide,\n        uint256 maxChallengersForPickem,\n        address by\n    );\n\n    /**\n     * @dev Emitted when the minimum USD bet amount is updated.\n     * @param amount The new minimum USD bet amount.\n     * @param by The address of the user who updated the minimum USD bet amount.\n     */\n    event MinUSDBettingAmountUpdated(uint256 amount, address by);\n\n    /**\n     * @dev Emitted when the membership application status is updated.\n     * @param value The new membership application status (true or false).\n     * @param by The address of the user who updated the membership application status.\n     */\n    event MembershipApplied(bool value, address by);\n\n    /**\n     * @dev Emitted when betting is enabled or disabled.\n     * @param value The new betting status (true or false).\n     * @param by The address of the user who updated the betting status.\n     */\n    event BettingAllowed(bool value, address by);\n\n    /**\n     * @dev Emitted when the admin share rules are updated.\n     * @param adminShareRules The new admin share rules.\n     * @param by The address of the user who updated the admin share rules.\n     */\n    event AdminShareRulesUpdated(AdminShareRule adminShareRules, address by);\n\n    /**\n     * @dev Emitted when an amount is debited in SC.\n     * @param amount The amount to be debited.\n     * @param by The address of the user who initiated the debit.\n     */\n    event DebitedInSC(uint256 amount, address by);\n\n    /**\n     * @dev Emitted when a token is allowed.\n     * @param tokens The addresses of the allowed tokens.\n     * @param priceFeeds The addresses of the price feeds for the tokens.\n     * @param minBetAmounts The minimum bet amounts for the tokens.\n     * @param by The address of the user who allowed the tokens.\n     */\n    event TokenAllowed(\n        address[] tokens,\n        address[] priceFeeds,\n        uint256[] minBetAmounts,\n        address by\n    );\n\n    /**\n     * @dev Emitted when tokens are restricted.\n     * @param tokens The addresses of the restricted tokens.\n     * @param by The address of the user who restricted the tokens.\n     */\n    event TokenRestricted(address[] tokens, address by);\n\n    /**\n     * @dev Emitted when a new challenge is created.\n     * @param challengeId Unique identifier for the challenge.\n     * @param token Address of the token used for betting.\n     * @param by Address of the user who created the challenge.\n     * @param inputStakedQty The original amount input by user, without any deductions\n     */\n    event ChallengeCreated(uint256 challengeId, address token, address by, uint256 inputStakedQty);\n\n    /**\n     * @dev Emitted when a user joins an existing challenge.\n     * @param challengeId Unique identifier for the challenge.\n     * @param amount Amount of the token bet by the user.\n     * @param by Address of the user who joined the challenge.\n     * @param inputStakedQty The original amount input by user, without any deductions\n     * @param token Address of the token used for betting.\n     */\n    event ChallengeJoined(\n        uint256 challengeId,\n        uint256 amount,\n        address by,\n        address token,\n        uint256 inputStakedQty\n    );\n\n    /**\n     * @dev Emitted when a user increases amount for an already joined challenge.\n     * @param challengeId Unique identifier for the challenge.\n     * @param increasedAmount Amount that is added to the previous amount of the user for the specified bet.\n     * @param newTotalAmount The new total amount of the user's participation in the bet.\n     * @param by Address of the user who increased the challenge amount.\n     * @param token Address of the token used for betting.\n     */\n    event BetAmountIncreased(\n        uint256 challengeId,\n        uint256 increasedAmount,\n        uint256 newTotalAmount,\n        address by,\n        address token\n    );\n\n    /**\n     * @dev Emitted when a challenge is resolved.\n     * @param challengeId Unique identifier for the challenge.\n     * @param finalOutcome Final outcome of the challenge (1 for win, 2 for loss, etc.).\n     */\n    event ChallengeResolved(uint256 challengeId, uint8 finalOutcome);\n\n    /**\n     * @dev Emitted when a challenge is canceled.\n     * @param challengeId Unique identifier for the canceled challenge.\n     */\n    event ChallengeCanceled(uint256 challengeId);\n\n    /**\n     * @dev Emitted when a user cancels their participation in a challenge.\n     * @param user Address of the user canceling their participation.\n     * @param challengeId Unique identifier for the challenge.\n     */\n    event CancelParticipation(address user, uint256 challengeId);\n\n    /**\n     * @dev Emitted after the resolution of a challenge, detailing the redistribution of funds.\n     * @param challengeId Unique identifier for the challenge.\n     * @param winners Array of addresses of the winning users.\n     * @param winnersProfit Array of profits earned by each winning user.\n     * @param losers Array of addresses of the losing users.\n     * @param losersLoss Array of amounts lost by each losing user.\n     */\n    event ChallengeFundsMoved(\n        uint256 challengeId,\n        address[] winners,\n        uint256[] winnersProfit,\n        address[] losers,\n        uint256[] losersLoss,\n        MethodType mothodType,\n        address token\n    );\n\n    /**\n     * @dev Emitted when a user withdraws their winnings or funds.\n     * @param token Address of the token being withdrawn.\n     * @param amount Amount of the token being withdrawn.\n     * @param by Address of the user performing the withdrawal.\n     */\n    event UserWithdrawn(address token, uint256 amount, address by);\n\n    /**\n     * @dev Emitted when the admin shares is calculated from challenge participation fees.\n     * @param challengeId Unique identifier for the challenge from which the fees were taken.\n     * @param token Address of the token in which the fees were paid.\n     * @param amount Amount of the fees received.\n     */\n    event AdminShareCalculated(uint256 challengeId, address token, uint256 amount);\n\n    /**\n     * @dev Emitted when the admin receives a share from challenge participation fees.\n     * @param challengeId Unique identifier for the challenge from which the fees were taken.\n     * @param token Address of the token in which the fees were paid.\n     * @param amount Amount of the fees received.\n     */\n    event AdminReceived(uint256 challengeId, address token, uint256 amount);\n\n    /**\n     * @dev Emitted when the referrel commission is earned by the referrer from challenge participation fees.\n     * @param challengeId Unique identifier for the challenge from which the fees were taken.\n     * @param token Address of the token in which the fees were paid.\n     * @param referrers addresses of the referrers.\n     * @param referrelCommissions Amount of the fees received.\n     */\n    event ReferralsEarned(\n        uint256 challengeId,\n        address token,\n        address[] referrers,\n        uint256[] referrelCommissions\n    );\n\n    /**\n     * @dev Emitted when the admin withdraws their accumulated shares.\n     * @param token Address of the token being withdrawn.\n     * @param amount Amount of the token being withdrawn.\n     */\n    event AdminWithdrawn(address token, uint256 amount);\n\n    /**\n     * @dev Enum for tracking the status of a challenge.\n     */\n    enum ChallengeStatus {\n        None,\n        CanBeCreated,\n        Betting,\n        Awaiting,\n        Canceled,\n        ResolvedFor,\n        ResolvedAgainst,\n        ResolvedDraw\n    }\n\n    /**\n     * @dev Enum for distinguishing between individual and group challenges.\n     */\n    enum ChallengeType {\n        Individual,\n        Group\n    }\n\n    /**\n     * @dev Enum for the functions in which the fund are being distributed.\n     */\n    enum MethodType {\n        ResolveChallenge,\n        ResolveGroupChallenge,\n        CancelChallenge,\n        CancelParticipation\n    }\n\n    /**\n     * @dev Struct for storing details about a challenge.\n     */\n    struct Challenge {\n        address token; // Token used for betting.\n        address[] usersFor; // Users betting for the outcome.\n        address[] usersAgainst; // Users betting against the outcome.\n        uint256 amountFor; // Total amount bet for the outcome.\n        uint256 amountAgainst; // Total amount bet against the outcome.\n        ChallengeStatus status; // Current status of the challenge.\n        ChallengeType challengeType; // Type of challenge (individual or group).\n        uint256 startTime; // Start time of the challenge.\n        uint256 endTime; // End time of the challenge.\n    }\n\n    /**\n     * @dev Struct for storing a user's bet on a challenge.\n     */\n    struct UserBet {\n        uint256 amount; // Amount of the bet.\n        uint8 decision; // User's decision (for or against).\n        uint256 adminShare; //Admin's share calculated for this bet amount\n        address referrer;\n        uint256 referralCommision;\n    }\n\n    /**\n     * @dev Struct for defining admin share rules based on bet thresholds.\n     */\n    struct AdminShareRule {\n        uint256[] thresholds; // Bet amount thresholds for different share percentages.\n        uint256[] sharesInUSD; // Admin share in USD for corresponding thresholds.\n        bool isSTMX; //To define if this is an STMX or some other\n    }\n\n    /**\n     *  External Methods\n     */\n\n    /** @dev Emits a `ChallengeCreated` event and calls `joinChallenge` for the challenge creator.\n     * @param token Address of the token used for betting (zero address for native currency)\n     * @param amountFromWallet Amount to be bet from the creator's wallet\n     * @param amountFromWithdrawables Amount to be bet from the creator's withdrawable balance\n     * @param decision The side of the bet the creator is taking\n     * @param challengeType The type of challenge (Individual or Group)\n     * @param startTime Start time of the challenge\n     * @param endTime End time of the challenge\n     * @param membershipLevel user membership level\n     * @param feePercentage percentage amount reduced from admin share\n     * @param referrer referrer address\n     * @param referralCommision referral will get the comission from admin share\n     * @param proof leaf nood proof\n     */\n    function createChallenge(\n        address token,\n        uint256 amountFromWallet,\n        uint256 amountFromWithdrawables,\n        uint8 decision,\n        ChallengeType challengeType,\n        uint256 startTime,\n        uint256 endTime,\n        uint8 membershipLevel,\n        uint256 feePercentage,\n        address referrer,\n        uint256 referralCommision,\n        bytes32[] memory proof\n    ) external payable;\n\n    /** @dev This function allows users to withdraw their available tokens from the contract. It uses the\n     * nonReentrant modifier from OpenZeppelin to prevent reentrancy attacks. A `UserWithdrawn` event is\n     * emitted upon a successful withdrawal.\n     * @param token The address of the token to be withdrawn. Use the zero address for the native currency.\n     */\n    function withdraw(address token) external;\n\n    /** @dev This function is called by the backend to resolve challenges that have reached their end time\n     * and are in the awaiting status. It updates the status of each challenge based on its final outcome.\n     * Only challenges of type `Individual` can be resolved using this function. A `ChallengeResolved` event is\n     * emitted for each challenge that is resolved. This function uses the `onlyBackend` modifier to ensure\n     * that only authorized backend addresses can call it, and `nonReentrant` to prevent reentrancy attacks.\n     * @param challengeIds Array of IDs of the challenges to be resolved.\n     * @param finalOutcomes Array of final outcomes for each challenge, where outcomes are defined as follows:\n     * - 1: Side A wins,\n     * - 2: Side B wins,\n     * - 3: Draw.\n     */\n    function resolveChallenge(\n        uint256[] memory challengeIds,\n        uint8[] memory finalOutcomes\n    ) external;\n\n    /** @dev This function allows the backend to cancel a user's participation in a challenge, refunding their bet.\n     * It can only be called by the backend and is protected against reentrancy attacks. The function checks if the\n     * challenge exists and ensures that the challenge is either in the `Awaiting` or `Betting` status, implying that\n     * it has not been resolved yet. Additionally, it verifies that the user has indeed placed a bet on the challenge.\n     * After these checks, it calls an internal function `_cancelParticipation` to handle the logic for cancelling the\n     * user's participation and processing the refund.\n     * @param user The address of the user whose participation is to be cancelled.\n     * @param challengeId The ID of the challenge from which the user's participation is to be cancelled.\n     */\n    function cancelParticipation(address user, uint256 challengeId, uint8 cancelType) external;\n\n    /** @dev This function is used for resolving group challenges specifically, where multiple participants can win.\n     * It can only be executed by the backend and is protected against reentrancy. The function ensures that the\n     * challenge exists, is currently awaiting resolution, and is of the `Group` challenge type. It then validates\n     * that the lengths of the winners and profits arrays match and do not exceed the maximum number of winners allowed.\n     * Each winner's address must have participated in the challenge, and winners must be unique. The total of the profits\n     * percentages must equal 100. Once validated, the challenge status is updated, and profits are calculated and\n     * distributed to the winners based on the provided profits percentages.\n     * @param challengeId The ID of the group challenge to resolve.\n     * @param winners An array of addresses of the winners of the challenge.\n     * @param profits An array of profit percentages corresponding to each winner, summing to 100.\n     */\n    function resolveGroupChallenge(\n        uint256 challengeId,\n        address[] calldata winners,\n        uint256[] calldata profits\n    ) external;\n\n    /** @dev This function allows the backend to cancel a challenge if it's either awaiting resolution or still open for betting.\n     * It ensures that the challenge exists and is in a cancelable state (either `Awaiting` or `Betting`). Upon cancellation,\n     * the challenge's status is updated to `Canceled`, and all bets placed on the challenge are refunded to the participants.\n     * This function is protected by the `onlyBackend` modifier to restrict access to the backend address, and `nonReentrant`\n     * to prevent reentrancy attacks.\n     * @param challengeId The ID of the challenge to be cancelled.\n     * @param cancelType 0-Return bet amount without admin shares 1-Return bet amount with admin shares.\n     */\n    function cancelChallenge(uint256 challengeId, uint8 cancelType) external;\n\n    /** @dev This function allows the contract owner to enable or disable betting across the platform.\n     * It's a straightforward toggle that sets the `bettingAllowed` state variable based on the input.\n     * Access to this function is restricted to the contract owner through the `onlyOwner` modifier from\n     * OpenZeppelin's Ownable contract, ensuring that only the owner can change the betting policy.\n     * @param value_ A boolean indicating whether betting should be allowed (`true`) or not (`false`).\n     */\n    function allowBetting(bool value_) external;\n\n    /** @dev This function will allow the owner to toggle the apply membership values\n     * @param value_ true to apply membership values and false for disable membership values\n     */\n    function updateApplyMembershipValues(bool value_) external;\n\n    /** @dev Can only be called by the contract owner.\n     * @param value_ The new minimum betting amount in USD.\n     */\n    function changeMinUSDBettingAmount(uint256 value_) external;\n\n    /** @dev This function allows the contract owner to change the backend address to a new one.\n     * Ensures the new backend address is not the zero address to prevent rendering the contract unusable.\n     * The function is protected by the `onlyOwner` modifier, ensuring that only the contract owner has the authority\n     * to update the backend address. This is crucial for maintaining the integrity and security of the contract's\n     * administrative functions.\n     * @param backend_ The new address to be set as the backend. It must be a non-zero address.\n     */\n    function changeBackend(address backend_) external;\n\n    /** @dev This function is designed to adjust the timing of a challenge, allowing the backend to\n     * modify the start and end times as necessary. It's particularly useful for correcting mistakes\n     * or accommodating changes in event schedules. The function checks for the existence of the challenge\n     * and validates that the new end time is indeed after the new start time to maintain logical consistency.\n     * Access is restricted to the backend through the `onlyBackend` modifier to ensure that only authorized\n     * personnel can make such adjustments.\n     * @param challengeId The ID of the challenge whose timings are to be changed.\n     * @param startTime The new start time for the challenge.\n     * @param endTime The new end time for the challenge.\n     */\n    // function changeChallengeTime(\n    //     uint256 challengeId,\n    //     uint256 startTime,\n    //     uint256 endTime\n    // ) external;\n\n    /** @dev This function enables the contract owner to restrict certain tokens from being used in betting activities.\n     * It involves removing tokens from the list of allowed tokens, potentially removing them from the list of tokens\n     * without a Chainlink price feed (oracless tokens), and deleting their associated price feeds if any were set.\n     * This is a crucial administrative function for managing the tokens that can be used on the platform, allowing\n     * for adjustments based on compliance, liquidity, or other operational considerations.\n     * Execution is restricted to the contract's owner through the `onlyOwner` modifier, ensuring that token restrictions\n     * can only be imposed by authorized parties.\n     * @param tokens An array of token addresses that are to be restricted from use in betting.\n     */\n    function restrictTokens(address[] memory tokens) external;\n\n    /** @dev Allows the contract owner to define how administrative shares (a portion of betting winnings) are calculated.\n     * This can be configured differently for the STMX token versus other tokens, as indicated by the `isSTMX` flag.\n     * Each entry in the `thresholds` and `percentages` arrays defines a tier: if the winnings fall into a certain threshold,\n     * the corresponding percentage is applied as the administrative share. The function enforces ascending order for thresholds\n     * and ensures that the share percentages do not exceed a maximum limit. This setup allows for flexible configuration\n     * of administrative fees based on the amount won.\n     * Access is restricted to the contract owner through the `onlyOwner` modifier, ensuring that only they can set these rules.\n     * @param thresholds An array of threshold values, each representing the lower bound of a winnings bracket.\n     * @param percentages An array of percentages corresponding to each threshold, defining the admin share for that bracket.\n     * @param token Token address.\n     * @param isSTMX A boolean flag indicating whether these rules apply to the STMX token (`true`) or other tokens (`false`).\n     */\n    function setAdminShareRules(\n        uint256[] memory thresholds,\n        uint256[] memory percentages,\n        address token,\n        bool isSTMX\n    ) external;\n\n    /**\n     * Access is restricted to the contract owner through the `onlyOwner` modifier, ensuring that only they can set these rules.\n     * @param _maxChallengersEachSide maximun limit of challengers can join in each side.\n     * @param _maxChallengersForPickem maximun limit of challengers can join for pickem.\n     */\n    function updateMaxChallengers(\n        uint256 _maxChallengersEachSide,\n        uint256 _maxChallengersForPickem\n    ) external;\n\n    /**\n     * Access is restricted to the contract owner through the `onlyOwner` modifier, ensuring that only owner can deposit amount to SC.\n     * @param _amount amount of tokens.\n     * @param _token token address.\n     */\n    function debitInSC(uint256 _amount, address _token) external payable;\n\n    /** @dev This function provides external access to the administrative share rules that have been set up for either\n     * the STMX token (if `isSTMX` is true) or for other tokens (if `isSTMX` is false). These rules define the thresholds\n     * and corresponding percentages that determine how administrative shares are calculated from betting winnings.\n     * The function returns two arrays: one for the thresholds and one for the percentages, which together outline the\n     * structure of admin shares based on the amount of winnings.\n     * @param token A boolean flag indicating whether to retrieve the rules for the STMX token (`true`) or other tokens (`false`).\n     * @return thresholds An array of uint256 representing the winnings thresholds for admin shares calculation.\n     * @return percentages An array of uint256 representing the admin share percentages for each corresponding threshold.\n     */\n    function getAdminShareRules(\n        address token\n    )\n        external\n        view\n        returns (uint256[] memory thresholds, uint256[] memory percentages, bool isSTMX);\n\n    /** @dev This function provides external visibility into which tokens are currently permitted for use in betting within the platform.\n     * It leverages the EnumerableSet library from OpenZeppelin to handle the dynamic array of addresses representing the allowed tokens.\n     * This is particularly useful for interfaces or external contracts that need to verify or display the tokens users can bet with.\n     * @return An array of addresses, each representing a token that is allowed for betting.\n     */\n    function getAllowedTokens() external view returns (address[] memory);\n\n    /** @dev This function provides access to the details of a given challenge, including its current status, which is\n     * dynamically determined based on the challenge's timing and resolution state. It's essential for external callers\n     * to be able to retrieve comprehensive data on a challenge, such as its participants, status, and betting amounts,\n     * to properly interact with or display information about the challenge. The function checks that the requested\n     * challenge exists before attempting to access its details.\n     * @param challengeId The unique identifier of the challenge for which details are requested.\n     * @return challengeDetails A `Challenge` struct containing all relevant data about the challenge, including an updated status.\n     *\n     * Requirements:\n     * - The challenge must exist, as indicated by its ID being within the range of created challenges.\n     */\n    function getChallengeDetails(\n        uint256 challengeId\n    ) external view returns (Challenge memory challengeDetails);\n\n    /** @dev This function allows anyone to view the details of a bet made by a user on a specific challenge,\n     * including the amount bet and the side the user has chosen. It's crucial for enabling users or interfaces\n     * to confirm the details of participation in challenges and to understand the stakes involved. This function\n     * directly accesses the mapping of user bets based on the user address and challenge ID, returning the\n     * corresponding `UserBet` struct.\n     * @param challengeId The ID of the challenge for which the bet details are being queried.\n     * @param user The address of the user whose bet details are requested.\n     * @return A `UserBet` struct containing the amount of the bet and the decision (side chosen) by the user for the specified challenge.\n     */\n    function getUserBet(uint256 challengeId, address user) external view returns (UserBet memory);\n\n    /** @dev This function compiles a comprehensive view of all tokens that a user has available to withdraw,\n     * including winnings, refunds, or other credits due to the user. It iterates over the entire list of tokens\n     * recognized by the contract (not just those currently allowed for betting) to ensure that users can access\n     * any funds owed to them, regardless of whether a token's betting status has changed. This is essential for\n     * maintaining transparency and access to funds for users within the platform.\n     * @param user The address of the user for whom withdrawable balances are being queried.\n     * @return tokens An array of token addresses, representing each token that the user has a balance of.\n     * @return amounts An array of uint256 values, each corresponding to the balance of the token at the same index in the `tokens` array.\n     */\n    function getUserWithdrawables(\n        address user\n    ) external view returns (address[] memory tokens, uint256[] memory amounts);\n\n    /** @dev Emits a `ChallengeJoined` event if the join is successful.\n     * @param challengeId ID of the challenge to join\n     * @param amountFromWallet Amount to be bet from the user's wallet\n     * @param amountFromWithdrawables Amount to be bet from the user's withdrawable balance\n     * @param decision The side of the bet the user is taking\n     * @param membershipLevel user membership level\n     * @param feePercentage percentage amount reduced from admin share\n     * @param referrer referrer address\n     * @param referralCommision referral will get the comission from admin share\n     * @param proof leaf nood proof\n     */\n    function joinChallenge(\n        uint256 challengeId,\n        uint256 amountFromWallet,\n        uint256 amountFromWithdrawables,\n        uint8 decision,\n        uint8 membershipLevel,\n        uint256 feePercentage,\n        address referrer,\n        uint256 referralCommision,\n        bytes32[] memory proof\n    ) external payable;\n\n    /** @dev Emits a `BetAmountIncreased` event if the join is successful.\n     * @param challengeId ID of the challenge for which user wants to increase the bet amount\n     * @param amountFromWallet Amount to be bet from the user's wallet\n     * @param amountFromWithdrawables Amount to be bet from the user's withdrawable balance\n     * @param membershipLevel user membership level\n     * @param feePercentage percentage amount reduced from admin share\n     * @param referrer referrer address\n     * @param referralCommision referral will get the comission from admin share\n     * @param proof leaf nood proof\n     */\n    function increaseBetAmount(\n        uint256 challengeId,\n        uint256 amountFromWallet,\n        uint256 amountFromWithdrawables,\n        uint8 membershipLevel,\n        uint256 feePercentage,\n        address referrer,\n        uint256 referralCommision,\n        bytes32[] memory proof\n    ) external payable;\n\n    /** @dev A challenge is considered to exist if its ID is greater than 0 and less than or equal to the latest challenge ID.\n     * @param challengeId The ID of the challenge to check.\n     * @return bool Returns true if the challenge exists, false otherwise.\n     */\n    function challengeExists(uint256 challengeId) external view returns (bool);\n\n    /** @dev This function will allow the owner to update the root node of merkle tree\n     * @param _root root node of merkle tree\n     */\n    function updateRoot(bytes32 _root) external;\n\n    /** @dev This function permits the contract owner to add tokens to the list of those allowed for betting.\n     * It also associates Chainlink price feeds with tokens, enabling the conversion of bets to a common value basis for calculations.\n     * Tokens without a specified price feed (address(0)) are considered to have fixed or known values and are added to a separate list.\n     * The function ensures that each token in the input array has a corresponding price feed address (which can be the zero address).\n     * The `onlyOwner` modifier restricts this function's execution to the contract's owner, safeguarding against unauthorized token addition.\n     * @param tokens An array of token addresses to be allowed for betting.\n     * @param priceFeeds An array of Chainlink price feed addresses corresponding to the tokens. Use address(0) for tokens without a need for price feeds.\n     * @param minBetAmounts An array of amount corresponding to every token being allowed, the value for oracless tokens will be considers only in this method.\n     * Requirements:\n     * - The lengths of the `tokens` and `priceFeeds` arrays must match to ensure each token has a corresponding price feed address.\n     */\n    function allowTokens(\n        address[] memory tokens,\n        address[] memory priceFeeds,\n        uint256[] memory minBetAmounts\n    ) external;\n}\n"}, "contracts/P2PSports.sol": {"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/access/Ownable2Step.sol\";\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nimport \"@solarity/solidity-lib/libs/arrays/SetHelper.sol\";\nimport \"@solarity/solidity-lib/libs/arrays/ArrayHelper.sol\";\nimport \"@solarity/solidity-lib/libs/utils/TypeCaster.sol\";\nimport \"@solarity/solidity-lib/libs/decimals/DecimalsConverter.sol\";\n\nimport \"./interfaces/IP2PSports.sol\";\n\nimport \"@solarity/solidity-lib/utils/Globals.sol\";\n\n/// @title P2PSports: A Peer-to-Peer Sports Betting Smart Contract\n/** @notice This contract allows users to create and join sports betting challenges, bet on outcomes,\n * and withdraw winnings in a decentralized manner. It supports betting with STMX token and other ERC20 tokens, along with ETH\n * and uses Chainlink for price feeds to calculate admin shares.\n * @dev The contract uses OpenZeppelin's Ownable and ReentrancyGuard for access control and reentrancy protection,\n * and utilizes libraries from solidity-lib for array and decimal manipulations.\n *\n * ERROR CODES: In order to reduce the size of the Smart Contract, we have defined the short codes instead of the complete\n * error messages in the revert/require statements. The messages corresponding to the error codes can be seen in the following document.\n * https://duelnow.notion.site/Smart-Contract-Error-Codes-ca7427520ce04ca293d3e21fb1e21583\n */\ncontract P2PSports is IP2PSports, Ownable2Step, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using EnumerableSet for EnumerableSet.UintSet;\n    using SetHelper for EnumerableSet.AddressSet;\n    using DecimalsConverter for *;\n    using ArrayHelper for uint256[];\n    using TypeCaster for *;\n\n    /// @notice merkle tree root node\n    bytes32 private merkleRoot;\n\n    /// @notice Backend server address to resolve, cancel challenges or some additional control.\n    address public backend;\n    /// @notice Token address for the STMX token, used as one of the betting currencies\n\n    // Configuration / Validation parameters for different betting logics\n    uint256 public maxChallengersEachSide;\n    uint256 public maxChallengersForPickem;\n    uint256 public minUSDBetAmount;\n    bool public applyMembershipValues;\n\n    /// @notice ChallengeId of the last challenge created\n    uint256 public latestChallengeId;\n\n    /// @notice Flag to allow or restrict creations or joining challenges\n    bool public bettingAllowed;\n\n    uint256 public constant maxAdminShareInUsd = 1000 * 10 ** 8;\n    uint256 public constant maxAdminShareSTMX = 100000 * 10 ** 18;\n    uint256 public constant maxForMinUSDBetAmount = 100 * 10 ** 8;\n    uint256 public constant maxChallengesToResolve = 10;\n    uint256 public constant maxWinnersGroupChallenge = 10;\n    uint256 public constant awaitingTimeForPublicCancel = 172800; //48 hours\n    uint256 public constant defaultOracleDecimals = 8;\n    uint256 public constant maxAdminShareThresholds = 20;\n    uint256 public constant priceFeedErrorMargin = 5;\n\n    // Internal storage for tokens, price feeds, challenges, and bets\n    EnumerableSet.AddressSet internal _allTokens;\n    EnumerableSet.AddressSet internal _oraclessTokens;\n    EnumerableSet.AddressSet internal _allowedTokens;\n\n    mapping(address => AggregatorV3Interface) internal _priceFeeds;\n    mapping(uint256 => Challenge) internal _challenges;\n    mapping(address => mapping(uint256 => UserBet)) internal _userChallengeBets;\n    mapping(address => mapping(address => uint256)) internal _withdrawables;\n    mapping(address => AdminShareRule) internal _adminShareRules;\n    mapping(address => uint256) internal _oraclessTokensMinBetAmount;\n    /// @dev Ensures the function is called only by the backend address\n    modifier onlyBackend() {\n        _onlyBackend();\n        _;\n    }\n\n    /// @dev Ensures the function is called only by the backend address or owner address\n    modifier onlyBackendOrOwner() {\n        _onlyBackendOrOwner();\n        _;\n    }\n\n    /// @notice Initializes the contract with provided addresses and tokens\n    /** @dev Sets initial configuration for the contract and allows specified tokens.\n     * @param backend_ Address of the backend server for challenge resolution and control\n     */\n    constructor(address backend_) {\n        require(backend_ != address(0), \"1\");\n\n        // Contract setup and initial token allowance\n        backend = backend_;\n        maxChallengersEachSide = 50;\n        maxChallengersForPickem = 50;\n        bettingAllowed = true;\n        minUSDBetAmount = 10 * 10 ** 8;\n    }\n\n    receive() external payable {}\n\n    /// @notice Creates a new challenge for betting\n    /** @dev Emits a `ChallengeCreated` event and calls `joinChallenge` for the challenge creator.\n     * @param token Address of the token used for betting (zero address for native currency)\n     * @param amountFromWallet Amount to be bet from the creator's wallet\n     * @param amountFromWithdrawables Amount to be bet from the creator's withdrawable balance\n     * @param decision The side of the bet the creator is taking\n     * @param challengeType The type of challenge (Individual or Group)\n     * @param startTime Start time of the challenge\n     * @param endTime End time of the challenge\n     * @param membershipLevel user membership level\n     * @param feePercentage percentage amount reduced from admin share\n     * @param referrer referrer address\n     * @param referralCommision referral will get the comission from admin share\n     * @param proof leaf nood proof\n     */\n\n    function createChallenge(\n        address token,\n        uint256 amountFromWallet,\n        uint256 amountFromWithdrawables,\n        uint8 decision,\n        ChallengeType challengeType,\n        uint256 startTime,\n        uint256 endTime,\n        uint8 membershipLevel,\n        uint256 feePercentage,\n        address referrer,\n        uint256 referralCommision,\n        bytes32[] memory proof\n    ) external payable {\n        uint256 challengeId = ++latestChallengeId;\n\n        require(startTime <= block.timestamp && endTime > block.timestamp, \"2\");\n        require(_allowedTokens.contains(token), \"3\");\n\n        Challenge storage _challenge = _challenges[challengeId];\n\n        _challenge.token = token;\n        _challenge.status = ChallengeStatus.Betting;\n        _challenge.challengeType = challengeType;\n        _challenge.startTime = startTime;\n        _challenge.endTime = endTime;\n\n        emit ChallengeCreated(\n            challengeId,\n            token,\n            msg.sender,\n            amountFromWallet + amountFromWithdrawables\n        );\n\n        joinChallenge(\n            challengeId,\n            amountFromWallet,\n            amountFromWithdrawables,\n            decision,\n            membershipLevel,\n            feePercentage,\n            referrer,\n            referralCommision,\n            proof\n        );\n    }\n\n    /// @notice Allows users to join an existing challenge with their bet\n    /** @dev Emits a `ChallengeJoined` event if the join is successful.\n     * @param challengeId ID of the challenge to join\n     * @param amountFromWallet Amount to be bet from the user's wallet\n     * @param amountFromWithdrawables Amount to be bet from the user's withdrawable balance\n     * @param decision The side of the bet the user is taking\n     * @param membershipLevel user membership level\n     * @param feePercentage percentage amount reduced from admin share\n     * @param referrer referrer address\n     * @param referralCommision referral will get the comission from admin share\n     * @param proof leaf nood proof\n     */\n    function joinChallenge(\n        uint256 challengeId,\n        uint256 amountFromWallet,\n        uint256 amountFromWithdrawables,\n        uint8 decision,\n        uint8 membershipLevel,\n        uint256 feePercentage,\n        address referrer,\n        uint256 referralCommision,\n        bytes32[] memory proof\n    ) public payable {\n        Challenge memory challengeDetails = _challenges[challengeId];\n\n        _assertChallengeExistence(challengeId);\n        if (challengeDetails.challengeType == ChallengeType.Group) {\n            require(decision == 1, \"4\");\n        } else {\n            require(decision == 1 || decision == 2, \"5\");\n        }\n        require(_userChallengeBets[msg.sender][challengeId].decision == 0, \"6\");\n\n        _joinChallenge(\n            challengeId,\n            amountFromWallet,\n            amountFromWithdrawables,\n            decision,\n            membershipLevel,\n            feePercentage,\n            referrer,\n            referralCommision,\n            proof\n        );\n    }\n\n    /// @notice Allows users to increase the bet amount\n    /** @dev Emits a `BetAmountIncreased` event if the join is successful.\n     * @param challengeId ID of the challenge for which user wants to increase the bet amount\n     * @param amountFromWallet Amount to be bet from the user's wallet\n     * @param amountFromWithdrawables Amount to be bet from the user's withdrawable balance\n     * @param membershipLevel user membership level\n     * @param feePercentage percentage amount reduced from admin share\n     * @param referrer referrer address\n     * @param referralCommision referral will get the comission from admin share\n     * @param proof leaf nood proof\n     */\n    function increaseBetAmount(\n        uint256 challengeId,\n        uint256 amountFromWallet,\n        uint256 amountFromWithdrawables,\n        uint8 membershipLevel,\n        uint256 feePercentage,\n        address referrer,\n        uint256 referralCommision,\n        bytes32[] memory proof\n    ) public payable {\n        _assertChallengeExistence(challengeId);\n        UserBet storage betDetails = _userChallengeBets[msg.sender][challengeId];\n        require(betDetails.decision != 0, \"7\");\n        Challenge storage challengeDetails = _challenges[challengeId];\n\n        (\n            uint256 amount,\n            uint256 adminShare,\n            uint256 referralCommisionAmount\n        ) = _calculateChallengeAmounts(\n                challengeDetails.token,\n                amountFromWallet,\n                amountFromWithdrawables,\n                challengeId,\n                membershipLevel,\n                feePercentage,\n                referrer,\n                referralCommision,\n                proof,\n                false\n            );\n\n        betDetails.amount += amount;\n        betDetails.adminShare += adminShare;\n        betDetails.referralCommision += referralCommisionAmount;\n\n        if (betDetails.decision == 1) {\n            challengeDetails.amountFor += amount;\n        } else {\n            challengeDetails.amountAgainst += amount;\n        }\n\n        emit BetAmountIncreased(\n            challengeId,\n            betDetails.amount,\n            amount,\n            msg.sender,\n            challengeDetails.token\n        );\n    }\n\n    /// @notice Checks if a challenge with the given ID exists\n    /** @dev A challenge is considered to exist if its ID is greater than 0 and less than or equal to the latest challenge ID.\n     * @param challengeId The ID of the challenge to check.\n     * @return bool Returns true if the challenge exists, false otherwise.\n     */\n    function challengeExists(uint256 challengeId) public view returns (bool) {\n        return challengeId > 0 && challengeId <= latestChallengeId;\n    }\n\n    /// @notice Owner can update the root node of merkle\n    /** @dev This function will allow the owner to update the root node of merkle tree\n     * @param _root root node of merkle tree\n     */\n    function updateRoot(bytes32 _root) public onlyBackend {\n        merkleRoot = _root;\n        emit MerkleRootUpdated(_root, msg.sender);\n    }\n\n    /// @notice Withdraws available tokens for the sender\n    /** @dev This function allows users to withdraw their available tokens from the contract. It uses the\n     * nonReentrant modifier from OpenZeppelin to prevent reentrancy attacks. A `UserWithdrawn` event is\n     * emitted upon a successful withdrawal.\n     * @param token The address of the token to be withdrawn. Use the zero address for the native currency.\n     *\n     * Requirements:\n     * - The sender must have a positive withdrawable balance for the specified token.\n     * Emits a {UserWithdrawn} event indicating the token, amount, and the user who performed the withdrawal.\n     */\n    function withdraw(address token) external nonReentrant {\n        uint256 amount = _withdrawables[msg.sender][token];\n        require(amount > 0, \"8\");\n        delete _withdrawables[msg.sender][token];\n        _withdraw(token, msg.sender, amount);\n\n        emit UserWithdrawn(token, amount, msg.sender);\n    }\n\n    /// @notice Resolves multiple challenges with their final outcomes\n    /** @dev This function is called by the backend to resolve challenges that have reached their end time\n     * and are in the awaiting status. It updates the status of each challenge based on its final outcome.\n     * Only challenges of type `Individual` can be resolved using this function. A `ChallengeResolved` event is\n     * emitted for each challenge that is resolved. This function uses the `onlyBackend` modifier to ensure\n     * that only authorized backend addresses can call it, and `nonReentrant` to prevent reentrancy attacks.\n     * @param challengeIds Array of IDs of the challenges to be resolved.\n     * @param finalOutcomes Array of final outcomes for each challenge, where outcomes are defined as follows:\n     * - 1: Side A wins,\n     * - 2: Side B wins,\n     * - 3: Draw.\n     *\n     * Requirements:\n     * - The lengths of `challengeIds` and `finalOutcomes` must be the same and not exceed `maxChallengesToResolve`.\n     * - Each challenge must exist, be in the `Awaiting` status, and be of type `Individual`.\n     * - Each `finalOutcome` must be within the range [1,3].\n     */\n    function resolveChallenge(\n        uint256[] memory challengeIds,\n        uint8[] memory finalOutcomes\n    ) external onlyBackend nonReentrant {\n        uint256 challengeIdsLength = challengeIds.length;\n        require(\n            challengeIdsLength <= maxChallengesToResolve &&\n                challengeIdsLength == finalOutcomes.length,\n            \"9\"\n        );\n        for (uint256 i = 0; i < challengeIdsLength; ++i) {\n            uint256 challengeId = challengeIds[i];\n            Challenge storage challengeDetails = _challenges[challengeId];\n            require(challengeDetails.challengeType == ChallengeType.Individual, \"10\");\n            uint8 finalOutcome = finalOutcomes[i];\n            require(finalOutcome > 0 && finalOutcome < 4, \"11\");\n            _assertChallengeExistence(challengeId);\n            _assertResolveableStatus(challengeId);\n\n            challengeDetails.status = ChallengeStatus(finalOutcome + 4);\n\n            emit ChallengeResolved(challengeId, finalOutcome);\n\n            if (finalOutcome == 3) {\n                _cancelBets(challengeId, 0);\n            } else {\n                _calculateChallenge(challengeId, finalOutcome);\n            }\n        }\n    }\n\n    /// @notice Cancels a user's participation in a challenge\n    /** @dev This function allows the backend to cancel a user's participation in a challenge, refunding their bet.\n     * It can only be called by the backend and is protected against reentrancy attacks. The function checks if the\n     * challenge exists and ensures that the challenge is either in the `Awaiting` or `Betting` status, implying that\n     * it has not been resolved yet. Additionally, it verifies that the user has indeed placed a bet on the challenge.\n     * After these checks, it calls an internal function `_cancelParticipation` to handle the logic for cancelling the\n     * user's participation and processing the refund.\n     * @param user The address of the user whose participation is to be cancelled.\n     * @param challengeId The ID of the challenge from which the user's participation is to be cancelled.\n     *\n     * Requirements:\n     * - The challenge must exist and be in a state where participation can be cancelled (`Awaiting` or `Betting`).\n     * - The user must have participated in the challenge.\n     * Uses the `onlyBackend` modifier to ensure only the backend can invoke this function, and `nonReentrant` for security.\n     */\n    function cancelParticipation(\n        address user,\n        uint256 challengeId,\n        uint8 cancelType\n    ) external onlyBackend nonReentrant {\n        _assertChallengeExistence(challengeId);\n        _assertCancelableStatus(challengeId);\n        require(_userChallengeBets[user][challengeId].decision != 0, \"12\");\n\n        _cancelParticipation(user, challengeId, cancelType);\n    }\n\n    /// @notice Resolves a group challenge by determining winners and distributing profits\n    /** @dev This function is used for resolving group challenges specifically, where multiple participants can win.\n     * It can only be executed by the backend and is protected against reentrancy. The function ensures that the\n     * challenge exists, is currently awaiting resolution, and is of the `Group` challenge type. It then validates\n     * that the lengths of the winners and profits arrays match and do not exceed the maximum number of winners allowed.\n     * Each winner's address must have participated in the challenge, and winners must be unique. The total of the profits\n     * percentages must equal 100. Once validated, the challenge status is updated, and profits are calculated and\n     * distributed to the winners based on the provided profits percentages.\n     * @param challengeId The ID of the group challenge to resolve.\n     * @param winners An array of addresses of the winners of the challenge.\n     * @param profits An array of profit percentages corresponding to each winner, summing to 100.\n     *\n     * Requirements:\n     * - The challenge must exist, be in the `Awaiting` status, and be of the `Group` type.\n     * - The `winners` and `profits` arrays must have the same length and comply with the maximum winners limit.\n     * - The sum of the `profits` percentages must equal 100.\n     * Emits a {ChallengeResolved} event with the challenge ID and a hardcoded outcome of `5`, indicating group resolution.\n     */\n    function resolveGroupChallenge(\n        uint256 challengeId,\n        address[] calldata winners,\n        uint256[] calldata profits\n    ) external onlyBackend nonReentrant {\n        _assertChallengeExistence(challengeId);\n        _assertResolveableStatus(challengeId);\n        Challenge storage challengeDetails = _challenges[challengeId];\n        require(challengeDetails.challengeType == ChallengeType.Group, \"13\");\n        uint256 winnersLength = winners.length;\n        require(\n            winnersLength == profits.length && winnersLength <= maxWinnersGroupChallenge,\n            \"14\"\n        );\n\n        uint256 totalProfit = 0;\n        for (uint256 i = 0; i < winnersLength; ++i) {\n            totalProfit += profits[i];\n            if (i > 0) {\n                require(winners[i] > winners[i - 1], \"16\");\n            }\n            require(_userChallengeBets[winners[i]][challengeId].decision != 0, \"15\");\n        }\n\n        require(totalProfit == (100 * DECIMAL), \"17\");\n\n        challengeDetails.status = ChallengeStatus.ResolvedFor;\n\n        emit ChallengeResolved(challengeId, 5);\n\n        _calculateGroupChallenge(challengeId, winners, profits);\n    }\n\n    /// @notice Cancels a challenge and refunds all participants\n    /** @dev This function allows the backend to cancel a challenge if it's either awaiting resolution or still open for betting.\n     * It ensures that the challenge exists and is in a cancelable state (either `Awaiting` or `Betting`). Upon cancellation,\n     * the challenge's status is updated to `Canceled`, and all bets placed on the challenge are refunded to the participants.\n     * This function is protected by the `onlyBackend` modifier to restrict access to the backend address, and `nonReentrant`\n     * to prevent reentrancy attacks.\n     * @param challengeId The ID of the challenge to be cancelled.\n     * @param cancelType 0-Return bet amount without admin shares 1-Return bet amount with admin shares.\n     *\n     * Requirements:\n     * - The challenge must exist and be in a state that allows cancellation (`Awaiting` or `Betting`).\n     * Emits a {ChallengeCanceled} event upon successful cancellation, indicating which challenge was cancelled.\n     */\n    function cancelChallenge(\n        uint256 challengeId,\n        uint8 cancelType\n    ) external onlyBackendOrOwner nonReentrant {\n        _assertChallengeExistence(challengeId);\n        _assertCancelableStatus(challengeId);\n        Challenge storage challengeDetails = _challenges[challengeId];\n        if (msg.sender == owner()) {\n            require(\n                (challengeDetails.endTime + awaitingTimeForPublicCancel) < block.timestamp,\n                \"18\"\n            );\n        }\n\n        challengeDetails.status = ChallengeStatus.Canceled;\n\n        emit ChallengeCanceled(challengeId);\n\n        _cancelBets(challengeId, cancelType);\n    }\n\n    /// @notice Toggles the ability for users to place bets on challenges\n    /** @dev This function allows the contract owner to enable or disable betting across the platform.\n     * It's a straightforward toggle that sets the `bettingAllowed` state variable based on the input.\n     * Access to this function is restricted to the contract owner through the `onlyOwner` modifier from\n     * OpenZeppelin's Ownable contract, ensuring that only the owner can change the betting policy.\n     * @param value_ A boolean indicating whether betting should be allowed (`true`) or not (`false`).\n     */\n    function allowBetting(bool value_) external onlyOwner {\n        bettingAllowed = value_;\n        emit BettingAllowed(value_, msg.sender);\n    }\n\n    /// @notice Toggles the ability for membership discount and referral comisions\n    /** @dev This function will allow the owner to toggle the apply membership values\n     * @param value_ true to apply membership values and false for disable membership values\n     */\n    function updateApplyMembershipValues(bool value_) external onlyOwner {\n        applyMembershipValues = value_;\n        emit MembershipApplied(value_, msg.sender);\n    }\n\n    /// @notice Updates the minimum USD betting amount.\n    /// @dev Can only be called by the contract owner.\n    /// @param value_ The new minimum betting amount in USD.\n    function changeMinUSDBettingAmount(uint256 value_) external onlyOwner {\n        require(value_ >= minUSDBetAmount && value_ <= maxForMinUSDBetAmount, \"28\");\n        minUSDBetAmount = value_;\n        emit MinUSDBettingAmountUpdated(value_, msg.sender);\n    }\n\n    /// @notice Updates the address of the backend responsible for challenge resolutions and administrative actions\n    /** @dev This function allows the contract owner to change the backend address to a new one.\n     * Ensures the new backend address is not the zero address to prevent rendering the contract unusable.\n     * The function is protected by the `onlyOwner` modifier, ensuring that only the contract owner has the authority\n     * to update the backend address. This is crucial for maintaining the integrity and security of the contract's\n     * administrative functions.\n     * @param backend_ The new address to be set as the backend. It must be a non-zero address.\n     *\n     * Requirements:\n     * - The new backend address cannot be the zero address, ensuring that the function call has meaningful intent.\n     */\n    function changeBackend(address backend_) external onlyOwner {\n        require(backend_ != address(0), \"1\");\n        backend = backend_;\n        emit BackendChanged(backend_, msg.sender);\n    }\n\n    /// @notice Allows a batch of tokens to be used for betting, with optional price feeds for valuation\n    /** @dev This function permits the contract owner to add tokens to the list of those allowed for betting.\n     * It also associates Chainlink price feeds with tokens, enabling the conversion of bets to a common value basis for calculations.\n     * Tokens without a specified price feed (address(0)) are considered to have fixed or known values and are added to a separate list.\n     * The function ensures that each token in the input array has a corresponding price feed address (which can be the zero address).\n     * The `onlyOwner` modifier restricts this function's execution to the contract's owner, safeguarding against unauthorized token addition.\n     * @param tokens An array of token addresses to be allowed for betting.\n     * @param priceFeeds An array of Chainlink price feed addresses corresponding to the tokens. Use address(0) for tokens without a need for price feeds.\n     * @param minBetAmounts An array of amount corresponding to every token being allowed, the value for oracless tokens will be considers only in this method.\n     * Requirements:\n     * - The lengths of the `tokens` and `priceFeeds` arrays must match to ensure each token has a corresponding price feed address.\n     */\n    function allowTokens(\n        address[] memory tokens,\n        address[] memory priceFeeds,\n        uint256[] memory minBetAmounts\n    ) public onlyOwner {\n        uint256 tokensLength = tokens.length;\n        uint256 priceFeedLength = priceFeeds.length;\n        uint256 minBetAmountsLength = minBetAmounts.length;\n        require(tokensLength == priceFeedLength && tokensLength == minBetAmountsLength, \"9\");\n\n        for (uint256 i = 0; i < tokensLength; ++i) {\n            require(!_allowedTokens.contains(tokens[i]), \"46\");\n\n            if (priceFeeds[i] == address(0)) {\n                require(minBetAmounts[i] > 0, \"20\");\n                _oraclessTokensMinBetAmount[tokens[i]] = minBetAmounts[i];\n                _oraclessTokens.add(tokens[i]);\n            } else {\n                isValidPriceFeed(priceFeeds[i], priceFeedErrorMargin);\n                _priceFeeds[tokens[i]] = AggregatorV3Interface(priceFeeds[i]);\n            }\n        }\n        _allowedTokens.add(tokens);\n        _allTokens.add(tokens);\n\n        emit TokenAllowed(tokens, priceFeeds, minBetAmounts, msg.sender);\n    }\n\n    /// @notice Removes a batch of tokens from being allowed for betting and deletes associated price feeds\n    /** @dev This function enables the contract owner to restrict certain tokens from being used in betting activities.\n     * It involves removing tokens from the list of allowed tokens, potentially removing them from the list of tokens\n     * without a Chainlink price feed (oracless tokens), and deleting their associated price feeds if any were set.\n     * This is a crucial administrative function for managing the tokens that can be used on the platform, allowing\n     * for adjustments based on compliance, liquidity, or other operational considerations.\n     * Execution is restricted to the contract's owner through the `onlyOwner` modifier, ensuring that token restrictions\n     * can only be imposed by authorized parties.\n     * @param tokens An array of token addresses that are to be restricted from use in betting.\n     */\n    function restrictTokens(address[] memory tokens) external onlyOwner {\n        uint256 tokensLength = tokens.length;\n        for (uint256 i = 0; i < tokensLength; ++i) {\n            require(_allowedTokens.contains(tokens[i]), \"47\");\n            delete _priceFeeds[tokens[i]];\n            delete _oraclessTokensMinBetAmount[tokens[i]];\n        }\n\n        _allowedTokens.remove(tokens);\n        _oraclessTokens.remove(tokens);\n\n        emit TokenRestricted(tokens, msg.sender);\n    }\n\n    /// @notice Sets the rules for administrative shares on betting winnings based on thresholds\n    /** @dev Allows the contract owner to define how administrative shares (a portion of betting winnings) are calculated.\n     * This can be configured differently for the STMX token versus other tokens, as indicated by the `isSTMX` flag.\n     * Each entry in the `thresholds` and `sharesInUSD` arrays defines a tier: if the winnings fall into a certain threshold,\n     * the corresponding percentage is applied as the administrative share. The function enforces ascending order for thresholds\n     * and ensures that the share in USD do not exceed a maximum limit. This setup allows for flexible configuration\n     * of administrative fees based on the amount won.\n     * Access is restricted to the contract owner through the `onlyOwner` modifier, ensuring that only they can set these rules.\n     * @param thresholds An array of threshold values, each representing the lower bound of a winnings bracket.\n     * @param sharesInUSD An array of sharesInUSD corresponding to each threshold, defining the admin share for that bracket.\n     * @param token Token address.\n     * @param isSTMX A boolean flag indicating whether these rules apply to the STMX token (`true`) or other tokens (`false`).\n     *\n     * Requirements:\n     * - The `thresholds` and `sharesInUSD` arrays must be of equal length and not empty, ensuring each threshold has a corresponding percentage.\n     * - Thresholds must be in ascending order, and all sharesInUSD must not exceed the predefined maximum admin share percentage.\n     */\n    function setAdminShareRules(\n        uint256[] memory thresholds,\n        uint256[] memory sharesInUSD,\n        address token,\n        bool isSTMX\n    ) external onlyOwner {\n        require(_allTokens.contains(token), \"48\");\n        uint256 thresholdsLength = thresholds.length;\n        uint256 sharesInUSDLength = sharesInUSD.length;\n        require(\n            thresholdsLength > 0 &&\n                thresholdsLength == sharesInUSDLength &&\n                thresholdsLength <= maxAdminShareThresholds,\n            \"9\"\n        );\n\n        uint256 maxAdminShare = maxAdminShareInUsd;\n\n        for (uint256 i = 0; i < thresholdsLength - 1; ++i) {\n            require(thresholds[i] <= thresholds[i + 1], \"21\");\n            if (isSTMX) {\n                maxAdminShare = maxAdminShareSTMX;\n            }\n            require(sharesInUSD[i] <= maxAdminShare, \"22\");\n        }\n\n        if (isSTMX) {\n            maxAdminShare = maxAdminShareSTMX;\n        }\n\n        require(sharesInUSD[sharesInUSDLength - 1] <= maxAdminShare, \"22\");\n\n        _adminShareRules[token] = AdminShareRule({\n            sharesInUSD: sharesInUSD,\n            thresholds: thresholds,\n            isSTMX: isSTMX\n        });\n\n        emit AdminShareRulesUpdated(_adminShareRules[token], msg.sender);\n    }\n\n    /// @notice Update the maximum challenger limits\n    /**\n     * Access is restricted to the contract owner through the `onlyOwner` modifier, ensuring that only they can set these rules.\n     * @param _maxChallengersEachSide maximun limit of challengers can join in each side.\n     * @param _maxChallengersForPickem maximun limit of challengers can join for pickem.\n     */\n    function updateMaxChallengers(\n        uint256 _maxChallengersEachSide,\n        uint256 _maxChallengersForPickem\n    ) external onlyOwner {\n        require(\n            _maxChallengersForPickem > 0 &&\n                _maxChallengersForPickem <= 50 &&\n                _maxChallengersEachSide > 0 &&\n                _maxChallengersEachSide <= 50,\n            \"23\"\n        );\n        maxChallengersForPickem = _maxChallengersForPickem;\n        maxChallengersEachSide = _maxChallengersEachSide;\n\n        emit MaxChallengersUpdated(_maxChallengersEachSide, _maxChallengersForPickem, msg.sender);\n    }\n\n    /// @notice Owner is able to deposit tokens in SC under the owner's withdrawbales, to use the owner withdrawables in user's bets\n    /**\n     * Access is restricted to the contract owner through the `onlyOwner` modifier, ensuring that only owner can deposit amount to SC.\n     * @param _amount amount of tokens.\n     * @param _token token address.\n     */\n    function debitInSC(uint256 _amount, address _token) external payable onlyOwner {\n        require(_allowedTokens.contains(_token), \"3\");\n        require(_amount > 0, \"28\");\n        if (_token == address(0)) {\n            require(msg.value == _amount, \"29\");\n        } else {\n            require(msg.value == 0, \"34\");\n            IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n        }\n        _withdrawables[msg.sender][_token] += _amount;\n        emit DebitedInSC(_withdrawables[msg.sender][_token], msg.sender);\n    }\n\n    /// @notice Retrieves the administrative share rules for either the STMX token or other tokens\n    /** @dev This function provides external access to the administrative share rules that have been set up for either\n     * the STMX token (if `isSTMX` is true) or for other tokens (if `isSTMX` is false). These rules define the thresholds\n     * and corresponding percentages that determine how administrative shares are calculated from betting winnings.\n     * The function returns two arrays: one for the thresholds and one for the percentages, which together outline the\n     * structure of admin shares based on the amount of winnings.\n     * @param token A boolean flag indicating whether to retrieve the rules for the STMX token (`true`) or other tokens (`false`).\n     * @return thresholds An array of uint256 representing the winnings thresholds for admin shares calculation.\n     * @return sharesInUSD An array of uint256 representing the admin share in USD for each corresponding threshold.\n     */\n    function getAdminShareRules(\n        address token\n    )\n        external\n        view\n        returns (uint256[] memory thresholds, uint256[] memory sharesInUSD, bool isSTMX)\n    {\n        AdminShareRule storage rule = _adminShareRules[token];\n        return (rule.thresholds, rule.sharesInUSD, rule.isSTMX);\n    }\n\n    /// @notice Retrieves the list of tokens currently allowed for betting\n    /** @dev This function provides external visibility into which tokens are currently permitted for use in betting within the platform.\n     * It leverages the EnumerableSet library from OpenZeppelin to handle the dynamic array of addresses representing the allowed tokens.\n     * This is particularly useful for interfaces or external contracts that need to verify or display the tokens users can bet with.\n     * @return An array of addresses, each representing a token that is allowed for betting.\n     */\n    function getAllowedTokens() external view returns (address[] memory) {\n        return _allowedTokens.values();\n    }\n\n    /// @notice Fetches detailed information about a specific challenge by its ID\n    /** @dev This function provides access to the details of a given challenge, including its current status, which is\n     * dynamically determined based on the challenge's timing and resolution state. It's essential for external callers\n     * to be able to retrieve comprehensive data on a challenge, such as its participants, status, and betting amounts,\n     * to properly interact with or display information about the challenge. The function checks that the requested\n     * challenge exists before attempting to access its details.\n     * @param challengeId The unique identifier of the challenge for which details are requested.\n     * @return challengeDetails A `Challenge` struct containing all relevant data about the challenge, including an updated status.\n     *\n     * Requirements:\n     * - The challenge must exist, as indicated by its ID being within the range of created challenges.\n     */\n    function getChallengeDetails(\n        uint256 challengeId\n    ) external view returns (Challenge memory challengeDetails) {\n        _assertChallengeExistence(challengeId);\n        challengeDetails = _challenges[challengeId];\n\n        challengeDetails.status = _challengeStatus(challengeId);\n    }\n\n    /// @notice Retrieves the bet details placed by a specific user on a particular challenge\n    /** @dev This function allows anyone to view the details of a bet made by a user on a specific challenge,\n     * including the amount bet and the side the user has chosen. It's crucial for enabling users or interfaces\n     * to confirm the details of participation in challenges and to understand the stakes involved. This function\n     * directly accesses the mapping of user bets based on the user address and challenge ID, returning the\n     * corresponding `UserBet` struct.\n     * @param challengeId The ID of the challenge for which the bet details are being queried.\n     * @param user The address of the user whose bet details are requested.\n     * @return A `UserBet` struct containing the amount of the bet and the decision (side chosen) by the user for the specified challenge.\n     */\n    function getUserBet(uint256 challengeId, address user) external view returns (UserBet memory) {\n        return _userChallengeBets[user][challengeId];\n    }\n\n    /// @notice Provides a list of tokens and corresponding amounts available for withdrawal by a specific user\n    /** @dev This function compiles a comprehensive view of all tokens that a user has available to withdraw,\n     * including winnings, refunds, or other credits due to the user. It iterates over the entire list of tokens\n     * recognized by the contract (not just those currently allowed for betting) to ensure that users can access\n     * any funds owed to them, regardless of whether a token's betting status has changed. This is essential for\n     * maintaining transparency and access to funds for users within the platform.\n     * @param user The address of the user for whom withdrawable balances are being queried.\n     * @return tokens An array of token addresses, representing each token that the user has a balance of.\n     * @return amounts An array of uint256 values, each corresponding to the balance of the token at the same index in the `tokens` array.\n     */\n    function getUserWithdrawables(\n        address user\n    ) external view returns (address[] memory tokens, uint256[] memory amounts) {\n        uint256 allTokensLength = _allTokens.length();\n\n        tokens = new address[](allTokensLength);\n        amounts = new uint256[](allTokensLength);\n\n        for (uint256 i = 0; i < allTokensLength; ++i) {\n            tokens[i] = _allTokens.at(i);\n            amounts[i] = _withdrawables[user][tokens[i]];\n        }\n    }\n\n    /// @notice verify the membership proof from merkle tree\n    /** @dev If merkle proof got verified it will return true otherwise false\n     * @param proof leaf nood proof\n     * @param membershipLevel user membership level\n     * @param feePercentage percentage amount reduced from admin share\n     * @param referrer referrer address\n     * @param referralCommision referral will get the comission from admin share\n     * @return bool Returns true if proof got verified, false otherwise.\n     */\n    function verifyMembership(\n        bytes32[] memory proof,\n        uint256 membershipLevel,\n        uint256 feePercentage,\n        address referrer,\n        uint256 referralCommision\n    ) internal view returns (bool) {\n        bytes32 leaf = keccak256(\n            bytes.concat(\n                keccak256(\n                    abi.encode(\n                        msg.sender,\n                        membershipLevel,\n                        feePercentage,\n                        referrer,\n                        referralCommision\n                    )\n                )\n            )\n        );\n        require(MerkleProof.verify(proof, merkleRoot, leaf), \"45\");\n        return true;\n    }\n\n    /**\n     * @dev Allows a user to join a challenge, handling the financial transactions involved, including admin fees.\n     * This internal function processes a user's bet on a challenge, taking into account amounts from the user's wallet and\n     * withdrawable balance. It calculates and deducts an admin share based on the total bet amount and updates the challenge\n     * and user's records accordingly.\n     *\n     * @param challengeId The unique identifier of the challenge the user wishes to join.\n     * @param amountFromWallet The portion of the user's bet that will be taken from their wallet.\n     * @param amountFromWithdrawables The portion of the user's bet that will be taken from their withdrawable balance.\n     * @param decision Indicates whether the user is betting for (1) or against (2) in the challenge; for group challenges, this is ignored.\n     * @param membershipLevel user membership level\n     * @param feePercentage percentage amount reduced from admin share\n     * @param referrer referrer address\n     * @param referralCommision referral will get the comission from admin share\n     * @param proof leaf nood proof\n     *\n     * The function enforces several checks and conditions:\n     * - The total bet amount must exceed the admin share calculated for the transaction.\n     * - The user must have sufficient withdrawable balance if opting to use it.\n     * - Transfers the required amount from the user's wallet if applicable.\n     * - Updates the admin's withdrawable balance with the admin share.\n     * - Adds the user to the challenge participants and updates the challenge's total amount for or against based on the user's decision.\n     * - Ensures the number of participants does not exceed the maximum allowed.\n     * - Records the user's bet details.\n     *\n     * Emits a `ChallengeJoined` event upon successful joining of the challenge.\n     * Emits an `AdminShareCalculated` event to indicate the admin share calculated from the user's bet.\n     *\n     * Requirements:\n     * - The sum of `amountFromWallet` and `amountFromWithdrawables` must be greater than the admin share.\n     * - If using withdrawables, the user must have enough balance.\n     * - The challenge token must be transferred successfully from the user's wallet if necessary.\n     * - The challenge's participants count for either side must not exceed `maxChallengersEachSide`.\n     *\n     * Notes:\n     * - This function uses the nonReentrant modifier to prevent reentry attacks.\n     * - It supports participation in both individual and group challenges.\n     * - Admin shares are calculated and deducted from the user's total bet amount to ensure fair administration fees.\n     */\n    function _joinChallenge(\n        uint256 challengeId,\n        uint256 amountFromWallet,\n        uint256 amountFromWithdrawables,\n        uint8 decision,\n        uint8 membershipLevel,\n        uint256 feePercentage,\n        address referrer,\n        uint256 referralCommision,\n        bytes32[] memory proof\n    ) internal nonReentrant {\n        Challenge storage _challenge = _challenges[challengeId];\n        (\n            uint256 amount,\n            uint256 adminShare,\n            uint256 referralCommisionAmount\n        ) = _calculateChallengeAmounts(\n                _challenge.token,\n                amountFromWallet,\n                amountFromWithdrawables,\n                challengeId,\n                membershipLevel,\n                feePercentage,\n                referrer,\n                referralCommision,\n                proof,\n                true\n            );\n\n        uint256 participants;\n\n        // Depending on the decision, update challenge state and user bet details\n        if (decision == 1 || _challenge.challengeType == ChallengeType.Group) {\n            _challenge.usersFor.push(msg.sender);\n            participants = _challenge.usersFor.length;\n            _challenge.amountFor += amount;\n        } else {\n            _challenge.usersAgainst.push(msg.sender);\n            participants = _challenge.usersAgainst.length;\n            _challenge.amountAgainst += amount;\n        }\n\n        // Ensure the number of participants does not exceed the maximum allowed per side\n        if (_challenge.challengeType == ChallengeType.Group) {\n            require(participants <= maxChallengersForPickem, \"30\");\n        } else {\n            require(participants <= maxChallengersEachSide, \"44\");\n        }\n\n        // Record user's bet details for the challenge\n        if (_challenge.challengeType == ChallengeType.Group) {\n            decision = 1;\n        }\n        _userChallengeBets[msg.sender][challengeId] = UserBet({\n            amount: amount,\n            decision: decision,\n            adminShare: adminShare,\n            referrer: referrer,\n            referralCommision: referralCommisionAmount\n        });\n\n        // Emit events for challenge joined and admin received shares\n        emit ChallengeJoined(\n            challengeId,\n            amount,\n            msg.sender,\n            _challenge.token,\n            amountFromWallet + amountFromWithdrawables\n        );\n        emit AdminShareCalculated(challengeId, _challenge.token, adminShare);\n    }\n\n    /// @notice calculate the challenge bet amount\n    /**\n     * @param challengeToken token in which user tried to bet\n     * @param amountFromWallet amount which will be deducted from the users wallet\n     * @param amountFromWithdrawables amount which will be deducted from the users withdrawables\n     * @param membershipLevel user membership level\n     * @param feePercentage percentage amount reduced from admin share \n     * @param referrer referrer address\n     * @param referralCommision referral will get the comission from admin share\n     * @param proof leaf nood proof\n     * @return amount of the bet\n     * @return admin share on bet amount\n     \n     */\n    function _calculateChallengeAmounts(\n        address challengeToken,\n        uint256 amountFromWallet,\n        uint256 amountFromWithdrawables,\n        uint256 challengeId,\n        uint8 membershipLevel,\n        uint256 feePercentage,\n        address referrer,\n        uint256 referralCommision,\n        bytes32[] memory proof,\n        bool checkMinUsdAmounts\n    ) internal returns (uint256, uint256, uint256) {\n        require(bettingAllowed, \"31\");\n        require(_challengeStatus(challengeId) == ChallengeStatus.Betting, \"32\");\n\n        if (challengeToken == address(0)) {\n            require(amountFromWallet == msg.value, \"33\");\n        } else {\n            require(msg.value == 0, \"34\");\n        }\n        uint256 amount = amountFromWallet + amountFromWithdrawables;\n        uint256 adminShare = _calculateAdminShare(challengeToken, amount);\n        uint256 referralCommisionAmount;\n        if (applyMembershipValues) {\n            verifyMembership(proof, membershipLevel, feePercentage, referrer, referralCommision);\n            adminShare = (adminShare * ((100 * 10 ** 20) - feePercentage)) / (100 * 10 ** 20);\n\n            if (referrer != address(0)) {\n                referralCommisionAmount = adminShare; // admin share amount with refferral commision amount\n\n                // deduct the referral commission from admin share\n                adminShare =\n                    (adminShare * ((100 * 10 ** 20) - referralCommision)) /\n                    (100 * 10 ** 20);\n                referralCommisionAmount -= adminShare;\n            }\n        }\n        // Ensure that the total amount is greater than the admin share per challenge\n        require(amount > adminShare, \"35\");\n        uint256 valueAmount = (_getValue(challengeToken) * amount) /\n            10 ** (challengeToken == address(0) ? 18 : challengeToken.decimals());\n\n        if (_oraclessTokens.contains(challengeToken)) {\n            require(valueAmount >= _oraclessTokensMinBetAmount[challengeToken], \"28\");\n        } else {\n            require(!checkMinUsdAmounts || valueAmount >= minUSDBetAmount, \"28\");\n        }\n\n        // Deduct the amount from the withdrawables if bet amount is from withdrawables\n        if (amountFromWithdrawables > 0) {\n            require(_withdrawables[msg.sender][challengeToken] >= amountFromWithdrawables, \"36\");\n            _withdrawables[msg.sender][challengeToken] -= amountFromWithdrawables;\n        }\n\n        // Transfer the amount from the user's wallet to the contract\n        if (challengeToken != address(0)) {\n            IERC20(challengeToken).safeTransferFrom(msg.sender, address(this), amountFromWallet);\n        }\n\n        amount -= (adminShare + referralCommisionAmount);\n        return (amount, adminShare, referralCommisionAmount);\n    }\n\n    /**\n     * @dev Calculates the results of a challenge based on the final outcome and updates the participants' balances accordingly.\n     * This internal function takes the final outcome of a challenge and determines the winners and losers, redistributing the\n     * pooled amounts between participants based on their initial bets. It ensures that the winnings are proportionally distributed\n     * to the winners from the total amount bet by the losers.\n     *\n     * @param challengeId The unique identifier of the challenge to calculate results for.\n     * @param finalOutcome The final outcome of the challenge represented as a uint8 value. A value of `1` indicates\n     * that the original \"for\" side wins, while `2` indicates that the \"against\" side wins.\n     *\n     * The function performs the following steps:\n     * - Identifies the winning and losing sides based on `finalOutcome`.\n     * - Calculates the total winning amount for each winning participant based on their bet proportion.\n     * - Updates the `_withdrawables` mapping to reflect the winnings for each winning participant.\n     * - Prepares data for the losing participants but does not adjust their balances as their amounts are considered lost.\n     *\n     * Emits a `ChallengeFundsMoved` event indicating the redistribution of funds following the challenge's conclusion.\n     * This event provides detailed arrays of winning and losing users, alongside the amounts won or lost.\n     *\n     * Requirements:\n     * - The challenge identified by `challengeId` must exist within the `_challenges` mapping.\n     * - The `finalOutcome` must correctly reflect the challenge's outcome, with `1` for a win by the original \"for\" side\n     *   and `2` for a win by the \"against\" side.\n     *\n     * Notes:\n     * - This function is critical for ensuring fair payout to the winners based on the total amount bet by the losers.\n     * - It assumes that the `finalOutcome` has been determined by an external process or oracle that is not part of this function.\n     */\n    function _calculateChallenge(uint256 challengeId, uint8 finalOutcome) internal {\n        Challenge storage _challenge = _challenges[challengeId];\n        address challengeToken = _challenge.token;\n        uint256 adminShare;\n\n        // Determine the arrays of winning and losing users, and their respective amounts\n        address[] storage usersWin = _challenge.usersFor;\n        address[] storage usersLose = _challenge.usersAgainst;\n        uint256 winAmount = _challenge.amountFor;\n        uint256 loseAmount = _challenge.amountAgainst;\n\n        if (finalOutcome == 2) {\n            // If final outcome is lose, swap win and lose arrays\n            (usersWin, usersLose) = (usersLose, usersWin);\n            (winAmount, loseAmount) = (loseAmount, winAmount);\n        }\n\n        uint256 usersWinLength = usersWin.length;\n        uint256 usersLoseLength = usersLose.length;\n\n        uint256[] memory winAmounts = new uint256[](usersWinLength);\n        address[] memory referrers = new address[](usersWinLength + usersLoseLength);\n        uint256[] memory referrelCommissions = new uint256[](usersWinLength + usersLoseLength);\n\n        uint256 j = 0;\n        // Distribute winnings to winning users\n        for (uint256 i = 0; i < usersWinLength; ++i) {\n            address user = usersWin[i];\n            UserBet storage bet = _userChallengeBets[user][challengeId];\n\n            uint256 userWinAmount = bet.amount + ((loseAmount * bet.amount) / winAmount);\n\n            winAmounts[i] = userWinAmount;\n            referrers[j] = bet.referrer;\n            referrelCommissions[j] = bet.referralCommision;\n            _withdrawables[user][challengeToken] += userWinAmount;\n            _withdrawables[bet.referrer][challengeToken] += bet.referralCommision;\n            adminShare += bet.adminShare;\n            ++j;\n        }\n\n        uint256[] memory loseAmounts = new uint256[](usersLoseLength);\n\n        // Record losing amounts\n        for (uint256 i = 0; i < usersLoseLength; ++i) {\n            UserBet storage bet = _userChallengeBets[usersLose[i]][challengeId];\n            loseAmounts[i] = bet.amount;\n            referrers[j] = bet.referrer;\n            referrelCommissions[j] = bet.referralCommision;\n            _withdrawables[bet.referrer][challengeToken] += bet.referralCommision;\n            adminShare += bet.adminShare;\n            ++j;\n        }\n\n        _withdrawables[owner()][challengeToken] += adminShare;\n\n        // Emit event for funds distribution\n        emit ReferralsEarned(challengeId, challengeToken, referrers, referrelCommissions);\n        emit AdminReceived(challengeId, challengeToken, adminShare);\n        emit ChallengeFundsMoved(\n            challengeId,\n            usersWin,\n            winAmounts,\n            usersLose,\n            loseAmounts,\n            MethodType.ResolveChallenge,\n            challengeToken\n        );\n    }\n\n    /**\n     * @dev Cancels a user's participation in a given challenge, refunding their bet and updating the challenge's state.\n     * This internal function handles the cancellation process for both individual and group challenges.\n     * It adjusts the challenge's total bet amount and participant list based on the user's decision (for or against).\n     * Additionally, it increments the user's withdrawable balance by the amount of their canceled bet.\n     *\n     * @param user The address of the user whose participation is being canceled.\n     * @param challengeId The unique identifier of the challenge from which the user is withdrawing.\n     *\n     * The function performs the following operations:\n     * - Identifies whether the user was betting for or against the challenge, or if it's a group challenge.\n     * - Removes the user from the appropriate participant list (`usersFor` or `usersAgainst`) and adjusts the challenge's\n     *   total amount for or against accordingly.\n     * - Increases the user's withdrawable balance by the amount of their bet.\n     * - Emits a `CancelParticipation` event signaling the user's cancellation from the challenge.\n     * - Emits a `ChallengeFundsMoved` event to indicate the movement of funds due to the cancellation, for consistency and tracking.\n     *\n     * Notes:\n     * - This function is designed to work with both individual and group challenges, modifying the challenge's state\n     *   to reflect the user's cancellation and ensuring the integrity of the challenge's betting totals.\n     * - It utilizes the `contains` function to find the user's position in the participant lists and handles their removal efficiently.\n     * - The adjustment of the challenge's betting totals and participant lists is crucial for maintaining accurate and fair\n     *   challenge outcomes and balances.\n     */\n    function _cancelParticipation(address user, uint256 challengeId, uint8 cancelType) internal {\n        Challenge storage _challenge = _challenges[challengeId];\n        address challengeToken = _challenge.token;\n\n        uint256 usersForLength = _challenge.usersFor.length;\n        uint256 usersAgainstLength = _challenge.usersAgainst.length;\n\n        address[] memory users = new address[](1);\n        uint256[] memory amounts = new uint256[](1);\n        address[] memory referrers = new address[](1);\n        uint256[] memory referrelCommissions = new uint256[](1);\n\n        uint256 amount = _userChallengeBets[user][challengeId].amount;\n        uint256 adminShare = _userChallengeBets[user][challengeId].adminShare;\n        uint256 referralCommision = _userChallengeBets[user][challengeId].referralCommision;\n        address referrer = _userChallengeBets[user][challengeId].referrer;\n\n        if (\n            (_challenge.challengeType == ChallengeType.Individual &&\n                _userChallengeBets[user][challengeId].decision == 1) ||\n            _challenge.challengeType == ChallengeType.Group\n        ) {\n            // If user is for the challenge or it's a group challenge, handle accordingly\n            uint256 i = contains(_challenge.usersFor, user);\n            if (cancelType == 1) {\n                amount += adminShare + referralCommision;\n            } else {\n                _withdrawables[owner()][challengeToken] += adminShare;\n                _withdrawables[referrer][challengeToken] += referralCommision;\n            }\n            _withdrawables[user][challengeToken] += amount;\n            _challenge.amountFor -= amount;\n            _challenge.usersFor[i] = _challenge.usersFor[usersForLength - 1];\n            _challenge.usersFor.pop();\n        } else {\n            // If user is against the challenge, handle accordingly\n            uint256 i = contains(_challenge.usersAgainst, user);\n            if (cancelType == 1) {\n                amount += adminShare + referralCommision;\n                referralCommision = 0;\n                adminShare = 0;\n            } else {\n                _withdrawables[owner()][challengeToken] += adminShare;\n                _withdrawables[referrer][challengeToken] += referralCommision;\n            }\n            _withdrawables[user][challengeToken] += amount;\n            _challenge.amountAgainst -= amount;\n            _challenge.usersAgainst[i] = _challenge.usersAgainst[usersAgainstLength - 1];\n            _challenge.usersAgainst.pop();\n        }\n\n        // Prepare data for event emission\n        users[0] = user;\n        amounts[0] = amount;\n        referrers[0] = referrer;\n        referrelCommissions[0] = referralCommision;\n\n        // Clear user's bet for the challenge\n        delete _userChallengeBets[user][challengeId];\n\n        // Emit events for cancellation of participation and fund movement\n        emit CancelParticipation(user, challengeId);\n        emit ReferralsEarned(challengeId, _challenge.token, referrers, referrelCommissions);\n        emit AdminReceived(challengeId, _challenge.token, adminShare);\n\n        emit ChallengeFundsMoved(\n            challengeId,\n            users,\n            amounts,\n            new address[](0),\n            new uint256[](0),\n            MethodType.CancelParticipation,\n            _challenge.token\n        );\n    }\n\n    /**\n     * @dev Calculates and allocates winnings and losses for a group challenge.\n     * This internal function determines the amounts won by each winning user and the amounts lost by each losing user\n     * within a challenge. It updates the `_withdrawables` mapping to reflect the winnings for each winning user based\n     * on their share of the profits. Losing users' bet amounts are noted but not immediately acted upon in this function.\n     *\n     * @param challengeId The unique identifier of the challenge being calculated.\n     * @param usersWin An array of addresses for users who won in the challenge.\n     * @param profits An array of profit percentages corresponding to each winning user.\n     *\n     * Requirements:\n     * - `usersWin` and `profits` arrays must be of the same length, with each entry in `profits` representing\n     *   the percentage of the total winnings that the corresponding user in `usersWin` should receive.\n     * - This function does not directly handle the transfer of funds but updates the `_withdrawables` mapping to\n     *   reflect the amounts that winning users are able to withdraw.\n     * - Losing users' details are aggregated but are used primarily for event emission.\n     *\n     * Emits a `ChallengeFundsMoved` event indicating the challenge ID, winning users and their win amounts,\n     * and losing users with the amounts they bet and lost. This helps in tracking the outcome and settlements\n     * of group challenges.\n     *\n     * Note:\n     * - The actual transfer of funds from losing to winning users is not performed in this function. Instead, it calculates\n     *   and updates balances that users can later withdraw.\n     */\n    function _calculateGroupChallenge(\n        uint256 challengeId,\n        address[] calldata usersWin,\n        uint256[] calldata profits\n    ) internal {\n        Challenge storage _challenge = _challenges[challengeId];\n        address challengeToken = _challenge.token;\n        uint256 userWinLength = usersWin.length;\n        address[] storage usersFor = _challenge.usersFor;\n        uint256 challengeUserForLength = usersFor.length;\n        uint256[] memory winAmounts = new uint256[](userWinLength);\n        uint256[] memory loseAmounts = new uint256[](challengeUserForLength - userWinLength);\n        address[] memory usersLose = new address[](challengeUserForLength - userWinLength);\n        address[] memory referrers = new address[](challengeUserForLength);\n        uint256[] memory referrelCommissions = new uint256[](challengeUserForLength);\n\n        uint256 j = 0;\n        uint256 adminShare;\n        for (uint256 i = 0; i < challengeUserForLength; ++i) {\n            uint256 index = contains(usersWin, _challenge.usersFor[i]);\n            UserBet storage bet = _userChallengeBets[usersFor[i]][challengeId];\n            if (index == userWinLength) {\n                usersLose[j] = usersFor[i];\n                loseAmounts[j] = bet.amount;\n                j++;\n            } else {\n                uint256 winAmount = (_challenge.amountFor * profits[index]) / (100 * DECIMAL);\n                _withdrawables[usersWin[index]][challengeToken] += winAmount;\n                winAmounts[index] = winAmount;\n            }\n            adminShare += bet.adminShare;\n            _withdrawables[bet.referrer][_challenge.token] += bet.referralCommision;\n            referrers[i] = bet.referrer;\n            referrelCommissions[i] = bet.referralCommision;\n        }\n        _withdrawables[owner()][_challenge.token] += adminShare;\n\n        // Emit event for fund movement in the group challenge\n        emit ReferralsEarned(challengeId, challengeToken, referrers, referrelCommissions);\n        emit AdminReceived(challengeId, challengeToken, adminShare);\n\n        emit ChallengeFundsMoved(\n            challengeId,\n            usersWin,\n            winAmounts,\n            usersLose,\n            loseAmounts,\n            MethodType.ResolveGroupChallenge,\n            challengeToken\n        );\n    }\n\n    /**\n     * @dev Searches for an element in an address array and returns its index if found.\n     * This internal pure function iterates through an array of addresses to find a specified element.\n     * It's designed to check the presence of an address in a given array and identify its position.\n     *\n     * @param array The array of addresses to search through.\n     * @param element The address to search for within the array.\n     * @return The index of the element within the array if found; otherwise, returns the length of the array.\n     * This means that if the return value is equal to the array's length, the element is not present in the array.\n     */\n    function contains(address[] memory array, address element) internal pure returns (uint256) {\n        uint256 arrayLength = array.length;\n        for (uint256 i = 0; i < arrayLength; ++i) {\n            if (array[i] == element) {\n                return i;\n            }\n        }\n        return arrayLength;\n    }\n\n    /**\n     * @dev Cancels all bets placed on a challenge, refunding the bet amounts to the bettors.\n     * This internal function handles the process of cancelling bets for both \"for\" and \"against\" positions in a given challenge.\n     * It aggregates users and their respective bet amounts from both positions, updates their withdrawable balances,\n     * and emits an event indicating the movement of funds due to the challenge's cancellation.\n     *\n     * The function iterates through all bets placed \"for\" and \"against\" the challenge, compiles lists of users and their bet amounts,\n     * and credits the bet amounts back to the users' withdrawable balances in the form of the challenge's token.\n     *\n     * @param challengeId The unique identifier of the challenge whose bets are to be cancelled.\n     *\n     * Emits a `ChallengeFundsMoved` event with details about the challengeId, users involved, their refunded amounts,\n     * and empty arrays for new users and new amounts as no new bets are created during the cancellation process.\n     *\n     * Requirements:\n     * - The function is internal and expected to be called in scenarios where a challenge needs to be cancelled, such as\n     *   when a challenge is deemed invalid or when conditions for the challenge's execution are not met.\n     * - It assumes that `_challenges` maps `challengeId` to a valid `Challenge` struct containing arrays of users who have bet \"for\" and \"against\".\n     * - The function updates `_withdrawables`, a mapping of user addresses to another mapping of token addresses and their withdrawable amounts, ensuring users can withdraw their bet amounts after the bets are cancelled.\n     */\n    function _cancelBets(uint256 challengeId, uint8 cancelType) internal {\n        Challenge storage _challenge = _challenges[challengeId];\n        address challengeToken = _challenge.token;\n\n        uint256 usersForLength = _challenge.usersFor.length;\n        uint256 usersAgainstLength = _challenge.usersAgainst.length;\n\n        address[] memory users = new address[](usersForLength + usersAgainstLength);\n        uint256[] memory amounts = new uint256[](usersForLength + usersAgainstLength);\n        address[] memory referrers = new address[](usersForLength + usersAgainstLength);\n        uint256[] memory referrelCommissions = new uint256[](usersForLength + usersAgainstLength);\n\n        uint256 j = 0;\n        uint256 totalAdminShare = 0;\n        for (uint256 i = 0; i < usersForLength; ++i) {\n            address user = _challenge.usersFor[i];\n\n            users[i] = user;\n            uint256 returnAmount = _userChallengeBets[user][challengeId].amount;\n            uint256 adminShare = _userChallengeBets[user][challengeId].adminShare;\n            uint256 referralCommision = _userChallengeBets[user][challengeId].referralCommision;\n            address referrer = _userChallengeBets[user][challengeId].referrer;\n\n            if (cancelType == 1) {\n                returnAmount += adminShare + referralCommision;\n                adminShare = 0;\n                referralCommision = 0;\n            } else {\n                _withdrawables[owner()][challengeToken] += adminShare;\n                _withdrawables[referrer][challengeToken] += referralCommision;\n            }\n            amounts[i] = returnAmount;\n            referrers[j] = referrer;\n            referrelCommissions[j] = referralCommision;\n            _withdrawables[user][challengeToken] += amounts[i];\n            totalAdminShare += adminShare;\n            ++j;\n        }\n\n        for (uint256 i = 0; i < usersAgainstLength; ++i) {\n            address user = _challenge.usersAgainst[i];\n            uint256 index = i + usersForLength;\n\n            users[index] = user;\n            uint256 returnAmount = _userChallengeBets[user][challengeId].amount;\n            uint256 adminShare = _userChallengeBets[user][challengeId].adminShare;\n            uint256 referralCommision = _userChallengeBets[user][challengeId].referralCommision;\n            address referrer = _userChallengeBets[user][challengeId].referrer;\n\n            if (cancelType == 1) {\n                returnAmount += adminShare + referralCommision;\n                adminShare = 0;\n                referralCommision = 0;\n            } else {\n                _withdrawables[owner()][challengeToken] += adminShare;\n                _withdrawables[referrer][challengeToken] += referralCommision;\n            }\n            amounts[index] = returnAmount;\n            referrers[j] = referrer;\n            referrelCommissions[j] = referralCommision;\n            _withdrawables[user][challengeToken] += amounts[index];\n            totalAdminShare += adminShare;\n            ++j;\n        }\n\n        emit ReferralsEarned(challengeId, challengeToken, referrers, referrelCommissions);\n        emit AdminReceived(challengeId, challengeToken, totalAdminShare);\n\n        emit ChallengeFundsMoved(\n            challengeId,\n            users,\n            amounts,\n            new address[](0),\n            new uint256[](0),\n            MethodType.CancelChallenge,\n            challengeToken\n        );\n    }\n\n    /**\n     * @dev Withdraws an amount of native cryptocurrency (e.g., ETH) or an ERC-20 token and sends it to a specified address.\n     * This internal function handles the transfer of both native cryptocurrency and ERC-20 tokens based on the token address provided.\n     * If the `token` parameter is the zero address, it treats the transfer as a native cryptocurrency transaction.\n     * Otherwise, it performs a safe transfer of an ERC-20 token.\n     *\n     * @param token The address of the token to withdraw. If the address is `0x0`, the withdrawal is processed as a native cryptocurrency transaction.\n     * @param to The recipient address to which the currency or tokens are sent.\n     * @param amount The amount of currency or tokens to send. The function ensures that this amount is securely transferred to the `to` address.\n     *\n     * Requirements:\n     * - For native cryptocurrency transfers:\n     *   - The transaction must succeed. If it fails, the function reverts with \"Failed to send ETH\".\n     * - For ERC-20 token transfers:\n     *   - The function uses `safeTransfer` from the IERC20 interface to prevent issues related to double spending or errors in transfer.\n     *   - The ERC-20 token contract must implement `safeTransfer` correctly according to the ERC-20 standard.\n     */\n    function _withdraw(address token, address to, uint256 amount) internal {\n        if (token == address(0)) {\n            // Native cryptocurrency transfer\n            (bool ok, ) = to.call{value: amount}(\"\");\n            require(ok, \"37\");\n        } else {\n            // ERC-20 token transfer\n            IERC20(token).safeTransfer(to, amount);\n        }\n    }\n\n    /**\n     * @dev Calculates the administrator's share of a challenge based on the challenge's token and the amount.\n     * This internal view function determines the admin's share by first converting the `amount` of the challenge's\n     * token into a standardized value (using `_getValue` function to get the token's value in a common denomination).\n     * It then uses this value to find the applicable admin share percentage from a predefined set of rules (`_adminShareRules`).\n     *\n     * @param token The token of the challenge to calculate the value amount.\n     * @param amount The amount involved in the challenge for which the admin's share is to be calculated.\n     * @return The calculated admin share as a uint256, based on the challenge's conditions and predefined rules.\n     *\n     * Logic:\n     * - Determines the value of the `amount` of tokens by fetching the token's current value and adjusting for decimal places.\n     * - Uses the calculated value to find the corresponding admin share percentage from `_adminShareRules`.\n     * - The share is computed based on thresholds which determine the percentage rate applicable to the value amount.\n     * - If the value amount does not meet the minimum threshold, the function returns 0, indicating no admin share.\n     * - If applicable, the admin share is calculated by multiplying the `amount` by the determined percentage\n     *   and dividing by `PERCENTAGE_100` to ensure the result is in the correct scale.\n     *\n     * Requirements:\n     * - The function dynamically adjusts for the token's decimals, using 18 decimals for the native currency (e.g., ETH) or\n     *   querying the token contract for ERC-20 tokens.\n     * - It handles special cases, such as when the token is the platform's specific token (e.g. STMX),\n     *   by applying predefined rules for calculating the admin share.\n     */\n    function _calculateAdminShare(address token, uint256 amount) internal view returns (uint256) {\n        require(_allTokens.contains(token), \"48\");\n\n        uint256 valueAmount = (_getValue(token) * amount) /\n            10 ** (token == address(0) ? 18 : token.decimals());\n\n        AdminShareRule storage rule = _adminShareRules[token];\n\n        uint256 index = rule.thresholds.upperBound(valueAmount);\n\n        if (index == 0) {\n            return 0;\n        }\n        // Get the admin share in USD for the corresponding threshold\n        uint256 shareInUSD = rule.sharesInUSD[index - 1];\n\n        if (rule.isSTMX) {\n            return shareInUSD;\n        }\n\n        // Convert the USD share back into the equivalent token amount\n        uint256 adminShareInTokens = (shareInUSD *\n            10 ** (token == address(0) ? 18 : token.decimals())) / _getValue(token);\n\n        return adminShareInTokens;\n    }\n\n    /**\n     * @dev Retrieves the current value of a given token, based on oracle data.\n     * This internal view function queries the value of the specified token from a price feed oracle.\n     * If the token is recognized by a preset list of oracles (_oraclessTokens), it returns a default value.\n     * Otherwise, it fetches the latest round data from the token's associated price feed.\n     * The function requires that the oracle's reported value be positive and updated within the last day,\n     * indicating no oracle malfunction.\n     * It adjusts the oracle's value based on a default decimal precision, to ensure consistency across different oracles.\n     *\n     * @param token The address of the token for which the value is being queried.\n     * @return The current value of the token as a uint256, adjusted for default decimal precision.\n     * The value is adjusted to match the `defaultOracleDecimals` precision if necessary.\n     *\n     * Requirements:\n     * - The oracle's latest value for the token must be positive and updated within the last 24 hours.\n     * - If the token is not recognized by the _oraclessTokens set, but has a price feed, the function normalizes the\n     *   value to a standard decimal precision (defaultOracleDecimals) for consistency.\n     * - Throws \"Oracle malfunction\" if the oracle's latest data does not meet the requirements.\n     */\n    function _getValue(address token) internal view returns (uint256) {\n        int256 value;\n        uint256 updatedAt;\n\n        if (_oraclessTokens.contains(token)) {\n            value = int256(10 ** defaultOracleDecimals);\n        } else {\n            (, value, , updatedAt, ) = _priceFeeds[token].latestRoundData();\n            require(value > 0 && updatedAt >= block.timestamp - 1 days, \"43\");\n            uint256 oracleDecimals = _priceFeeds[token].decimals();\n            if (oracleDecimals > defaultOracleDecimals) {\n                value = value / int256(10 ** (oracleDecimals - defaultOracleDecimals));\n            } else if (oracleDecimals < defaultOracleDecimals) {\n                value = value * int256(10 ** (defaultOracleDecimals - oracleDecimals));\n            }\n        }\n\n        return uint256(value);\n    }\n\n    /**\n     * @dev Determines the current status of a specific challenge by its ID.\n     * This internal view function assesses the challenge's status based on its current state and timing.\n     * It checks if the challenge is in a final state (Canceled, ResolvedFor, ResolvedAgainst, or ResolvedDraw).\n     * If not, it then checks whether the challenge's end time has passed to determine if it's in the Awaiting state.\n     * Otherwise, it defaults to the Betting state, implying that the challenge is still active and accepting bets.\n     *\n     * @param challengeId The unique identifier for the challenge whose status is being queried.\n     * @return ChallengeStatus The current status of the challenge. This can be one of the following:\n     * - Canceled: The challenge has been canceled.\n     * - ResolvedFor: The challenge has been resolved in favor of the proposer.\n     * - ResolvedAgainst: The challenge has been resolved against the proposer.\n     * - ResolvedDraw: The challenge has been resolved as a draw.\n     * - Awaiting: The challenge is awaiting resolution, but betting is closed due to the end time having passed.\n     * - Betting: The challenge is open for bets.\n     */\n    function _challengeStatus(uint256 challengeId) internal view returns (ChallengeStatus) {\n        ChallengeStatus status = _challenges[challengeId].status;\n        uint256 endTime = _challenges[challengeId].endTime;\n\n        if (\n            status == ChallengeStatus.Canceled ||\n            status == ChallengeStatus.ResolvedFor ||\n            status == ChallengeStatus.ResolvedAgainst ||\n            status == ChallengeStatus.ResolvedDraw\n        ) {\n            return status;\n        }\n\n        if (block.timestamp > endTime) {\n            return ChallengeStatus.Awaiting;\n        }\n\n        return ChallengeStatus.Betting;\n    }\n\n    /**\n     * @dev Checks if the challenge id is valid or not.\n     *\n     * @param challengeId The unique identifier for the challenge.\n     */\n    function _assertChallengeExistence(uint256 challengeId) internal view {\n        require(challengeId > 0 && challengeId <= latestChallengeId, \"38\");\n    }\n\n    /**\n     * @dev Checks if the challenge is resolved or not.\n     *\n     * @param challengeId The unique identifier for the challenge.\n     */\n    function _assertResolveableStatus(uint256 challengeId) internal view {\n        require(_challengeStatus(challengeId) == ChallengeStatus.Awaiting, \"39\");\n    }\n\n    /**\n     * @dev Checks if the challenge is canceled or not.\n     *\n     * @param challengeId The unique identifier for the challenge.\n     */\n    function _assertCancelableStatus(uint256 challengeId) internal view {\n        ChallengeStatus status = _challengeStatus(challengeId);\n        require(status == ChallengeStatus.Awaiting || status == ChallengeStatus.Betting, \"40\");\n    }\n\n    /**\n     * @dev Ensures that the function is only callable by the designated backend address.\n     * This internal view function checks if the `msg.sender` is the same as the stored `backend` address.\n     * It should be used as a modifier in functions that are meant to be accessible only by the backend.\n     * Reverts with a \"Not a backend\" error message if the `msg.sender` is not the backend address.\n     */\n    function _onlyBackend() internal view {\n        require(msg.sender == backend, \"41\");\n    }\n\n    /**\n     * @dev Ensures that the function is only callable by the designated backend address or owner address.\n     * This internal view function checks if the `msg.sender` is the same as the stored `backend` address or owner address.\n     * It should be used as a modifier in functions that are meant to be accessible by the backend and owner.\n     * Reverts with a \"Not a backend or owner\" error message if the `msg.sender` is neither the backend address, nor the owner address.\n     */\n    function _onlyBackendOrOwner() internal view {\n        require(msg.sender == backend || msg.sender == owner(), \"42\");\n    }\n\n    /**\n     * @dev Overrides the renounceOwnership function to disable the ability to renounce ownership.\n     * This ensures that the contract always has an owner.\n     */\n    function renounceOwnership() public view override onlyOwner {\n        revert(\"Renouncing ownership is disabled\");\n    }\n\n    /**\n     * @dev Checks if the price feed from a given address is valid within a specified error margin.\n     * @param priceFeedAddress The address of the price feed.\n     * @param errorMarginPercent The acceptable error margin in percentage.\n     * @return bool Returns true if the price feed is valid, otherwise reverts.\n     */\n    function isValidPriceFeed(\n        address priceFeedAddress,\n        uint256 errorMarginPercent\n    ) internal view returns (bool) {\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(priceFeedAddress);\n        (, int256 price, , uint256 updatedAt, ) = priceFeed.latestRoundData();\n\n        require(price > 0, \"19\");\n        require(block.timestamp - updatedAt <= 1 days, \"25\");\n\n        int256 expectedPrice = getExpectedPrice(priceFeedAddress);\n        int256 lowerBound = expectedPrice - ((expectedPrice * int256(errorMarginPercent)) / 100);\n        int256 upperBound = expectedPrice + ((expectedPrice * int256(errorMarginPercent)) / 100);\n\n        require(price >= lowerBound && price <= upperBound, \"27\");\n\n        return true;\n    }\n\n    /**\n     * @dev Computes the expected price from the historical price feed data.\n     * @param priceFeedAddress The address of the price feed.\n     * @return int256 The average price calculated from the last few rounds.\n     */\n    function getExpectedPrice(address priceFeedAddress) internal view returns (int256) {\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(priceFeedAddress);\n\n        // Fetch the latest round data\n        (uint80 roundID, , , , ) = priceFeed.latestRoundData();\n\n        // Calculate the average price over the last few rounds\n        int256 sum = 0;\n        uint256 count = 0;\n        uint80 currentRoundId = roundID;\n\n        // Assuming we want to average the last 5 rounds\n        uint256 roundsToAverage = 5;\n\n        for (uint256 i = 0; i < roundsToAverage; ++i) {\n            (, int256 historicalPrice, , , ) = priceFeed.getRoundData(currentRoundId);\n            sum += historicalPrice;\n            count += 1;\n\n            if (currentRoundId > 0) {\n                currentRoundId -= 1;\n            } else {\n                break;\n            }\n        }\n\n        int256 averagePrice = sum / int256(count);\n\n        return averagePrice;\n    }\n}\n"}}, "settings": {"optimizer": {"enabled": true}, "viaIR": false, "outputSelection": {"*": {"*": ["evm.legacyAssembly"]}}, "libraries": {}}}
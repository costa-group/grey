{"language": "Solidity", "sources": {"src/Balancer/QueryBalancerV2Upgradeable.sol": {"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.30;\n\nimport {UUPSUpgradeable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\n\nstruct Params {\n    // Price bounds (lower and upper). 0 < alpha < beta\n    int256 alpha;\n    int256 beta;\n    // Rotation vector:\n    // phi in (-90 degrees, 0] is the implicit rotation vector. It's stored as a point:\n    int256 c; // c = cos(-phi) >= 0. rounded to 18 decimals\n    int256 s; //  s = sin(-phi) >= 0. rounded to 18 decimals\n    // Invariant: c^2 + s^2 == 1, i.e., the point (c, s) is normalized.\n    // due to rounding, this may not = 1. The term dSq in DerivedParams corrects for this in extra precision\n\n    // Stretching factor:\n    int256 lambda; // lambda >= 1 where lambda == 1 is the circle.\n}\n\nstruct DerivedParams {\n    Vector2 tauAlpha;\n    Vector2 tauBeta;\n    int256 u; // from (A chi)_y = lambda * u + v\n    int256 v; // from (A chi)_y = lambda * u + v\n    int256 w; // from (A chi)_x = w / lambda + z\n    int256 z; // from (A chi)_x = w / lambda + z\n    int256 dSq; // error in c^2 + s^2 = dSq, used to correct errors in c, s, tau, u,v,w,z calculations\n    //int256 dAlpha; // normalization constant for tau(alpha)\n    //int256 dBeta; // normalization constant for tau(beta)\n}\n\nstruct Vector2 {\n    int256 x;\n    int256 y;\n}\n\ninterface IBalancerPool {\n    function version() external view returns (string memory);\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function getNormalizedWeights() external view returns (uint256[] memory);\n    function getSwapFeePercentage() external view returns (uint256);\n    function getPoolId() external view returns (bytes32);\n    function getAmplificationParameter() external view returns (uint256 value, bool updating, uint256 precision);\n    function getScalingFactors() external view returns (uint256[] memory);\n    function getVirtualSupply() external view returns (uint256);\n    function getTargets() external view returns (uint256 lowerTarget, uint256 upperTarget);\n    function getBptIndex() external view returns (uint256);\n    function getMainIndex() external view returns (uint256);\n    function getWrappedIndex() external view returns (uint256);\n    function getVault() external view returns (address);\n\n    function getECLPParams() external view returns (Params memory params, DerivedParams memory d);\n    function getGradualWeightUpdateParams() external view returns (uint256 startTime, uint256 endTime);\n    function rateProvider0() external view returns (address);\n    function rateProvider1() external view returns (address);\n}\n\ninterface IVault {\n    function getPoolTokens(bytes32 poolId) external view returns (address[] memory tokens, uint256[] memory balances, uint256 lastChangeBlock);\n}\n\ninterface IRateProvider {\n    function getRate() external view returns (uint256);\n}\n\ncontract QueryBalancerV2Upgradeable is UUPSUpgradeable {\n    address public owner;\n\n    struct TokenInfo {\n        uint256 balance;\n        address tokenAddress;\n        uint256 tokenIndex;\n        uint256 weight; // \u65b0\u589e\u7684\u6743\u91cd\u5b57\u6bb5\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Callable only by owner\");\n        _;\n    }\n\n    function initialize(address _owner) initializer public {\n        owner = _owner;\n    }\n\n    function _authorizeUpgrade(address) internal override virtual onlyOwner {}\n\n    function set_owner(address _owner) onlyOwner public {\n        owner = _owner;\n    }\n\n    function get_pool_type(address pool) public view virtual returns (string memory pool_type) {\n        try IBalancerPool(pool).version() returns (string memory _version) {\n            if (contains(_version, \"LinearPool\")) {\n                return \"Linear\";\n            } else if (contains(_version, \"ComposableStablePool\")) {\n                return \"ComposableStable\";\n            } else if (contains(_version, \"WeightedPool\")) {\n                return \"Weighted\";\n            }\n        } catch {\n            // Ignore exception and proceed to the next check\n        }\n\n        try IBalancerPool(pool).getNormalizedWeights() {\n            return \"Weighted\";\n        } catch {\n            // Ignore exception and return empty string\n        }\n\n        // New logic to check for Linear pool based on additional methods\n        try IBalancerPool(pool).getTargets() {\n            try IBalancerPool(pool).getWrappedIndex() {\n                try IBalancerPool(pool).getScalingFactors() {\n                    return \"Linear\";\n                } catch {\n                    // Ignore exception and proceed to the next check\n                }\n            } catch {\n                // Ignore exception and proceed to the next check\n            }\n        } catch {\n            // Ignore exception and proceed to the next check\n        }\n\n        try IBalancerPool(pool).getAmplificationParameter() {\n            try IBalancerPool(pool).getBptIndex() {\n                return \"ComposableStable\";\n            } catch {\n                // Ignore exception and proceed to the next check\n            }\n            return \"Stable\";\n        } catch {\n            // Ignore exception and return empty string\n        }\n\n\n        try IBalancerPool(pool).name() returns (string memory _name) {\n            try IBalancerPool(pool).symbol() returns (string memory _symbol) {\n                if (contains(_name, \"Stable\") || contains(_name, \"STABLE\") || contains(_symbol, \"Stable\") || contains(_symbol, \"STABLE\")) {\n                    return \"Stable\";\n                }\n            } catch {\n                // Ignore exception and proceed to the next check\n            }\n        } catch {\n            // Ignore exception and proceed to the next check\n        }\n\n\n        return \"\";\n    }\n\n    function contains(string memory haystack, string memory needle) internal pure virtual returns (bool) {\n        return indexOf(haystack, needle) >= 0;\n    }\n\n    // \u67e5\u627e\u5b50\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\n    function indexOf(string memory haystack, string memory needle) internal pure virtual returns (int) {\n        bytes memory haystackBytes = bytes(haystack);\n        bytes memory needleBytes = bytes(needle);\n\n        if (needleBytes.length == 0 || haystackBytes.length < needleBytes.length) {\n            return -1;\n        }\n\n        for (uint i = 0; i <= haystackBytes.length - needleBytes.length; i++) {\n            bool found = true;\n            for (uint j = 0; j < needleBytes.length; j++) {\n                if (haystackBytes[i + j] != needleBytes[j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) {\n                return int(i);\n            }\n        }\n\n        return -1;\n    }\n\n    function get_params(address pool) public view virtual returns (\n        uint256 blockNumber,\n        uint256 fee,\n        bytes32 poolId,\n        TokenInfo[] memory tokenList,\n        string memory subType,\n        uint256 ampBps,\n        uint256[] memory priceScale,\n        uint256 liquidity,\n        uint256 midFee,\n        uint256 outFee,\n        uint256[] memory coins\n    ) {\n        blockNumber = block.number;\n        string memory poolType = get_pool_type(pool);\n\n        // Common fields\n        fee = IBalancerPool(pool).getSwapFeePercentage();\n        poolId = IBalancerPool(pool).getPoolId();\n        (address[] memory tokens, uint256[] memory balances,) = IVault(IBalancerPool(pool).getVault()).getPoolTokens(poolId);\n\n        // Prepare token list\n        tokenList = new TokenInfo[](tokens.length);\n        uint256[] memory weights;\n        if (keccak256(bytes(poolType)) == keccak256(bytes(\"Weighted\"))) {\n            weights = IBalancerPool(pool).getNormalizedWeights();\n        }\n\n        for (uint i = 0; i < tokens.length; i++) {\n            tokenList[i] = TokenInfo({\n                balance: balances[i],\n                tokenAddress: tokens[i],\n                tokenIndex: i,\n                weight: weights.length > 0 ? weights[i] : 0 // \u5982\u679c\u6709\u6743\u91cd\u5219\u8d4b\u503c\uff0c\u5426\u5219\u4e3a0\n            });\n        }\n\n        subType = poolType;\n\n        // Specific fields based on pool type\n        if (keccak256(bytes(poolType)) == keccak256(bytes(\"Stable\")) || keccak256(bytes(poolType)) == keccak256(bytes(\"ComposableStable\"))) {\n            (uint256 value,, uint256 precision) = IBalancerPool(pool).getAmplificationParameter();\n            ampBps = value / precision;\n            try IBalancerPool(pool).getScalingFactors() returns (uint256[] memory scalingFactors) {\n                priceScale = scalingFactors;\n            } catch {\n                priceScale = new uint256[](0); // \u9ed8\u8ba4\u503c\n            }\n        } else if (keccak256(bytes(poolType)) == keccak256(bytes(\"Linear\"))) {\n            liquidity = IBalancerPool(pool).getVirtualSupply();\n            (midFee, outFee) = IBalancerPool(pool).getTargets();\n            try IBalancerPool(pool).getScalingFactors() returns (uint256[] memory scalingFactors) {\n                priceScale = scalingFactors;\n            } catch {\n                priceScale = new uint256[](0); // \u9ed8\u8ba4\u503c\n            }\n            uint256 bptIndex = IBalancerPool(pool).getBptIndex();\n            uint256 mainIndex = IBalancerPool(pool).getMainIndex();\n            uint256 wrappedIndex = IBalancerPool(pool).getWrappedIndex();\n\n            coins = new uint256[](3);\n            coins[0] = bptIndex;\n            coins[1] = mainIndex;\n            coins[2] = wrappedIndex;\n        }\n    }\n}\n\ncontract QueryBalancerV2UpgradeableV2 is QueryBalancerV2Upgradeable {\n    function get_pool_type(address pool) public view virtual override returns (string memory pool_type) {\n        try IBalancerPool(pool).version() returns (string memory _version) {\n            if (contains(_version, \"LinearPool\")) {\n                return \"Linear\";\n            } else if (contains(_version, \"ComposableStablePool\")) {\n                return \"ComposableStable\";\n            } else if (contains(_version, \"WeightedPool\")) {\n                return \"Weighted\";\n            }\n        } catch {\n            // Ignore exception and proceed to the next check\n        }\n\n        try IBalancerPool(pool).getECLPParams() {\n            return \"GyroECLP\";\n        } catch {\n            // Ignore exception and return empty string\n        }\n\n        try IBalancerPool(pool).getNormalizedWeights() {\n            try IBalancerPool(pool).getGradualWeightUpdateParams() returns (uint256 startTime, uint256 endTime) {\n                if (startTime < block.timestamp && endTime > block.timestamp) {\n                    // LiquidityBootstrappingPool\u6682\u4e0d\u652f\u6301\n                    return \"\";\n                }\n            } catch {\n                // Ignore exception and return empty string\n            }\n            return \"Weighted\";\n        } catch {\n            // Ignore exception and return empty string\n        }\n\n        // New logic to check for Linear pool based on additional methods\n        try IBalancerPool(pool).getTargets() {\n            try IBalancerPool(pool).getWrappedIndex() {\n                try IBalancerPool(pool).getScalingFactors() {\n                    return \"Linear\";\n                } catch {\n                    // Ignore exception and proceed to the next check\n                }\n            } catch {\n                // Ignore exception and proceed to the next check\n            }\n        } catch {\n            // Ignore exception and proceed to the next check\n        }\n\n        try IBalancerPool(pool).getAmplificationParameter() {\n            try IBalancerPool(pool).getBptIndex() {\n                return \"ComposableStable\";\n            } catch {\n                // Ignore exception and proceed to the next check\n            }\n            return \"Stable\";\n        } catch {\n            // Ignore exception and return empty string\n        }\n\n\n        try IBalancerPool(pool).name() returns (string memory _name) {\n            try IBalancerPool(pool).symbol() returns (string memory _symbol) {\n                if (contains(_name, \"Stable\") || contains(_name, \"STABLE\") || contains(_symbol, \"Stable\") || contains(_symbol, \"STABLE\")) {\n                    return \"Stable\";\n                }\n            } catch {\n                // Ignore exception and proceed to the next check\n            }\n        } catch {\n            // Ignore exception and proceed to the next check\n        }\n\n\n        return \"\";\n    }\n}\n\nstruct FXPoolData {\n    address poolAddress;\n    bytes32 poolId;\n}\n\ninterface IFXPoolFactory {\n    function getFxPools(address[] memory _assets) external view returns (FXPoolData[] memory);\n}\n\ninterface IFXPoolDeployer {\n    function getFXPoolDetails(\n        address _fxpoolAddr\n    )\n        external\n        view\n        returns (\n            string memory name,\n            address baseToken,\n            address baseOracle,\n            uint256 protocolPercentFee,\n            uint256 liquidity,\n            uint256 alpha,\n            uint256 beta,\n            uint256 delta,\n            uint256 epsilon,\n            uint256 lambda\n        );\n}\n\ncontract QueryBalancerV2UpgradeableV3 is QueryBalancerV2UpgradeableV2 {\n\n    function get_pool_type(address pool) public view virtual override returns (string memory pool_type) {\n        // Call the base class's get_pool_type method\n        pool_type = super.get_pool_type(pool);\n\n        if (bytes(pool_type).length == 0) {\n            try this.is_xave(pool) returns (bool isXave) {\n                if (isXave) {\n                    return \"Xave\";\n                }\n            } catch {\n                // Ignore exception and proceed to the next check\n            }\n        }\n\n        return pool_type;\n    }\n\n    function fx_pool_factory() public view virtual returns (address) {\n    }\n\n    function fx_pool_deployer() public view virtual returns (address) {\n    }\n\n    function is_xave(address pool) public view virtual returns (bool) {\n        bytes32 poolId = IBalancerPool(pool).getPoolId();\n        (address[] memory tokens, ,) = IVault(IBalancerPool(pool).getVault()).getPoolTokens(poolId);\n        if (tokens.length == 2) {\n            FXPoolData[] memory fxPools = IFXPoolFactory(fx_pool_factory()).getFxPools(tokens);\n        \n            for (uint i = 0; i < fxPools.length; i++) {\n                if (fxPools[i].poolAddress == pool) {\n                    return true;\n                }\n            }\n        }\n\n        try IFXPoolDeployer(fx_pool_deployer()).getFXPoolDetails(pool) returns (string memory, address, address, uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\n            return true;\n        } catch {\n            // Ignore exception and proceed to the next check\n        }\n\n        return false;\n    }\n\n    function get_params_v2(address pool) public view virtual returns (\n        uint256 blockNumber,\n        uint256 fee,\n        bytes32 poolId,\n        TokenInfo[] memory tokenList,\n        string memory subType,\n        uint256 ampBps,\n        uint256[] memory priceScale,\n        uint256 liquidity,\n        uint256 midFee,\n        uint256 outFee,\n        uint256[] memory coins,\n        uint256 vReserve0,\n        uint256 vReserve1,\n        int256[] memory eclpParams\n    ) {\n        blockNumber = block.number;\n        string memory poolType = get_pool_type(pool);\n\n        // Common fields\n        fee = IBalancerPool(pool).getSwapFeePercentage();\n        poolId = IBalancerPool(pool).getPoolId();\n        (address[] memory tokens, uint256[] memory balances,) = IVault(IBalancerPool(pool).getVault()).getPoolTokens(poolId);\n\n        // Prepare token list\n        tokenList = new TokenInfo[](tokens.length);\n        uint256[] memory weights;\n        if (keccak256(bytes(poolType)) == keccak256(bytes(\"Weighted\"))) {\n            weights = IBalancerPool(pool).getNormalizedWeights();\n        }\n\n        for (uint i = 0; i < tokens.length; i++) {\n            tokenList[i] = TokenInfo({\n                balance: balances[i],\n                tokenAddress: tokens[i],\n                tokenIndex: i,\n                weight: weights.length > 0 ? weights[i] : 0 // \u5982\u679c\u6709\u6743\u91cd\u5219\u8d4b\u503c\uff0c\u5426\u5219\u4e3a0\n            });\n        }\n\n        subType = poolType;\n\n        // Specific fields based on pool type\n        if (keccak256(bytes(poolType)) == keccak256(bytes(\"Stable\")) || keccak256(bytes(poolType)) == keccak256(bytes(\"ComposableStable\"))) {\n            (uint256 value,, uint256 precision) = IBalancerPool(pool).getAmplificationParameter();\n            ampBps = value / precision;\n            try IBalancerPool(pool).getScalingFactors() returns (uint256[] memory scalingFactors) {\n                priceScale = scalingFactors;\n            } catch {\n                priceScale = new uint256[](0); // \u9ed8\u8ba4\u503c\n            }\n        } else if (keccak256(bytes(poolType)) == keccak256(bytes(\"Linear\"))) {\n            liquidity = IBalancerPool(pool).getVirtualSupply();\n            (midFee, outFee) = IBalancerPool(pool).getTargets();\n            try IBalancerPool(pool).getScalingFactors() returns (uint256[] memory scalingFactors) {\n                priceScale = scalingFactors;\n            } catch {\n                priceScale = new uint256[](0); // \u9ed8\u8ba4\u503c\n            }\n            uint256 bptIndex = IBalancerPool(pool).getBptIndex();\n            uint256 mainIndex = IBalancerPool(pool).getMainIndex();\n            uint256 wrappedIndex = IBalancerPool(pool).getWrappedIndex();\n\n            coins = new uint256[](3);\n            coins[0] = bptIndex;\n            coins[1] = mainIndex;\n            coins[2] = wrappedIndex;\n        } else if (keccak256(bytes(poolType)) == keccak256(bytes(\"GyroECLP\"))) {\n            address rateProvider0 = IBalancerPool(pool).rateProvider0();\n            if (rateProvider0 != address(0)) {\n                vReserve0 = IRateProvider(rateProvider0).getRate();\n            }\n            address rateProvider1 = IBalancerPool(pool).rateProvider1();\n            if (rateProvider1 != address(0)) {\n                vReserve1 = IRateProvider(rateProvider1).getRate();\n            }\n\n            (Params memory params, DerivedParams memory d) = IBalancerPool(pool).getECLPParams();\n            eclpParams = new int256[](14);\n            // Flatten Params fields into priceScale\n            eclpParams[0] = params.alpha;\n            eclpParams[1] = params.beta;\n            eclpParams[2] = params.c;\n            eclpParams[3] = params.s;\n            eclpParams[4] = params.lambda;\n\n            // Flatten DerivedParams fields into priceScale\n            eclpParams[5] = d.tauAlpha.x;\n            eclpParams[6] = d.tauAlpha.y;\n            eclpParams[7] = d.tauBeta.x;\n            eclpParams[8] = d.tauBeta.y;\n            eclpParams[9] = d.u;\n            eclpParams[10] = d.v;\n            eclpParams[11] = d.w;\n            eclpParams[12] = d.z;\n            eclpParams[13] = d.dSq;\n        }\n    }\n}\n\ncontract QueryBalancerV2UpgradeableAvalanche is QueryBalancerV2UpgradeableV3 {\n    function fx_pool_factory() public view virtual override returns (address) {\n        return 0x81fE9e5B28dA92aE949b705DfDB225f7a7cc5134;\n    }\n\n    function fx_pool_deployer() public view virtual override returns (address) {\n        return 0x4042dC4110Ea9500338737605A60065c3de152C6;\n    }\n\n}\n\ncontract QueryBalancerV2UpgradeablePolygon is QueryBalancerV2UpgradeableV3 {\n    function fx_pool_factory() public view virtual override returns (address) {\n        return 0x627D759314D5c4007b461A74eBaFA7EBC5dFeD71;\n    }\n\n    function fx_pool_deployer() public view virtual override returns (address) {\n        return 0xF169c1Ae8De24Da43a3dC5c5F05De412b4848bD3;\n    }\n\n}\n\ncontract QueryBalancerV2UpgradeableEth is QueryBalancerV2UpgradeableV3 {\n    function fx_pool_factory() public view virtual override returns (address) {\n        return 0x81fE9e5B28dA92aE949b705DfDB225f7a7cc5134;\n    }\n\n    function fx_pool_deployer() public view virtual override returns (address) {\n        return 0xfb23Bc0D2629268442CD6521CF4170698967105f;\n    }\n\n}"}, "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.30;\n\nimport {IERC1822Proxiable} from \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\";\nimport {ERC1967Utils} from \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\";\nimport {Initializable} from \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address private immutable __self = address(this);\n\n    /**\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\n     * If the getter returns `\"5.0.0\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\n     * during an upgrade.\n     */\n    string public constant UPGRADE_INTERFACE_VERSION = \"5.0.0\";\n\n    /**\n     * @dev The call is from an unauthorized context.\n     */\n    error UUPSUnauthorizedCallContext();\n\n    /**\n     * @dev The storage `slot` is unsupported as a UUID.\n     */\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        _checkProxy();\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        _checkNotDelegated();\n        _;\n    }\n\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data);\n    }\n\n    /**\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\n     * See {_onlyProxy}.\n     */\n    function _checkProxy() internal view virtual {\n        if (\n            address(this) == __self || // Must be called through delegatecall\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\n        ) {\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Reverts if the execution is performed via delegatecall.\n     * See {notDelegated}.\n     */\n    function _checkNotDelegated() internal view virtual {\n        if (address(this) != __self) {\n            // Must not be called through delegatecall\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\n     *\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\n     * is expected to be the implementation slot in ERC1967.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\n                revert UUPSUnsupportedProxiableUUID(slot);\n            }\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\n        } catch {\n            // The implementation is not UUPS\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\n        }\n    }\n}\n"}, "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"}, "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Utils.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\n\npragma solidity ^0.8.30;\n\nimport {IBeacon} from \"../beacon/IBeacon.sol\";\nimport {Address} from \"../../utils/Address.sol\";\nimport {StorageSlot} from \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n */\nlibrary ERC1967Utils {\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev The `implementation` of the proxy is invalid.\n     */\n    error ERC1967InvalidImplementation(address implementation);\n\n    /**\n     * @dev The `admin` of the proxy is invalid.\n     */\n    error ERC1967InvalidAdmin(address admin);\n\n    /**\n     * @dev The `beacon` of the proxy is invalid.\n     */\n    error ERC1967InvalidBeacon(address beacon);\n\n    /**\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\n     */\n    error ERC1967NonPayable();\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        if (newImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(newImplementation);\n        }\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(newImplementation, data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        if (newAdmin == address(0)) {\n            revert ERC1967InvalidAdmin(address(0));\n        }\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {IERC1967-AdminChanged} event.\n     */\n    function changeAdmin(address newAdmin) internal {\n        emit AdminChanged(getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is the keccak-256 hash of \"eip1967.proxy.beacon\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        if (newBeacon.code.length == 0) {\n            revert ERC1967InvalidBeacon(newBeacon);\n        }\n\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\n\n        address beaconImplementation = IBeacon(newBeacon).implementation();\n        if (beaconImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(beaconImplementation);\n        }\n    }\n\n    /**\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-BeaconUpgraded} event.\n     *\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\n     * efficiency.\n     */\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\n     * if an upgrade doesn't perform an initialization call.\n     */\n    function _checkNonPayable() private {\n        if (msg.value > 0) {\n            revert ERC1967NonPayable();\n        }\n    }\n}\n"}, "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"}, "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {UpgradeableBeacon} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"}, "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Address.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"}, "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"}}, "settings": {"remappings": ["@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/", "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/", "ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/", "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/", "forge-std/=lib/forge-std/src/", "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/", "openzeppelin-contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/", "openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/"], "optimizer": {"enabled": true}, "metadata": {"useLiteralContent": false, "bytecodeHash": "ipfs", "appendCBOR": true}, "outputSelection": {"*": {"*": ["evm.legacyAssembly"]}}, "evmVersion": "shanghai", "viaIR": false, "libraries": {}}}
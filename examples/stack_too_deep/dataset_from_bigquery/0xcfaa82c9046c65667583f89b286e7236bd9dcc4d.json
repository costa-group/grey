{"language": "Solidity", "sources": {"main.sol": {"content": "// SPDX-License-Identifier: MIT\r\n\r\n// File: contracts\\Context.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.30;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts\\Ownable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.30;\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts\\IBettingPair.sol\r\n\r\n\r\npragma solidity ^0.8.30;\r\n\r\ninterface IBettingPair {\r\n    enum CHOICE { WIN, DRAW, LOSE }\r\n    enum BETSTATUS { BETTING, REVIEWING, CLAIMING }\r\n    enum TOKENTYPE { ETH, WCI }\r\n\r\n    function setBetData(\r\n        address[] memory _account,\r\n        uint256[] memory _playerWin, uint256[] memory _playerDraw, uint256[] memory _playerLose,\r\n        uint256[] memory _playerWinWci, uint256[] memory _playerDrawWci, uint256[] memory _playerLoseWci,\r\n        uint256[] memory _betHistoryWin, uint256[] memory _betHistoryDraw, uint256[] memory _betHistoryLose,\r\n        uint256[] memory _betHistoryWinWci, uint256[] memory _betHistoryDrawWci, uint256[] memory _betHistoryLoseWci,\r\n        uint256[] memory _claimHistory, uint256[] memory _claimHistoryWci,\r\n        uint256 _totalBet, uint256 _totalBetWci,\r\n        uint256 _totalBetWin, uint256 _totalBetDraw, uint256 _totalBetLose,\r\n        uint256 _totalBetWinWci, uint256 _totalBetDrawWci, uint256 _totalBetLoseWci,\r\n        BETSTATUS _status,\r\n        CHOICE _result\r\n    ) external;\r\n\r\n    function bet(address, uint256, CHOICE, TOKENTYPE) external;\r\n    function claim(address, TOKENTYPE) external returns (uint256[] memory);\r\n\r\n    function calcEarning(address, TOKENTYPE) external view returns (uint256[] memory);\r\n    function calcMultiplier(TOKENTYPE) external view returns (uint256[] memory);\r\n\r\n    function getPlayerBetAmount(address, TOKENTYPE) external view returns (uint256[] memory);\r\n    function getPlayerClaimHistory(address, TOKENTYPE) external view returns (uint256);\r\n\r\n    function getBetResult() external view returns (CHOICE);\r\n    function setBetResult(CHOICE _result) external;\r\n\r\n    function getBetStatus() external view returns (BETSTATUS);\r\n    function setBetStatus(BETSTATUS _status) external;\r\n\r\n    function getTotalBet(TOKENTYPE) external view returns (uint256);\r\n    function getTotalBetPerChoice(TOKENTYPE) external view returns (uint256[] memory);\r\n\r\n    function getWciTokenThreshold() external view returns (uint256);\r\n    function setWciTokenThreshold(uint256) external;\r\n}\r\n\r\n// File: contracts\\SafeMath.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.30;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts\\IERC20.sol\r\n\r\n\r\npragma solidity ^0.8.30;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\BettingPair.sol\r\n\r\n\r\npragma solidity ^0.8.30;\r\n/*\r\n* @This contract actually doesn't manage token and coin transfer.\r\n* @It is responsible for only amount management.\r\n*/\r\n\r\ncontract BettingPair is Ownable, IBettingPair {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => mapping(TOKENTYPE => mapping(CHOICE => uint256))) players;\r\n    mapping(address => mapping(TOKENTYPE => mapping(CHOICE => uint256))) betHistory;\r\n    mapping(address => mapping(TOKENTYPE => uint256)) claimHistory;\r\n    CHOICE betResult;\r\n    BETSTATUS betStatus = BETSTATUS.BETTING;\r\n\r\n    mapping(TOKENTYPE => uint256) totalBet;\r\n    mapping(TOKENTYPE => mapping(CHOICE => uint256)) totalBetPerChoice;\r\n\r\n    IERC20 public wciToken = IERC20(0xC5a9BC46A7dbe1c6dE493E84A18f02E70E2c5A32);\r\n    uint256 wciTokenThreshold = 50000 * 10**9; // 50,000 WCI as a threshold.\r\n\r\n    constructor() {}\r\n\r\n    /*\r\n    * @Functions to recover the past bets\r\n    */\r\n    function setBetData(\r\n        address[] calldata _account,\r\n        uint256[] calldata _playerWin, uint256[] calldata _playerDraw, uint256[] calldata _playerLose,\r\n        uint256[] calldata _playerWinWci, uint256[] calldata _playerDrawWci, uint256[] calldata _playerLoseWci,\r\n        uint256[] calldata _betHistoryWin, uint256[] calldata _betHistoryDraw, uint256[] calldata _betHistoryLose,\r\n        uint256[] calldata _betHistoryWinWci, uint256[] calldata _betHistoryDrawWci, uint256[] calldata _betHistoryLoseWci,\r\n        uint256[] calldata _claimHistory, uint256[] calldata _claimHistoryWci,\r\n        uint256 _totalBet, uint256 _totalBetWci,\r\n        uint256 _totalBetWin, uint256 _totalBetDraw, uint256 _totalBetLose,\r\n        uint256 _totalBetWinWci, uint256 _totalBetDrawWci, uint256 _totalBetLoseWci,\r\n        BETSTATUS _status,\r\n        CHOICE _result\r\n    ) external override onlyOwner {\r\n        for (uint256 i=0; i<_account.length; i++) {\r\n            players[_account[i]][TOKENTYPE.ETH][CHOICE.WIN] = _playerWin[i];\r\n            players[_account[i]][TOKENTYPE.ETH][CHOICE.DRAW] = _playerDraw[i];\r\n            players[_account[i]][TOKENTYPE.ETH][CHOICE.LOSE] = _playerLose[i];\r\n            players[_account[i]][TOKENTYPE.WCI][CHOICE.WIN] = _playerWinWci[i];\r\n            players[_account[i]][TOKENTYPE.WCI][CHOICE.DRAW] = _playerDrawWci[i];\r\n            players[_account[i]][TOKENTYPE.WCI][CHOICE.LOSE] = _playerLoseWci[i];\r\n\r\n            betHistory[_account[i]][TOKENTYPE.ETH][CHOICE.WIN] = _betHistoryWin[i];\r\n            betHistory[_account[i]][TOKENTYPE.ETH][CHOICE.DRAW] = _betHistoryDraw[i];\r\n            betHistory[_account[i]][TOKENTYPE.ETH][CHOICE.LOSE] = _betHistoryLose[i];\r\n            betHistory[_account[i]][TOKENTYPE.WCI][CHOICE.WIN] = _betHistoryWinWci[i];\r\n            betHistory[_account[i]][TOKENTYPE.WCI][CHOICE.DRAW] = _betHistoryDrawWci[i];\r\n            betHistory[_account[i]][TOKENTYPE.WCI][CHOICE.LOSE] = _betHistoryLoseWci[i];\r\n\r\n            claimHistory[_account[i]][TOKENTYPE.ETH] = _claimHistory[i];\r\n            claimHistory[_account[i]][TOKENTYPE.WCI] = _claimHistoryWci[i];\r\n\r\n            totalBet[TOKENTYPE.ETH] = _totalBet;\r\n            totalBet[TOKENTYPE.WCI] = _totalBetWci;\r\n\r\n            totalBetPerChoice[TOKENTYPE.ETH][CHOICE.WIN] = _totalBetWin;\r\n            totalBetPerChoice[TOKENTYPE.ETH][CHOICE.DRAW] = _totalBetDraw;\r\n            totalBetPerChoice[TOKENTYPE.ETH][CHOICE.LOSE] = _totalBetLose;\r\n            totalBetPerChoice[TOKENTYPE.WCI][CHOICE.WIN] = _totalBetWinWci;\r\n            totalBetPerChoice[TOKENTYPE.WCI][CHOICE.DRAW] = _totalBetDrawWci;\r\n            totalBetPerChoice[TOKENTYPE.WCI][CHOICE.LOSE] = _totalBetLoseWci;\r\n\r\n            betStatus = _status;\r\n            betResult = _result;\r\n        }\r\n    }\r\n\r\n    /*\r\n    * @Function to bet (Main function).\r\n    * @params:\r\n    *   _player: user wallet address\r\n    *   _amount: bet amount\r\n    *   _choice: bet choice (3 choices - First team wins, draws and loses)\r\n    *   _token: Users can bet using ETH or WCI\r\n    */\r\n    function bet(address _player, uint256 _amount, CHOICE _choice, TOKENTYPE _token)\r\n        external\r\n        override\r\n        onlyOwner \r\n    {\r\n        require(betStatus == BETSTATUS.BETTING, \"You can not bet at this time.\");\r\n        totalBet[_token] += _amount;\r\n        totalBetPerChoice[_token][_choice] += _amount;\r\n        players[_player][_token][_choice] += _amount;\r\n        betHistory[_player][_token][_choice] += _amount;\r\n    }\r\n\r\n    /*\r\n    * @Function to claim earnings from bet.\r\n    * @It returns how many ether or WCI user will earn from bet.\r\n    */\r\n    function claim(address _player, TOKENTYPE _token) external override onlyOwner returns (uint256[] memory) {\r\n        require(betStatus == BETSTATUS.CLAIMING, \"You can not claim at this time.\");\r\n\r\n        uint256[] memory res = calculateEarning(_player, betResult, _token);\r\n        claimHistory[_player][_token] = res[0];\r\n        players[_player][_token][CHOICE.WIN] = 0;\r\n        players[_player][_token][CHOICE.DRAW] = 0;\r\n        players[_player][_token][CHOICE.LOSE] = 0;\r\n\r\n        return res;\r\n    }\r\n\r\n    /*\r\n    * @returns an array of 7 elements. The first element is user's winning amount and the second element is\r\n    *   site owner's profit which will be transferred to tax collector wallet. The remaining amounts are collateral\r\n    *   token amounts.\r\n    */\r\n    function calculateEarning(address _player, CHOICE _choice, TOKENTYPE _token) internal view returns (uint256[] memory) {\r\n        uint256[] memory res = new uint256[](2);\r\n\r\n        uint256 userBal = players[_player][_token][_choice];\r\n\r\n        // If there are no opponent bets, the player will claim his original bet amount.\r\n        if (totalBetPerChoice[_token][CHOICE.WIN] == totalBet[_token] && players[_player][_token][CHOICE.WIN] > 0) {\r\n            res[0] = betHistory[_player][_token][CHOICE.WIN];\r\n            return res;\r\n        } else if (totalBetPerChoice[_token][CHOICE.DRAW] == totalBet[_token] && players[_player][_token][CHOICE.DRAW] > 0) {\r\n            res[0] = betHistory[_player][_token][CHOICE.DRAW];\r\n            return res;\r\n        } else if (totalBetPerChoice[_token][CHOICE.LOSE] == totalBet[_token] && players[_player][_token][CHOICE.LOSE] > 0) {\r\n            res[0] = betHistory[_player][_token][CHOICE.LOSE];\r\n            return res;\r\n        } else if (totalBetPerChoice[_token][_choice] == 0) {\r\n            return res;\r\n        }\r\n\r\n        uint256 _wciTokenBal = wciToken.balanceOf(_player);\r\n\r\n        // If the token is ETH, the player will take 5% tax if he holds enough WCI token. Otherwise he will take 10% tax.\r\n        if (_token == TOKENTYPE.ETH) {\r\n            if (_wciTokenBal >= wciTokenThreshold) {\r\n                res[0] = userBal + userBal.mul(totalBet[_token]-totalBetPerChoice[_token][_choice]).mul(19).div(20).div(totalBetPerChoice[_token][_choice]);\r\n                res[1] = userBal.mul(totalBet[_token]-totalBetPerChoice[_token][_choice]).div(20).div(totalBetPerChoice[_token][_choice]);\r\n            } else {\r\n                res[0] = userBal + userBal.mul(totalBet[_token]-totalBetPerChoice[_token][_choice]).mul(9).div(10).div(totalBetPerChoice[_token][_choice]);\r\n                res[1] = userBal.mul(totalBet[_token]-totalBetPerChoice[_token][_choice]).div(10).div(totalBetPerChoice[_token][_choice]);\r\n            }\r\n        }\r\n        // If the token is WCI, there is no tax.\r\n        else if (_token == TOKENTYPE.WCI) {\r\n            res[0] = totalBet[_token].mul(userBal).div(totalBetPerChoice[_token][_choice]);\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    /*\r\n    * @Function to calculate earning for given player and token.\r\n    */\r\n    function calcEarning(address _player, TOKENTYPE _token) external override view onlyOwner returns (uint256[] memory) {\r\n        uint256[] memory res = new uint256[](3);\r\n        res[0] = calculateEarning(_player, CHOICE.WIN, _token)[0];\r\n        res[1] = calculateEarning(_player, CHOICE.DRAW, _token)[0];\r\n        res[2] = calculateEarning(_player, CHOICE.LOSE, _token)[0];\r\n        return res;\r\n    }\r\n\r\n    // Calculate how many times reward will player take. It uses 10% tax formula to give users the approximate multiplier before bet.\r\n    function calculateMultiplier(CHOICE _choice, IBettingPair.TOKENTYPE _token) internal view returns (uint256) {\r\n        if (_token == IBettingPair.TOKENTYPE.ETH) {\r\n            if (totalBetPerChoice[_token][_choice] == 0) {\r\n                return 1000;\r\n            } else {\r\n                return totalBet[_token].mul(900).div(totalBetPerChoice[_token][_choice]) + 100;       \r\n            }\r\n        } else {\r\n            if (totalBetPerChoice[_token][_choice] == 0) {\r\n                return 980;\r\n            } else {\r\n                return totalBet[_token].mul(1000).div(totalBetPerChoice[_token][_choice]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n    * @Function to calculate multiplier.\r\n    */\r\n    function calcMultiplier(IBettingPair.TOKENTYPE _token) external override view onlyOwner returns (uint256[] memory) {\r\n        uint256[] memory res = new uint256[](3);\r\n        res[0] = calculateMultiplier(CHOICE.WIN, _token);\r\n        res[1] = calculateMultiplier(CHOICE.DRAW, _token);\r\n        res[2] = calculateMultiplier(CHOICE.LOSE, _token);\r\n        return res;\r\n    }\r\n\r\n    /*\r\n    * @Function to get player bet amount.\r\n    * @It uses betHistory variable because players variable is initialized to zero if user claims.\r\n    */\r\n    function getPlayerBetAmount(address _player, TOKENTYPE _token) external override view onlyOwner returns (uint256[] memory) {\r\n        uint256[] memory arr = new uint256[](3);\r\n        arr[0] = betHistory[_player][_token][CHOICE.WIN];\r\n        arr[1] = betHistory[_player][_token][CHOICE.DRAW];\r\n        arr[2] = betHistory[_player][_token][CHOICE.LOSE];\r\n\r\n        return arr;\r\n    }\r\n\r\n    /*\r\n    * @Function to get player claim history.\r\n    */\r\n    function getPlayerClaimHistory(address _player, TOKENTYPE _token) external override view onlyOwner returns (uint256) {\r\n        return claimHistory[_player][_token];\r\n    }\r\n\r\n    /*\r\n    * @Function to get bet result.\r\n    */\r\n    function getBetResult() external view override onlyOwner returns (CHOICE) {\r\n        return betResult;\r\n    }\r\n\r\n    /*\r\n    * @Function to set the bet result.\r\n    */\r\n    function setBetResult(CHOICE _result) external override onlyOwner {\r\n        betResult = _result;\r\n        betStatus = BETSTATUS.CLAIMING;\r\n    }\r\n\r\n    /*\r\n    * @Function to get bet status.\r\n    */\r\n    function getBetStatus() external view override onlyOwner returns (BETSTATUS) {\r\n        return betStatus;\r\n    }\r\n\r\n    /*\r\n    * @Function to set bet status.\r\n    */\r\n    function setBetStatus(BETSTATUS _status) external override onlyOwner {\r\n        betStatus = _status;\r\n    }\r\n\r\n    /*\r\n    * @Function to get total bet amount.\r\n    */\r\n    function getTotalBet(TOKENTYPE _token) external view override onlyOwner returns (uint256) {\r\n        return totalBet[_token];\r\n    }\r\n\r\n    /*\r\n    * @Function to get total bet amounts per choice.\r\n    * @There are 3 choices(WIN, DRAW, LOSE) so it returns an array of 3 elements.\r\n    */\r\n    function getTotalBetPerChoice(TOKENTYPE _token) external view override onlyOwner returns (uint256[] memory) {\r\n        uint256[] memory arr = new uint256[](3);\r\n        arr[0] = totalBetPerChoice[_token][CHOICE.WIN];\r\n        arr[1] = totalBetPerChoice[_token][CHOICE.DRAW];\r\n        arr[2] = totalBetPerChoice[_token][CHOICE.LOSE];\r\n\r\n        return arr;\r\n    }\r\n\r\n    /*\r\n    * @Function to get WCI token threshold.\r\n    */\r\n    function getWciTokenThreshold() external view override onlyOwner returns (uint256) {\r\n        return wciTokenThreshold;\r\n    }\r\n\r\n    /*\r\n    * @Function to set WCI token threshold.\r\n    */\r\n    function setWciTokenThreshold(uint256 _threshold) external override onlyOwner {\r\n        wciTokenThreshold = _threshold;\r\n    }\r\n}\r\n\r\n// File: contracts\\BettingRouter.sol\r\n\r\n\r\npragma solidity ^0.8.30;\r\ncontract BettingRouter is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (uint256 => address) pairs; // All pair contract addresses\r\n    uint256 matchId;\r\n    address taxCollectorAddress = 0xC9dc42525637a96Ac978C81e35f059201c5039c8;        // Tax collector address\r\n    uint256 totalClaimEth;\r\n    uint256 totalClaimWci;\r\n    uint256 totalWinnerCountEth;\r\n    uint256 totalWinnerCountWci;\r\n    uint256 wciTax = 2;\r\n\r\n    IERC20 wciToken = IERC20(0xC5a9BC46A7dbe1c6dE493E84A18f02E70E2c5A32);\r\n\r\n    constructor() {}\r\n\r\n    /*\r\n    * @Check if the input pair id is valid\r\n    */\r\n    modifier onlyValidPair(uint256 _id) {\r\n        require(_id >= 0 && _id < matchId, \"Invalid pair id.\");\r\n        _;\r\n    }\r\n\r\n    /*\r\n    * @Check if the amount condition meets per token\r\n    */\r\n    modifier betConditions(uint _amount, IBettingPair.TOKENTYPE _token) {\r\n        if (_token == IBettingPair.TOKENTYPE.ETH) {\r\n            require(_amount >= 0.01 ether, \"Insuffisant amount, please increase your bet!\");\r\n        } else if (_token == IBettingPair.TOKENTYPE.WCI) {\r\n            require(_amount >= 1000 gwei, \"Insuffisant amount, please increase your bet!\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    /*\r\n    * @Function to create one pair for a match\r\n    */\r\n    function createOne() public onlyOwner {\r\n        BettingPair _pair = new BettingPair();\r\n        pairs[matchId] = address(_pair);\r\n        matchId ++;\r\n    }\r\n\r\n    /*\r\n    * Function for betting with ethers.\r\n    * This function should be separated from other betting function because this is payable function.\r\n    */\r\n    function betEther(uint256 _pairId, IBettingPair.CHOICE _choice) external payable\r\n        onlyValidPair(_pairId)\r\n        betConditions(msg.value, IBettingPair.TOKENTYPE.ETH)\r\n    {\r\n        IBettingPair(pairs[_pairId]).bet(msg.sender, msg.value, _choice, IBettingPair.TOKENTYPE.ETH);\r\n    }\r\n\r\n    /*\r\n    * Function for betting with WCI.\r\n    * This function should be separated from ETH and other tokens because this token's transferFrom function has default tax rate.\r\n    */\r\n    function betWCI(uint256 _pairId, uint256 _betAmount, IBettingPair.CHOICE _choice) external\r\n        onlyValidPair(_pairId)\r\n        betConditions(_betAmount, IBettingPair.TOKENTYPE.WCI)\r\n    {\r\n        wciToken.transferFrom(msg.sender, address(this), _betAmount);\r\n\r\n        // Apply 5% tax to all bet amounts.\r\n        IBettingPair(pairs[_pairId]).bet(msg.sender, _betAmount.mul(100-wciTax).div(100), _choice, IBettingPair.TOKENTYPE.WCI);\r\n    }\r\n\r\n    /*\r\n    * @Function to claim earnings.\r\n    */\r\n    function claim(uint256 _pairId, IBettingPair.TOKENTYPE _token) external onlyValidPair(_pairId) {\r\n        uint256[] memory claimInfo = IBettingPair(pairs[_pairId]).claim(msg.sender, _token);\r\n        uint256 _amountClaim = claimInfo[0];\r\n        uint256 _amountTax = claimInfo[1];\r\n        require(_amountClaim > 0, \"You do not have any profit in this bet\");\r\n\r\n        if (_token == IBettingPair.TOKENTYPE.ETH) {\r\n            payable(msg.sender).transfer(_amountClaim);\r\n            payable(taxCollectorAddress).transfer(_amountTax);\r\n        } else if (_token == IBettingPair.TOKENTYPE.WCI) {\r\n            wciToken.transfer(msg.sender, _amountClaim);\r\n        }\r\n        \r\n        if (_token == IBettingPair.TOKENTYPE.ETH) {\r\n            totalClaimEth += _amountClaim;\r\n            totalWinnerCountEth ++;\r\n        } else {\r\n            totalClaimWci += _amountClaim;\r\n            totalWinnerCountWci ++;\r\n        }\r\n    }\r\n\r\n    /*\r\n    * @Function to withdraw tokens from router contract.\r\n    */\r\n    function withdrawPFromRouter(uint256 _amount, IBettingPair.TOKENTYPE _token) external onlyOwner {\r\n        if (_token == IBettingPair.TOKENTYPE.ETH) {\r\n            payable(owner()).transfer(_amount);\r\n        } else if (_token == IBettingPair.TOKENTYPE.WCI) {\r\n            wciToken.transfer(owner(), _amount);\r\n        }\r\n    }\r\n\r\n    /*\r\n    * @Function to get player bet information with triple data per match(per player choice).\r\n    * @There are 3 types of information - first part(1/3 of total) is player bet amount information.\r\n        Second part(1/3 of total) is multiplier information. Third part(1/3 of total) is player earning information.\r\n    * @These information were separated before but merged to one function because of capacity of contract.\r\n    */\r\n    function getBetTripleInformation(address _player, IBettingPair.TOKENTYPE _token) external view returns (uint256[] memory) {\r\n        uint256[] memory res = new uint256[](matchId * 9);\r\n\r\n        for (uint256 i=0; i<matchId; i++) {\r\n            uint256[] memory oneAmount = IBettingPair(pairs[i]).getPlayerBetAmount(_player, _token);\r\n            res[i*3] = oneAmount[0];\r\n            res[i*3 + 1] = oneAmount[1];\r\n            res[i*3 + 2] = oneAmount[2];\r\n\r\n            uint256[] memory oneMultiplier = IBettingPair(pairs[i]).calcMultiplier(_token);\r\n            res[matchId*3 + i*3] = oneMultiplier[0];\r\n            res[matchId*3 + i*3 + 1] = oneMultiplier[1];\r\n            res[matchId*3 + i*3 + 2] = oneMultiplier[2];\r\n\r\n            uint256[] memory oneClaim = IBettingPair(pairs[i]).calcEarning(_player, _token);\r\n            res[matchId*6 + i*3] = oneClaim[0];\r\n            res[matchId*6 + i*3 + 1] = oneClaim[1];\r\n            res[matchId*6 + i*3 + 2] = oneClaim[2];\r\n        }\r\n        \r\n        return res;\r\n    }\r\n\r\n    /*\r\n    * @Function to get player bet information with single data per match.\r\n    */\r\n    function getBetSingleInformation(address _player, IBettingPair.TOKENTYPE _token) external view returns (uint256[] memory) {\r\n        uint256[] memory res = new uint256[](matchId * 4);\r\n\r\n        for (uint256 i=0; i<matchId; i++) {\r\n            res[i] = uint256(IBettingPair(pairs[i]).getBetStatus());\r\n            res[matchId + i] = uint256(IBettingPair(pairs[i]).getBetResult());\r\n            res[matchId*2 + i] = IBettingPair(pairs[i]).getPlayerClaimHistory(_player, _token);\r\n            res[matchId*3 + i] = IBettingPair(pairs[i]).getTotalBet(_token);\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    /*\r\n    * @Function to get the newly creating match id.\r\n    */\r\n    function getMatchId() external view returns (uint256) {\r\n        return matchId;\r\n    }\r\n\r\n    /*\r\n    * @Function to get tax collector address\r\n    */\r\n    function getTaxCollectorAddress() external view returns (address) {\r\n        return taxCollectorAddress;\r\n    }\r\n\r\n    /*\r\n    * @Function to get match status per token.\r\n    * @This includes total claim amount and total winner count.\r\n    */\r\n    function getBetStatsData() external view returns (uint256, uint256, uint256, uint256) {\r\n        return (totalClaimEth, totalWinnerCountEth, totalClaimWci, totalWinnerCountWci);\r\n    }\r\n\r\n    /*\r\n    * @Function to set bet status data.\r\n    * @This function is needed because we upgraded the smart contract for several times and each time we upgrade\r\n    *   the smart contract, we need to set these values so that they can continue to count.\r\n    */\r\n    function setBetStatsData(uint256 _totalClaim, uint256 _totalWinnerCount, IBettingPair.TOKENTYPE _token) external onlyOwner {\r\n        if (_token == IBettingPair.TOKENTYPE.ETH) {\r\n            totalClaimEth = _totalClaim;\r\n            totalWinnerCountEth = _totalWinnerCount;\r\n        } else {\r\n            totalClaimWci = _totalClaim;\r\n            totalWinnerCountWci = _totalWinnerCount;\r\n        }\r\n    }\r\n\r\n    /*\r\n    * @Function to get WCI token threshold.\r\n    * @Users tax rate(5% or 10%) will be controlled by this value.\r\n    */\r\n    function getWciTokenThreshold() external view returns (uint256) {\r\n        if (matchId == 0) return 50000 * 10**9;\r\n        else return IBettingPair(pairs[0]).getWciTokenThreshold();\r\n    }\r\n\r\n    /*\r\n    * @Function to get WCI token tax amount.\r\n    */\r\n    function getWciTax() external view returns (uint256) {\r\n        return wciTax;\r\n    }\r\n\r\n    /*\r\n    * @Function to set WCI token tax amount.\r\n    */\r\n    function setWciTax(uint256 tax) external onlyOwner {\r\n        require(tax >= 0 && tax < 100, \"Tax should be between 0 and 100\");\r\n        wciTax = tax;\r\n    }\r\n\r\n    /*\r\n    * @Function to set bet result.\r\n    */\r\n    function setBetResult(uint256 _pairId, IBettingPair.CHOICE _result) external onlyOwner onlyValidPair(_pairId) {\r\n        IBettingPair(pairs[_pairId]).setBetResult(_result);\r\n    }\r\n\r\n    /*\r\n    * @Function to set bet status.\r\n    */\r\n    function setBetStatus(uint256 _pairId, IBettingPair.BETSTATUS _status) external onlyValidPair(_pairId) {\r\n        IBettingPair(pairs[_pairId]).setBetStatus(_status);\r\n    }\r\n\r\n    /*\r\n    * @Function to set tax collector address.\r\n    */\r\n    function setTaxCollectorAddress(address _address) external onlyOwner {\r\n        taxCollectorAddress = _address;\r\n    }\r\n\r\n    /*\r\n    * @Function to set WCI token threshold.\r\n    */\r\n    function setWciTokenThreshold(uint256 _threshold) external onlyOwner {\r\n        for (uint256 i=0; i<matchId; i++) {\r\n            IBettingPair(pairs[i]).setWciTokenThreshold(_threshold);\r\n        }\r\n    }\r\n\r\n    /*\r\n    * @Function to deposit ETH.\r\n    */\r\n    function depositEth() external payable {\r\n        require(msg.value >= 0.01 ether, \"Minimum deposit amount is 0.01\");\r\n    }\r\n\r\n    /*\r\n    * @Function to deposit WCI\r\n    */\r\n    function depositWci(uint256 amount) external onlyOwner {\r\n        require(amount >= 1000 * 10 ** 9, \"Minimum deposit WCI amount is 1000\");\r\n        wciToken.transferFrom(msg.sender, address(this), amount);\r\n    }\r\n\r\n    /*\r\n    * @Function to initiate the bets\r\n    */\r\n    function initiateBets(\r\n        uint256 _pairId,\r\n        address[] calldata _account,\r\n        uint256[] calldata _playerWin, uint256[] calldata _playerDraw, uint256[] calldata _playerLose,\r\n        uint256[] calldata _playerWinWci, uint256[] calldata _playerDrawWci, uint256[] calldata _playerLoseWci,\r\n        uint256[] calldata _betHistoryWin, uint256[] calldata _betHistoryDraw, uint256[] calldata _betHistoryLose,\r\n        uint256[] calldata _betHistoryWinWci, uint256[] calldata _betHistoryDrawWci, uint256[] calldata _betHistoryLoseWci,\r\n        uint256[] calldata _claimHistory, uint256[] calldata _claimHistoryWci,\r\n        uint256 _totalBet, uint256 _totalBetWci,\r\n        uint256 _totalBetWin, uint256 _totalBetDraw, uint256 _totalBetLose,\r\n        uint256 _totalBetWinWci, uint256 _totalBetDrawWci, uint256 _totalBetLoseWci,\r\n        IBettingPair.BETSTATUS _status,\r\n        IBettingPair.CHOICE _result\r\n    ) external onlyValidPair(_pairId) onlyOwner {\r\n        IBettingPair(pairs[_pairId]).setBetData(\r\n            _account,\r\n            _playerWin, _playerDraw, _playerLose,\r\n            _playerWinWci, _playerDrawWci, _playerLoseWci,\r\n            _betHistoryWin, _betHistoryDraw, _betHistoryLose,\r\n            _betHistoryWinWci, _betHistoryDrawWci, _betHistoryLoseWci,\r\n            _claimHistory, _claimHistoryWci,\r\n            _totalBet, _totalBetWci,\r\n            _totalBetWin, _totalBetDraw, _totalBetLose,\r\n            _totalBetWinWci, _totalBetDrawWci, _totalBetLoseWci,\r\n            _status,\r\n            _result\r\n        );\r\n    }\r\n}\r\n\r\n"}}, "settings": {"optimizer": {"enabled": true}, "viaIR": false, "outputSelection": {"*": {"*": ["evm.legacyAssembly"]}}, "evmVersion": "byzantium"}}
{"language": "Solidity", "sources": {"@openzeppelin/contracts/utils/Base64.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Provides a set of functions to operate with Base64 strings.\n *\n * _Available since v4.5._\n */\nlibrary Base64 {\n    /**\n     * @dev Base64 Encoding/Decoding Table\n     */\n    string internal constant _TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /**\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\n     */\n    function encode(bytes memory data) internal pure returns (string memory) {\n        /**\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\n         */\n        if (data.length == 0) return \"\";\n\n        // Loads the table into memory\n        string memory table = _TABLE;\n\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\n        // and split into 4 numbers of 6 bits.\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\n        // - `data.length + 2`  -> Round up\n        // - `/ 3`              -> Number of 3-bytes chunks\n        // - `4 *`              -> 4 characters for each chunk\n        string memory result = new string(4 * ((data.length + 2) / 3));\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Prepare the lookup table (skip the first \"length\" byte)\n            let tablePtr := add(table, 1)\n\n            // Prepare result pointer, jump over length\n            let resultPtr := add(result, 32)\n\n            // Run over the input, 3 bytes at a time\n            for {\n                let dataPtr := data\n                let endPtr := add(data, mload(data))\n            } lt(dataPtr, endPtr) {\n\n            } {\n                // Advance 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // To write each character, shift the 3 bytes (18 bits) chunk\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\n                // and apply logical AND with 0x3F which is the number of\n                // the previous character in the ASCII table prior to the Base64 Table\n                // The result is then added to the table to get the character to write,\n                // and finally write it in the result pointer but with a left shift\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n            }\n\n            // When data `bytes` is not exactly 3 bytes long\n            // it is padded with `=` characters at the end\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n                mstore8(sub(resultPtr, 2), 0x3d)\n            }\n            case 2 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n            }\n        }\n\n        return result;\n    }\n}\n"}, "@openzeppelin/contracts/utils/math/Math.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.30;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"}, "@openzeppelin/contracts/utils/Strings.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.30;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"}, "contracts/owl-deriv/descriptor.sol": {"content": "// SPDX-License-Identifier: MIT\r\n\r\n/*********************************\r\n*                                *\r\n*               OwO              *\r\n*                                *\r\n *********************************/\r\n\r\npragma solidity ^0.8.30;\r\n\r\nimport \"@openzeppelin/contracts/utils/Base64.sol\";\r\nimport \"./idescriptor.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\ncontract OwODescriptorV1 is IOwODescriptor {\r\n    struct Color {\r\n        string value;\r\n        string name;\r\n    }\r\n    struct Trait {\r\n        string content;\r\n        string name;\r\n        Color color;\r\n    }\r\n    using Strings for uint256;\r\n\r\n    string private constant SVG_END_TAG = '</svg>';\r\n\r\n    function tokenURI(uint256 tokenId, uint256 seed) external pure override returns (string memory) {\r\n        uint256[4] memory colors = [seed % 100000000000000 / 1000000000000, seed % 10000000000 / 100000000, seed % 1000000 / 10000, seed % 100];\r\n        Trait memory head = getHead(seed / 100000000000000, colors[0]);\r\n        Trait memory face = getFace(seed % 1000000000000 / 10000000000, colors[1]);\r\n        Trait memory body = getBody(seed % 100000000 / 1000000, colors[2]);\r\n        Trait memory feet = getFeet(seed % 10000 / 100, colors[3]);\r\n        string memory colorCount = calculateColorCount(colors);\r\n\r\n        string memory rawSvg = string(\r\n            abi.encodePacked(\r\n                '<svg width=\"320\" height=\"320\" viewBox=\"0 0 320 320\" xmlns=\"http://www.w3.org/2000/svg\">',\r\n                '<rect width=\"100%\" height=\"100%\" fill=\"#121212\"/>',\r\n                '<text x=\"160\" y=\"130\" font-family=\"Courier,monospace\" font-weight=\"700\" font-size=\"20\" text-anchor=\"middle\" letter-spacing=\"1\">',\r\n                head.content,\r\n                face.content,\r\n                body.content,\r\n                feet.content,\r\n                '</text>',\r\n                SVG_END_TAG\r\n            )\r\n        );\r\n\r\n        string memory encodedSvg = Base64.encode(bytes(rawSvg));\r\n        string memory description = \"OwO, what's this?\";\r\n\r\n        return string(\r\n            abi.encodePacked(\r\n                'data:application/json;base64,',\r\n                Base64.encode(\r\n                    bytes(\r\n                        abi.encodePacked(\r\n                            '{',\r\n                            '\"name\":\"OwO #', tokenId.toString(), '\",',\r\n                            '\"description\":\"', description, '\",',\r\n                            '\"image\": \"', 'data:image/svg+xml;base64,', encodedSvg, '\",',\r\n                            '\"attributes\": [{\"trait_type\": \"Head\", \"value\": \"', head.name,' (',head.color.name,')', '\"},',\r\n                            '{\"trait_type\": \"Face\", \"value\": \"', face.name,' (',face.color.name,')', '\"},',\r\n                            '{\"trait_type\": \"Body\", \"value\": \"', body.name,' (',body.color.name,')', '\"},',\r\n                            '{\"trait_type\": \"Feet\", \"value\": \"', feet.name,' (',feet.color.name,')', '\"},',\r\n                            '{\"trait_type\": \"Colors\", \"value\": ', colorCount, '}',\r\n                            ']',\r\n                            '}')\r\n                    )\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    function getColor(uint256 seed) private pure returns (Color memory) {\r\n        if (seed == 10) {\r\n            return Color(\"#e60049\", \"UA Red\");\r\n        }\r\n        if (seed == 11) {\r\n            return Color(\"#82b6b9\", \"Pewter Blue\");\r\n        }\r\n        if (seed == 12) {\r\n            return Color(\"#b3d4ff\", \"Pale Blue\");\r\n        }\r\n        if (seed == 13) {\r\n            return Color(\"#00ffff\", \"Aqua\");\r\n        }\r\n        if (seed == 14) {\r\n            return Color(\"#0bb4ff\", \"Blue Bolt\");\r\n        }\r\n        if (seed == 15) {\r\n            return Color(\"#1853ff\", \"Blue RYB\");\r\n        }\r\n        if (seed == 16) {\r\n            return Color(\"#35d435\", \"Lime Green\");\r\n        }\r\n        if (seed == 17) {\r\n            return Color(\"#61ff75\", \"Screamin Green\");\r\n        }\r\n        if (seed == 18) {\r\n            return Color(\"#00bfa0\", \"Aqua\");\r\n        }\r\n        if (seed == 19) {\r\n            return Color(\"#ffa300\", \"Orange\");\r\n        }\r\n        if (seed == 20) {\r\n            return Color(\"#fd7f6f\", \"Coral Reef\");\r\n        }\r\n        if (seed == 21) {\r\n            return Color(\"#d0f400\", \"Volt\");\r\n        }\r\n        if (seed == 22) {\r\n            return Color(\"#9b19f5\", \"Purple X11\");\r\n        }\r\n        if (seed == 23) {\r\n            return Color(\"#dc0ab4\", \"Deep Magenta\");\r\n        }\r\n        if (seed == 24) {\r\n            return Color(\"#f46a9b\", \"Cyclamen\");\r\n        }\r\n        if (seed == 25) {\r\n            return Color(\"#bd7ebe\", \"African Violet\");\r\n        }\r\n        if (seed == 26) {\r\n            return Color(\"#fdcce5\", \"Classic Rose\");\r\n        }\r\n        if (seed == 27) {\r\n            return Color(\"#FCE74C\", \"Gargoyle Gas\");\r\n        }\r\n        if (seed == 28) {\r\n            return Color(\"#eeeeee\", \"Bright Gray\");\r\n        }\r\n        if (seed == 29) {\r\n            return Color(\"#7f766d\", \"Sonic Silver\");\r\n        }\r\n\r\n        return Color('','');\r\n    }\r\n\r\n    function getHead(uint256 seed, uint256 colorSeed) private pure returns (Trait memory) {\r\n        Color memory color = getColor(colorSeed);\r\n        string memory content;\r\n        string memory name;\r\n        if (seed == 10) {\r\n            content = \"^   ^\";\r\n            name = \"Cat Ears\";\r\n        }\r\n        if (seed == 11) {\r\n            content = \"-----\";\r\n            name = \"Bald\";\r\n        }\r\n        if (seed == 12) {\r\n            content = \"_[]_\";\r\n            name = \"Top Hat\";\r\n        }\r\n        if (seed == 13) {\r\n            content = \"/////\";\r\n            name = \"Punk\";\r\n        }\r\n        if (seed == 14) {\r\n            content = \"^^^^^\";\r\n            name = \"Spikes\";\r\n        }\r\n        if (seed == 15) {\r\n            content = \"/\\\\_/\\\\\";\r\n            name = \"Horns\";\r\n        }\r\n        if (seed == 16) {\r\n            content = \"--~--\";\r\n            name = \"Curl\";\r\n        }\r\n\r\n\r\n        return Trait(string(abi.encodePacked('<tspan fill=\"', color.value, '\">', content, '</tspan>')), name, color);\r\n    }\r\n\r\n    function getFace(uint256 seed, uint256 colorSeed) private pure returns (Trait memory) {\r\n        Color memory color = getColor(colorSeed);\r\n        string memory content;\r\n        string memory name;\r\n        if (seed == 10) {\r\n            content = unicode\"(\u25d5\u30ee\u25d5)\";\r\n            name = \"Happy\";\r\n        }\r\n        if (seed == 11) {\r\n            content = unicode\"\u0295 \u2022\u1d25\u2022 \u0294\";\r\n            name = \"Bear\";\r\n        }\r\n        if (seed == 12) {\r\n            content = unicode\"(\u25d5\u203f\u25d5\u273f)\";\r\n            name = \"Flower Girl\";\r\n        }\r\n        if (seed == 13) {\r\n            content = unicode\"( \u0298\u11bd\u0298 )\";\r\n            name = \"Cat\";\r\n        }\r\n        if (seed == 14) {\r\n            content = unicode\"( =_= )\";\r\n            name = \"Jolly\";\r\n        }\r\n        if (seed == 15) {\r\n            content = \"(O w O)\";\r\n            name = \"OwO\";\r\n        }\r\n\r\n        return Trait(string(abi.encodePacked('<tspan dy=\"20\" x=\"160\" fill=\"', color.value, '\">', content, '</tspan>')), name, color);\r\n    }\r\n\r\n    function getBody(uint256 seed, uint256 colorSeed) private pure returns (Trait memory) {\r\n        Color memory color = getColor(colorSeed);\r\n        string memory content;\r\n        string memory name;\r\n        if (seed == 10) {\r\n            content = \"(\\\\ _ /)\";\r\n            name = \"Normal\";\r\n        }\r\n        if (seed == 11) {\r\n            content = \"(\\\\ o \\\\)\";\r\n            name = \"BellyButton\";\r\n        }\r\n        if (seed == 12) {\r\n            content = \"(= | =)\";\r\n            name = \"Muscular\";\r\n        }\r\n        if (seed == 13) {\r\n            content = \"(\\\\ + /)\";\r\n            name = \"Priest\";\r\n        }\r\n        if (seed == 14) {\r\n            content = \"(  : ~)\";\r\n            name = \"Shirt\";\r\n        }\r\n        if (seed == 15) {\r\n            content = \"(\\\\ : /)\";\r\n            name = \"Suit\";\r\n        }\r\n        if (seed == 16) {\r\n            content = \"(\\\\ ~ /)\";\r\n            name = \"Tuxedo\";\r\n        }\r\n\r\n        return Trait(string(abi.encodePacked('<tspan dy=\"25\" x=\"160\" fill=\"', color.value, '\">', content, '</tspan>')), name, color);\r\n    }\r\n\r\n    function getFeet(uint256 seed, uint256 colorSeed) private pure returns (Trait memory) {\r\n        Color memory color = getColor(colorSeed);\r\n        string memory content;\r\n        string memory name;\r\n        uint256 y;\r\n        if (seed == 10) {\r\n            content = \"\\\\ \\\\\";\r\n            name = \"Leaning\";\r\n            y = 22;\r\n        }\r\n        if (seed == 11) {\r\n            content = \"| |\";\r\n            name = \"Standing\";\r\n            y = 22;\r\n        }\r\n\r\n        return Trait(string(abi.encodePacked('<tspan dy=\"',y.toString(),'\" x=\"160\" fill=\"', color.value, '\">', content, '</tspan>')), name, color);\r\n    }\r\n\r\n    function calculateColorCount(uint256[4] memory colors) private pure returns (string memory) {\r\n        uint256 count;\r\n        for (uint256 i = 0; i < 4; i++) {\r\n            for (uint256 j = 0; j < 4; j++) {\r\n                if (colors[i] == colors[j]) {\r\n                    count++;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (count == 4) {\r\n            return '4';\r\n        }\r\n        if (count == 6) {\r\n            return '3';\r\n        }\r\n        if (count == 8 || count == 10) {\r\n            return '2';\r\n        }\r\n        if (count == 16) {\r\n            return '1';\r\n        }\r\n\r\n        return '0';\r\n    }\r\n}"}, "contracts/owl-deriv/idescriptor.sol": {"content": "// SPDX-License-Identifier: MIT\r\n\r\n/*********************************\r\n*                                *\r\n*               OwO              *\r\n*                                *\r\n *********************************/\r\n\r\npragma solidity ^0.8.30;\r\n\r\ninterface IOwODescriptor {\r\n    function tokenURI(uint256 tokenId, uint256 seed) external view returns (string memory);\r\n}"}}, "settings": {"viaIR": false, "optimizer": {"enabled": true}, "outputSelection": {"*": {"*": ["evm.legacyAssembly"]}}, "libraries": {}}}
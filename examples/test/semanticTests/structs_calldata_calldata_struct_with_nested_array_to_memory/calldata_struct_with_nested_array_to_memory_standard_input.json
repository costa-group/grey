{
    "language": "Solidity",
    "sources": {
        "calldata_struct_with_nested_array_to_memory.sol": {
            "content": "pragma abicoder v2;\n\ncontract C {\n    struct S {\n        uint128 p1;\n        uint256[][2] a;\n        uint32 p2;\n    }\n    function f(uint32 p1, S calldata c) external returns(uint32, uint128, uint256, uint256, uint32) {\n        S memory s = c;\n        assert(s.a[0][0] == c.a[0][0]);\n        assert(s.a[1][1] == c.a[1][1]);\n        s.p1++;\n        assert(s.p1 != c.p1);\n        s.a[0][1]++;\n        assert(s.a[0][1] != c.a[0][1]);\n        return (p1, s.p1, s.a[0][0], s.a[1][1], s.p2);\n    }\n}\n// ----\n// f(uint32,(uint128,uint256[][2],uint32)): 55, 0x40, 77, 0x60, 88, 0x40, 0x40, 2, 1, 2 -> 55, 78, 1, 2, 88\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
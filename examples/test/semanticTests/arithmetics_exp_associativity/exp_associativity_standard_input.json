{
    "language": "Solidity",
    "sources": {
        "exp_associativity.sol": {
            "content": "contract C {\n    // (2**3)**4 = 4096\n    // 2**(3**4) = 2417851639229258349412352\n    function test_hardcode1(uint a, uint b, uint c) public returns (uint256) {\n        return a**b**c;\n    }\n\n    // (3**2)**2)**2 = 6561\n    // 3**(2**(2**2) = 43046721\n    function test_hardcode2(uint a, uint b, uint c, uint d) public returns (uint256) {\n        return a**b**c**d;\n    }\n\n    function test_invariant(uint a, uint b, uint c) public returns (bool) {\n        return a**b**c == a**(b**c);\n    }\n\n    function test_literal_mix(uint a, uint b) public returns (bool) {\n        return\n            (a**2**b == a**(2**b)) &&\n            (2**a**b == 2**(a**b)) &&\n            (a**b**2 == a**(b**2));\n    }\n\n    function test_other_operators(uint a, uint b) public returns (bool) {\n        return\n            (a**b/25 == (a**b)/25) &&\n            (a**b*3**b == (a**b)*(3**b)) &&\n            (b**a**a/b**a**b == (b**(a**a))/(b**(a**b)));\n     }\n}\n// ----\n// test_hardcode1(uint256,uint256,uint256): 2, 3, 4 -> 2417851639229258349412352\n// test_hardcode2(uint256,uint256,uint256,uint256): 3, 2, 2, 2 -> 43046721\n// test_invariant(uint256,uint256,uint256): 2, 3, 4 -> true\n// test_invariant(uint256,uint256,uint256): 3, 4, 2 -> true\n// test_literal_mix(uint256,uint256): 2, 3 -> true\n// test_other_operators(uint256,uint256): 2, 4 -> true\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
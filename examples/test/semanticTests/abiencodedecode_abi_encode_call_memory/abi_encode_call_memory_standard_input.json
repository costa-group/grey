{
    "language": "Solidity",
    "sources": {
        "abi_encode_call_memory.sol": {
            "content": "pragma abicoder v2;\n\ncontract D {\n\tfunction something() external pure {}\n}\n\ncontract C {\n\tfunction something() external pure {}\n\tfunction test() external returns (bytes4) {\n\t\tfunction() external[2] memory x;\n\t\tx[0] = this.something;\n\t\tx[1] = (new D()).something;\n\t\tfunction() external f = x[1];\n\t\tbytes memory a = abi.encodeCall(x[0], ());\n\t\tbytes memory b = abi.encodeCall(x[1], ());\n\t\tbytes memory c = abi.encodeCall(f, ());\n\t\tassert(a.length == 4 && b.length == 4 && c.length == 4);\n\t\tassert(bytes4(a) == bytes4(b));\n\t\tassert(bytes4(a) == bytes4(c));\n\t\tassert(bytes4(a) == f.selector);\n\t\treturn bytes4(a);\n\t}\n}\n// ----\n// test() -> 0xa7a0d53700000000000000000000000000000000000000000000000000000000\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
{
    "language": "Solidity",
    "sources": {
        "c99_scoping_activation.sol": {
            "content": "contract test {\n    function f() pure public returns (uint) {\n        uint x = 7;\n        {\n            x = 3; // This should still assign to the outer variable\n            uint x;\n            x = 4; // This should assign to the new one\n        }\n        return x;\n    }\n    function g() pure public returns (uint x) {\n        x = 7;\n        {\n            x = 3;\n            uint x;\n            return x; // This returns the new variable, i.e. 0\n        }\n    }\n    function h() pure public returns (uint x, uint a, uint b) {\n        x = 7;\n        {\n            x = 3;\n            a = x; // This should read from the outer\n            uint x = 4;\n            b = x;\n        }\n    }\n    function i() pure public returns (uint x, uint a) {\n        x = 7;\n        {\n            x = 3;\n            uint x = x; // This should read from the outer and assign to the inner\n            a = x;\n        }\n    }\n}\n// ----\n// f() -> 3\n// g() -> 0\n// h() -> 3, 3, 4\n// i() -> 3, 3\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
{"language": "Solidity", "sources": {"bytesx.sol": {"content": "pragma abicoder               v2;\n\ncontract C {\n    function gg1(bytes1 x) external pure returns (bytes32) {\n        return x;\n    }\n    function f1(bytes32 a) external view returns (bytes32) {\n        bytes1 x;\n        assembly { x := a }\n        return this.gg1(x);\n    }\n    function gg2(bytes2 x) external pure returns (bytes32) {\n        return x;\n    }\n    function f2(bytes32 a) external view returns (bytes32) {\n        bytes2 x;\n        assembly { x := a }\n        return this.gg2(x);\n    }\n    function gg4(bytes4 x) external pure returns (bytes32) {\n        return x;\n    }\n    function f4(bytes32 a) external view returns (bytes32) {\n        bytes4 x;\n        assembly { x := a }\n        return this.gg4(x);\n    }\n    function gg8(bytes8 x) external pure returns (bytes32) {\n        return x;\n    }\n    function f8(bytes32 a) external view returns (bytes32) {\n        bytes8 x;\n        assembly { x := a }\n        return this.gg8(x);\n    }\n    function g16(bytes16 x) external pure returns (bytes32) {\n        return x;\n    }\n    function f16(bytes32 a) external view returns (bytes32) {\n        bytes16 x;\n        assembly { x := a }\n        return this.g16(x);\n    }\n}\n// ----\n// f1(bytes32): left(0) -> left(0)\n// gg1(bytes1): left(0) -> left(0) # test validation as well as sanity check #\n// f1(bytes32): left(1) -> left(1)\n// gg1(bytes1): left(1) -> left(1)\n// f1(bytes32): left(0xFE) -> left(0xFE)\n// gg1(bytes1): left(0xFE) -> left(0xFE)\n// f1(bytes32): left(0xFF) -> left(0xFF)\n// gg1(bytes1): left(0xFF) -> left(0xFF)\n// f1(bytes32): left(0x0001) -> left(0x00)\n// gg1(bytes1): left(0x0001) -> FAILURE\n// f1(bytes32): left(0x0101) -> left(0x01)\n// gg1(bytes1): left(0x0101) -> FAILURE\n// f1(bytes32): -1 -> left(0xFF)\n// gg1(bytes1): -1 -> FAILURE\n// f2(bytes32): left(0) -> left(0)\n// gg2(bytes2): left(0) -> left(0)\n// f2(bytes32): left(1) -> left(1)\n// gg2(bytes2): left(1) -> left(1)\n// f2(bytes32): left(0xFFFE) -> left(0xFFFE)\n// gg2(bytes2): left(0xFFFE) -> left(0xFFFE)\n// f2(bytes32): left(0xFFFF) -> left(0xFFFF)\n// gg2(bytes2): left(0xFFFF) -> left(0xFFFF)\n// f2(bytes32): left(0x000001) -> left(0x00)\n// gg2(bytes2): left(0x000001) -> FAILURE\n// f2(bytes32): left(0x010001) -> left(0x01)\n// gg2(bytes2): left(0x010001) -> FAILURE\n// f2(bytes32): -1 -> left(0xFFFF)\n// gg2(bytes2): -1 -> FAILURE\n// f4(bytes32): left(0) -> left(0)\n// gg4(bytes4): left(0) -> left(0)\n// f4(bytes32): left(1) -> left(1)\n// gg4(bytes4): left(1) -> left(1)\n// f4(bytes32): left(0xFFFFFFFE) -> left(0xFFFFFFFE)\n// gg4(bytes4): left(0xFFFFFFFE) -> left(0xFFFFFFFE)\n// f4(bytes32): left(0xFFFFFFFF) -> left(0xFFFFFFFF)\n// gg4(bytes4): left(0xFFFFFFFF) -> left(0xFFFFFFFF)\n// f4(bytes32): left(0x0000000001) -> left(0x00)\n// gg4(bytes4): left(0x0000000001) -> FAILURE\n// f4(bytes32): left(0x0100000001) -> left(0x01)\n// gg4(bytes4): left(0x0100000001) -> FAILURE\n// f4(bytes32): -1 -> left(0xFFFFFFFF)\n// gg4(bytes4): -1 -> FAILURE\n// f8(bytes32): left(0) -> left(0)\n// gg8(bytes8): left(0) -> left(0)\n// f8(bytes32): left(1) -> left(1)\n// gg8(bytes8): left(1) -> left(1)\n// f8(bytes32): left(0xFFFFFFFFFFFFFFFE) -> left(0xFFFFFFFFFFFFFFFE)\n// gg8(bytes8): left(0xFFFFFFFFFFFFFFFE) -> left(0xFFFFFFFFFFFFFFFE)\n// f8(bytes32): left(0xFFFFFFFFFFFFFFFF) -> left(0xFFFFFFFFFFFFFFFF)\n// gg8(bytes8): left(0xFFFFFFFFFFFFFFFF) -> left(0xFFFFFFFFFFFFFFFF)\n// f8(bytes32): left(0x000000000000000001) -> left(0x00)\n// gg8(bytes8): left(0x000000000000000001) -> FAILURE\n// f8(bytes32): left(0x010000000000000001) -> left(0x01)\n// gg8(bytes8): left(0x010000000000000001) -> FAILURE\n// f8(bytes32): -1 -> left(0xFFFFFFFFFFFFFFFF)\n// gg8(bytes8): -1 -> FAILURE\n// f16(bytes32): left(0) -> left(0)\n// g16(bytes16): left(0) -> left(0)\n// f16(bytes32): left(1) -> left(1)\n// g16(bytes16): left(1) -> left(1)\n// f16(bytes32): left(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE) -> left(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE)\n// g16(bytes16): left(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE) -> left(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE)\n// f16(bytes32): left(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) -> left(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n// g16(bytes16): left(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) -> left(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n// f16(bytes32): left(0x0000000000000000000000000000000001) -> left(0x00)\n// g16(bytes16): left(0x0000000000000000000000000000000001) -> FAILURE\n// f16(bytes32): left(0x0100000000000000000000000000000001) -> left(0x01)\n// g16(bytes16): left(0x0100000000000000000000000000000001) -> FAILURE\n// f16(bytes32): -1 -> left(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n// g16(bytes16): -1 -> FAILURE\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}, "viaIR": true}}
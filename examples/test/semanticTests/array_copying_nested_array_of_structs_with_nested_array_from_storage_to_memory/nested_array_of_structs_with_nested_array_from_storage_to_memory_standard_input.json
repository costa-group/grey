{"language": "Solidity", "sources": {"nested_array_of_structs_with_nested_array_from_storage_to_memory.sol": {"content": "pragma abicoder v2;\n\ncontract C {\n    struct S {\n        uint8[] a;\n        uint8[2] b;\n    }\n\n    uint8[] a1;\n    uint8[] a2;\n    uint8[] a3;\n\n    S[][] s1;\n    S[1][1] s2;\n\n    constructor() {\n        a1.push(23);\n        a1.push(29);\n        a2.push(31);\n\n        s1 = new S[][](2);\n        s1[0] = new S[](2);\n        s1[0][0] = S({a: a1, b: [7, 11]});\n        s1[0][1] = S({a: a2, b: [17, 19]});\n\n        s1[1] = new S[](1);\n        s1[1][0] = S({a: a3, b: [37, 41]});\n\n        s2[0][0] = S({a: a3, b: [43, 47]});\n    }\n\n    function test1() public returns (S[] memory) {\n        return s1[0];\n    }\n\n    function test2() public returns (S[1] memory) {\n        return s2[0];\n    }\n}\n// ====\n// compileViaYul: true\n// ----\n// test1() -> 0x20, 2, 0x40, 0x0100, 0x60, 7, 11, 2, 23, 29, 0x60, 17, 19, 1, 31\n// test2() -> 0x20, 0x20, 0x60, 43, 47, 0\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}, "viaIR": true}}
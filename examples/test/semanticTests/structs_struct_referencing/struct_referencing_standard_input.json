{"language": "Solidity", "sources": {"struct_referencing.sol": {"content": "pragma abicoder v2;\ninterface I {\n    struct S { uint a; }\n}\n\nlibrary L {\n    struct S { uint b; uint a; }\n    function f() public pure returns (S memory) {\n        S memory s;\n        s.a = 3;\n        return s;\n    }\n    function g() public pure returns (I.S memory) {\n        I.S memory s;\n        s.a = 4;\n        return s;\n    }\n    // argument-dependent lookup tests\n    function a(I.S memory) public pure returns (uint) { return 1; }\n    function a(S memory) public pure returns (uint) { return 2; }\n}\n\ncontract C is I {\n    function f() public pure returns (S memory) {\n        S memory s;\n        s.a = 1;\n        return s;\n    }\n    function g() public pure returns (I.S memory) {\n        I.S memory s;\n        s.a = 2;\n        return s;\n    }\n    function h() public pure returns (L.S memory) {\n        L.S memory s;\n        s.a = 5;\n        return s;\n    }\n    function x() public pure returns (L.S memory) {\n        return L.f();\n    }\n    function y() public pure returns (I.S memory) {\n        return L.g();\n    }\n    function a1() public pure returns (uint) { S memory s; return L.a(s); }\n    function a2() public pure returns (uint) { L.S memory s; return L.a(s); }\n}\n// ----\n// library: L\n// f() -> 1\n// g() -> 2\n// f() -> 1\n// g() -> 2\n// h() -> 0, 5\n// x() -> 0, 3\n// y() -> 4\n// a1() -> 1\n// a2() -> 2\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}, "viaIR": true}}
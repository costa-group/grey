{
    "language": "Solidity",
    "sources": {
        "dirty_uint8_read.sol": {
            "content": "type MyInt8 is int8;\ncontract C {\n    MyInt8 public x = MyInt8.wrap(-5);\n\n    /// The most significant bit is flipped to 0\n    function create_dirty_slot() external {\n        uint mask  = 2**255 -1;\n        assembly {\n            let value := sload(x.slot)\n            sstore(x.slot, and(mask, value))\n        }\n    }\n\n    function read_unclean_value() external returns (bytes32 ret) {\n        MyInt8 value = x;\n        assembly {\n            ret := value\n        }\n    }\n}\n// ----\n// x() -> -5\n// create_dirty_slot() ->\n// read_unclean_value() -> 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
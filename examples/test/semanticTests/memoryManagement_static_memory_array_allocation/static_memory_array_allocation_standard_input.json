{
    "language": "Solidity",
    "sources": {
        "struct_allocation.sol": {
            "content": "contract C {\n    struct S { uint x; uint y; uint z; }\n    function memorySize() internal pure returns (uint s) {\n        assembly { s := mload(0x40) }\n    }\n    function withValue() public pure returns (uint) {\n        S memory x = S(1, 2, 3);\n        uint memorySizeBefore = memorySize();\n        S memory t = x;\n        uint memorySizeAfter = memorySize();\n        return memorySizeAfter - memorySizeBefore;\n    }\n    function withoutValue() public pure returns (uint) {\n        uint memorySizeBefore = memorySize();\n        S memory t;\n        uint memorySizeAfter = memorySize();\n        return memorySizeAfter - memorySizeBefore;\n    }\n}\n// ----\n// withValue() -> 0x00\n// withoutValue() -> 0x60\n"
        },
        "assembly_access.sol": {
            "content": "contract C {\n    function f() public pure {\n        uint[] memory x;\n        uint y;\n        assembly {\n            y := x\n        }\n        // The value of an uninitialized dynamic array is not zero but rather\n        // an address of a location in memory that has the value of zero.\n        assert(y != 0);\n    }\n}\n// ----\n// f() ->\n"
        },
        "static_memory_array_allocation.sol": {
            "content": "contract C {\n    function memorySize() internal pure returns (uint s) {\n        assembly { s := mload(0x40) }\n    }\n    function withValue() public pure returns (uint) {\n        uint[20] memory x;\n        uint memorySizeBefore = memorySize();\n        uint[20] memory t = x;\n        uint memorySizeAfter = memorySize();\n        return memorySizeAfter - memorySizeBefore;\n    }\n    function withoutValue() public pure returns (uint) {\n        uint[20] memory x;\n        uint memorySizeBefore = memorySize();\n        uint[20] memory t;\n        uint memorySizeAfter = memorySize();\n        return memorySizeAfter - memorySizeBefore;\n    }\n}\n// ----\n// withValue() -> 0x00\n// withoutValue() -> 0x0280\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
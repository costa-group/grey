{
    "language": "Solidity",
    "sources": {
        "recursive_storage_memory.sol": {
            "content": "contract CopyTest {\n    struct Tree {\n        Tree[] children;\n    }\n\n    Tree storageTree;\n    Tree[] children;\n\n    constructor() {\n        for (uint i = 0; i < 2; i++)\n            storageTree.children.push();\n        for (uint i = 0; i < 23; i++)\n            storageTree.children[0].children.push();\n        for (uint i = 0; i < 42; i++)\n            storageTree.children[1].children.push();\n    }\n\n    function run() public returns (uint256, uint256, uint256) {\n        Tree memory memoryTree;\n        memoryTree = storageTree;\n        return (memoryTree.children.length, memoryTree.children[0].children.length, memoryTree.children[1].children.length);\n    }\n}\n// ----\n// run() -> 2, 23, 42\n// gas irOptimized: 192828\n// gas legacy: 185730\n// gas legacyOptimized: 184457\n"
        },
        "recursive_storage_memory_complex.sol": {
            "content": "contract CopyTest {\n    struct Tree {\n        uint256 data;\n        Tree[] children;\n    }\n    Tree storageTree;\n    Tree childStorageTree;\n\n    constructor() {\n        storageTree.data = 0x42;\n        for (uint i = 0; i < 2; i++)\n            storageTree.children.push(childStorageTree);\n        storageTree.children[0].data = 0x4200;\n        storageTree.children[1].data = 0x4201;\n        for (uint i = 0; i < 3; i++)\n            storageTree.children[0].children.push(childStorageTree);\n        for (uint i = 0; i < 3; i++)\n            storageTree.children[0].children[i].data = 0x420000 + i;\n        for (uint i = 0; i < 4; i++)\n            storageTree.children[1].children.push(childStorageTree);\n        for (uint i = 0; i < 4; i++)\n            storageTree.children[1].children[i].data = 0x420100 + i;\n    }\n\n    function countData(Tree memory tree) internal returns (uint256 c) {\n        c = 1;\n        for (uint i = 0; i < tree.children.length; i++) {\n            c += countData(tree.children[i]);\n        }\n    }\n\n    function copyFromTree(Tree memory tree, uint256[] memory data, uint256 offset) internal returns (uint256) {\n        data[offset++] = tree.data;\n        for (uint i = 0; i < tree.children.length; i++) {\n            offset = copyFromTree(tree.children[i], data, offset);\n        }\n        return offset;\n    }\n\n    function run() public returns (uint256[] memory) {\n        Tree memory memoryTree;\n        memoryTree = storageTree;\n        uint256 length = countData(memoryTree);\n        uint256[] memory result = new uint256[](length);\n        copyFromTree(memoryTree, result, 0);\n        return result;\n    }\n}\n// ----\n// run() -> 0x20, 10, 0x42, 0x4200, 0x420000, 0x420001, 0x420002, 0x4201, 0x420100, 0x420101, 0x420102, 0x420103\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
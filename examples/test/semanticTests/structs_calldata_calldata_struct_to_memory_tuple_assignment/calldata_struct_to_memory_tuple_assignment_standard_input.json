{
    "language": "Solidity",
    "sources": {
        "calldata_struct_to_storage.sol": {
            "content": "pragma abicoder v2;\n\ncontract C {\n    struct S {\n        uint256 a;\n        uint64 b;\n        bytes2 c;\n    }\n\n    uint[153] r;\n    S s;\n\n    function f(uint32 a, S calldata c, uint256 b) external returns (uint256, uint256, bytes1) {\n        s = c;\n        return (s.a, s.b, s.c[1]);\n    }\n}\n// ----\n// f(uint32,(uint256,uint64,bytes2),uint256): 1, 42, 23, \"ab\", 1 -> 42, 23, \"b\"\n"
        },
        "calldata_struct.sol": {
            "content": "pragma abicoder               v2;\n\n\ncontract C {\n    struct S {\n        uint256 a;\n        uint256 b;\n    }\n\n    function f(S calldata s) external pure returns (uint256 a, uint256 b) {\n        a = s.a;\n        b = s.b;\n    }\n}\n// ----\n// f((uint256,uint256)): 42, 23 -> 42, 23\n"
        },
        "calldata_struct_to_memory_tuple_assignment.sol": {
            "content": "pragma abicoder v2;\n\ncontract C {\n    struct S {\n        uint128 p1;\n        uint256[][2] a;\n        uint32 p2;\n    }\n\n    function f(uint32 p1, S calldata c) external returns(uint32, uint128, uint256, uint256, uint32) {\n        S memory m;\n        uint32 p2;\n        (p2, m) = (p1, c);\n        m.p1++;\n        m.a[0][1]++;\n        return (p2, m.p1, m.a[0][0], m.a[1][1], m.p2);\n    }\n}\n// ----\n// f(uint32,(uint128,uint256[][2],uint32)): 55, 0x40, 77, 0x60, 88, 0x40, 0x40, 2, 1, 2 -> 55, 78, 1, 2, 88\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
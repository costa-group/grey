{"language": "Solidity", "sources": {"calldata_nested_structs.sol": {"content": "pragma abicoder v2;\n\ncontract C {\n    struct S {\n        uint128 p1;\n        uint256[][2] a;\n        uint32 p2;\n    }\n\n    struct S1 {\n        uint128 u;\n        S s;\n    }\n\n    struct S2 {\n        S[2] array;\n    }\n\n    function f1(S1 calldata c) internal returns(S1 calldata) {\n        return c;\n    }\n\n    function f(S1 calldata c, uint32 p) external returns(uint32, uint128, uint256, uint256, uint32) {\n        S1 memory m = f1(c);\n        assert(m.s.a[0][0] == c.s.a[0][0]);\n        assert(m.s.a[1][1] == c.s.a[1][1]);\n        return (p, m.s.p1, m.s.a[0][0], m.s.a[1][1], m.s.p2);\n    }\n\n    function g(S2 calldata c) external returns(uint128, uint256, uint256, uint32) {\n        S2 memory m = c;\n        assert(m.array[0].a[0][0] == c.array[0].a[0][0]);\n        assert(m.array[0].a[1][1] == c.array[0].a[1][1]);\n        return (m.array[1].p1, m.array[1].a[0][0], m.array[1].a[1][1], m.array[1].p2);\n    }\n\n    function h(S1 calldata c, uint32 p) external returns(uint32, uint128, uint256, uint256, uint32) {\n        S memory m = c.s;\n        assert(m.a[0][0] == c.s.a[0][0]);\n        assert(m.a[1][1] == c.s.a[1][1]);\n        return (p, m.p1, m.a[0][0], m.a[1][1], m.p2);\n    }\n}\n// ----\n// f((uint128,(uint128,uint256[][2],uint32)),uint32): 0x40, 44, 11, 0x40, 22, 0x60, 33, 0x40, 0x40, 2, 1, 2 -> 44, 22, 1, 2, 33\n// g(((uint128,uint256[][2],uint32)[2])): 0x20, 0x20, 0x40, 0x40, 22, 0x60, 33, 0x40, 0x40, 2, 1, 2 -> 22, 1, 2, 33\n// h((uint128,(uint128,uint256[][2],uint32)),uint32): 0x40, 44, 11, 0x40, 22, 0x60, 33, 0x40, 0x40, 2, 1, 2 -> 44, 22, 1, 2, 33\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}, "viaIR": true}}
{
    "language": "Solidity",
    "sources": {
        "memory_structs_nested.sol": {
            "content": "contract Test {\n    struct S {\n        uint8 x;\n        uint16 y;\n        uint256 z;\n    }\n    struct X {\n        uint8 x;\n        S s;\n    }\n\n    function test()\n        public\n        returns (uint256 a, uint256 x, uint256 y, uint256 z)\n    {\n        X memory d = combine(1, 2, 3, 4);\n        a = extract(d, 0);\n        x = extract(d, 1);\n        y = extract(d, 2);\n        z = extract(d, 3);\n    }\n\n    function extract(X memory s, uint256 which) internal returns (uint256 x) {\n        if (which == 0) return s.x;\n        else if (which == 1) return s.s.x;\n        else if (which == 2) return s.s.y;\n        else return s.s.z;\n    }\n\n    function combine(uint8 a, uint8 x, uint16 y, uint256 z)\n        internal\n        returns (X memory s)\n    {\n        s.x = a;\n        s.s.x = x;\n        s.s.y = y;\n        s.s.z = z;\n    }\n}\n// ----\n// test() -> 1, 2, 3, 4\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
{
    "language": "Solidity",
    "sources": {
        "memory_structs_read_write.sol": {
            "content": "contract Test {\n    struct S {\n        uint8 x;\n        uint16 y;\n        uint256 z;\n        uint8[2] a;\n    }\n    S[5] data;\n\n    function testInit()\n        public\n        returns (uint8 x, uint16 y, uint256 z, uint8 a, bool flag)\n    {\n        S[2] memory d;\n        x = d[0].x;\n        y = d[0].y;\n        z = d[0].z;\n        a = d[0].a[1];\n        flag = true;\n    }\n\n    function testCopyRead()\n        public\n        returns (uint8 x, uint16 y, uint256 z, uint8 a)\n    {\n        data[2].x = 1;\n        data[2].y = 2;\n        data[2].z = 3;\n        data[2].a[1] = 4;\n        S memory s = data[2];\n        x = s.x;\n        y = s.y;\n        z = s.z;\n        a = s.a[1];\n    }\n\n    function testAssign()\n        public\n        returns (uint8 x, uint16 y, uint256 z, uint8 a)\n    {\n        S memory s;\n        s.x = 1;\n        s.y = 2;\n        s.z = 3;\n        s.a[1] = 4;\n        x = s.x;\n        y = s.y;\n        z = s.z;\n        a = s.a[1];\n    }\n}\n// ----\n// testInit() -> 0, 0, 0, 0, true\n// testCopyRead() -> 1, 2, 3, 4\n// testAssign() -> 1, 2, 3, 4\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
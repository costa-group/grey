{
    "language": "Solidity",
    "sources": {
        "internal_library_function_attached_to_fixed_bytes.sol": {
            "content": "library L {\n    function add(bytes2 a, bytes2 b) internal pure returns (bytes2) {\n        return bytes2(uint16(a) + uint16(b));\n    }\n}\n\ncontract C {\n    using L for bytes2;\n\n    function sum(bytes2 a, bytes2 b) public returns (bytes2) {\n        return a.add(b);\n    }\n}\n// ----\n// sum(bytes2,bytes2): left(0x1100), left(0x0022) -> left(0x1122)\n"
        },
        "using_for_storage_structs.sol": {
            "content": "struct Struct { uint x; }\n\nlibrary L {\n    function f(Struct storage _x) internal view returns (uint256) {\n      return _x.x;\n    }\n}\n\ncontract C {\n  using L for Struct;\n\n  Struct s;\n\n  function h(Struct storage _s) internal view returns (uint) {\n    // _s is pointer\n    return _s.f();\n  }\n  function g() public returns (uint, uint) {\n    s.x = 7;\n    // s is reference\n    return (s.f(), h(s));\n  }\n}\n// ----\n// g() -> 7, 7\n"
        },
        "payable_function_calls_library.sol": {
            "content": "library L {\n    function f() public returns (uint) { return 7; }\n}\ncontract C {\n    function f() public payable returns (uint) {\n        return L.f();\n    }\n}\n// ----\n// library: L\n// f(): 27 -> 7\n"
        },
        "internal_call_unattached_with_parentheses.sol": {
            "content": "library L {\n\tfunction f() internal returns (uint) {\n\t\treturn 3;\n\t}\n}\n\ncontract C {\n\tfunction foo() public returns (uint) {\n\t\treturn (L.f)();\n\t}\n}\n// ----\n// foo() -> 3\n"
        },
        "internal_library_function_attached_to_internal_function_type.sol": {
            "content": "library L {\n    function double(function(uint) internal pure returns (uint) f, uint x) internal pure returns (uint) {\n        return f(x) * 2;\n    }\n}\n\ncontract C {\n    using L for function(uint) internal pure returns (uint);\n\n    function identity(uint x) internal pure returns (uint) {\n        return x;\n    }\n\n    function test(uint value) public returns (uint) {\n        return identity.double(value);\n    }\n}\n// ----\n// test(uint256): 5 -> 10\n"
        },
        "attached_internal_library_function_accepting_calldata.sol": {
            "content": "library D {\n    function f(bytes calldata _x) internal pure returns (bytes1) {\n        return _x[0];\n    }\n    function g(bytes memory _x) internal pure returns (bytes1) {\n        return _x[0];\n    }\n}\n\ncontract C {\n    using D for bytes;\n    function f(bytes calldata _x) public pure returns (bytes1, bytes1) {\n        return (_x.f(), _x.g());\n    }\n}\n// ----\n// f(bytes): 0x20, 4, \"abcd\" -> 0x6100000000000000000000000000000000000000000000000000000000000000, 0x6100000000000000000000000000000000000000000000000000000000000000\n"
        },
        "library_function_selectors_struct.sol": {
            "content": "pragma abicoder               v2;\nlibrary L {\n    struct S { uint256 a; }\n    function f(S storage s) external returns (uint) { return s.a; }\n    function g(S memory m) public returns (uint) { return m.a; }\n}\ncontract C {\n    L.S s;\n    constructor() { s.a = 42; }\n\n    function f() public returns (bool, bool, uint256) {\n\t\tuint256 s_ptr;\n\t\tassembly { s_ptr := s.slot }\n\t\t(bool success, bytes memory data) = address(L).delegatecall(abi.encodeWithSelector(L.f.selector, s_ptr));\n\t\treturn (L.f.selector == bytes4(keccak256(\"f(L.S storage)\")), success, abi.decode(data, (uint256)));\n    }\n    function g() public returns (bool, bool, uint256) {\n\t\t(bool success, bytes memory data) = address(L).delegatecall(abi.encodeWithSelector(L.g.selector, L.S(23)));\n\t\treturn (L.g.selector == bytes4(keccak256(\"g(L.S)\")), success, abi.decode(data, (uint256)));\n    }\n}\n// ====\n// EVMVersion: >homestead\n// ----\n// library: L\n// f() -> true, true, 42\n// g() -> true, true, 23\n"
        },
        "library_enum_as_an_expression.sol": {
            "content": "library Arst {\n    enum Foo {Things, Stuff}\n}\n\n\ncontract Tsra {\n    function f() public returns (uint256) {\n        Arst.Foo;\n        return 1;\n    }\n}\n// ----\n// f() -> 1\n"
        },
        "internal_library_function_attached_to_string_accepting_memory.sol": {
            "content": "library L {\n    function at(string memory a, uint i) internal pure returns (uint8) {\n        return uint8(bytes(a)[i]);\n    }\n}\n\ncontract C {\n    using L for string;\n\n    function secondChar() public returns (uint8) {\n        string memory input = \"abc\";\n        return input.at(1);\n    }\n}\n// ----\n// secondChar() -> 98\n"
        },
        "using_library_mappings_return.sol": {
            "content": "library Lib {\n    function choose(mapping(uint => mapping(uint => uint)) storage m, uint key) external returns (mapping(uint => uint) storage) {\n        return m[key];\n    }\n}\ncontract Test {\n    mapping(uint => mapping(uint => uint)) m;\n    function f() public returns (uint, uint, uint, uint, uint, uint)\n    {\n        Lib.choose(m, 0)[0] = 1;\n        Lib.choose(m, 0)[2] = 42;\n        Lib.choose(m, 1)[0] = 23;\n        Lib.choose(m, 1)[2] = 99;\n        return (m[0][0], m[0][1], m[0][2], m[1][0], m[1][1], m[1][2]);\n    }\n}\n// ----\n// library: Lib\n// f() -> 1, 0, 0x2a, 0x17, 0, 0x63\n// gas irOptimized: 119568\n// gas legacy: 125087\n// gas legacyOptimized: 120120\n"
        },
        "library_delegatecall_guard_view_not_needed.sol": {
            "content": "library L {\n    function f(uint256[] storage x) public view returns (uint256) {\n        return 84;\n    }\n}\ncontract C {\n    uint256[] y;\n    constructor() { y.push(42); }\n    function f() public view returns (uint256) {\n        return L.f(y);\n    }\n    function g() public returns (bool, uint256) {\n        uint256 ys;\n        assembly { ys := y.slot }\n        (bool success, bytes memory data) = address(L).delegatecall(abi.encodeWithSelector(L.f.selector, ys));\n        return (success, success ? abi.decode(data,(uint256)) : 0);\n    }\n    function h() public returns (bool, uint256) {\n        uint256 ys;\n        assembly { ys := y.slot }\n        (bool success, bytes memory data) = address(L).call(abi.encodeWithSelector(L.f.selector, ys));\n        return (success, success ? abi.decode(data,(uint256)) : 0);\n    }\n}\n// ====\n// EVMVersion: >homestead\n// ----\n// library: L\n// f() -> 84\n// g() -> true, 84\n// h() -> true, 84\n"
        },
        "external_call_with_storage_mapping_parameter.sol": {
            "content": "library L {\n    function f(mapping(uint256 => uint256) storage _a) external returns (uint256) {\n        return _a[0] * _a[1];\n    }\n}\n\ncontract C {\n    mapping(uint256 => uint256) x;\n\n    function g(uint256 _value) external returns (uint256) {\n        x[0] = x[1] = _value;\n        return L.f(x);\n    }\n}\n// ----\n// library: L\n// g(uint256): 4 -> 16\n"
        },
        "internal_library_function.sol": {
            "content": "// tests that internal library functions can be called from outside\n// and retain the same memory context (i.e. are pulled into the caller's code)\n// This has to work without linking, because everything will be inlined.\nlibrary L {\n    function f(uint256[] memory _data) internal {\n        _data[3] = 2;\n    }\n}\n\n\ncontract C {\n    function f() public returns (uint256) {\n        uint256[] memory x = new uint256[](7);\n        x[3] = 8;\n        L.f(x);\n        return x[3];\n    }\n}\n// ----\n// f() -> 2\n"
        },
        "library_return_struct_with_mapping.sol": {
            "content": "pragma abicoder               v2;\n\nlibrary Lib {\n    struct Items {\n        mapping (uint => uint) a;\n    }\n\n    function get() public returns (Items storage x) {\n        assembly { x.slot := 123 }\n    }\n}\n\ncontract C {\n    function f() public returns(uint256 slot) {\n        Lib.Items storage ptr = Lib.get();\n        assembly { slot := ptr.slot }\n    }\n}\n// ----\n// library: Lib\n// f() -> 123\n"
        },
        "stub_internal.sol": {
            "content": "library L {\n    function f(uint256 v) internal returns (uint256) { return v*v; }\n}\ncontract C {\n    function g(uint256 v) external returns (uint256) {\n        return L.f(v);\n    }\n}\n// ----\n// g(uint256): 1 -> 1\n// g(uint256): 2 -> 4\n// g(uint256): 4 -> 16\n"
        },
        "using_for_overload.sol": {
            "content": "library D {\n    struct s { uint a; }\n    function mul(s storage self, uint x) public returns (uint) { return self.a *= x; }\n    function mul(s storage self, bytes32 x) public returns (bytes32) { }\n}\ncontract C {\n    using D for D.s;\n    D.s public x;\n    function f(uint a) public returns (uint) {\n        x.a = 6;\n        return x.mul(a);\n    }\n}\n// ----\n// library: D\n// f(uint256): 7 -> 0x2a\n// x() -> 0x2a\n"
        },
        "internal_library_function_return_var_size.sol": {
            "content": "// This has to work without linking, because everything will be inlined.\nlibrary L {\n    struct S {\n        uint256[] data;\n    }\n\n    function f(S memory _s) internal returns (uint256[] memory) {\n        _s.data[3] = 2;\n        return _s.data;\n    }\n}\n\n\ncontract C {\n    using L for L.S;\n\n    function f() public returns (uint256) {\n        L.S memory x;\n        x.data = new uint256[](7);\n        x.data[3] = 8;\n        return x.f()[3];\n    }\n}\n// ----\n// f() -> 2\n"
        },
        "library_stray_values.sol": {
            "content": "library Lib { function m(uint x, uint y) public returns (uint) { return x * y; } }\ncontract Test {\n    function f(uint x) public returns (uint) {\n        Lib;\n        Lib.m;\n        return x + 9;\n    }\n}\n// ----\n// library: Lib\n// f(uint256): 33 -> 0x2a\n"
        },
        "library_references_preserve.sol": {
            "content": "library L1 {\n    function add(uint256 a, uint256 b) external pure returns (uint256) {\n        return a + b + 1;\n    }\n}\n\nlibrary L2 {\n    function add(uint256 a, uint256 b) external pure returns (uint256) {\n        return a + b + 2;\n    }\n}\n\ncontract A {\n    uint256 sum;\n    constructor() {\n        sum = L1.add(1, 2);\n    }\n    function getSum() external view returns(uint256) {\n        return sum;\n    }\n}\n\ncontract B {\n    uint256 sum;\n    constructor() {\n        sum = L2.add(1, 2);\n    }\n    function getSum() external view returns(uint256) {\n        return sum;\n    }\n}\n\ncontract C {\n    A a = new A();\n    B b = new B();\n    function aSum() external view returns(uint256) {\n        return a.getSum();\n    }\n    function bSum() external view returns(uint256) {\n        return b.getSum();\n    }\n}\n// ----\n// library: L1\n// library: L2\n// aSum() -> 4\n// bSum() -> 5\n"
        },
        "library_call_in_homestead.sol": {
            "content": "library Lib { function m() public returns (address) { return msg.sender; } }\ncontract Test {\n    address public sender;\n    function f() public {\n        sender = Lib.m();\n    }\n}\n// ====\n// EVMVersion: >=homestead\n// ----\n// library: Lib\n// f() ->\n// sender() -> 0x1212121212121212121212121212120000000012\n"
        },
        "library_function_selectors.sol": {
            "content": "library L {\n    function f(uint256 x) external returns (uint) { return x; }\n    function g(uint256[] storage s) external returns (uint) { return s.length; }\n    function h(uint256[] memory m) public returns (uint) { return m.length; }\n}\ncontract C {\n    uint256[] s;\n    constructor() { while (s.length < 42) s.push(0); }\n    function f() public returns (bool, bool, uint256) {\n\t\t(bool success, bytes memory data) = address(L).delegatecall(abi.encodeWithSelector(L.f.selector, 7));\n\t\treturn (L.f.selector == bytes4(keccak256(\"f(uint256)\")), success, abi.decode(data, (uint256)));\n    }\n    function g() public returns (bool, bool, uint256) {\n\t\tuint256 s_ptr;\n\t\tassembly { s_ptr := s.slot }\n\t\t(bool success, bytes memory data) = address(L).delegatecall(abi.encodeWithSelector(L.g.selector, s_ptr));\n\t\treturn (L.g.selector == bytes4(keccak256(\"g(uint256[] storage)\")), success, abi.decode(data, (uint256)));\n    }\n    function h() public returns (bool, bool, uint256) {\n\t\t(bool success, bytes memory data) = address(L).delegatecall(abi.encodeWithSelector(L.h.selector, new uint256[](23)));\n\t\treturn (L.h.selector == bytes4(keccak256(\"h(uint256[])\")), success, abi.decode(data, (uint256)));\n    }\n}\n// ====\n// EVMVersion: >homestead\n// ----\n// library: L\n// f() -> true, true, 7\n// g() -> true, true, 42\n// h() -> true, true, 23\n"
        },
        "library_address.sol": {
            "content": "library L {\n    function f(uint256 v) external pure returns (uint) {\n        return v * v;\n    }\n    function g(uint256 v) external returns (uint) {\n        return v * v;\n    }\n}\ncontract C {\n    function addr() public view returns (bool) {\n        return address(L) == address(0);\n    }\n    function g(uint256 v) public view returns (uint256) {\n        return L.f(v);\n    }\n    function h(uint256 v) public returns (uint256) {\n        (bool success, bytes memory result) = address(L).delegatecall(abi.encodeWithSignature(\"f(uint256)\", v));\n        assert(success);\n        return abi.decode(result, (uint256));\n    }\n    function i(uint256 v) public returns (uint256) {\n        (bool success, bytes memory result) = address(L).call(abi.encodeWithSignature(\"f(uint256)\", v));\n        assert(success);\n        return abi.decode(result, (uint256));\n    }\n    function j(uint256 v) public returns (uint256) {\n        (bool success, bytes memory result) = address(L).delegatecall(abi.encodeWithSignature(\"g(uint256)\", v));\n        assert(success);\n        return abi.decode(result, (uint256));\n    }\n    function k(uint256 v) public returns (uint256) {\n        (bool success, bytes memory result) = address(L).call(abi.encodeWithSignature(\"g(uint256)\", v));\n        assert(success);\n        return abi.decode(result, (uint256));\n    }\n}\n// ====\n// EVMVersion: >=byzantium\n// ----\n// library: L\n// addr() -> false\n// g(uint256): 1 -> 1\n// g(uint256): 2 -> 4\n// g(uint256): 4 -> 16\n// h(uint256): 1 -> 1\n// h(uint256): 2 -> 4\n// h(uint256): 4 -> 16\n// i(uint256): 1 -> 1\n// i(uint256): 2 -> 4\n// i(uint256): 4 -> 16\n// j(uint256): 1 -> 1\n// j(uint256): 2 -> 4\n// j(uint256): 4 -> 16\n// k(uint256): 1 -> FAILURE, hex\"4e487b71\", 0x01\n// k(uint256): 2 -> FAILURE, hex\"4e487b71\", 0x01\n// k(uint256): 4 -> FAILURE, hex\"4e487b71\", 0x01\n"
        },
        "using_library_mappings_public.sol": {
            "content": "library Lib {\n    function set(mapping(uint => uint) storage m, uint key, uint value) public\n    {\n        m[key] = value;\n    }\n}\ncontract Test {\n    mapping(uint => uint) m1;\n    mapping(uint => uint) m2;\n    function f() public returns (uint, uint, uint, uint, uint, uint)\n    {\n        Lib.set(m1, 0, 1);\n        Lib.set(m1, 2, 42);\n        Lib.set(m2, 0, 23);\n        Lib.set(m2, 2, 99);\n        return (m1[0], m1[1], m1[2], m2[0], m2[1], m2[2]);\n    }\n}\n// ----\n// library: Lib\n// f() -> 1, 0, 0x2a, 0x17, 0, 0x63\n// gas irOptimized: 119837\n// gas legacy: 124661\n// gas legacyOptimized: 119665\n"
        },
        "internal_library_function_attached_to_external_function_type.sol": {
            "content": "library L {\n    // NOTE: External function takes up two stack slots\n    function double(function(uint) external pure returns (uint) f, uint x) internal pure returns (uint) {\n        return f(x) * 2;\n    }\n}\n\ncontract C {\n    using L for function(uint) external pure returns (uint);\n\n    function identity(uint x) external pure returns (uint) {\n        return x;\n    }\n\n    function test(uint value) public returns (uint) {\n        return this.identity.double(value);\n    }\n}\n// ----\n// test(uint256): 5 -> 10\n"
        },
        "internal_library_function_attached_to_contract.sol": {
            "content": "contract E {}\n\nlibrary L {\n    function foo(E e) internal pure returns (uint) {\n        return 42;\n    }\n}\n\ncontract C {\n    using L for E;\n\n    function test() public returns (uint) {\n        E e = new E();\n        return e.foo();\n    }\n}\n// ----\n// test() -> 42\n"
        },
        "internal_library_function_attached_to_mapping.sol": {
            "content": "library L {\n    function at(mapping(uint => uint) storage a, uint i) internal view returns (uint) {\n        return a[i];\n    }\n}\n\ncontract C {\n    using L for mapping(uint => uint);\n\n    mapping(uint => uint) map;\n\n    function mapValue(uint a) public returns (uint) {\n        map[42] = 0x24;\n        map[66] = 0x66;\n\n        return map.at(a);\n    }\n}\n// ----\n// mapValue(uint256): 42 -> 0x24\n"
        },
        "internal_library_function_attached_to_address_named_send_transfer.sol": {
            "content": "library L {\n    function transfer(address a) internal {}\n    function send(address a) internal {}\n}\n\ncontract C {\n    using L for address;\n\n    function useTransfer(address a) public {\n        a.transfer();\n    }\n\n    function useSend(address a) public {\n        a.send();\n    }\n}\n// ----\n// useTransfer(address): 0x111122223333444455556666777788889999aAaa ->\n// useSend(address): 0x111122223333444455556666777788889999aAaa ->\n"
        },
        "library_delegatecall_guard_view_needed.sol": {
            "content": "library L {\n    function f(uint256[] storage x) public view returns (uint256) {\n        return x.length;\n    }\n}\ncontract C {\n    uint256[] y;\n    string x;\n    constructor() { y.push(42); }\n    function f() public view returns (uint256) {\n        return L.f(y);\n    }\n    function g() public returns (bool, uint256) {\n        uint256 ys;\n        assembly { ys := y.slot }\n        (bool success, bytes memory data) = address(L).delegatecall(abi.encodeWithSelector(L.f.selector, ys));\n        return (success, success ? abi.decode(data,(uint256)) : 0);\n    }\n    function h() public returns (bool, uint256) {\n        uint256 ys;\n        assembly { ys := y.slot }\n        (bool success, bytes memory data) = address(L).call(abi.encodeWithSelector(L.f.selector, ys));\n        return (success, success ? abi.decode(data,(uint256)) : 0);\n    }\n}\n// ====\n// EVMVersion: >homestead\n// ----\n// library: L\n// f() -> 1\n// g() -> true, 1\n// h() -> true, 0 # this is bad - this should fail! #\n"
        },
        "internal_library_function_attached_to_string_accepting_storage.sol": {
            "content": "library L {\n    function f(string memory a) internal pure returns (string memory) {\n        return a;\n    }\n    function g(string storage a) internal pure returns (string memory) {\n        return a;\n    }\n}\n\ncontract C {\n    using L for string;\n    string s;\n\n    function test(string calldata x) public returns (string memory, string memory) {\n        s = x;\n        return (s.f(), s.g());\n    }\n}\n// ----\n// test(string): 0x20, 3, \"def\" -> 0x40, 0x80, 3, \"def\", 3, \"def\"\n"
        },
        "using_for_function_on_int.sol": {
            "content": "library D {\n\tfunction double(uint self) public returns (uint) { return 2 * self; }\n}\ncontract C {\n\tusing D for uint;\n\tfunction f(uint a) public returns (uint) {\n\t\treturn a.double();\n\t}\n}\n// ----\n// library: D\n// f(uint256): 9 -> 18\n"
        },
        "internal_call_attached_with_parentheses.sol": {
            "content": "library L {\n    struct S {\n        uint256[] data;\n    }\n\n    function f(S memory _s) internal {\n        _s.data[3] += 2;\n    }\n}\n\n\ncontract C {\n    using L for L.S;\n\n    function f() public returns (uint256) {\n        L.S memory x;\n        x.data = new uint256[](7);\n        x.data[3] = 8;\n        (x.f)();\n        return x.data[3];\n    }\n}\n// ----\n// f() -> 0x0a\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
{
    "language": "Solidity",
    "sources": {
        "array_of_function_external_storage_to_storage_dynamic_different_mutability.sol": {
            "content": "contract C {\n    function testFunction1() public {}\n    function testFunction2() public view {}\n    function testFunction3() public pure {}\n\n\n    function() external [] externalArray0;\n    function() external [] externalArray1;\n\n    function() internal [] internalArray0;\n    function() internal [] internalArray1;\n\n    constructor() {\n        externalArray0 = new function() external[] (3);\n        externalArray1 = [\n            this.testFunction1,\n            this.testFunction2,\n            this.testFunction3\n        ];\n\n        internalArray0 = new function() internal[] (3);\n        internalArray1 = [\n            testFunction1,\n            testFunction2,\n            testFunction3\n        ];\n    }\n\n\n    function copyExternalStorageArraysOfFunctionType() external returns (bool)\n    {\n        assert(keccak256(abi.encodePacked(externalArray0)) != keccak256(abi.encodePacked(externalArray1)));\n        externalArray0 = externalArray1;\n        return keccak256(abi.encodePacked(externalArray0)) == keccak256(abi.encodePacked(externalArray1));\n    }\n\n    function copyInternalArrayOfFunctionType() external returns (bool)\n    {\n        internalArray0 = internalArray1;\n        assert(internalArray0.length == 3);\n\n        return\n            internalArray0.length == internalArray1.length &&\n            internalArray0[0] == internalArray1[0] &&\n            internalArray0[1] == internalArray1[1] &&\n            internalArray0[2] == internalArray1[2];\n    }\n}\n// ----\n// copyExternalStorageArraysOfFunctionType() -> true\n// gas irOptimized: 104238\n// gas legacy: 108295\n// gas legacyOptimized: 102162\n// copyInternalArrayOfFunctionType() -> true\n// gas legacy: 104178\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
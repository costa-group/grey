{
    "language": "Solidity",
    "sources": {
        "storage_array_ref.sol": {
            "content": "contract BinarySearch {\n    /// Finds the position of _value in the sorted list _data.\n    /// Note that \"internal\" is important here, because storage references only work for internal or private functions\n    function find(uint256[] storage _data, uint256 _value)\n        internal\n        returns (uint256 o_position)\n    {\n        return find(_data, 0, _data.length, _value);\n    }\n\n    function find(\n        uint256[] storage _data,\n        uint256 _begin,\n        uint256 _len,\n        uint256 _value\n    ) private returns (uint256 o_position) {\n        if (_len == 0 || (_len == 1 && _data[_begin] != _value))\n            return type(uint256).max; // failure\n        uint256 halfLen = _len / 2;\n        uint256 v = _data[_begin + halfLen];\n        if (_value < v) return find(_data, _begin, halfLen, _value);\n        else if (_value > v)\n            return find(_data, _begin + halfLen + 1, halfLen - 1, _value);\n        else return _begin + halfLen;\n    }\n}\n\n\ncontract Store is BinarySearch {\n    uint256[] data;\n\n    function add(uint256 v) public {\n        data.push(0);\n        data[data.length - 1] = v;\n    }\n\n    function find(uint256 v) public returns (uint256) {\n        return find(data, v);\n    }\n}\n// ----\n// find(uint256): 7 -> -1\n// add(uint256): 7 ->\n// find(uint256): 7 -> 0\n// add(uint256): 11 ->\n// add(uint256): 17 ->\n// add(uint256): 27 ->\n// add(uint256): 31 ->\n// add(uint256): 32 ->\n// add(uint256): 66 ->\n// add(uint256): 177 ->\n// find(uint256): 7 -> 0\n// find(uint256): 27 -> 3\n// find(uint256): 32 -> 5\n// find(uint256): 176 -> -1\n// find(uint256): 0 -> -1\n// find(uint256): 400 -> -1\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
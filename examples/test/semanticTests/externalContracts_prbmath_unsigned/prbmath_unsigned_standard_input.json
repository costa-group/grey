{
    "language": "Solidity",
    "sources": {
        "prbmath_unsigned.sol": {
            "content": "==== ExternalSource: _prbmath/PRBMathCommon.sol ====\n==== ExternalSource: _prbmath/PRBMathUD60x18.sol ====\n==== Source: prbmath.sol ====\nimport \"_prbmath/PRBMathUD60x18.sol\";\n\ncontract test {\n    using PRBMathUD60x18 for uint256;\n\n    function div(uint256 x, uint256 y) external pure returns (uint256 ret) {\n        ret = x.div(y);\n    }\n    function exp(uint256 x) external pure returns (uint256 ret) {\n        ret = x.exp();\n    }\n    function exp2(uint256 x) external pure returns (uint256 ret) {\n        ret = x.exp2();\n    }\n    function gm(uint256 x, uint256 y) external pure returns (uint256 ret) {\n        ret = x.gm(y);\n    }\n    function log10(uint256 x) external pure returns (uint256 ret) {\n        ret = x.log10();\n    }\n    function log2(uint256 x) external pure returns (uint256 ret) {\n        ret = x.log2();\n    }\n    function mul(uint256 x, uint256 y) external pure returns (uint256 ret) {\n        ret = x.mul(y);\n    }\n    function pow(uint256 x, uint256 y) external pure returns (uint256 ret) {\n        ret = x.pow(y);\n    }\n    function sqrt(uint256 x) external pure returns (uint256 ret) {\n        ret = x.sqrt();\n    }\n    function benchmark(uint256 x) external pure returns (uint256 ret, uint256 z1, uint256 z2) {\n        uint256 y = x.mul(3).ceil();\n        uint256 z = y.div(x);\n        for (uint i = 0; i < 10; i++)\n            z = z.sqrt();\n        ret = z;\n\n        // Check precision\n        z1 = z.ceil();\n        z2 = z.sqrt().pow(2).ceil();\n        assert(z1 == z2);\n    }\n}\n// ----\n// constructor()\n// gas irOptimized: 170626\n// gas irOptimized code: 1577400\n// gas legacy: 195206\n// gas legacy code: 1999000\n// gas legacyOptimized: 168857\n// gas legacyOptimized code: 1556200\n// div(uint256,uint256): 3141592653589793238, 88714123 -> 35412542528203691288251815328\n// gas irOptimized: 22004\n// gas legacy: 22497\n// gas legacyOptimized: 22010\n// exp(uint256): 3141592653589793238 -> 23140692632779268978\n// gas irOptimized: 24444\n// gas legacy: 25104\n// gas legacyOptimized: 24258\n// exp2(uint256): 3141592653589793238 -> 8824977827076287620\n// gas irOptimized: 24198\n// gas legacy: 24814\n// gas legacyOptimized: 24062\n// gm(uint256,uint256): 3141592653589793238, 88714123 -> 16694419339601\n// gas irOptimized: 22950\n// gas legacy: 23269\n// gas legacyOptimized: 22724\n// log10(uint256): 3141592653589793238 -> 0x44fe4fc084a52b8a\n// gas irOptimized: 30269\n// gas legacy: 32898\n// gas legacyOptimized: 29925\n// log2(uint256): 3141592653589793238 -> 1651496129472318782\n// gas irOptimized: 28235\n// gas legacy: 30986\n// gas legacyOptimized: 28001\n// mul(uint256,uint256): 3141592653589793238, 88714123 -> 278703637\n// gas irOptimized: 22048\n// gas legacy: 22604\n// gas legacyOptimized: 22090\n// pow(uint256,uint256): 3141592653589793238, 5 -> 306019684785281453040\n// gas irOptimized: 22406\n// gas legacy: 23245\n// gas legacyOptimized: 22646\n// sqrt(uint256): 3141592653589793238 -> 1772453850905516027\n// gas irOptimized: 22672\n// gas legacy: 22820\n// gas legacyOptimized: 22440\n// benchmark(uint256): 3141592653589793238 -> 998882724338592125, 1000000000000000000, 1000000000000000000\n// gas irOptimized: 35603\n// gas legacy: 35385\n// gas legacyOptimized: 33449\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
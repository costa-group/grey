{
    "language": "Solidity",
    "sources": {
        "invalid_encoding_for_storage_byte_array.sol": {
            "content": "contract C {\n    bytes public x = \"abc\";\n    bytes public y;\n    function invalidateXShort() public {\n        assembly { sstore(x.slot, 64) }\n        delete y;\n    }\n    function invalidateXLong() public {\n        assembly { sstore(x.slot, 5) }\n        delete y;\n    }\n    function abiEncode() public view returns (bytes memory) { return x; }\n    function abiEncodePacked() public view returns (bytes memory) { return abi.encodePacked(x); }\n    function copyToMemory() public view returns (bytes memory m) { m = x; }\n    function indexAccess() public view returns (bytes1) { return x[0]; }\n    function assignTo() public { x = \"def\"; }\n    function assignToLong() public { x = \"1234567890123456789012345678901234567\"; }\n    function copyToStorage() public { y = x; }\n    function copyFromStorageShort() public { y = \"abc\"; x = y; }\n    function copyFromStorageLong() public { y = \"1234567890123456789012345678901234567\"; x = y; }\n    function arrayPop() public { x.pop(); }\n    function arrayPush() public { x.push(\"t\"); }\n    function arrayPushEmpty() public { x.push(); }\n    function del() public { delete x; }\n}\n// ----\n// x() -> 0x20, 3, 0x6162630000000000000000000000000000000000000000000000000000000000\n// abiEncode() -> 0x20, 3, 0x6162630000000000000000000000000000000000000000000000000000000000\n// abiEncodePacked() -> 0x20, 3, 0x6162630000000000000000000000000000000000000000000000000000000000\n// copyToMemory() -> 0x20, 3, 0x6162630000000000000000000000000000000000000000000000000000000000\n// indexAccess() -> 0x6100000000000000000000000000000000000000000000000000000000000000\n// arrayPushEmpty()\n// arrayPush()\n// x() -> 0x20, 5, 0x6162630074000000000000000000000000000000000000000000000000000000\n// arrayPop()\n// assignToLong()\n// x() -> 0x20, 0x25, 0x3132333435363738393031323334353637383930313233343536373839303132, 0x3334353637000000000000000000000000000000000000000000000000000000\n// assignTo()\n// x() -> 0x20, 3, 0x6465660000000000000000000000000000000000000000000000000000000000\n// copyFromStorageShort()\n// x() -> 0x20, 3, 0x6162630000000000000000000000000000000000000000000000000000000000\n// copyFromStorageLong()\n// gas irOptimized: 121095\n// gas legacy: 121904\n// gas legacyOptimized: 121388\n// x() -> 0x20, 0x25, 0x3132333435363738393031323334353637383930313233343536373839303132, 0x3334353637000000000000000000000000000000000000000000000000000000\n// copyToStorage()\n// x() -> 0x20, 0x25, 0x3132333435363738393031323334353637383930313233343536373839303132, 0x3334353637000000000000000000000000000000000000000000000000000000\n// y() -> 0x20, 0x25, 0x3132333435363738393031323334353637383930313233343536373839303132, 0x3334353637000000000000000000000000000000000000000000000000000000\n// del()\n// x() -> 0x20, 0x00\n// invalidateXLong()\n// x() -> FAILURE, hex\"4e487b71\", 0x22\n// abiEncode() -> FAILURE, hex\"4e487b71\", 0x22\n// abiEncodePacked() -> FAILURE, hex\"4e487b71\", 0x22\n// copyToMemory() -> FAILURE, hex\"4e487b71\", 0x22\n// indexAccess() -> FAILURE, hex\"4e487b71\", 0x22\n// arrayPushEmpty() -> FAILURE, hex\"4e487b71\", 0x22\n// arrayPush() -> FAILURE, hex\"4e487b71\", 0x22\n// x() -> FAILURE, hex\"4e487b71\", 0x22\n// arrayPop() -> FAILURE, hex\"4e487b71\", 0x22\n// assignToLong() -> FAILURE, hex\"4e487b71\", 0x22\n// x() -> FAILURE, hex\"4e487b71\", 0x22\n// assignTo() -> FAILURE, hex\"4e487b71\", 0x22\n// x() -> FAILURE, hex\"4e487b71\", 0x22\n// copyFromStorageShort() -> FAILURE, hex\"4e487b71\", 0x22\n// x() -> FAILURE, hex\"4e487b71\", 0x22\n// copyFromStorageLong() -> FAILURE, hex\"4e487b71\", 0x22\n// x() -> FAILURE, hex\"4e487b71\", 0x22\n// copyToStorage() -> FAILURE, hex\"4e487b71\", 0x22\n// x() -> FAILURE, hex\"4e487b71\", 0x22\n// y() -> 0x20, 0x00\n// del() -> FAILURE, hex\"4e487b71\", 0x22\n// x() -> FAILURE, hex\"4e487b71\", 0x22\n// invalidateXShort()\n// x() -> FAILURE, hex\"4e487b71\", 0x22\n// abiEncode() -> FAILURE, hex\"4e487b71\", 0x22\n// abiEncodePacked() -> FAILURE, hex\"4e487b71\", 0x22\n// copyToMemory() -> FAILURE, hex\"4e487b71\", 0x22\n// indexAccess() -> FAILURE, hex\"4e487b71\", 0x22\n// arrayPushEmpty() -> FAILURE, hex\"4e487b71\", 0x22\n// arrayPush() -> FAILURE, hex\"4e487b71\", 0x22\n// x() -> FAILURE, hex\"4e487b71\", 0x22\n// arrayPop() -> FAILURE, hex\"4e487b71\", 0x22\n// assignToLong() -> FAILURE, hex\"4e487b71\", 0x22\n// x() -> FAILURE, hex\"4e487b71\", 0x22\n// assignTo() -> FAILURE, hex\"4e487b71\", 0x22\n// x() -> FAILURE, hex\"4e487b71\", 0x22\n// copyFromStorageShort() -> FAILURE, hex\"4e487b71\", 0x22\n// x() -> FAILURE, hex\"4e487b71\", 0x22\n// copyFromStorageLong() -> FAILURE, hex\"4e487b71\", 0x22\n// x() -> FAILURE, hex\"4e487b71\", 0x22\n// copyToStorage() -> FAILURE, hex\"4e487b71\", 0x22\n// x() -> FAILURE, hex\"4e487b71\", 0x22\n// y() -> 0x20, 0x00\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
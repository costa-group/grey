{"language": "Solidity", "sources": {"keccak_yul_optimization.sol": {"content": "contract C {\n    function g() public returns (uint ret) {\n        uint x = type(uint).max;\n        assembly {\n            mstore(0x20, x)\n            // both old and new optimizer should be able to evaluate this\n            ret := keccak256(0x20, 16)\n        }\n    }\n\n    function f() public returns (uint ret) {\n        uint x = type(uint).max;\n        assembly {\n            mstore(0x20, x)\n            // For Yul optimizer, load resolver and loop invariant code motion\n            // would take the Keccak-256 outside the loop. For the old-optimizer,\n            // this is not possible.\n            // Net savings approximately: 20 * cost of Keccak-256 = 572\n            for {let i := 0} lt(i, 20) { i := add(i, 1) } {\n                ret := keccak256(0x20, 16)\n            }\n        }\n    }\n}\n// ----\n// f() -> 0xcdb56c384a9682c600315e3470157a4cf7638d0d33e9dae5c40ffd2644fc5a80\n// gas irOptimized: 22239\n// gas legacy: 23385\n// gas legacyOptimized: 23092\n// g() -> 0xcdb56c384a9682c600315e3470157a4cf7638d0d33e9dae5c40ffd2644fc5a80\n// gas irOptimized: 21277\n// gas legacy: 21462\n// gas legacyOptimized: 21256\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}, "viaIR": true}}
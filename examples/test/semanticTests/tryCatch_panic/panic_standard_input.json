{
    "language": "Solidity",
    "sources": {
        "panic.sol": {
            "content": "contract C {\n    function uf(bool b, uint x, uint y) public pure returns (uint) {\n        require(b, \"failure\");\n        return x - y;\n    }\n    function onlyPanic(bool b, uint x, uint y) public returns (uint r, uint code) {\n        try this.uf(b, x, y) returns (uint b) {\n            r = b;\n        } catch Panic(uint c) {\n            code = c;\n        }\n    }\n    function panicAndError(bool b, uint x, uint y) public returns (uint r, uint code, string memory msg_) {\n        try this.uf(b, x, y) returns (uint b) {\n            r = b;\n        } catch Panic(uint c) {\n            code = c;\n        } catch Error(string memory _errmsg) {\n            msg_ = _errmsg;\n        }\n    }\n}\n// ====\n// EVMVersion: >=byzantium\n// ----\n// onlyPanic(bool,uint256,uint256): true, 7, 6 -> 1, 0x00\n// onlyPanic(bool,uint256,uint256): true, 6, 7 -> 0x00, 0x11\n// onlyPanic(bool,uint256,uint256): false, 7, 6 -> FAILURE, hex\"08c379a0\", 0x20, 7, \"failure\"\n// onlyPanic(bool,uint256,uint256): false, 6, 7 -> FAILURE, hex\"08c379a0\", 0x20, 7, \"failure\"\n// panicAndError(bool,uint256,uint256): true, 7, 6 -> 1, 0x00, 0x60, 0x00\n// panicAndError(bool,uint256,uint256): true, 6, 7 -> 0x00, 0x11, 0x60, 0x00\n// panicAndError(bool,uint256,uint256): false, 7, 6 -> 0x00, 0x00, 0x60, 7, \"failure\"\n// panicAndError(bool,uint256,uint256): false, 6, 7 -> 0x00, 0x00, 0x60, 7, \"failure\"\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
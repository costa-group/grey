{"language": "Solidity", "sources": {"operator_return_parameter_cleanup.sol": {"content": "type U8 is uint8;\nusing {f as ~, g as +} for U8 global;\n\nfunction f(U8) pure returns (U8 z) {\n    assembly {\n        // Return a value with dirty bytes outside of uint8\n        z := 0xffff\n    }\n}\n\nfunction g(U8, U8) pure returns (U8 z) {\n    assembly {\n        // Return a value with dirty bytes outside of uint8\n        z := 0xffff\n    }\n}\n\ncontract C {\n    function testUnary() external pure returns (uint, uint) {\n        U8 a; // Value does not matter\n\n        U8 opResult = ~a;\n        U8 fResult = f(a);\n\n        // Get the slot, including bytes outside of uint8\n        uint opResultFull;\n        uint fResultFull;\n        assembly {\n            opResultFull := opResult\n            fResultFull := fResult\n        }\n\n        // If the result is not 0xff, no cleanup was performed.\n        return (opResultFull, fResultFull);\n    }\n\n    function testBinary() external pure returns (uint, uint) {\n        U8 a; // Value does not matter\n        U8 b; // Value does not matter\n\n        U8 opResult = a + b;\n        U8 fResult = g(a, b);\n\n        // Get the slot, including bytes outside of uint8\n        uint opResultFull;\n        uint fResultFull;\n        assembly {\n            opResultFull := opResult\n            fResultFull := fResult\n        }\n\n        // If the result is not 0xff, no cleanup was performed.\n        return (opResultFull, fResultFull);\n    }\n}\n// ----\n// testUnary() -> 0xffff, 0xffff\n// testBinary() -> 0xffff, 0xffff\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200, "details": {"peephole": false, "inliner": false, "jumpdestRemover": false, "orderLiterals": false, "deduplicate": false, "cse": false, "constantOptimizer": false}}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}}}
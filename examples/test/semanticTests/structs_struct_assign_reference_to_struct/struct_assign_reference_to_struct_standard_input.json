{"language": "Solidity", "sources": {"struct_assign_reference_to_struct.sol": {"content": "contract test {\n    struct testStruct {\n        uint256 m_value;\n    }\n    testStruct data1;\n    testStruct data2;\n    testStruct data3;\n\n    constructor() {\n        data1.m_value = 2;\n    }\n\n    function assign()\n        public\n        returns (\n            uint256 ret_local,\n            uint256 ret_global,\n            uint256 ret_global3,\n            uint256 ret_global1\n        )\n    {\n        testStruct storage x = data1; //x is a reference data1.m_value == 2 as well as x.m_value = 2\n        data2 = data1; // should copy data. data2.m_value == 2\n\n        ret_local = x.m_value; // = 2\n        ret_global = data2.m_value; // = 2\n\n        x.m_value = 3;\n        data3 = x; //should copy the data. data3.m_value == 3\n        ret_global3 = data3.m_value; // = 3\n        ret_global1 = data1.m_value; // = 3. Changed due to the assignment to x.m_value\n    }\n}\n// ----\n// assign() -> 2, 2, 3, 3\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}, "viaIR": true}}
{
    "language": "Solidity",
    "sources": {
        "msg_data_to_struct_member_copy.sol": {
            "content": "pragma abicoder v2;\n\nstruct St0 {\n    bytes el0;\n}\ncontract C {\n    function f() external returns (St0 memory) {\n        St0 memory x;\n        x.el0 = msg.data;\n        return x;\n    }\n\n    function g() external returns (St0 memory) {\n        bytes memory temp = msg.data;\n        St0 memory x;\n        x.el0 = temp;\n        return x;\n    }\n\n    function hashes() external returns (bytes4, bytes4) {\n        return (this.f.selector, this.g.selector);\n    }\n\n    function large(uint256, uint256, uint256, uint256) external returns (St0 memory) {\n        St0 memory x;\n        x.el0 = msg.data;\n        return x;\n    }\n\n    function another_large(uint256, uint256, uint256, uint256) external returns (St0 memory) {\n        bytes memory temp = msg.data;\n        St0 memory x;\n        x.el0 = temp;\n        return x;\n    }\n\n}\n// ----\n// f() -> 0x20, 0x20, 4, 0x26121ff000000000000000000000000000000000000000000000000000000000\n// g() -> 0x20, 0x20, 4, 0xe2179b8e00000000000000000000000000000000000000000000000000000000\n// hashes() -> 0x26121ff000000000000000000000000000000000000000000000000000000000, 0xe2179b8e00000000000000000000000000000000000000000000000000000000\n// large(uint256,uint256,uint256,uint256): 1, 2, 3, 4 -> 0x20, 0x20, 0x84, 0xe02492f800000000000000000000000000000000000000000000000000000000, 0x100000000000000000000000000000000000000000000000000000000, 0x200000000000000000000000000000000000000000000000000000000, 0x300000000000000000000000000000000000000000000000000000000, 0x400000000000000000000000000000000000000000000000000000000\n// another_large(uint256,uint256,uint256,uint256): 1, 2, 3, 4 -> 0x20, 0x20, 0x84, 0x2a46f85a00000000000000000000000000000000000000000000000000000000, 0x100000000000000000000000000000000000000000000000000000000, 0x200000000000000000000000000000000000000000000000000000000, 0x300000000000000000000000000000000000000000000000000000000, 0x400000000000000000000000000000000000000000000000000000000\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
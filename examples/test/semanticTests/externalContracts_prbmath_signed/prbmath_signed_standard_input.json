{
    "language": "Solidity",
    "sources": {
        "prbmath.sol": {
            "content": "import \"_prbmath/PRBMathSD59x18.sol\";\n\ncontract test {\n    using PRBMathSD59x18 for int256;\n\n    function div(int256 x, int256 y) external pure returns (int256 ret) {\n        ret = x.div(y);\n    }\n    function exp(int256 x) external pure returns (int256 ret) {\n        ret = x.exp();\n    }\n    function exp2(int256 x) external pure returns (int256 ret) {\n        ret = x.exp2();\n    }\n    function gm(int256 x, int256 y) external pure returns (int256 ret) {\n        ret = x.gm(y);\n    }\n    function log10(int256 x) external pure returns (int256 ret) {\n        ret = x.log10();\n    }\n    function log2(int256 x) external pure returns (int256 ret) {\n        ret = x.log2();\n    }\n    function mul(int256 x, int256 y) external pure returns (int256 ret) {\n        ret = x.mul(y);\n    }\n    function pow(int256 x, uint256 y) external pure returns (int256 ret) {\n        ret = x.pow(y);\n    }\n    function sqrt(int256 x) external pure returns (int256 ret) {\n        ret = x.sqrt();\n    }\n    function benchmark(int256 x) external pure returns (int256 ret, int256 z1, int256 z2) {\n        int256 y = x.mul(3).ceil();\n        int256 z = y.div(x);\n        for (uint i = 0; i < 10; i++)\n            z = z.sqrt();\n        ret = z;\n\n        // Check precision\n        z1 = z.ceil();\n        z2 = z.sqrt().pow(2).ceil();\n        assert(z1 == z2);\n    }\n}\n// ----\n// constructor()\n// gas irOptimized: 177903\n// gas irOptimized code: 1674400\n// gas legacy: 209723\n// gas legacy code: 2205000\n// gas legacyOptimized: 178012\n// gas legacyOptimized code: 1669600\n// div(int256,int256): 3141592653589793238, 88714123 -> 35412542528203691288251815328\n// gas irOptimized: 22137\n// gas legacy: 22767\n// gas legacyOptimized: 22282\n// exp(int256): 3141592653589793238 -> 23140692632779268978\n// gas irOptimized: 24545\n// gas legacy: 25203\n// gas legacyOptimized: 24357\n// exp2(int256): 3141592653589793238 -> 8824977827076287620\n// gas irOptimized: 24257\n// gas legacy: 24864\n// gas legacyOptimized: 24110\n// gm(int256,int256): 3141592653589793238, 88714123 -> 16694419339601\n// gas irOptimized: 22970\n// gas legacy: 23228\n// gas legacyOptimized: 22683\n// log10(int256): 3141592653589793238 -> 4971498726941338506\n// gas irOptimized: 30609\n// gas legacy: 32934\n// gas legacyOptimized: 30323\n// log2(int256): 3141592653589793238 -> 1651496129472318782\n// gas irOptimized: 28819\n// gas legacy: 31067\n// gas legacyOptimized: 28426\n// mul(int256,int256): 3141592653589793238, 88714123 -> 278703637\n// gas irOptimized: 22225\n// gas legacy: 22807\n// gas legacyOptimized: 22295\n// pow(int256,uint256): 3141592653589793238, 5 -> 306019684785281453040\n// gas irOptimized: 22635\n// gas legacy: 23508\n// gas legacyOptimized: 22921\n// sqrt(int256): 3141592653589793238 -> 1772453850905516027\n// gas irOptimized: 22650\n// gas legacy: 22802\n// gas legacyOptimized: 22422\n// benchmark(int256): 3141592653589793238 -> 998882724338592125, 1000000000000000000, 1000000000000000000\n// gas irOptimized: 36630\n// gas legacy: 36673\n// gas legacyOptimized: 34729"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
{
    "language": "Solidity",
    "sources": {
        "address_code.sol": {
            "content": "contract C {\n    bytes public initCode;\n\n    constructor() {\n        // This should catch problems, but lets also test the case the optimiser is buggy.\n        assert(address(this).code.length == 0);\n        initCode = address(this).code;\n    }\n\n    // To avoid dependency on exact length.\n    function f() public view returns (bool) { return address(this).code.length > 380; }\n    function g() public view returns (uint) { return address(0).code.length; }\n    function h() public view returns (uint) { return address(1).code.length; }\n}\n// ====\n// bytecodeFormat: legacy\n// ----\n// constructor() ->\n// gas irOptimized: 70760\n// gas irOptimized code: 94600\n// gas legacy: 82428\n// gas legacy code: 153800\n// gas legacyOptimized: 69400\n// gas legacyOptimized code: 79200\n// initCode() -> 0x20, 0\n// f() -> true\n// g() -> 0\n// h() -> 0\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
{"language": "Solidity", "sources": {"delete_on_array_of_structs.sol": {"content": "// Test for a bug where we did not increment the counter properly while deleting a dynamic array.\ncontract C {\n    struct S {\n        uint256 x;\n        uint256[] y;\n    }\n    S[] data;\n\n    function f() public returns (bool) {\n        S storage s1 = data.push();\n        s1.x = 2**200;\n        S storage s2 = data.push();\n        s2.x = 2**200;\n        delete data;\n        return true;\n    }\n}\n// ----\n// f() -> true # This code interprets x as an array length and thus will go out of gas. neither of the two should throw due to out-of-bounds access #\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}, "viaIR": true}}
{"language": "Solidity", "sources": {"malformed_error.sol": {"content": "contract C {\n    function f(uint size) public pure {\n        assembly {\n            mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n            mstore(4, 0x20)\n            mstore(0x24, 7)\n            mstore(0x44, \"abcdefg\")\n            revert(0, size)\n        }\n    }\n    function a() public returns (uint) {\n        try this.f(3) {\n            assert(false);\n        } catch Panic(uint) {\n            assert(false);\n        } catch Error(string memory) {\n            assert(false);\n        } catch {\n            assert(true);\n        }\n    }\n    function b() public returns (uint) {\n        try this.f(6) {\n            assert(false);\n        } catch Panic(uint) {\n            assert(false);\n        } catch Error(string memory) {\n            assert(false);\n        } catch {\n            assert(true);\n        }\n    }\n    function b2() public returns (uint) {\n        try this.f(0x43) {\n            assert(false);\n        } catch Panic(uint) {\n            assert(false);\n        } catch Error(string memory) {\n            assert(false);\n        } catch {\n            assert(true);\n        }\n    }\n    function b3() public returns (string memory) {\n        try this.f(0x4a) {\n            assert(false);\n        } catch Panic(uint) {\n            assert(false);\n        } catch Error(string memory) {\n            assert(false);\n        } catch {\n            assert(true);\n        }\n    }\n    function c() public returns (string memory) {\n        try this.f(0x4b) {\n            assert(false);\n        } catch Panic(uint) {\n            assert(false);\n        } catch Error(string memory er) {\n            assert(true);\n            return er;\n        } catch {\n            assert(false);\n        }\n    }\n    function d() public returns (string memory) {\n        try this.f(0x100) {\n            assert(false);\n        } catch Panic(uint) {\n            assert(false);\n        } catch Error(string memory er) {\n            assert(true);\n            return er;\n        } catch {\n            assert(false);\n        }\n    }\n}\n// ====\n// EVMVersion: >=byzantium\n// ----\n// a() -> 0x00\n// b() -> 0x00\n// b2() -> 0x00\n// b3() -> 0x20, 0x00\n// c() -> 0x20, 7, \"abcdefg\"\n// d() -> 0x20, 7, \"abcdefg\"\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}, "viaIR": true}}
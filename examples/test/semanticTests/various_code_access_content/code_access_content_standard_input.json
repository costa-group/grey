{"language": "Solidity", "sources": {"code_access_content.sol": {"content": "contract D {\n    bytes32 public x;\n\n    constructor() {\n        bytes32 codeHash;\n        assembly {\n            let size := codesize()\n            codecopy(mload(0x40), 0, size)\n            codeHash := keccak256(mload(0x40), size)\n        }\n        x = codeHash;\n    }\n}\n\n\ncontract C {\n    function testRuntime() public returns (bool) {\n        D d = new D();\n        bytes32 runtimeHash = keccak256(type(D).runtimeCode);\n        bytes32 otherHash;\n        uint256 size;\n        assembly {\n            size := extcodesize(d)\n            extcodecopy(d, mload(0x40), 0, size)\n            otherHash := keccak256(mload(0x40), size)\n        }\n        require(size == type(D).runtimeCode.length);\n        require(runtimeHash == otherHash);\n        return true;\n    }\n\n    function testCreation() public returns (bool) {\n        D d = new D();\n        bytes32 creationHash = keccak256(type(D).creationCode);\n        require(creationHash == d.x());\n        return true;\n    }\n}\n// ====\n// bytecodeFormat: legacy\n// ----\n// testRuntime() -> true\n// gas legacy: 76575\n// gas legacy code: 23600\n// testCreation() -> true\n// gas legacy: 76999\n// gas legacy code: 23600\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}, "viaIR": true}}
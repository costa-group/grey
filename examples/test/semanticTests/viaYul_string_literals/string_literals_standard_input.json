{
    "language": "Solidity",
    "sources": {
        "string_literals.sol": {
            "content": "contract C {\n    function short_dyn() public pure returns (string memory x) {\n        x = \"abc\";\n    }\n    function long_dyn() public pure returns (string memory x) {\n        x = \"12345678901234567890123456789012345678901234567890123456789012345678901234567890\";\n    }\n    function short_bytes_dyn() public pure returns (bytes memory x) {\n        x = \"abc\";\n    }\n    function long_bytes_dyn() public pure returns (bytes memory x) {\n        x = \"12345678901234567890123456789012345678901234567890123456789012345678901234567890\";\n    }\n    function bytesNN() public pure returns (bytes3 x) {\n        x = \"abc\";\n    }\n    function bytesNN_padded() public pure returns (bytes4 x) {\n        x = \"abc\";\n    }\n}\n// ----\n// short_dyn() -> 0x20, 3, \"abc\"\n// long_dyn() -> 0x20, 80, \"12345678901234567890123456789012\", \"34567890123456789012345678901234\", \"5678901234567890\"\n// short_bytes_dyn() -> 0x20, 3, \"abc\"\n// long_bytes_dyn() -> 0x20, 80, \"12345678901234567890123456789012\", \"34567890123456789012345678901234\", \"5678901234567890\"\n// bytesNN() -> 0x6162630000000000000000000000000000000000000000000000000000000000\n// bytesNN_padded() -> 0x6162630000000000000000000000000000000000000000000000000000000000\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
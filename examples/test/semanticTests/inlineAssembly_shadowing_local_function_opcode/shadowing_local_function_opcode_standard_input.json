{
    "language": "Solidity",
    "sources": {
        "selfbalance.sol": {
            "content": "contract C {\n    function f() public payable returns (uint ret) {\n        assembly {\n            ret := selfbalance()\n        }\n    }\n}\n// ====\n// EVMVersion: >=istanbul\n// ----\n// f(), 254 wei -> 254\n"
        },
        "calldata_array_read.sol": {
            "content": "contract C {\n    function f(uint[2][] calldata x) public returns (uint o, uint l, uint s) {\n        assembly { l := x.length o := x.offset }\n        uint[2] calldata t = x[1];\n        // statically-sized arrays only use one slot, so we read directly.\n        assembly { s := t }\n    }\n}\n// ----\n// f(uint256[2][]): 0x20, 2, 1, 2, 3, 4 -> 0x44, 2, 0x84\n"
        },
        "inline_assembly_storage_access_via_pointer.sol": {
            "content": "contract C {\n    struct Data {\n        uint256 contents;\n    }\n    uint256 public separator;\n    Data public a;\n    uint256 public separator2;\n\n    function f() public returns (bool) {\n        Data storage x = a;\n        uint256 off;\n        assembly {\n            sstore(x.slot, 7)\n            off := x.offset\n        }\n        assert(off == 0);\n        return true;\n    }\n}\n// ----\n// f() -> true\n// a() -> 7\n// separator() -> 0\n// separator2() -> 0\n"
        },
        "calldata_struct_assign_and_return.sol": {
            "content": "pragma abicoder v2;\ncontract C {\n  struct S { int8 x; int8 y; }\n  function f() internal pure returns(S calldata s) {\n    assembly {\n      s := 0x24\n    }\n  }\n  function g() public pure returns(int8, int8) {\n    S calldata s = f();\n    return (s.x, s.y);\n  }\n  function h() public pure returns(uint256) { f(); return 0x42; }\n  function i() public pure returns(uint256) { abi.decode(msg.data[4:], (S)); return 0x42; }\n}\n// ----\n// g(): 0xCAFFEE, 0x42, 0x21 -> 0x42, 0x21\n// g(): 0xCAFFEE, 0x4242, 0x2121 -> FAILURE\n// g(): 0xCAFFEE, 0x42 -> 0x42, 0\n// h() -> 0x42\n// i() -> FAILURE\n"
        },
        "inline_assembly_function_call_assignment.sol": {
            "content": "contract C {\n    function f() public {\n        assembly {\n            let a1, b1, c1\n\n            function asmfun(a, b, c) -> x, y, z {\n                x := a\n                y := b\n                z := 7\n            }\n            a1, b1, c1 := asmfun(1, 2, 3)\n            mstore(0x00, a1)\n            mstore(0x20, b1)\n            mstore(0x40, c1)\n            return (0, 0x60)\n        }\n    }\n}\n// ----\n// f() -> 1, 2, 7\n"
        },
        "external_function_pointer_address_assignment.sol": {
            "content": "contract C {\n\tfunction testFunction() external {}\n\n\tfunction testYul(address newAddress) view public returns (address adr) {\n\t\tfunction() external fp = this.testFunction;\n\n\t\tassembly {\n\t\t\tfp.address := newAddress\n\t\t}\n\n\t\treturn fp.address;\n\t}\n}\n// ----\n// testYul(address): 0x1234567890 -> 0x1234567890\n// testYul(address): 0xC0FFEE3EA7 -> 0xC0FFEE3EA7\n"
        },
        "keccak_optimization_bug_string.sol": {
            "content": "contract C {\n    function f(string memory s) public returns (bool ret) {\n        assembly {\n            let a := keccak256(s, 32)\n            let b := keccak256(s, 8)\n            ret := eq(a, b)\n        }\n    }\n}\n// ----\n// f(string): \"\" -> false\n// f(string): 0x20, 5, \"hello\" -> false\n// f(string): 0x20, 0x2e, 29457663690442756349866640336617293820574110049925353194191585327958485180523, 45859201465615193776739262511799714667061496775486067316261261194408342061056 -> false\n"
        },
        "inlineasm_empty_let.sol": {
            "content": "contract C {\n\tfunction f() public pure returns (uint a, uint b) {\n\t\tassembly {\n\t\t\tlet x\n\t\t\tlet y, z\n\t\t\ta := x\n\t\t\tb := z\n\t\t}\n\t}\n}\n// ----\n// f() -> 0, 0\n"
        },
        "calldata_array_assign_dynamic.sol": {
            "content": "contract C {\n    function f(uint[2][] calldata x) public returns (uint[2][] memory r) {\n        assembly { x.offset := 0x44 x.length := 2 }\n        r = x;\n    }\n}\n// ----\n// f(uint256[2][]): 0x0, 1, 8, 7, 6, 5 -> 0x20, 2, 8, 7, 6, 5\n"
        },
        "external_function_pointer_address.sol": {
            "content": "contract C {\n\tfunction testFunction() external {}\n\n\tfunction testYul() public returns (address adr) {\n\t\tfunction() external fp = this.testFunction;\n\n\t\tassembly {\n\t\t\tadr := fp.address\n\t\t}\n\t}\n\tfunction testSol() public returns (address) {\n\t\treturn this.testFunction.address;\n\t}\n}\n// ----\n// testYul() -> 0xc06afe3a8444fc0004668591e8306bfb9968e79e\n// testSol() -> 0xc06afe3a8444fc0004668591e8306bfb9968e79e\n"
        },
        "inline_assembly_memory_access.sol": {
            "content": "contract C {\n    function test() public returns (bytes memory) {\n        bytes memory x = new bytes(5);\n        for (uint256 i = 0; i < x.length; ++i) x[i] = bytes1(uint8(i + 1));\n        assembly {\n            mstore(add(x, 32), \"12345678901234567890123456789012\")\n        }\n        return x;\n    }\n}\n// ----\n// test() -> 0x20, 0x5, \"12345\"\n"
        },
        "keccak256_optimizer_cache_bug.sol": {
            "content": "contract C {\n  uint[] data;\n\n  function val() public returns (bool) {\n    assembly {\n        sstore(0, 2)\n        mstore(0, 0)\n        sstore(keccak256(0, 32), 234)\n        // A bug in the caching mechanism previously caused keccak256(0, 23) to be the same as\n        // keccak256(0, 32), leading to `data[1] == 123` being true.\n        sstore(add(keccak256(0, 23), 1), 123)\n    }\n    assert(data[1] != 123);\n    assert(data[1] == 0);\n    return true;\n  }\n}\n// ----\n// val() -> true\n"
        },
        "mcopy_empty.sol": {
            "content": "contract C {\n    function mcopy_zero(bytes memory pattern) public pure returns (bytes memory out) {\n        out = pattern;\n\n        // This should have no effect on output\n        assembly {\n            mcopy(add(out, 0x20), add(out, 0x30), 0)\n            mcopy(add(out, 0x30), add(out, 0x30), 0)\n            mcopy(add(out, 0x40), add(out, 0x30), 0)\n\n            mcopy(add(out, 0x21), 0, 0)\n        }\n    }\n}\n// ====\n// EVMVersion: >=cancun\n// ----\n// mcopy_zero(bytes): 0x20, 0x20, 0xffeeddccbbaa9988776655443322110000112233445566778899aabbccddeeff -> 0x20, 0x20, 0xffeeddccbbaa9988776655443322110000112233445566778899aabbccddeeff\n"
        },
        "keccak256_optimization.sol": {
            "content": "contract C {\n    function f() public view returns (bool ret) {\n        assembly {\n            let x := calldataload(0)\n            mstore(0, x)\n            mstore(0x20, x)\n            let a := keccak256(0, 4)\n            let b := keccak256(0x20, 4)\n            ret := eq(a, b)\n        }\n    }\n}\n// ----\n// f() -> true\n"
        },
        "keccak_yul_optimization.sol": {
            "content": "contract C {\n    function g() public returns (uint ret) {\n        uint x = type(uint).max;\n        assembly {\n            mstore(0x20, x)\n            // both old and new optimizer should be able to evaluate this\n            ret := keccak256(0x20, 16)\n        }\n    }\n\n    function f() public returns (uint ret) {\n        uint x = type(uint).max;\n        assembly {\n            mstore(0x20, x)\n            // For Yul optimizer, load resolver and loop invariant code motion\n            // would take the Keccak-256 outside the loop. For the old-optimizer,\n            // this is not possible.\n            // Net savings approximately: 20 * cost of Keccak-256 = 572\n            for {let i := 0} lt(i, 20) { i := add(i, 1) } {\n                ret := keccak256(0x20, 16)\n            }\n        }\n    }\n}\n// ----\n// f() -> 0xcdb56c384a9682c600315e3470157a4cf7638d0d33e9dae5c40ffd2644fc5a80\n// gas irOptimized: 22239\n// gas legacy: 23385\n// gas legacyOptimized: 23092\n// g() -> 0xcdb56c384a9682c600315e3470157a4cf7638d0d33e9dae5c40ffd2644fc5a80\n// gas irOptimized: 21277\n// gas legacy: 21462\n// gas legacyOptimized: 21256\n"
        },
        "inline_assembly_if.sol": {
            "content": "contract C {\n    function f(uint256 a) public returns (uint256 b) {\n        assembly {\n            if gt(a, 1) {\n                b := 2\n            }\n        }\n    }\n}\n// ----\n// f(uint256): 0 -> 0\n// f(uint256): 1 -> 0\n// f(uint256): 2 -> 2\n// f(uint256): 3 -> 2\n"
        },
        "tload_tstore_not_reserved_before_cancun.sol": {
            "content": "contract C {\n    function f() public view returns (uint ret) {\n        assembly {\n            let tload := sload(0)\n            let tstore := add(tload, 1)\n            ret := tstore\n        }\n    }\n    function g() public view returns (uint ret) {\n        assembly {\n            function tstore() -> a {\n                a := 2\n            }\n            function tload() -> b {\n                b := 3\n            }\n            ret := add(tstore(), tload())\n        }\n    }\n}\n// ====\n// EVMVersion: <cancun\n// ----\n// f() -> 1\n// g() -> 5\n"
        },
        "transient_storage_sanity_checks.sol": {
            "content": "contract C {\n    function f() external {\n        assembly {\n            tstore(0, 21)\n            mstore(0, 42)\n            sstore(0, 42)\n            if iszero(eq(tload(0), 21)) {\n                revert(0, 0)\n            }\n        }\n    }\n    function g() external view returns (uint s, uint m, uint t) {\n        assembly {\n            s := sload(0)\n            m := mload(0)\n            t := tload(0)\n        }\n    }\n}\n// ====\n// EVMVersion: >=cancun\n// ----\n// f() ->\n// g() -> 0x2a, 0, 0\n"
        },
        "blobhash_index_exceeding_blob_count.sol": {
            "content": "contract C {\n    function f() public view returns (bytes32 ret) {\n        assembly {\n            // EIP-4844 specifies that if `index < len(tx.blob_versioned_hashes)`, `blobhash(index)` should return 0.\n            // Thus, as we injected only two blob hashes in the transaction context in EVMHost,\n            // the return value of the function below MUST be zero.\n            ret := blobhash(2)\n        }\n    }\n}\n// ====\n// EVMVersion: >=cancun\n// ----\n// f() -> 0x00\n"
        },
        "shadowing_local_function_opcode.sol": {
            "content": "contract C {\n    function add(uint, uint) public pure returns (uint) { return 7; }\n    function g() public pure returns (uint x, uint y) {\n        x = add(1, 2);\n        assembly {\n            y := add(1, 2)\n        }\n    }\n}\n// ----\n// g() -> 7, 3\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
{
    "language": "Solidity",
    "sources": {
        "recursive_import.sol": {
            "content": "==== Source: A ====\nimport {T as U} from \"A\";\nimport \"A\" as X;\n\ntype T is uint;\nfunction f(T x) pure returns (T) { return T.wrap(T.unwrap(x) + 1); }\nfunction g(T x) pure returns (uint) { return T.unwrap(x) + 10; }\n\nusing { f } for X.X.U global;\nusing { g } for T global;\n\nfunction cr() pure returns (T) {}\n\n==== Source: B ====\nimport { cr } from \"A\";\n\ncontract C {\n    function f() public returns (uint) {\n        return cr().f().g();\n    }\n}\n// ----\n// f() -> 11\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
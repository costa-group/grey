{
    "language": "Solidity",
    "sources": {
        "error_selector.sol": {
            "content": "library L {\n    error E();\n}\nlibrary S {\n    error E(uint);\n}\nlibrary T {\n    error E();\n}\n\nerror E();\n\ninterface I {\n    error E();\n    function f() external pure;\n}\n\ncontract D {\n    error F();\n}\n\ncontract C is D {\n    function test1() public pure returns (bytes4, bytes4, bytes4, bytes4) {\n        assert(L.E.selector == T.E.selector);\n        assert(L.E.selector != S.E.selector);\n        assert(E.selector == L.E.selector);\n        assert(I.E.selector == L.E.selector);\n        return (L.E.selector, S.E.selector, E.selector, I.E.selector);\n    }\n\n    bytes4 s1 = L.E.selector;\n    bytes4 s2 = S.E.selector;\n    bytes4 s3 = T.E.selector;\n    bytes4 s4 = I.E.selector;\n    function test2() external returns (bytes4, bytes4, bytes4, bytes4) {\n        return (s1, s2, s3, s4);\n    }\n\n    function test3() external returns (bytes4) {\n        return (F.selector);\n    }\n}\n// ====\n// compileViaYul: also\n// ----\n// test1() -> 0x92bbf6e800000000000000000000000000000000000000000000000000000000, 0x2ff06700000000000000000000000000000000000000000000000000000000, 0x92bbf6e800000000000000000000000000000000000000000000000000000000, 0x92bbf6e800000000000000000000000000000000000000000000000000000000\n// test2() -> 0x92bbf6e800000000000000000000000000000000000000000000000000000000, 0x2ff06700000000000000000000000000000000000000000000000000000000, 0x92bbf6e800000000000000000000000000000000000000000000000000000000, 0x92bbf6e800000000000000000000000000000000000000000000000000000000\n// test3() -> 0x28811f5900000000000000000000000000000000000000000000000000000000\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
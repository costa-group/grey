{
    "language": "Solidity",
    "sources": {
        "dynamic_memory_copy.sol": {
            "content": "contract C {\n    function test(bytes memory buf) public view returns (bool same, bool inplaceDecoded) {\n        (uint256[] memory arr1, uint256[] memory arr2) = abi.decode(buf, (uint256[],uint256[]));\n        assembly {\n            // Check whether arr1 and arr2 end up at the same memory location.\n            // This used to be the case, if both tail pointers in buf pointed to the\n            // same memory region, i.e. this used to be false in the first two, but true\n            // in the last three calls below. The desired behaviour is to always get distinct\n            // memory regions, i.e. this should be false.\n            same := eq(arr1, arr2)\n            // Check whether (given the particular tail pointer of 0x40 for arr1 in the calls below)\n            // arr1 points to the part of buf containing the encoding of arr1.\n            // The position of the encoding of arr1 in buf is at offset 0x20 (length) + 0x40 (tail pointer)\n            // of buf.\n            // This used to be the case for all the test calls below, whereas now arr1 is always copied\n            // from buf to a new memory area. Should always be false.\n            inplaceDecoded := eq(arr1, add(buf, 0x60))\n        }\n    }\n}\n// ----\n// test(bytes): 0x20, 0x80, 0x40, 0x60, 0, 0 -> false, false\n// test(bytes): 0x20, 0xC0, 0x40, 0x80, 1, 0x42, 1, 0x42 -> false, false\n// test(bytes): 0x20, 0x80, 0x40, 0x40, 1, 0x42 -> false, false\n// test(bytes): 0x20, 0x60, 0x40, 0x40, 0 -> false, false\n// test(bytes): 0x20, 0x80, 0x40, 0x40, 1, 0x42 -> false, false\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
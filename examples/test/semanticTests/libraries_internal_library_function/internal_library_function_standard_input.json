{"language": "Solidity", "sources": {"internal_library_function.sol": {"content": "// tests that internal library functions can be called from outside\n// and retain the same memory context (i.e. are pulled into the caller's code)\n// This has to work without linking, because everything will be inlined.\nlibrary L {\n    function f(uint256[] memory _data) internal {\n        _data[3] = 2;\n    }\n}\n\n\ncontract C {\n    function f() public returns (uint256) {\n        uint256[] memory x = new uint256[](7);\n        x[3] = 8;\n        L.f(x);\n        return x[3];\n    }\n}\n// ----\n// f() -> 2\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}, "viaIR": true}}
{
    "language": "Solidity",
    "sources": {
        "memory_arrays_of_various_sizes.sol": {
            "content": "// Computes binomial coefficients the chinese way\ncontract C {\n    function f(uint256 n, uint256 k) public returns (uint256) {\n        uint256[][] memory rows = new uint256[][](n + 1);\n        for (uint256 i = 1; i <= n; i++) {\n            rows[i] = new uint256[](i);\n            rows[i][0] = rows[i][rows[i].length - 1] = 1;\n            for (uint256 j = 1; j < i - 1; j++)\n                rows[i][j] = rows[i - 1][j - 1] + rows[i - 1][j];\n        }\n        return rows[n][k - 1];\n    }\n}\n// ----\n// f(uint256,uint256): 3, 1 -> 1\n// f(uint256,uint256): 9, 5 -> 70\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
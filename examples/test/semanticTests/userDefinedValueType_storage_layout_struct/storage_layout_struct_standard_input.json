{
    "language": "Solidity",
    "sources": {
        "storage_layout_struct.sol": {
            "content": "type MyInt64 is int64;\nstruct HalfSlot {\n    MyInt64 a;\n    MyInt64 b;\n}\n\nstruct RegularHalfSlot {\n    int64 a;\n    int64 b;\n}\n\ntype MyAddress is address;\ntype MyInt96 is int96;\nstruct FullSlot {\n    MyInt96 a;\n    MyAddress b;\n}\nstruct RegularFullSlot {\n    int96 a;\n    address b;\n}\n\ncontract C {\n    HalfSlot public a;\n    RegularHalfSlot public ra;\n\n    HalfSlot public b;\n    RegularHalfSlot public rb;\n\n    HalfSlot public c;\n    RegularHalfSlot public rc;\n\n    FullSlot public d;\n    RegularFullSlot public rd;\n\n    function storage_a() pure external returns(uint slot, uint offset) {\n        assembly {\n            slot := a.slot\n            offset := a.offset\n        }\n    }\n\n    function storage_ra() pure external returns(uint slot, uint offset) {\n        assembly {\n            slot := ra.slot\n            offset := ra.offset\n        }\n    }\n\n    function storage_b() pure external returns(uint slot, uint offset) {\n        assembly {\n            slot := b.slot\n            offset := b.offset\n        }\n    }\n\n    function storage_rb() pure external returns(uint slot, uint offset) {\n        assembly {\n            slot := rb.slot\n            offset := rb.offset\n        }\n    }\n\n   function storage_c() pure external returns(uint slot, uint offset) {\n        assembly {\n            slot := c.slot\n            offset := c.offset\n        }\n    }\n\n   function storage_rc() pure external returns(uint slot, uint offset) {\n        assembly {\n            slot := rc.slot\n            offset := rc.offset\n        }\n    }\n\n   function storage_d() pure external returns(uint slot, uint offset) {\n        assembly {\n            slot := d.slot\n            offset := d.offset\n        }\n    }\n\n   function storage_rd() pure external returns(uint slot, uint offset) {\n        assembly {\n            slot := rd.slot\n            offset := rd.offset\n        }\n    }\n\n\n   function set_a(MyInt64 _a, MyInt64 _b) external {\n       a.a = _a;\n       a.b = _b;\n   }\n\n   function set_ra(int64 _a, int64 _b) external {\n       ra.a = _a;\n       ra.b = _b;\n   }\n\n   function set_b(MyInt64 _a, MyInt64 _b) external {\n       b.a = _a;\n       b.b = _b;\n   }\n\n   function set_rb(int64 _a, int64 _b) external {\n       rb.a = _a;\n       rb.b = _b;\n   }\n\n   function set_c(MyInt64 _a, MyInt64 _b) external {\n       c.a = _a;\n       c.b = _b;\n   }\n\n   function set_rc(int64 _a, int64 _b) external {\n       rc.a = _a;\n       rc.b = _b;\n   }\n\n   function set_d(MyInt96 _a, MyAddress _b) external {\n       d.a = _a;\n       d.b = _b;\n   }\n\n   function set_rd(int96 _a, address _b) external {\n       rd.a = _a;\n       rd.b = _b;\n   }\n\n   function read_slot(uint slot) view external returns (uint value) {\n       assembly {\n           value := sload(slot)\n       }\n   }\n\n   function read_contents_asm() external returns (bytes32 rxa, bytes32 rya, bytes32 rxb, bytes32 ryb) {\n       b.a = MyInt64.wrap(-2);\n       b.b = MyInt64.wrap(-3);\n       HalfSlot memory x = b;\n       MyInt64 y = b.a;\n       MyInt64 z = b.b;\n       assembly {\n           rxa := mload(x)\n           rya := y\n           rxb := mload(add(x, 0x20))\n           ryb := z\n       }\n   }\n}\n// ----\n// storage_a() -> 0, 0\n// set_a(int64,int64): 100, 200 ->\n// read_slot(uint256): 0 -> 0xc80000000000000064\n// storage_ra() -> 1, 0\n// set_ra(int64,int64): 100, 200 ->\n// read_slot(uint256): 1 -> 0xc80000000000000064\n// storage_b() -> 2, 0\n// set_b(int64,int64): 0, 200 ->\n// read_slot(uint256): 2 -> 3689348814741910323200\n// storage_rb() -> 3, 0\n// set_rb(int64,int64): 0, 200 ->\n// read_slot(uint256): 3 -> 3689348814741910323200\n// storage_c() -> 4, 0\n// set_c(int64,int64): 100, 0 ->\n// read_slot(uint256): 4 -> 0x64\n// storage_rc() -> 5, 0\n// set_rc(int64,int64): 100, 0 ->\n// read_slot(uint256): 5 -> 0x64\n// storage_d() -> 6, 0\n// set_d(int96,address): 39614081257132168796771975167, 1461501637330902918203684832716283019655932542975 ->\n// read_slot(uint256): 6 -> -39614081257132168796771975169\n// storage_rd() -> 7, 0\n// set_rd(int96,address): 39614081257132168796771975167, 1461501637330902918203684832716283019655932542975 ->\n// read_slot(uint256): 7 -> -39614081257132168796771975169\n// read_contents_asm() -> 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe, 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe, 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd, 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
{
    "language": "Solidity",
    "sources": {
        "explicit_base_class.sol": {
            "content": "contract BaseBase {\n    function g() public virtual returns (uint256 r) {\n        return 1;\n    }\n}\n\n\ncontract Base is BaseBase {\n    function g() public virtual override returns (uint256 r) {\n        return 2;\n    }\n}\n\n\ncontract Derived is Base {\n    function f() public returns (uint256 r) {\n        return BaseBase.g();\n    }\n\n    function g() public override returns (uint256 r) {\n        return 3;\n    }\n}\n// ----\n// g() -> 3\n// f() -> 1\n"
        },
        "member_notation_ctor.sol": {
            "content": "==== Source: A ====\ncontract C {\n\tint private x;\n\tconstructor (int p) public { x = p; }\n\tfunction getX() public returns (int) { return x; }\n}\n==== Source: B ====\nimport \"A\" as M;\n\ncontract D is M.C {\n\tconstructor (int p) M.C(p) public {}\n}\n\ncontract A {\n\tfunction g(int p) public returns (int) {\n\t\tD d = new D(p);\n\t\treturn d.getX();\n\t}\n}\n// ----\n// g(int256): -1 -> -1\n// gas legacy: 77876\n// gas legacy code: 24200\n// g(int256): 10 -> 10\n// gas legacy: 77504\n// gas legacy code: 24200\n"
        },
        "inherited_function_through_dispatch.sol": {
            "content": "contract A {\n    function f() internal virtual returns (uint256) {\n        return 1;\n    }\n}\n\n\ncontract B is A {\n    function f() internal override returns (uint256) {\n        return 2;\n    }\n\n    function g() public returns (uint256) {\n        function() internal returns (uint256) ptr = A.f;\n        return ptr();\n    }\n}\n// ----\n// g() -> 1\n"
        },
        "access_base_storage.sol": {
            "content": "contract Base {\n    uint256 dataBase;\n\n    function getViaBase() public returns (uint256 i) {\n        return dataBase;\n    }\n}\n\n\ncontract Derived is Base {\n    uint256 dataDerived;\n\n    function setData(uint256 base, uint256 derived) public returns (bool r) {\n        dataBase = base;\n        dataDerived = derived;\n        return true;\n    }\n\n    function getViaDerived() public returns (uint256 base, uint256 derived) {\n        base = dataBase;\n        derived = dataDerived;\n    }\n}\n// ----\n// setData(uint256,uint256): 1, 2 -> true\n// getViaBase() -> 1\n// getViaDerived() -> 1, 2\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
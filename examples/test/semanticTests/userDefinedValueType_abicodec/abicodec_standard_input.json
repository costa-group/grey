{
    "language": "Solidity",
    "sources": {
        "abicodec.sol": {
            "content": "// A test to see if `abi.encodeWithSelector(..., (CustomType))` works as intended.\ncontract C {\n    type MyInt is int;\n    function f(MyInt x) external returns(MyInt a, MyInt b, MyInt c, MyInt d) {\n        a = MyInt.wrap(-1);\n        b = MyInt.wrap(0);\n        c = MyInt.wrap(1);\n        d = x;\n    }\n    function g() external returns(bool) {\n        (bool success1, bytes memory ret1) =  address(this).call(abi.encodeWithSelector(this.f.selector, MyInt.wrap(5)));\n        assert(success1);\n\n        (MyInt a1, MyInt b1, MyInt c1, MyInt d1) = abi.decode(ret1, (MyInt, MyInt, MyInt, MyInt));\n        assert(MyInt.unwrap(a1) == -1);\n        assert(MyInt.unwrap(b1) == 0);\n        assert(MyInt.unwrap(c1) == 1);\n        assert(MyInt.unwrap(d1) == 5);\n\n        (bool success2, bytes memory ret2) = address(this).call(abi.encodeWithSelector(this.f.selector, int(-5)));\n        assert(success2);\n\n        (int a2, int b2, int c2, int d2) = abi.decode(ret2, (int, int, int, int));\n        assert(a2 == -1);\n        assert(b2 == 0);\n        assert(c2 == 1);\n        assert(d2 == -5);\n\n        return true;\n    }\n}\n// ====\n// EVMVersion: >=byzantium\n// ----\n// g() -> true\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
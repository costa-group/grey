{"language": "Solidity", "sources": {"bitwise_shifting_constantinople_combined.sol": {"content": "contract C {\n    function shl_zero(uint256 a) public returns (uint256 c) {\n        assembly {\n            c := shl(0, a)\n        }\n    }\n\n    function shr_zero(uint256 a) public returns (uint256 c) {\n        assembly {\n            c := shr(0, a)\n        }\n    }\n\n    function sar_zero(uint256 a) public returns (uint256 c) {\n        assembly {\n            c := sar(0, a)\n        }\n    }\n\n    function shl_large(uint256 a) public returns (uint256 c) {\n        assembly {\n            c := shl(0x110, a)\n        }\n    }\n\n    function shr_large(uint256 a) public returns (uint256 c) {\n        assembly {\n            c := shr(0x110, a)\n        }\n    }\n\n    function sar_large(uint256 a) public returns (uint256 c) {\n        assembly {\n            c := sar(0x110, a)\n        }\n    }\n\n    function shl_combined(uint256 a) public returns (uint256 c) {\n        assembly {\n            c := shl(4, shl(12, a))\n        }\n    }\n\n    function shr_combined(uint256 a) public returns (uint256 c) {\n        assembly {\n            c := shr(4, shr(12, a))\n        }\n    }\n\n    function sar_combined(uint256 a) public returns (uint256 c) {\n        assembly {\n            c := sar(4, sar(12, a))\n        }\n    }\n\n    function shl_combined_large(uint256 a) public returns (uint256 c) {\n        assembly {\n            c := shl(0xd0, shl(0x40, a))\n        }\n    }\n\n    function shl_combined_overflow(uint256 a) public returns (uint256 c) {\n        assembly {\n            c := shl(0x01, shl(not(0x00), a))\n        }\n    }\n\n    function shr_combined_large(uint256 a) public returns (uint256 c) {\n        assembly {\n            c := shr(0xd0, shr(0x40, a))\n        }\n    }\n\n    function shr_combined_overflow(uint256 a) public returns (uint256 c) {\n        assembly {\n            c := shr(0x01, shr(not(0x00), a))\n        }\n    }\n\n    function sar_combined_large(uint256 a) public returns (uint256 c) {\n        assembly {\n            c := sar(0xd0, sar(0x40, a))\n        }\n    }\n}\n// ====\n// EVMVersion: >=constantinople\n// ----\n// shl_zero(uint256): 0x00 -> 0x00\n// shl_zero(uint256): 0xffff -> 0xffff\n// shl_zero(uint256): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff -> 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n// shr_zero(uint256): 0x00 -> 0x00\n// shr_zero(uint256): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff -> 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n// sar_zero(uint256): 0x00 -> 0x00\n// sar_zero(uint256): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff -> 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n// shl_large(uint256): 0x00 -> 0x00\n// shl_large(uint256): 0xffff -> 0x00\n// shl_large(uint256): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff -> 0x00\n// shr_large(uint256): 0x00 -> 0x00\n// shr_large(uint256): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff -> 0x00\n// sar_large(uint256): 0x00 -> 0x00\n// sar_large(uint256): 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff -> 0x00\n// sar_large(uint256): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff -> 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n// shl_combined(uint256): 0x00 -> 0x00\n// shl_combined(uint256): 0xffff -> 0xffff0000\n// shl_combined(uint256): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff -> 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000\n// shr_combined(uint256): 0x00 -> 0x00\n// shr_combined(uint256): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff -> 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n// sar_combined(uint256): 0x00 -> 0x00\n// sar_combined(uint256): 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff -> 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n// sar_combined(uint256): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff -> 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n// shl_combined_large(uint256): 0x00 -> 0x00\n// shl_combined_large(uint256): 0xffff -> 0x00\n// shl_combined_large(uint256): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff -> 0x00\n// shl_combined_overflow(uint256): 0x02 -> 0x00\n// shr_combined_large(uint256): 0x00 -> 0x00\n// shr_combined_large(uint256): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff -> 0x00\n// shr_combined_overflow(uint256): 0x02 -> 0x00\n// sar_combined_large(uint256): 0x00 -> 0x00\n// sar_combined_large(uint256): 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff -> 0x00\n// sar_combined_large(uint256): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff -> 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}, "viaIR": true}}
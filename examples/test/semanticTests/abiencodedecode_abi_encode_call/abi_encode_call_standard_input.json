{
    "language": "Solidity",
    "sources": {
        "abi_encode_call.sol": {
            "content": "pragma abicoder v2;\ncontract C {\n\ttype UnsignedNumber is uint256;\n\tenum Enum { First, Second, Third }\n\n\tstruct Struct {\n\t\tUnsignedNumber[] dynamicArray;\n\t\tuint256 justAnInt;\n\t\tstring name;\n\t\tbytes someBytes;\n\t\tEnum theEnum;\n\t}\n\n\tfunction callMeMaybe(Struct calldata _data, int256 _intVal, string memory _nameVal) external pure {\n\t\tassert(_data.dynamicArray.length == 3);\n\t\tassert(UnsignedNumber.unwrap(_data.dynamicArray[0]) == 0);\n\t\tassert(UnsignedNumber.unwrap(_data.dynamicArray[1]) == 1);\n\t\tassert(UnsignedNumber.unwrap(_data.dynamicArray[2]) == 2);\n\t\tassert(_data.justAnInt == 6);\n\t\tassert(keccak256(bytes(_data.name)) == keccak256(\"StructName\"));\n\t\tassert(keccak256(_data.someBytes) == keccak256(bytes(\"1234\")));\n\t\tassert(_data.theEnum == Enum.Second);\n\t\tassert(_intVal == 5);\n\t\tassert(keccak256(bytes(_nameVal)) == keccak256(\"TestName\"));\n\t}\n\n\tfunction callExternal() public returns (bool) {\n\t\tStruct memory structToSend;\n\t\tstructToSend.dynamicArray = new UnsignedNumber[](3);\n\t\tstructToSend.dynamicArray[0] = UnsignedNumber.wrap(0);\n\t\tstructToSend.dynamicArray[1] = UnsignedNumber.wrap(1);\n\t\tstructToSend.dynamicArray[2] = UnsignedNumber.wrap(2);\n\t\tstructToSend.justAnInt = 6;\n\t\tstructToSend.name = \"StructName\";\n\t\tstructToSend.someBytes = bytes(\"1234\");\n\t\tstructToSend.theEnum = Enum.Second;\n\n\t\t(bool success,) = address(this).call(abi.encodeCall(this.callMeMaybe, (\n\t\t\tstructToSend,\n\t\t\t5,\n\t\t\t\"TestName\"\n\t\t)));\n\n\t\treturn success;\n\t}\n}\n// ----\n// callExternal() -> true\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
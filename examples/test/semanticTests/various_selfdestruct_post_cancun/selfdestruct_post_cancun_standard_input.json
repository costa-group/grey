{"language": "Solidity", "sources": {"selfdestruct_post_cancun.sol": {"content": "contract C {\n    constructor() payable {}\n\n    function terminate() external {\n        // NOTE: The contract `c` should still exist in the test below\n        // when the call to selfdestruct is executed in a transaction\n        // different from the one in which the contract was created.\n        // However, it should still send all Ether in `c` to the beneficiary.\n        selfdestruct(payable(msg.sender));\n        assert(false);\n    }\n}\n\ncontract D {\n    C public c;\n\n    constructor() payable {}\n\n    function deploy_create() public payable {\n        c = new C{value: 1 ether}();\n    }\n\n    function deploy_create2() public payable {\n        c = new C{value: 1 ether, salt: hex\"1234\"}();\n    }\n\n    function terminate() public {\n        // NOTE: A second call to `c.terminate()` or any other function of the contract `c` will succeed if the\n        // previous selfdestruct was performed in a different transaction, since the contract will still exists.\n        c.terminate();\n    }\n\n    function test_create_and_terminate() public {\n        deploy_create();\n        assert(exists());\n        test_balance_after_create();\n        terminate();\n        test_balance_after_selfdestruct();\n    }\n\n    function test_create2_and_terminate() public {\n        deploy_create2();\n        assert(exists());\n        test_balance_after_create();\n        terminate();\n        test_balance_after_selfdestruct();\n    }\n\n    function test_balance_after_create() public view {\n        assert(address(this).balance == 0);\n        assert(address(c).balance == 1 ether);\n    }\n\n    function test_balance_after_selfdestruct() public view {\n        assert(address(this).balance == 1 ether);\n        assert(address(c).balance == 0);\n    }\n\n    function exists() public view returns (bool) {\n        return address(c).code.length != 0;\n    }\n}\n// ====\n// EVMVersion: >=cancun\n// bytecodeFormat: legacy\n// ----\n// constructor(), 1 ether ->\n// gas irOptimized: 67028\n// gas irOptimized code: 175400\n// gas legacy: 76227\n// gas legacy code: 298200\n// gas legacyOptimized: 66516\n// gas legacyOptimized code: 168000\n// exists() -> false\n// test_create_and_terminate() ->\n// exists() -> false\n// terminate() -> FAILURE\n// deploy_create() ->\n// test_balance_after_create() ->\n// exists() -> true\n// terminate() ->\n// test_balance_after_selfdestruct() ->\n// exists() -> true\n// test_create2_and_terminate() ->\n// exists() -> false\n// deploy_create2() ->\n// test_balance_after_create() ->\n// exists() -> true\n// terminate() ->\n// test_balance_after_selfdestruct() ->\n// exists() -> true\n// terminate() ->\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}, "viaIR": true}}
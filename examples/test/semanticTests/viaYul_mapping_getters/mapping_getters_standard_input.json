{
    "language": "Solidity",
    "sources": {
        "mapping_getters.sol": {
            "content": "contract test {\n    mapping(uint256 => uint256) public m1;\n    mapping(uint256 => mapping(uint256 => uint256)) public m2;\n    function set(uint256 k, uint256 v) public {\n        m1[k] = v;\n    }\n    function set(uint256 k1, uint256 k2, uint256 v) public {\n        m2[k1][k2] = v;\n    }\n}\n// ----\n// m1(uint256): 0 -> 0\n// m1(uint256): 0x01 -> 0\n// m1(uint256): 0xa7 -> 0\n// set(uint256,uint256): 0x01, 0xa1 ->\n// m1(uint256): 0 -> 0\n// m1(uint256): 0x01 -> 0xa1\n// m1(uint256): 0xa7 -> 0\n// set(uint256,uint256): 0x00, 0xef ->\n// m1(uint256): 0 -> 0xef\n// m1(uint256): 0x01 -> 0xa1\n// m1(uint256): 0xa7 -> 0\n// set(uint256,uint256): 0x01, 0x05 ->\n// m1(uint256): 0 -> 0xef\n// m1(uint256): 0x01 -> 0x05\n// m1(uint256): 0xa7 -> 0\n// m2(uint256,uint256): 0, 0 -> 0\n// m2(uint256,uint256): 0, 0x01 -> 0\n// m2(uint256,uint256): 0xa7, 0 -> 0\n// m2(uint256,uint256): 0xa7, 0x01 -> 0\n// set(uint256,uint256,uint256): 0xa7, 0x01, 0x23\n// m2(uint256,uint256): 0, 0x01 -> 0\n// m2(uint256,uint256): 0xa7, 0 -> 0\n// m2(uint256,uint256): 0xa7, 0x01 -> 0x23\n// set(uint256,uint256,uint256): 0, 0x01, 0xef\n// m2(uint256,uint256): 0, 0x01 -> 0xef\n// m2(uint256,uint256): 0xa7, 0 -> 0\n// m2(uint256,uint256): 0xa7, 0x01 -> 0x23\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
{
    "language": "Solidity",
    "sources": {
        "enum_explicit_overflow_homestead.sol": {
            "content": "contract test {\n    enum ActionChoices {GoLeft, GoRight, GoStraight}\n\n    constructor() {}\n\n    function getChoiceExp(uint256 x) public returns (uint256 d) {\n        choice = ActionChoices(x);\n        d = uint256(choice);\n    }\n\n    function getChoiceFromSigned(int256 x) public returns (uint256 d) {\n        choice = ActionChoices(x);\n        d = uint256(choice);\n    }\n\n    function getChoiceFromMax() public returns (uint256 d) {\n        choice = ActionChoices(type(uint256).max);\n        d = uint256(choice);\n    }\n\n    ActionChoices choice;\n}\n// ====\n// EVMVersion: <byzantium\n// ----\n// getChoiceExp(uint256): 3 -> FAILURE # These should throw #\n// getChoiceFromSigned(int256): -1 -> FAILURE\n// getChoiceFromMax() -> FAILURE\n// getChoiceExp(uint256): 2 -> 2 # These should work #\n// getChoiceExp(uint256): 0 -> 0\n"
        },
        "constructing_enums_from_ints.sol": {
            "content": "contract c {\n    enum Truth {False, True}\n\n    function test() public returns (uint256) {\n        return uint256(Truth(uint8(0x1)));\n    }\n}\n// ----\n// test() -> 1\n"
        },
        "enum_explicit_overflow.sol": {
            "content": "contract test {\n    enum ActionChoices {GoLeft, GoRight, GoStraight}\n\n    constructor() {}\n\n    function getChoiceExp(uint256 x) public returns (uint256 d) {\n        choice = ActionChoices(x);\n        d = uint256(choice);\n    }\n\n    function getChoiceFromSigned(int256 x) public returns (uint256 d) {\n        choice = ActionChoices(x);\n        d = uint256(choice);\n    }\n\n    function getChoiceFromMax() public returns (uint256 d) {\n        choice = ActionChoices(type(uint).max);\n        d = uint256(choice);\n    }\n\n    ActionChoices choice;\n}\n// ====\n// EVMVersion: >=byzantium\n// ----\n// getChoiceExp(uint256): 2 -> 2\n// getChoiceExp(uint256): 3 -> FAILURE, hex\"4e487b71\", 0x21 # These should throw #\n// getChoiceFromSigned(int256): -1 -> FAILURE, hex\"4e487b71\", 0x21\n// getChoiceFromMax() -> FAILURE, hex\"4e487b71\", 0x21\n// getChoiceExp(uint256): 2 -> 2 # These should work #\n// getChoiceExp(uint256): 0 -> 0\n"
        },
        "invalid_enum_logged.sol": {
            "content": "contract C {\n    enum X { A, B }\n    event Log(X);\n\n    function test_log() public returns (uint) {\n        X garbled = X.A;\n        assembly {\n            garbled := 5\n        }\n        emit Log(garbled);\n        return 1;\n    }\n    function test_log_ok() public returns (uint) {\n        X x = X.A;\n        emit Log(x);\n        return 1;\n    }\n}\n// ----\n// test_log_ok() -> 1\n// ~ emit Log(uint8): 0x00\n// test_log() -> FAILURE, hex\"4e487b71\", 0x21\n"
        },
        "enum_referencing.sol": {
            "content": "interface I {\n    enum Direction { A, B, Left, Right }\n}\nlibrary L {\n    enum Direction { Left, Right }\n    function f() public pure returns (Direction) {\n        return Direction.Right;\n    }\n    function g() public pure returns (I.Direction) {\n        return I.Direction.Right;\n    }\n}\ncontract C is I {\n    function f() public pure returns (Direction) {\n        return Direction.Right;\n    }\n    function g() public pure returns (I.Direction) {\n        return I.Direction.Right;\n    }\n    function h() public pure returns (L.Direction) {\n        return L.Direction.Right;\n    }\n    function x() public pure returns (L.Direction) {\n        return L.f();\n    }\n    function y() public pure returns (I.Direction) {\n        return L.g();\n    }\n}\n// ----\n// library: L\n// f() -> 3\n// g() -> 3\n// f() -> 3\n// g() -> 3\n// h() -> 1\n// x() -> 1\n// y() -> 3\n"
        },
        "enum_with_256_members.sol": {
            "content": "pragma abicoder v2;\nenum E {\n    E000, E001, E002, E003, E004, E005, E006, E007, E008, E009,\n    E010, E011, E012, E013, E014, E015, E016, E017, E018, E019,\n    E020, E021, E022, E023, E024, E025, E026, E027, E028, E029,\n    E030, E031, E032, E033, E034, E035, E036, E037, E038, E039,\n    E040, E041, E042, E043, E044, E045, E046, E047, E048, E049,\n    E050, E051, E052, E053, E054, E055, E056, E057, E058, E059,\n    E060, E061, E062, E063, E064, E065, E066, E067, E068, E069,\n    E070, E071, E072, E073, E074, E075, E076, E077, E078, E079,\n    E080, E081, E082, E083, E084, E085, E086, E087, E088, E089,\n    E090, E091, E092, E093, E094, E095, E096, E097, E098, E099,\n    E100, E101, E102, E103, E104, E105, E106, E107, E108, E109,\n    E110, E111, E112, E113, E114, E115, E116, E117, E118, E119,\n    E120, E121, E122, E123, E124, E125, E126, E127, E128, E129,\n    E130, E131, E132, E133, E134, E135, E136, E137, E138, E139,\n    E140, E141, E142, E143, E144, E145, E146, E147, E148, E149,\n    E150, E151, E152, E153, E154, E155, E156, E157, E158, E159,\n    E160, E161, E162, E163, E164, E165, E166, E167, E168, E169,\n    E170, E171, E172, E173, E174, E175, E176, E177, E178, E179,\n    E180, E181, E182, E183, E184, E185, E186, E187, E188, E189,\n    E190, E191, E192, E193, E194, E195, E196, E197, E198, E199,\n    E200, E201, E202, E203, E204, E205, E206, E207, E208, E209,\n    E210, E211, E212, E213, E214, E215, E216, E217, E218, E219,\n    E220, E221, E222, E223, E224, E225, E226, E227, E228, E229,\n    E230, E231, E232, E233, E234, E235, E236, E237, E238, E239,\n    E240, E241, E242, E243, E244, E245, E246, E247, E248, E249,\n    E250, E251, E252, E253, E254, E255\n}\n\ncontract C {\n    function getMinMax() public returns (E, E) {\n        return (E.E000, E.E255);\n    }\n\n    function intToEnum(uint8 _i) public returns (E) {\n        return E(_i);\n    }\n\n    function enumToInt(E _e) public returns (uint8) {\n        return uint8(_e);\n    }\n\n    function decodeEnum(bytes memory data) public returns (E) {\n        (E e) = abi.decode(data, (E));\n        return e;\n    }\n}\n// ----\n// getMinMax() -> 0, 255\n// intToEnum(uint8): 0 -> 0\n// intToEnum(uint8): 255 -> 255\n// enumToInt(uint8): 0 -> 0\n// enumToInt(uint8): 255 -> 255\n// enumToInt(uint8): 256 -> FAILURE\n// decodeEnum(bytes): 0x20, 32, 0 -> 0\n// decodeEnum(bytes): 0x20, 32, 255 -> 255\n// decodeEnum(bytes): 0x20, 32, 256 -> FAILURE\n"
        },
        "using_contract_enums_with_explicit_contract_name.sol": {
            "content": "contract test {\n    enum Choice {A, B, C}\n\n    function answer() public returns (test.Choice _ret) {\n        _ret = test.Choice.B;\n    }\n}\n// ----\n// answer() -> 1\n"
        },
        "using_inherited_enum_excplicitly.sol": {
            "content": "contract base {\n    enum Choice {A, B, C}\n}\n\n\ncontract test is base {\n    function answer() public returns (base.Choice _ret) {\n        _ret = base.Choice.B;\n    }\n}\n// ----\n// answer() -> 1\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
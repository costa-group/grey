{
    "language": "Solidity",
    "sources": {
        "conditional_expression_true_literal.sol": {
            "content": "contract test {\n    function f() public returns(uint d) {\n        return true ? 5 : 10;\n    }\n}\n// ----\n// f() -> 5\n"
        },
        "conditional_expression_functions.sol": {
            "content": "contract test {\n    function x() public returns (uint) { return 1; }\n    function y() public returns (uint) { return 2; }\n\n    function f(bool cond) public returns (uint) {\n        function () returns (uint) z = cond ? x : y;\n        return z();\n    }\n}\n// ----\n// f(bool): true -> 1\n// f(bool): false -> 2\n"
        },
        "inc_dec_operators.sol": {
            "content": "contract test {\n    uint8 x;\n    uint v;\n    function f() public returns (uint r) {\n        uint a = 6;\n        r = a;\n        r += (a++) * 0x10;\n        r += (++a) * 0x100;\n        v = 3;\n        r += (v++) * 0x1000;\n        r += (++v) * 0x10000;\n    }\n}\n// ----\n// f() -> 0x053866\n"
        },
        "module_from_ternary_expression.sol": {
            "content": "==== Source: A ====\ncontract D {\n}\n==== Source: B ====\nimport \"A\" as M;\n\ncontract C {\n    function f() public pure returns (bool) {\n        bool flag;\n        ((flag = true) ? M : M).D;\n        return flag;\n    }\n}\n// ----\n// f() -> true\n"
        },
        "bit_operators.sol": {
            "content": "contract test {\n    uint8 x;\n    uint v;\n    function f() public returns (uint x, uint y, uint z) {\n        uint16 a;\n        uint32 b;\n        assembly {\n            a := 0x0f0f0f0f0f\n            b := 0xff0fff0fff\n        }\n        x = a & b;\n        y = a | b;\n        z = a ^ b;\n    }\n}\n// ----\n// f() -> 3855, 268374015, 268370160\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
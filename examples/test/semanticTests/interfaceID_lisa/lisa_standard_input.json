{
    "language": "Solidity",
    "sources": {
        "lisa.sol": {
            "content": "interface ERC165 {\n    /// @notice Query if a contract implements an interface\n    /// @param interfaceID The interface identifier, as specified in ERC-165\n    /// @dev Interface identification is specified in ERC-165. This function\n    ///  uses less than 30,000 gas.\n    /// @return `true` if the contract implements `interfaceID` and\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\n}\n\nabstract contract ERC165MappingImplementation is ERC165 {\n    /// @dev You must not set element 0xffffffff to true\n    mapping(bytes4 => bool) internal supportedInterfaces;\n\n    constructor() {\n        supportedInterfaces[this.supportsInterface.selector] = true;\n    }\n\n    function supportsInterface(bytes4 interfaceID) external view override returns (bool) {\n        return supportedInterfaces[interfaceID];\n    }\n}\n\ninterface Simpson {\n    function is2D() external returns (bool);\n    function skinColor() external returns (string memory);\n}\n\ncontract Lisa is ERC165MappingImplementation, Simpson {\n    constructor() {\n        supportedInterfaces[this.is2D.selector ^ this.skinColor.selector] = true;\n    }\n\n    function is2D() external override returns (bool) {\n        return true;\n    }\n\n    function skinColor() external override returns (string memory) {\n        return \"yellow\";\n    }\n}\n// ----\n// supportsInterface(bytes4): left(0x01ffc9a0) -> false\n// supportsInterface(bytes4): left(0x01ffc9a7) -> true\n// supportsInterface(bytes4): left(0x73b6b492) -> true\n// supportsInterface(bytes4): left(0x70b6b492) -> false\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
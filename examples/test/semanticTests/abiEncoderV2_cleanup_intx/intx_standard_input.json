{
    "language": "Solidity",
    "sources": {
        "simple_struct.sol": {
            "content": "pragma abicoder               v2;\n\ncontract C {\n    struct S { uint8 a; bytes1 b; }\n    function gg(S calldata s) external pure returns (bytes memory) {\n        s.a; s.b; // only this will validate.\n        return msg.data;\n    }\n    function f(uint256 a, bytes32 b) public returns (bytes memory) {\n        S memory s = S(2,0x02);\n        assembly {\n            mstore(s, a)\n            mstore(add(s, 0x20), b)\n        }\n        return this.gg(s);\n    }\n}\n// ====\n// EVMVersion: >homestead\n// ----\n// f(uint256,bytes32): 1, left(0x01) -> 0x20, 0x44, hex\"b63240b0\", 1, left(0x01), hex\"00000000000000000000000000000000000000000000000000000000\"\n// gg((uint8,bytes1)): 1, left(0x01) -> 0x20, 0x44, hex\"b63240b0\", 1, left(0x01), hex\"00000000000000000000000000000000000000000000000000000000\"\n// f(uint256,bytes32): 0x0101, left(0x0101) -> 0x20, 0x44, hex\"b63240b0\", 1, left(0x01), hex\"00000000000000000000000000000000000000000000000000000000\"\n// gg((uint8,bytes1)): 0x0101, left(0x0101) -> FAILURE\n"
        },
        "bool.sol": {
            "content": "pragma abicoder               v2;\n\ncontract C {\n    function gggg(bool x) external pure returns (bool) {\n        return x;\n    }\n    function f(uint256 a) external view returns (bool) {\n        bool x = false;\n        assembly { x := a }\n        return this.gggg(x);\n    }\n}\n// ----\n// f(uint256): 0 -> false\n// gggg(bool): 0 -> false # test validation as well as sanity check #\n// f(uint256): 1 -> true\n// gggg(bool): 1 -> true\n// f(uint256): 2 -> true\n// gggg(bool): 2 -> FAILURE\n// f(uint256): 0x1000 -> true\n// gggg(bool): 0x1000 -> FAILURE\n"
        },
        "intx.sol": {
            "content": "pragma abicoder               v2;\n\ncontract C {\n    function ggg8(int8 x) external pure returns (int256) {\n        return x;\n    }\n    function gg16(int16 x) external pure returns (int256) {\n        return x;\n    }\n    function gg32(int32 x) external pure returns (int256) {\n        return x;\n    }\n    function gg64(int64 x) external pure returns (int256) {\n        return x;\n    }\n    function g128(int128 x) external pure returns (int256) {\n        return x;\n    }\n    function f8(int256 a) external view returns (int256) {\n        int8 x = 0;\n        assembly { x := a }\n        return this.ggg8(x);\n    }\n    function f16(int256 a) external view returns (int256) {\n        int16 x = 0;\n        assembly { x := a }\n        return this.gg16(x);\n    }\n    function f32(int256 a) external view returns (int256) {\n        int32 x = 0;\n        assembly { x := a }\n        return this.gg32(x);\n    }\n    function f64(int256 a) external view returns (int256) {\n        int64 x = 0;\n        assembly { x := a }\n        return this.gg64(x);\n    }\n    function f128(int256 a) external view returns (int256) {\n        int128 x = 0;\n        assembly { x := a }\n        return this.g128(x);\n    }\n}\n// ----\n// f8(int256): 0 -> 0\n// ggg8(int8): 0 -> 0 # test validation as well as sanity check #\n// f8(int256): 1 -> 1\n// ggg8(int8): 1 -> 1\n// f8(int256): -1 -> -1\n// ggg8(int8): -1 -> -1\n// f8(int256): 0x7F -> 0x7F\n// ggg8(int8): 0x7F -> 0x7F\n// f8(int256): 0x80 -> -128\n// ggg8(int8): 0x80 -> FAILURE\n// f8(int256): 0xFE -> -2\n// ggg8(int8): 0xFE -> FAILURE\n// f8(int256): 0xFF -> -1\n// ggg8(int8): 0xFF -> FAILURE\n// f8(int256): 0x0100 -> 0x00\n// ggg8(int8): 0x0100 -> FAILURE\n// f8(int256): 0x0101 -> 0x01\n// ggg8(int8): 0x0101 -> FAILURE\n// f8(int256): 0x01FF -> -1\n// ggg8(int8): 0x01FF -> FAILURE\n// f8(int256): 0x01FE -> -2\n// ggg8(int8): 0x01FE -> FAILURE\n// f16(int256): 0 -> 0\n// gg16(int16): 0 -> 0\n// f16(int256): 1 -> 1\n// gg16(int16): 1 -> 1\n// f16(int256): -1 -> -1\n// gg16(int16): -1 -> -1\n// f16(int256): 0x7FFF -> 0x7FFF\n// gg16(int16): 0x7FFF -> 0x7FFF\n// f16(int256): 0x8000 -> -32768\n// gg16(int16): 0x8000 -> FAILURE\n// f16(int256): 0xFFFE -> -2\n// gg16(int16): 0xFFFE -> FAILURE\n// f16(int256): 0xFFFF -> -1\n// gg16(int16): 0xFFFF -> FAILURE\n// f16(int256): 0x010000 -> 0x00\n// gg16(int16): 0x010000 -> FAILURE\n// f16(int256): 0x010001 -> 0x01\n// gg16(int16): 0x010001 -> FAILURE\n// f16(int256): 0x01FFFF -> -1\n// gg16(int16): 0x01FFFF -> FAILURE\n// f16(int256): 0x01FFFE -> -2\n// gg16(int16): 0x01FFFE -> FAILURE\n// f32(int256): 0 -> 0\n// gg32(int32): 0 -> 0\n// f32(int256): 1 -> 1\n// gg32(int32): 1 -> 1\n// f32(int256): -1 -> -1\n// gg32(int32): -1 -> -1\n// f32(int256): 0x7FFFFFFF -> 0x7FFFFFFF\n// gg32(int32): 0x7FFFFFFF -> 0x7FFFFFFF\n// f32(int256): 0x80000000 -> -2147483648\n// gg32(int32): 0x80000000 -> FAILURE\n// f32(int256): 0xFFFFFFFE -> -2\n// gg32(int32): 0xFFFFFFFE -> FAILURE\n// f32(int256): 0xFFFFFFFF -> -1\n// gg32(int32): 0xFFFFFFFF -> FAILURE\n// f32(int256): 0x0100000000 -> 0x00\n// gg32(int32): 0x0100000000 -> FAILURE\n// f32(int256): 0x0100000001 -> 0x01\n// gg32(int32): 0x0100000001 -> FAILURE\n// f32(int256): 0x01FFFFFFFF -> -1\n// gg32(int32): 0x01FFFFFFFF -> FAILURE\n// f32(int256): 0x01FFFFFFFE -> -2\n// gg32(int32): 0x01FFFFFFFE -> FAILURE\n// f64(int256): 0 -> 0\n// gg64(int64): 0 -> 0\n// f64(int256): 1 -> 1\n// gg64(int64): 1 -> 1\n// f64(int256): -1 -> -1\n// gg64(int64): -1 -> -1\n// f64(int256): 0x7FFFFFFFFFFFFFFF -> 0x7FFFFFFFFFFFFFFF\n// gg64(int64): 0x7FFFFFFFFFFFFFFF -> 0x7FFFFFFFFFFFFFFF\n// f64(int256): 0x8000000000000000 -> -9223372036854775808\n// gg64(int64): 0x8000000000000000 -> FAILURE\n// f64(int256): 0xFFFFFFFFFFFFFFFE -> -2\n// gg64(int64): 0xFFFFFFFFFFFFFFFE -> FAILURE\n// f64(int256): 0xFFFFFFFFFFFFFFFF -> -1\n// gg64(int64): 0xFFFFFFFFFFFFFFFF -> FAILURE\n// f64(int256): 0x010000000000000000 -> 0x00\n// gg64(int64): 0x010000000000000000 -> FAILURE\n// f64(int256): 0x010000000000000001 -> 0x01\n// gg64(int64): 0x010000000000000001 -> FAILURE\n// f64(int256): 0x01FFFFFFFFFFFFFFFF -> -1\n// gg64(int64): 0x01FFFFFFFFFFFFFFFF -> FAILURE\n// f64(int256): 0x01FFFFFFFFFFFFFFFE -> -2\n// gg64(int64): 0x01FFFFFFFFFFFFFFFE -> FAILURE\n// f128(int256): 0 -> 0\n// g128(int128): 0 -> 0\n// f128(int256): 1 -> 1\n// g128(int128): 1 -> 1\n// f128(int256): -1 -> -1\n// g128(int128): -1 -> -1\n// f128(int256): 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -> 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n// g128(int128): 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -> 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n// f128(int256): 0x80000000000000000000000000000000 -> -170141183460469231731687303715884105728\n// g128(int128): 0x80000000000000000000000000000000 -> FAILURE\n// f128(int256): 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE -> -2\n// g128(int128): 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE -> FAILURE\n// f128(int256): 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -> -1\n// g128(int128): 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -> FAILURE\n// f128(int256): 0x0100000000000000000000000000000000 -> 0x00\n// g128(int128): 0x0100000000000000000000000000000000 -> FAILURE\n// f128(int256): 0x0100000000000000000000000000000001 -> 0x01\n// g128(int128): 0x0100000000000000000000000000000001 -> FAILURE\n// f128(int256): 0x01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -> -1\n// g128(int128): 0x01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -> FAILURE\n// f128(int256): 0x01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE -> -2\n// g128(int128): 0x01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE -> FAILURE\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
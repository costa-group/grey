{
    "language": "Solidity",
    "sources": {
        "malformed_panic_4.sol": {
            "content": "contract C {\n    function f(uint size) public pure {\n        assembly {\n            mstore(0, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n            mstore(4, 0x43)\n            revert(0, size)\n        }\n    }\n    function a() public returns (uint) {\n        try this.f(3) {\n            assert(false);\n        } catch Panic(uint) {\n            assert(false);\n        } catch Error(string memory) {\n            assert(false);\n        } catch {\n            assert(true);\n        }\n    }\n    function b() public returns (uint) {\n        try this.f(6) {\n            assert(false);\n        } catch Panic(uint) {\n            assert(false);\n        } catch Error(string memory) {\n            assert(false);\n        } catch {\n            assert(true);\n        }\n    }\n    function c() public returns (uint) {\n        try this.f(0x24) {\n            assert(false);\n        } catch Panic(uint c) {\n            assert(true);\n            return c;\n        } catch Error(string memory) {\n            assert(false);\n        } catch {\n            assert(false);\n        }\n    }\n    function d() public returns (uint) {\n        try this.f(0x100) {\n            assert(false);\n        } catch Panic(uint c) {\n            assert(true);\n            return c;\n        } catch Error(string memory) {\n            assert(false);\n        } catch {\n            assert(false);\n        }\n    }\n}\n// ====\n// EVMVersion: >=byzantium\n// ----\n// a() -> 0x00\n// b() -> 0x00\n// c() -> 0x43\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
{
    "language": "Solidity",
    "sources": {
        "operator_evaluation_order.sol": {
            "content": "type Bool is bool;\nusing {add as +, mul as *, unsub as -} for Bool global;\n\nfunction add(Bool x, Bool y) pure returns (Bool) {\n    return Bool.wrap(Bool.unwrap(x) || Bool.unwrap(y));\n}\n\nfunction mul(Bool x, Bool y) pure returns (Bool) {\n    return Bool.wrap(Bool.unwrap(x) && Bool.unwrap(y));\n}\n\nfunction unsub(Bool x) pure returns (Bool) {\n    return Bool.wrap(!Bool.unwrap(x));\n}\n\ncontract C {\n    event Wrapped(uint);\n    event Probe(Bool);\n\n    function toBool(uint x) public returns (Bool) {\n        emit Wrapped(x);\n        return Bool.wrap(x > 0);\n    }\n\n    function probe(Bool x) public returns (Bool) {\n        emit Probe(x);\n        return x;\n    }\n\n    function testSingleOperator() public {\n        toBool(0) +\n        (toBool(1) + toBool(2)) +\n        toBool(3);\n    }\n\n    function testTwoBinaryOperators() public {\n        toBool(0) * toBool(1) +\n        (toBool(2) * toBool(3)) +\n        toBool(4) * toBool(5);\n    }\n\n    function testBinaryAndUnaryOperators() public {\n        -toBool(0) * -toBool(1) +\n        (-toBool(2) * -toBool(3)) +\n        -toBool(4) * -toBool(5);\n    }\n\n    function testOperatorsNestedInCalls() public {\n        -probe(toBool(0) * -toBool(1)) +\n        (-probe(toBool(2) * -toBool(3))) +\n        -probe(toBool(4) * -toBool(5));\n    }\n}\n// ----\n// testSingleOperator() ->\n// ~ emit Wrapped(uint256): 0x00\n// ~ emit Wrapped(uint256): 0x01\n// ~ emit Wrapped(uint256): 0x02\n// ~ emit Wrapped(uint256): 0x03\n// testTwoBinaryOperators() ->\n// ~ emit Wrapped(uint256): 0x00\n// ~ emit Wrapped(uint256): 0x01\n// ~ emit Wrapped(uint256): 0x02\n// ~ emit Wrapped(uint256): 0x03\n// ~ emit Wrapped(uint256): 0x04\n// ~ emit Wrapped(uint256): 0x05\n// testBinaryAndUnaryOperators() ->\n// ~ emit Wrapped(uint256): 0x00\n// ~ emit Wrapped(uint256): 0x01\n// ~ emit Wrapped(uint256): 0x02\n// ~ emit Wrapped(uint256): 0x03\n// ~ emit Wrapped(uint256): 0x04\n// ~ emit Wrapped(uint256): 0x05\n// testOperatorsNestedInCalls() ->\n// ~ emit Wrapped(uint256): 0x00\n// ~ emit Wrapped(uint256): 0x01\n// ~ emit Probe(bool): 0x00\n// ~ emit Wrapped(uint256): 0x02\n// ~ emit Wrapped(uint256): 0x03\n// ~ emit Probe(bool): 0x00\n// ~ emit Wrapped(uint256): 0x04\n// ~ emit Wrapped(uint256): 0x05\n// ~ emit Probe(bool): 0x00\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
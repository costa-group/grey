{"language": "Solidity", "sources": {"create_random.sol": {"content": "contract C {\n    function addr() external returns (address) {\n        return address(this);\n    }\n\n    function testRunner() external returns (address a1, address a2) {\n        assembly {\n            // This is `return(0, 1)`. We are using a simplified/fixed initcode to avoid\n            // instability due to metadata changes.\n            let initcode := hex\"60016000f3\"\n            mstore(0, initcode)\n\n            a1 := create(0, 0, 5)\n            a2 := create2(0, 0, 5, address())\n        }\n    }\n\n    function testCalc() external returns (address a1, address a2) {\n        a1 = calculateCreate(address(this), 1);\n        a2 = calculateCreate2(address(this), keccak256(hex\"60016000f3\"), bytes32(uint256(uint160(address(this)))));\n    }\n\n    function calculateCreate(address from, uint256 nonce) private pure returns (address) {\n        assert(nonce <= 127);\n        bytes memory data =\n            bytes.concat(hex\"d694\", bytes20(uint160(from)), nonce == 0 ? bytes1(hex\"80\") : bytes1(uint8(nonce)));\n        return address(uint160(uint256(keccak256(data)))); // Take the lower 160-bits\n    }\n\n    function calculateCreate2(address creator, bytes32 codehash, bytes32 salt) private pure returns (address) {\n        return address(uint160(uint256(keccak256(abi.encodePacked(bytes1(0xff), creator, salt, codehash)))));\n    }\n}\n// ====\n// EVMVersion: >=constantinople\n// bytecodeFormat: legacy\n// ----\n// addr() -> 0xc06afe3a8444fc0004668591e8306bfb9968e79e\n// testRunner() -> 0x137aa4dfc0911524504fcd4d98501f179bc13b4a, 0x2c1c30623ddd93e0b765a6caaca0c859eeb0644d\n// testCalc() -> 0x137aa4dfc0911524504fcd4d98501f179bc13b4a, 0x2c1c30623ddd93e0b765a6caaca0c859eeb0644d\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}, "viaIR": true}}
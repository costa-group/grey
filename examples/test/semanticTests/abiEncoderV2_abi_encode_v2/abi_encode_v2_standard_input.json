{"language": "Solidity", "sources": {"abi_encode_v2.sol": {"content": "pragma abicoder               v2;\n\n\ncontract C {\n    struct S {\n        uint256 a;\n        uint256[] b;\n    }\n\n    function f0() public pure returns (bytes memory) {\n        return abi.encode();\n    }\n\n    function f1() public pure returns (bytes memory) {\n        return abi.encode(1, 2);\n    }\n\n    function f2() public pure returns (bytes memory) {\n        string memory x = \"abc\";\n        return abi.encode(1, x, 2);\n    }\n\n    function f3() public pure returns (bytes memory r) {\n        // test that memory is properly allocated\n        string memory x = \"abc\";\n        r = abi.encode(1, x, 2);\n        bytes memory y = \"def\";\n        require(y[0] == \"d\");\n        y[0] = \"e\";\n        require(y[0] == \"e\");\n    }\n\n    S s;\n\n    function f4() public returns (bytes memory r) {\n        string memory x = \"abc\";\n        s.a = 7;\n        s.b.push(2);\n        s.b.push(3);\n        r = abi.encode(1, x, s, 2);\n        bytes memory y = \"def\";\n        require(y[0] == \"d\");\n        y[0] = \"e\";\n        require(y[0] == \"e\");\n    }\n}\n// ----\n// f0() -> 0x20, 0x0\n// f1() -> 0x20, 0x40, 0x1, 0x2\n// f2() -> 0x20, 0xa0, 0x1, 0x60, 0x2, 0x3, \"abc\"\n// f3() -> 0x20, 0xa0, 0x1, 0x60, 0x2, 0x3, \"abc\"\n// f4() -> 0x20, 0x160, 0x1, 0x80, 0xc0, 0x2, 0x3, \"abc\", 0x7, 0x40, 0x2, 0x2, 0x3\n// gas irOptimized: 111816\n// gas legacy: 113890\n// gas legacyOptimized: 111658\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}, "viaIR": true}}
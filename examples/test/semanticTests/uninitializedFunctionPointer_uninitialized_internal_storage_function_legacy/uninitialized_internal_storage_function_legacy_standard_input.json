{"language": "Solidity", "sources": {"uninitialized_internal_storage_function_legacy.sol": {"content": "contract Test {\n\tfunction() internal x;\n\tfunction f() public returns (bool) {\n\t\tfunction() internal t = x;\n\t\t// The legacy codegen  would use a specific function\n\t\t// entry tag that always panics.\n\t\t// Via Yul, the internal dispatch will panic instead.\n\t\tuint z;\n\t\tassembly { z := t }\n\t\tassert(z != 0);\n\t\treturn true;\n\t}\n}\n// ====\n// compileViaYul: false\n// ----\n// f() -> true\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}, "viaIR": true}}
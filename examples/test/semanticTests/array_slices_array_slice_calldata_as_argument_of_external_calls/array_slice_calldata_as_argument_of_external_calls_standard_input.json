{"language": "Solidity", "sources": {"array_slice_calldata_as_argument_of_external_calls.sol": {"content": "contract C {\n    function f1(bytes calldata c1, uint256 s, uint256 e, bytes calldata c2) public returns (bool) {\n        return keccak256(c1[s:e]) == keccak256(c2);\n    }\n\n    function f2(bytes calldata c, uint256 s) public returns (uint256, bytes memory) {\n        return abi.decode(c[s:], (uint256, bytes));\n    }\n\n    function f3(bytes calldata c1, uint256 s, uint256 e, bytes calldata c2) public returns (bool) {\n        bytes memory a = abi.encode(c1[s:e]);\n        bytes memory b = abi.encode(c2);\n        if (a.length != b.length) { return false; }\n        for (uint256 i = 0; i < a.length; i++) {\n            if (a[i] != b[i]) { return false; }\n        }\n        return true;\n    }\n\n    function f4(bytes calldata c1, uint256 s, uint256 e, bytes calldata c2) public returns (bool) {\n        bytes memory a = abi.encodePacked(c1[s:e]);\n        bytes memory b = abi.encodePacked(c2);\n        if (a.length != b.length) { return false; }\n        for (uint256 i = 0; i < a.length; i++) {\n            if (a[i] != b[i]) { return false; }\n        }\n        return true;\n    }\n}\n// ----\n// f1(bytes,uint256,uint256,bytes): 0x80, 1, 5, 0xC0, 8, \"abcdefgh\", 4, \"bcde\" -> true\n// f1(bytes,uint256,uint256,bytes): 0x80, 1, 5, 0xC0, 8, \"abcdefgh\", 4, \"bcdf\" -> false\n// f2(bytes,uint256): 0x40, 0, 0x80, 0x21, 0x40, 0x7, \"abcdefg\" -> 0x21, 0x40, 0x7, \"abcdefg\"\n// f3(bytes,uint256,uint256,bytes): 0x80, 1, 5, 0xC0, 8, \"abcdefgh\", 4, \"bcde\" -> true\n// f3(bytes,uint256,uint256,bytes): 0x80, 1, 5, 0xC0, 8, \"abcdefgh\", 4, \"bcdf\" -> false\n// f4(bytes,uint256,uint256,bytes): 0x80, 1, 5, 0xC0, 8, \"abcdefgh\", 4, \"bcde\" -> true\n// f4(bytes,uint256,uint256,bytes): 0x80, 1, 5, 0xC0, 8, \"abcdefgh\", 4, \"bcdf\" -> false\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}, "viaIR": true}}
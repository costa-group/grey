{
    "language": "Solidity",
    "sources": {
        "internal_library_function_calling_private.sol": {
            "content": "// tests that internal library functions that are called from outside and that\n// themselves call private functions are still able to (i.e. the private function\n// also has to be pulled into the caller's code)\n// This has to work without linking, because everything will be inlined.\nlibrary L {\n    function g(uint256[] memory _data) private {\n        _data[3] = 2;\n    }\n\n    function f(uint256[] memory _data) internal {\n        g(_data);\n    }\n}\n\n\ncontract C {\n    function f() public returns (uint256) {\n        uint256[] memory x = new uint256[](7);\n        x[3] = 8;\n        L.f(x);\n        return x[3];\n    }\n}\n// ----\n// f() -> 2\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
{
    "language": "Solidity",
    "sources": {
        "senders_balance.sol": {
            "content": "contract C {\n    function f() public view returns (uint256) {\n        return msg.sender.balance;\n    }\n}\n\n\ncontract D {\n    C c = new C();\n\n    constructor() payable {}\n\n    function f() public view returns (uint256) {\n        return c.f();\n    }\n}\n// ----\n// constructor(), 27 wei ->\n// gas irOptimized: 114057\n// gas irOptimized code: 53800\n// gas legacy: 117834\n// gas legacy code: 100600\n// gas legacyOptimized: 113676\n// gas legacyOptimized code: 53600\n// f() -> 27\n"
        },
        "codebalance_assembly.sol": {
            "content": "contract C {\n    constructor() payable {}\n\n    function f() public returns (uint256 ret) {\n        assembly {\n            ret := balance(0)\n        }\n    }\n    function g() public returns (uint256 ret) {\n        assembly {\n            ret := balance(1)\n        }\n    }\n    function h() public returns (uint256 ret) {\n        assembly {\n            ret := balance(address())\n        }\n    }\n}\n// ====\n// EVMVersion: >=constantinople\n// ----\n// constructor(), 23 wei ->\n// gas legacy: 100517\n// f() -> 0\n// g() -> 1\n// h() -> 23\n"
        },
        "multi_variable_declaration.sol": {
            "content": "contract C {\n    function g() public returns (uint256 a, uint256 b, uint256 c) {\n        a = 1;\n        b = 2;\n        c = 3;\n    }\n\n    function h() public returns (uint256 a, uint256 b, uint256 c, uint256 d) {\n        a = 1;\n        b = 2;\n        c = 3;\n        d = 4;\n    }\n\n    function f1() public returns (bool) {\n        (uint256 x, uint256 y, uint256 z) = g();\n        if (x != 1 || y != 2 || z != 3) return false;\n        (, uint256 a, ) = g();\n        if (a != 2) return false;\n        (uint256 b, , ) = g();\n        if (b != 1) return false;\n        (, , uint256 c) = g();\n        if (c != 3) return false;\n        return true;\n    }\n\n    function f2() public returns (bool) {\n        (uint256 a1, , uint256 a3, ) = h();\n        if (a1 != 1 || a3 != 3) return false;\n        (uint256 b1, uint256 b2, , ) = h();\n        if (b1 != 1 || b2 != 2) return false;\n        (, uint256 c2, uint256 c3, ) = h();\n        if (c2 != 2 || c3 != 3) return false;\n        (, , uint256 d3, uint256 d4) = h();\n        if (d3 != 3 || d4 != 4) return false;\n        (uint256 e1, , uint256 e3, uint256 e4) = h();\n        if (e1 != 1 || e3 != 3 || e4 != 4) return false;\n        return true;\n    }\n\n    function f() public returns (bool) {\n        return f1() && f2();\n    }\n}\n// ----\n// f() -> true\n"
        },
        "crazy_elementary_typenames_on_stack.sol": {
            "content": "contract C {\n    function f() public returns (uint256 r) {\n        uint256;\n        uint256;\n        uint256;\n        uint256;\n        int256 x = -7;\n        return uint256(x);\n    }\n}\n// ----\n// f() -> -7\n"
        },
        "code_access_create.sol": {
            "content": "contract D {\n    uint256 x;\n\n    constructor() {\n        x = 7;\n    }\n\n    function f() public view returns (uint256) {\n        return x;\n    }\n}\n\n\ncontract C {\n    function test() public returns (uint256) {\n        bytes memory c = type(D).creationCode;\n        D d;\n        assembly {\n            d := create(0, add(c, 0x20), mload(c))\n        }\n        return d.f();\n    }\n}\n// ----\n// test() -> 7\n// gas legacy: 76647\n// gas legacy code: 24200\n"
        },
        "string_tuples.sol": {
            "content": "contract C {\n    function f() public returns (string memory, uint256) {\n        return (\"abc\", 8);\n    }\n\n    function g() public returns (string memory, string memory) {\n        return (h(), \"def\");\n    }\n\n    function h() public returns (string memory) {\n        return (\"abc\");\n    }\n}\n// ----\n// f() -> 0x40, 0x8, 0x3, \"abc\"\n// g() -> 0x40, 0x80, 0x3, \"abc\", 0x3, \"def\"\n"
        },
        "erc20.sol": {
            "content": "pragma solidity >=0.4.0 <0.9.0;\n\ncontract ERC20 {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    mapping (address => uint256) private _balances;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    uint256 private _totalSupply;\n\n    constructor() {\n        _mint(msg.sender, 20);\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        // The subtraction here will revert on overflow.\n        _approve(from, msg.sender, _allowances[from][msg.sender] - value);\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        // The addition here will revert on overflow.\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        // The subtraction here will revert on overflow.\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] - subtractedValue);\n        return true;\n    }\n\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        // The subtraction and addition here will revert on overflow.\n        _balances[from] = _balances[from] - value;\n        _balances[to] = _balances[to] + value;\n        emit Transfer(from, to, value);\n    }\n\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        // The additions here will revert on overflow.\n        _totalSupply = _totalSupply + value;\n        _balances[account] = _balances[account] + value;\n        emit Transfer(address(0), account, value);\n    }\n\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        // The subtractions here will revert on overflow.\n        _totalSupply = _totalSupply - value;\n        _balances[account] = _balances[account] - value;\n        emit Transfer(account, address(0), value);\n    }\n\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowances[account][msg.sender] - value);\n    }\n}\n// ----\n// constructor()\n// ~ emit Transfer(address,address,uint256): #0x00, #0x1212121212121212121212121212120000000012, 0x14\n// gas irOptimized: 121632\n// gas irOptimized code: 236800\n// gas legacy: 159957\n// gas legacy code: 647600\n// gas legacyOptimized: 126934\n// gas legacyOptimized code: 282000\n// totalSupply() -> 20\n// gas irOptimized: 23415\n// gas legacy: 23524\n// gas legacyOptimized: 23368\n// transfer(address,uint256): 2, 5 -> true\n// ~ emit Transfer(address,address,uint256): #0x1212121212121212121212121212120000000012, #0x02, 0x05\n// gas irOptimized: 48471\n// gas legacy: 49317\n// gas legacyOptimized: 48491\n// decreaseAllowance(address,uint256): 2, 0 -> true\n// ~ emit Approval(address,address,uint256): #0x1212121212121212121212121212120000000012, #0x02, 0x00\n// gas irOptimized: 26275\n// gas legacy: 27012\n// gas legacyOptimized: 26275\n// decreaseAllowance(address,uint256): 2, 1 -> FAILURE, hex\"4e487b71\", 0x11\n// gas irOptimized: 24042\n// gas legacy: 24467\n// gas legacyOptimized: 24056\n// transfer(address,uint256): 2, 14 -> true\n// ~ emit Transfer(address,address,uint256): #0x1212121212121212121212121212120000000012, #0x02, 0x0e\n// gas irOptimized: 28571\n// gas legacy: 29417\n// gas legacyOptimized: 28591\n// transfer(address,uint256): 2, 2 -> FAILURE, hex\"4e487b71\", 0x11\n// gas irOptimized: 24071\n// gas legacy: 24453\n// gas legacyOptimized: 24053\n"
        },
        "byte_optimization_bug.sol": {
            "content": "contract C {\n    function f(uint256 x) public returns (uint256 a) {\n        assembly {\n            a := byte(x, 31)\n        }\n    }\n\n    function g(uint256 x) public returns (uint256 a) {\n        assembly {\n            a := byte(31, x)\n        }\n    }\n}\n// ----\n// f(uint256): 2 -> 0\n// g(uint256): 2 -> 2\n"
        },
        "nested_calldata_struct.sol": {
            "content": "pragma abicoder               v2;\n\n\ncontract C {\n    struct S1 {\n        uint256 a;\n        uint256 b;\n    }\n    struct S2 {\n        uint256 a;\n        uint256 b;\n        S1 s;\n        uint256 c;\n    }\n\n    function f(S2 calldata s)\n        external\n        pure\n        returns (uint256 a, uint256 b, uint256 sa, uint256 sb, uint256 c)\n    {\n        return (s.a, s.b, s.s.a, s.s.b, s.c);\n    }\n}\n// ----\n// f((uint256,uint256,(uint256,uint256),uint256)): 1, 2, 3, 4, 5 -> 1, 2, 3, 4, 5\n"
        },
        "swap_in_storage_overwrite.sol": {
            "content": "// This tests a swap in storage which does not work as one\n// might expect because we do not have temporary storage.\n// (x, y) = (y, x) is the same as\n// y = x;\n// x = y;\ncontract c {\n    struct S {\n        uint256 a;\n        uint256 b;\n    }\n    S public x;\n    S public y;\n\n    function set() public {\n        x.a = 1;\n        x.b = 2;\n        y.a = 3;\n        y.b = 4;\n    }\n\n    function swap() public {\n        (x, y) = (y, x);\n    }\n}\n// ----\n// x() -> 0, 0\n// y() -> 0, 0\n// set() ->\n// gas irOptimized: 109684\n// gas legacy: 109727\n// gas legacyOptimized: 109680\n// x() -> 1, 2\n// y() -> 3, 4\n// swap() ->\n// x() -> 1, 2\n// y() -> 1, 2\n"
        },
        "store_bytes.sol": {
            "content": "// this test just checks that the copy loop does not mess up the stack\ncontract C {\n    function save() public returns (uint256 r) {\n        r = 23;\n        savedData = msg.data;\n        r = 24;\n    }\n\n    bytes savedData;\n}\n// ----\n// save() -> 24 # empty copy loop #\n// save(): \"abcdefg\" -> 24\n"
        },
        "state_variable_local_variable_mixture.sol": {
            "content": "contract A {\n    uint256 x = 1;\n    uint256 y = 2;\n\n    function a() public returns (uint256 x) {\n        x = A.y;\n    }\n}\n// ----\n// a() -> 2\n"
        },
        "inline_member_init.sol": {
            "content": "contract test {\n    constructor() {\n        m_b = 6;\n        m_c = 8;\n    }\n\n    uint256 m_a = 5;\n    uint256 m_b;\n    uint256 m_c = 7;\n\n    function get() public returns (uint256 a, uint256 b, uint256 c) {\n        a = m_a;\n        b = m_b;\n        c = m_c;\n    }\n}\n// ----\n// get() -> 5, 6, 8\n"
        },
        "selfdestruct_pre_cancun_multiple_beneficiaries.sol": {
            "content": "contract C {\n    constructor() payable {}\n    function terminate(address _beneficiary) public {\n        selfdestruct(payable(_beneficiary));\n        assert(false);\n    }\n}\n\ncontract D {\n    address account1 = payable(0x1111111111111111111111111111111111111111);\n    address account2 = payable(0x2222222222222222222222222222222222222222);\n    C public c;\n\n    constructor() payable {}\n\n    function deploy() public payable {\n        c = new C{value: 1 ether}();\n    }\n\n    function terminate(address _beneficiary) public {\n        c.terminate(_beneficiary);\n    }\n\n    function test_deploy_and_terminate_twice() public {\n        deploy();\n        terminate(account1);\n        terminate(account2);\n    }\n\n    function exists() public view returns (bool) {\n        return address(c).code.length != 0;\n    }\n}\n// ====\n// EVMVersion: <=shanghai\n// ----\n// constructor(), 2 ether ->\n// gas irOptimized: 108104\n// gas irOptimized code: 119200\n// gas legacy: 120424\n// gas legacy code: 253600\n// gas legacyOptimized: 109015\n// gas legacyOptimized code: 130800\n// balance: 0x1111111111111111111111111111111111111111 -> 0\n// balance: 0x2222222222222222222222222222222222222222 -> 0\n// balance -> 2000000000000000000\n// exists() -> false\n// test_deploy_and_terminate_twice() ->\n// gas irOptimized: 121395\n// gas irOptimized code: 14000\n// gas legacy: 122384\n// gas legacy code: 43200\n// gas legacyOptimized: 121596\n// gas legacyOptimized code: 22800\n// exists() -> false\n// balance: 0x1111111111111111111111111111111111111111 -> 1000000000000000000\n// balance: 0x2222222222222222222222222222222222222222 -> 0\n// balance -> 1000000000000000000\n// deploy() ->\n// gas legacy: 58491\n// gas legacy code: 43200\n// exists() -> true\n// balance: 0x1111111111111111111111111111111111111111 -> 1000000000000000000\n// balance: 0x2222222222222222222222222222222222222222 -> 0\n// balance -> 0\n// terminate(address): 0x1111111111111111111111111111111111111111 ->\n// balance: 0x1111111111111111111111111111111111111111 -> 2000000000000000000\n// balance: 0x2222222222222222222222222222222222222222 -> 0\n// balance -> 0\n// terminate(address): 0x2222222222222222222222222222222222222222 -> FAILURE\n// balance: 0x1111111111111111111111111111111111111111 -> 2000000000000000000\n// balance: 0x2222222222222222222222222222222222222222 -> 0\n// balance -> 0\n// exists() -> false\n"
        },
        "destructuring_assignment.sol": {
            "content": "contract C {\n    uint256 x = 7;\n    bytes data;\n    uint256[] y;\n    uint256[] arrayData;\n\n    function returnsArray() public returns (uint256[] memory) {\n        arrayData = new uint256[](9);\n        arrayData[2] = 5;\n        arrayData[7] = 4;\n        return arrayData;\n    }\n\n    function f(bytes memory s) public returns (uint256) {\n        uint256 loc;\n        uint256[] memory memArray;\n        (loc, x, y, data, arrayData[3]) = (8, 4, returnsArray(), s, 2);\n        if (loc != 8) return 1;\n        if (x != 4) return 2;\n        if (y.length != 9) return 3;\n        if (y[2] != 5) return 4;\n        if (y[7] != 4) return 5;\n        if (data.length != s.length) return 6;\n        if (data[3] != s[3]) return 7;\n        if (arrayData[3] != 2) return 8;\n        (memArray, loc) = (arrayData, 3);\n        if (loc != 3) return 9;\n        if (memArray.length != arrayData.length) return 10;\n        bytes memory memBytes;\n        (x, memBytes, y[2], , ) = (456, s, 789, 101112, 131415);\n        if (x != 456 || memBytes.length != s.length || y[2] != 789) return 11;\n    }\n}\n// ----\n// f(bytes): 0x20, 0x5, \"abcde\" -> 0\n// gas irOptimized: 242027\n// gas legacy: 243281\n// gas legacyOptimized: 242392\n"
        },
        "external_types_in_calls.sol": {
            "content": "contract C1 {\n    C1 public bla;\n\n    constructor(C1 x) {\n        bla = x;\n    }\n}\n\n\ncontract C {\n    function test() public returns (C1 x, C1 y) {\n        C1 c = new C1(C1(address(9)));\n        x = c.bla();\n        y = this.t1(C1(address(7)));\n    }\n\n    function t1(C1 a) public returns (C1) {\n        return a;\n    }\n\n    function t2() public returns (C1) {\n        return C1(address(9));\n    }\n}\n// ----\n// test() -> 9, 7\n// gas legacy: 80314\n// gas legacy code: 47400\n// t2() -> 9\n"
        },
        "codehash_assembly.sol": {
            "content": "contract C {\n    function f() public returns (bytes32 ret) {\n        assembly {\n            ret := extcodehash(0)\n        }\n    }\n    function g() public returns (bytes32 ret) {\n        assembly {\n            ret := extcodehash(1)\n        }\n    }\n    function h() public returns (bool ret) {\n        assembly {\n            ret := iszero(iszero(extcodehash(address())))\n        }\n    }\n}\n// ====\n// EVMVersion: >=constantinople\n// ----\n// f() -> 0\n// g() -> 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\n// h() -> true\n"
        },
        "staticcall_for_view_and_pure_pre_byzantium.sol": {
            "content": "contract C {\n    uint256 x;\n\n    function f() public returns (uint256) {\n        x = 3;\n        return 1;\n    }\n}\n\n\ninterface CView {\n    function f() external view returns (uint256);\n}\n\n\ninterface CPure {\n    function f() external pure returns (uint256);\n}\n\n\ncontract D {\n    function f() public returns (uint256) {\n        return (new C()).f();\n    }\n\n    function fview() public returns (uint256) {\n        return (CView(address(new C()))).f();\n    }\n\n    function fpure() public returns (uint256) {\n        return (CPure(address(new C()))).f();\n    }\n}\n// ====\n// EVMVersion: <byzantium\n// ----\n// f() -> 0x1\n// fview() -> 1\n// fpure() -> 1\n"
        },
        "skip_dynamic_types.sol": {
            "content": "// The EVM cannot provide access to dynamically-sized return values, so we have to skip them.\ncontract C {\n    function f() public returns (uint256, uint256[] memory, uint256) {\n        return (7, new uint256[](2), 8);\n    }\n\n    function g() public returns (uint256, uint256) {\n        // Previous implementation \"moved\" b to the second place and did not skip.\n        (uint256 a, , uint256 b) = this.f();\n        return (a, b);\n    }\n}\n// ----\n// g() -> 7, 8\n"
        },
        "gasleft_shadow_resolution.sol": {
            "content": "contract C {\n    function gasleft() public returns (uint256) {\n        return 0;\n    }\n\n    function f() public returns (uint256) {\n        return gasleft();\n    }\n}\n// ----\n// f() -> 0\n"
        },
        "codehash.sol": {
            "content": "contract C {\n    function f() public returns (bytes32) {\n        // non-existent in tests\n        return address(0).codehash;\n    }\n    function g() public returns (bytes32) {\n        // precompile\n        return address(0x1).codehash;\n    }\n    function h() public returns (bool) {\n        return address(this).codehash != 0;\n    }\n}\n// ====\n// EVMVersion: >=constantinople\n// ----\n// f() -> 0x0\n// g() -> 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\n// h() -> true\n"
        },
        "transient_storage_reentrancy_lock.sol": {
            "content": "contract C {\n    bool transient locked;\n    modifier nonReentrant {\n        require(!locked, \"Reentrancy attempt\");\n        locked = true;\n        _;\n        locked = false;\n    }\n\n    function test(address newAddress, bool reentrancy) nonReentrant public {\n        if (reentrancy)\n            reentrantCall(newAddress);\n    }\n\n    function reentrantCall(address a) public {\n        this.test(a, false);\n    }\n}\n// ====\n// EVMVersion: >=cancun\n// ----\n// test(address,bool): 0x1234abcd, true -> FAILURE, hex\"08c379a0\", 0x20, 0x12, \"Reentrancy attempt\"\n// test(address,bool): 0x1234abcd, false ->\n"
        },
        "contract_binary_dependencies.sol": {
            "content": "contract A {\n    function f() public {\n        new B();\n    }\n}\n\n\ncontract B {\n    function f() public {}\n}\n\n\ncontract C {\n    function f() public {\n        new B();\n    }\n}\n// ----\n// constructor() ->\n// gas irOptimized: 100415\n"
        },
        "flipping_sign_tests.sol": {
            "content": "contract test {\n    function f() public returns (bool) {\n        int256 x = -2**255;\n        unchecked { assert(-x == x); }\n        return true;\n    }\n}\n// ----\n// f() -> true\n"
        },
        "different_call_type_transient.sol": {
            "content": "contract B {\n    uint256 transient public value;\n\n    function setValue(uint256 v) public {\n        value += v;\n    }\n}\n\ncontract A {\n    uint256 transient public value;\n\n    function delegateSetValue(address otherContract, uint256 v) public {\n        (bool success, ) = otherContract.delegatecall(abi.encodeWithSignature(\"setValue(uint256)\", v));\n        require(success);\n    }\n    function callSetValue(address otherContract, uint256 v) public {\n        (bool success, ) = otherContract.call(abi.encodeWithSignature(\"setValue(uint256)\", v));\n        require(success);\n    }\n    function staticSetValue(address otherContract, uint256 v) view public returns (bool) {\n        (bool success, ) = otherContract.staticcall(abi.encodeWithSignature(\"setValue(uint256)\", v));\n        return success;\n    }\n}\n\ncontract Test {\n    A a = new A();\n    B b = new B();\n\n    function testDelegate() public returns (uint256, uint256) {\n        a.delegateSetValue(address(b), 7);\n        return (a.value(), b.value());\n    }\n    function testCall() public returns (uint256, uint256) {\n        a.callSetValue(address(b), 8);\n        return (a.value(), b.value());\n    }\n    function testStatic() view public returns (bool) {\n        return a.staticSetValue(address(b), 0);\n    }\n}\n\n// ====\n// EVMVersion: >=cancun\n// ----\n// testDelegate() -> 7, 0\n// testCall() -> 0, 8\n// testStatic() -> false\n// gas irOptimized: 96900694\n// gas legacy: 96901136\n// gas legacyOptimized: 96900725\n"
        },
        "state_variable_under_contract_name.sol": {
            "content": "contract Scope {\n    uint256 stateVar = 42;\n\n    function getStateVar() public view returns (uint256 stateVar) {\n        stateVar = Scope.stateVar;\n    }\n}\n// ----\n// getStateVar() -> 42\n"
        },
        "address_code.sol": {
            "content": "contract C {\n    bytes public initCode;\n\n    constructor() {\n        // This should catch problems, but lets also test the case the optimiser is buggy.\n        assert(address(this).code.length == 0);\n        initCode = address(this).code;\n    }\n\n    // To avoid dependency on exact length.\n    function f() public view returns (bool) { return address(this).code.length > 380; }\n    function g() public view returns (uint) { return address(0).code.length; }\n    function h() public view returns (uint) { return address(1).code.length; }\n}\n// ----\n// constructor() ->\n// gas irOptimized: 70760\n// gas irOptimized code: 94600\n// gas legacy: 82428\n// gas legacy code: 153800\n// gas legacyOptimized: 69400\n// gas legacyOptimized code: 79200\n// initCode() -> 0x20, 0\n// f() -> true\n// g() -> 0\n// h() -> 0\n"
        },
        "super.sol": {
            "content": "contract A {\n    function f() public virtual returns (uint256 r) {\n        return 1;\n    }\n}\n\n\ncontract B is A {\n    function f() public virtual override returns (uint256 r) {\n        return super.f() | 2;\n    }\n}\n\n\ncontract C is A {\n    function f() public virtual override returns (uint256 r) {\n        return super.f() | 4;\n    }\n}\n\n\ncontract D is B, C {\n    function f() public override(B, C) returns (uint256 r) {\n        return super.f() | 8;\n    }\n}\n// ----\n// f() -> 15\n"
        },
        "decayed_tuple.sol": {
            "content": "contract C {\n    function f() public returns (uint256) {\n        uint256 x = 1;\n        (x) = 2;\n        return x;\n    }\n}\n// ----\n// f() -> 2\n"
        },
        "selfdestruct_pre_cancun_redeploy.sol": {
            "content": "contract Factory {\n    event Deployed(address, bytes32);\n\n    function deploy(bytes32 _salt) external payable returns (address implAddr) {\n        // NOTE: The bytecode of contract C is used here instead of `type(C).creationCode` since the address calculation depends on the precise init code\n        // and that will change in our test framework between legacy and via-IR codegen and via optimized vs non-optimized.\n        //contract C {\n        //    constructor() payable {}\n        //    function terminate() external {\n        //        selfdestruct(payable(msg.sender));\n        //    }\n        //}\n        bytes memory initCode =\n            hex\"6080806040526068908160108239f3fe6004361015600b575f80fd5b5f3560e0\"\n            hex\"1c630c08bf8814601d575f80fd5b34602e575f366003190112602e5733ff5b5f\"\n            hex\"80fdfea2646970667358221220fe3c4fe66c1838016e2efdc5b65538e5ff3dbf\"\n            hex\"ced7eff135da3556db4bd841aa64736f6c63430008180033\";\n\n        address target = address(uint160(uint256(keccak256(abi.encodePacked(\n            bytes1(0xff),\n            address(this),\n            _salt,\n            keccak256(abi.encodePacked(initCode))\n        )))));\n\n        assembly {\n            implAddr := create2(callvalue(), add(initCode, 0x20), mload(initCode), _salt)\n            if iszero(extcodesize(implAddr)) {\n                revert(0, 0)\n            }\n        }\n        assert(address(implAddr) == target);\n        emit Deployed(implAddr, _salt);\n    }\n}\n\ninterface IC {\n    function terminate() external;\n}\n\ncontract D {\n    Factory public factory = new Factory();\n    IC public c;\n\n    constructor() payable {}\n\n    function deploy_create2() public payable {\n        c = IC(factory.deploy{value: 1 ether}(hex\"1234\"));\n    }\n\n    function terminate() public {\n        c.terminate();\n    }\n\n    function test_deploy_and_terminate() public {\n        deploy_create2();\n        assert(exists());\n        test_balance_after_create();\n        terminate();\n        test_balance_after_selfdestruct();\n    }\n\n    function test_balance_after_create() public view {\n        assert(address(this).balance == 0);\n        assert(address(c).balance == 1 ether);\n    }\n\n    function test_balance_after_selfdestruct() public view {\n        assert(address(this).balance == 1 ether);\n        assert(address(c).balance == 0);\n    }\n\n    function exists() public view returns (bool) {\n        return address(c).code.length != 0;\n    }\n}\n\n// ====\n// EVMVersion: =shanghai\n// ----\n// constructor(), 1 ether ->\n// gas irOptimized: 133342\n// gas irOptimized code: 298400\n// gas legacy: 151644\n// gas legacy code: 538600\n// gas legacyOptimized: 131799\n// gas legacyOptimized code: 281000\n// exists() -> false\n// test_deploy_and_terminate() ->\n// ~ emit Deployed(address,bytes32) from 0x137aa4dfc0911524504fcd4d98501f179bc13b4a: 0x7e6580007e709ac52945fae182c61131d42634e8, 0x1234000000000000000000000000000000000000000000000000000000000000\n// gas irOptimized: 96823\n// gas irOptimized code: 20800\n// gas legacy: 98095\n// gas legacy code: 20800\n// gas legacyOptimized: 96337\n// gas legacyOptimized code: 20800\n// exists() -> false\n// deploy_create2() ->\n// ~ emit Deployed(address,bytes32) from 0x137aa4dfc0911524504fcd4d98501f179bc13b4a: 0x7e6580007e709ac52945fae182c61131d42634e8, 0x1234000000000000000000000000000000000000000000000000000000000000\n// test_balance_after_create() ->\n// exists() -> true\n// terminate() ->\n// test_balance_after_selfdestruct() ->\n// exists() -> false\n// deploy_create2() ->\n// ~ emit Deployed(address,bytes32) from 0x137aa4dfc0911524504fcd4d98501f179bc13b4a: 0x7e6580007e709ac52945fae182c61131d42634e8, 0x1234000000000000000000000000000000000000000000000000000000000000\n"
        },
        "test_underscore_in_hex.sol": {
            "content": "contract test {\n    function f(bool cond) public pure returns (uint256) {\n        uint32 x = 0x1234_ab;\n        uint256 y = 0x1234_abcd_1234;\n        return cond ? x : y;\n    }\n}\n// ----\n// f(bool): true -> 0x1234ab\n// f(bool): false -> 0x1234abcd1234\n"
        },
        "skip_dynamic_types_for_structs.sol": {
            "content": "// For accessors, the dynamic types are already removed in the external signature itself.\ncontract C {\n    struct S {\n        uint256 x;\n        string a; // this is present in the accessor\n        uint256[] b; // this is not present\n        uint256 y;\n    }\n    S public s;\n\n    function g() public returns (uint256, uint256) {\n        s.x = 2;\n        s.a = \"abc\";\n        s.b = [7, 8, 9];\n        s.y = 6;\n        (uint256 x, , uint256 y) = this.s();\n        return (x, y);\n    }\n}\n// ----\n// g() -> 2, 6\n// gas irOptimized: 178195\n// gas legacy: 180653\n// gas legacyOptimized: 179144\n"
        },
        "code_length.sol": {
            "content": "// SPDX-License-Identifier: GPL-3.0\ncontract C {\n    uint len1;\n    uint len2;\n    constructor() {\n        uint mem_ptr_before;\n        uint mem_ptr_after;\n\n        assembly {\n            mem_ptr_before := mload(64)\n        }\n\n        len1 = address(0).code.length;\n\n        assembly {\n            mem_ptr_after := mload(64)\n        }\n\n        // To check that no memory was allocated and written.\n        assert(mem_ptr_before == mem_ptr_after);\n\n        len2 = address(this).code.length;\n\n        // To check that no memory was allocated and written.\n        assembly {\n            mem_ptr_after := mload(64)\n        }\n\n        assert(mem_ptr_before == mem_ptr_after);\n\n    }\n\n    function f() public view returns (bool r1, bool r2) {\n        uint mem_ptr_before;\n        uint mem_ptr_after;\n\n        assembly {\n            mem_ptr_before := mload(64)\n        }\n\n        r1 = address(this).code.length > 50;\n\n        assembly {\n            mem_ptr_after := mload(64)\n        }\n\n        // To check that no memory was allocated and written.\n        assert(mem_ptr_before == mem_ptr_after);\n\n        address a = address(0);\n        r2 = a.code.length == 0;\n\n        // To check that no memory was allocated and written.\n        assembly {\n            mem_ptr_after := mload(64)\n        }\n\n    }\n}\n// ----\n// constructor()\n// gas legacy: 66989\n// gas legacy code: 57800\n// f(): true, true -> true, true\n"
        },
        "memory_overwrite.sol": {
            "content": "contract C {\n    function f() public returns (bytes memory x) {\n        x = \"12345\";\n        x[3] = 0x61;\n        x[0] = 0x62;\n    }\n}\n// ----\n// f() -> 0x20, 5, \"b23a5\"\n"
        },
        "cross_contract_types.sol": {
            "content": "contract Lib {\n    struct S {\n        uint256 a;\n        uint256 b;\n    }\n}\n\n\ncontract Test {\n    function f() public returns (uint256 r) {\n        Lib.S memory x = Lib.S({a: 2, b: 3});\n        r = x.b;\n    }\n}\n// ----\n// f() -> 3\n"
        },
        "multi_modifiers.sol": {
            "content": "// This triggered a bug in some version because the variable in the modifier was not\n// unregistered correctly.\ncontract C {\n    uint256 public x;\n    modifier m1 {\n        address a1 = msg.sender;\n        x++;\n        _;\n    }\n\n    function f1() public m1() {\n        x += 7;\n    }\n\n    function f2() public m1() {\n        x += 3;\n    }\n}\n// ----\n// f1() ->\n// x() -> 0x08\n// f2() ->\n// x() -> 0x0c\n"
        },
        "create_calldata.sol": {
            "content": "contract C {\n\tbytes public s;\n\tconstructor(uint256 x) {\n\t\t// Due to a bug in EVMHost, msg.data used to contain initcode and constructor arguments.\n\t\ts = msg.data;\n\t\tassert(msg.data.length == 0);\n\t}\n}\n// ----\n// constructor(): 42 ->\n// gas irOptimized: 68239\n// gas irOptimized code: 69000\n// gas legacy: 78076\n// gas legacy code: 90200\n// gas legacyOptimized: 68321\n// gas legacyOptimized code: 64600\n// s() -> 0x20, 0\n"
        },
        "code_length_contract_member.sol": {
            "content": "// Test to see if type.code.length does extcodesize(type) only when type is an address.\nstruct S {\n    bytes32 code;\n    bytes32 another;\n}\n\ncontract C {\n    S s;\n\n    function f() public returns (uint, uint, bool) {\n        return (s.code.length, s.another.length, address(this).code.length > 50);\n    }\n}\n// ----\n// f() -> 0x20, 0x20, true\n"
        },
        "single_copy_with_multiple_inheritance.sol": {
            "content": "contract Base {\n    uint256 data;\n\n    function setData(uint256 i) public {\n        data = i;\n    }\n\n    function getViaBase() public returns (uint256 i) {\n        return data;\n    }\n}\n\n\ncontract A is Base {\n    function setViaA(uint256 i) public {\n        setData(i);\n    }\n}\n\n\ncontract B is Base {\n    function getViaB() public returns (uint256 i) {\n        return getViaBase();\n    }\n}\n\n\ncontract Derived is Base, B, A {}\n// ----\n// getViaB() -> 0\n// setViaA(uint256): 23 ->\n// getViaB() -> 23\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
{
    "language": "Solidity",
    "sources": {
        "return.sol": {
            "content": "contract C {\n    function f() public pure returns (uint x) {\n        return 7;\n        x = 3;\n    }\n}\n// ----\n// f() -> 7\n"
        },
        "detect_add_overflow_signed.sol": {
            "content": "contract C {\n    function f(int a, int b) public pure returns (int x) {\n        x = a + b;\n    }\n    function g(int8 a, int8 b) public pure returns (int8 x) {\n        x = a + b;\n    }\n}\n// ----\n// f(int256,int256): 5, 6 -> 11\n// f(int256,int256): -2, 1 -> -1\n// f(int256,int256): -2, 2 -> 0\n// f(int256,int256): 2, -2 -> 0\n// f(int256,int256): -5, -6 -> -11\n// f(int256,int256): 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0, 0x0F -> 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n// f(int256,int256): 0x0F, 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0 -> 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n// f(int256,int256): 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, 1 -> FAILURE, hex\"4e487b71\", 0x11\n// f(int256,int256): 1, 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -> FAILURE, hex\"4e487b71\", 0x11\n// f(int256,int256): 0x8000000000000000000000000000000000000000000000000000000000000001, -1 -> 0x8000000000000000000000000000000000000000000000000000000000000000\n// f(int256,int256): -1, 0x8000000000000000000000000000000000000000000000000000000000000001 -> 0x8000000000000000000000000000000000000000000000000000000000000000\n// f(int256,int256): 0x8000000000000000000000000000000000000000000000000000000000000000, -1 -> FAILURE, hex\"4e487b71\", 0x11\n// f(int256,int256): -1, 0x8000000000000000000000000000000000000000000000000000000000000000 -> FAILURE, hex\"4e487b71\", 0x11\n// g(int8,int8): 5, 6 -> 11\n// g(int8,int8): -2, 1 -> -1\n// g(int8,int8): -2, 2 -> 0\n// g(int8,int8): 2, -2 -> 0\n// g(int8,int8): -5, -6 -> -11\n// g(int8,int8): 126, 1 -> 127\n// g(int8,int8): 1, 126 -> 127\n// g(int8,int8): 127, 1 -> FAILURE, hex\"4e487b71\", 0x11\n// g(int8,int8): 1, 127 -> FAILURE, hex\"4e487b71\", 0x11\n// g(int8,int8): -127, -1 -> -128\n// g(int8,int8): -1, -127 -> -128\n// g(int8,int8): -127, -2 -> FAILURE, hex\"4e487b71\", 0x11\n// g(int8,int8): -2, -127 -> FAILURE, hex\"4e487b71\", 0x11\n// g(int8,int8): -128, 0 -> -128\n// g(int8,int8): 0, -128 -> -128\n"
        },
        "function_entry_checks.sol": {
            "content": "contract C {\n    function f() public returns (uint) {\n    }\n    function g(uint x, uint y) public returns (uint) {\n    }\n    function h() public payable returns (uint) {\n    }\n    function i(bytes32 b) public returns (bytes32) {\n    }\n    function j(bool b) public returns (bool) {\n    }\n    function k(bytes32 b) public returns (bytes32) {\n    }\n    function s() public returns (uint256[] memory) {\n    }\n    function t(uint) public pure {\n    }\n}\n// ----\n// f() -> 0\n// g(uint256,uint256): 1, -2 -> 0\n// h(), 1 ether -> 0\n// i(bytes32), 1 ether: 2 -> FAILURE\n// i(bytes32): 2 -> 0\n// j(bool): true -> false\n// k(bytes32): 0x31 -> 0x00\n// s(): hex\"4200ef\" -> 0x20, 0\n// t(uint256) -> FAILURE\n"
        },
        "copy_struct_invalid_ir_bug.sol": {
            "content": "contract C {\n\tstruct Struct {\n\t\tfunction () external el;\n\t}\n\tStruct[] array;\n\tint externalCalled = 0;\n\n\tfunction ext() external {\n\t\texternalCalled++;\n\t}\n\n\tfunction f() public {\n\t\tarray.push(Struct(this.ext));\n\t\tarray.push(array[0]);\n\n\t\tarray[0].el();\n\t\tarray[1].el();\n\n\t\tassert(externalCalled == 2);\n\t}\n}\n// ----\n// f() ->\n// gas irOptimized: 113117\n// gas legacy: 112888\n// gas legacyOptimized: 112580\n"
        },
        "exp_literals_success.sol": {
            "content": "contract C {\n    function exp_2(uint y) public returns (uint) {\n        return 2**y;\n    }\n    function exp_minus_2(uint y) public returns (int) {\n        return (-2)**y;\n    }\n\n    function exp_uint_max(uint y) public returns (uint) {\n        return (2**256 - 1)**y;\n    }\n    function exp_int_max(uint y) public returns (int) {\n        return ((-2)**255)**y;\n    }\n\n    function exp_5(uint y) public returns (uint) {\n        return 5**y;\n    }\n    function exp_minus_5(uint y) public returns (int) {\n        return (-5)**y;\n    }\n\n    function exp_256(uint y) public returns (uint) {\n        return 256**y;\n    }\n    function exp_minus_256(uint y) public returns (int) {\n        return (-256)**y;\n    }\n\n}\n// ----\n// exp_2(uint256): 255 -> 57896044618658097711785492504343953926634992332820282019728792003956564819968\n// exp_minus_2(uint256): 255 -> -57896044618658097711785492504343953926634992332820282019728792003956564819968\n// exp_uint_max(uint256): 1 -> 115792089237316195423570985008687907853269984665640564039457584007913129639935\n// exp_int_max(uint256): 1 -> -57896044618658097711785492504343953926634992332820282019728792003956564819968\n// exp_5(uint256): 110 -> 77037197775489434122239117703397092741524065928615527809597551822662353515625\n// exp_minus_5(uint256): 109 -> -15407439555097886824447823540679418548304813185723105561919510364532470703125\n// exp_256(uint256): 31 -> 452312848583266388373324160190187140051835877600158453279131187530910662656\n// exp_minus_256(uint256): 31 -> -452312848583266388373324160190187140051835877600158453279131187530910662656\n"
        },
        "dirty_calldata_struct.sol": {
            "content": "pragma abicoder               v2;\ncontract C {\n    struct S {\n        uint16[] m;\n    }\n    function f(S calldata s) public pure returns (bool correct) {\n        int8 x = int8(int16(s.m[0]));\n        uint r;\n        assembly {\n            r := x\n        }\n        correct = r == 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80;\n    }\n}\n// ====\n// compileViaYul: true\n// ----\n// f((uint16[])): 0x20, 0x20, 0x01, 0x0180 -> true\n"
        },
        "simple_assignment.sol": {
            "content": "contract C {\n    function f(uint a, uint b) public pure returns (uint x, uint y) {\n        x = a;\n        y = b;\n    }\n}\n// ----\n// f(uint256,uint256): 5, 6 -> 5, 6\n"
        },
        "dirty_memory_dynamic_array.sol": {
            "content": "contract C {\n    function f() public pure returns (bool correct) {\n        uint8[] memory m = new uint8[](1);\n        assembly {\n            mstore(add(m, 32), 258)\n        }\n        uint8 x = m[0];\n        uint r;\n        assembly {\n            r := x\n        }\n        correct = (m[0] == 0x02) && (r == 0x02);\n    }\n}\n// ====\n// compileViaYul: true\n// ----\n// f() -> true\n"
        },
        "detect_div_overflow.sol": {
            "content": "contract C {\n    function f(uint a, uint b) public pure returns (uint x) {\n        x = a / b;\n    }\n    function g(int8 a, int8 b) public pure returns (int8 x) {\n        x = a / b;\n    }\n    function h(uint256 a, uint256 b) public pure returns (uint256 x) {\n        x = a / b;\n    }\n}\n// ----\n// f(uint256,uint256): 10, 3 -> 3\n// f(uint256,uint256): 1, 0 -> FAILURE, hex\"4e487b71\", 0x12\n// f(uint256,uint256): 0, 0 -> FAILURE, hex\"4e487b71\", 0x12\n// f(uint256,uint256): 0, 1 -> 0\n// g(int8,int8): -10, 3 -> -3\n// g(int8,int8): -10, -3 -> 3\n// g(int8,int8): -10, 0 -> FAILURE, hex\"4e487b71\", 0x12\n// g(int8,int8): -128, 1 -> -128\n// g(int8,int8): -128, -2 -> 64\n// g(int8,int8): -128, 2 -> -64\n// g(int8,int8): -128, -1 -> FAILURE, hex\"4e487b71\", 0x11\n// g(int8,int8): -127, -1 -> 127\n// h(uint256,uint256): 0x8000000000000000000000000000000000000000000000000000000000000000, -1 -> 0\n"
        },
        "detect_mul_overflow_signed.sol": {
            "content": "contract C {\n    function f(int a, int b) public pure returns (int x) {\n        x = a * b;\n    }\n    function g(int8 a, int8 b) public pure returns (int8 x) {\n        x = a * b;\n    }\n    function h(int160 a, int160 b) public pure returns (int160 x) {\n        x = a * b;\n    }\n}\n// ----\n// f(int256,int256): 5, 6 -> 30\n// f(int256,int256): -1, 1 -> -1\n// f(int256,int256): -1, 2 -> -2 # positive, positive #\n// f(int256,int256): 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, 2 -> 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE\n// f(int256,int256): 0x4000000000000000000000000000000000000000000000000000000000000000, 2 -> FAILURE, hex\"4e487b71\", 0x11\n// f(int256,int256): 2, 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -> 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE\n// f(int256,int256): 2, 0x4000000000000000000000000000000000000000000000000000000000000000 -> FAILURE, hex\"4e487b71\", 0x11\n// f(int256,int256): -1, 0x8000000000000000000000000000000000000000000000000000000000000000 -> FAILURE, hex\"4e487b71\", 0x11\n// f(int256,int256): 0x8000000000000000000000000000000000000000000000000000000000000000, -1 -> FAILURE, hex\"4e487b71\", 0x11\n// f(int256,int256): 2, 0x4000000000000000000000000000000000000000000000000000000000000000 -> FAILURE, hex\"4e487b71\", 0x11 # positive, negative #\n// f(int256,int256): 2, 0x4000000000000000000000000000000000000000000000000000000000000000 -> FAILURE, hex\"4e487b71\", 0x11 # positive, negative #\n// f(int256,int256): 2, 0x4000000000000000000000000000000000000000000000000000000000000000 -> FAILURE, hex\"4e487b71\", 0x11 # positive, negative #\n// f(int256,int256): 0x4000000000000000000000000000000000000000000000000000000000000000, -2 -> 0x8000000000000000000000000000000000000000000000000000000000000000\n// f(int256,int256): 0x4000000000000000000000000000000000000000000000000000000000000001, -2 -> FAILURE, hex\"4e487b71\", 0x11\n// f(int256,int256): 2, 0xC000000000000000000000000000000000000000000000000000000000000000 -> 0x8000000000000000000000000000000000000000000000000000000000000000\n// f(int256,int256): 2, 0xBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -> FAILURE, hex\"4e487b71\", 0x11 # negative, positive #\n// f(int256,int256): 2, 0xBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -> FAILURE, hex\"4e487b71\", 0x11 # negative, positive #\n// f(int256,int256): 2, 0xBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -> FAILURE, hex\"4e487b71\", 0x11 # negative, positive #\n// f(int256,int256): -2, 0x4000000000000000000000000000000000000000000000000000000000000000 -> 0x8000000000000000000000000000000000000000000000000000000000000000\n// f(int256,int256): -2, 0x4000000000000000000000000000000000000000000000000000000000000001 -> FAILURE, hex\"4e487b71\", 0x11\n// f(int256,int256): 0xC000000000000000000000000000000000000000000000000000000000000000, 2 -> 0x8000000000000000000000000000000000000000000000000000000000000000\n// f(int256,int256): 0xBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, 2 -> FAILURE, hex\"4e487b71\", 0x11 # negative, negative #\n// f(int256,int256): 0xBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, 2 -> FAILURE, hex\"4e487b71\", 0x11 # negative, negative #\n// f(int256,int256): 0xBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, 2 -> FAILURE, hex\"4e487b71\", 0x11 # negative, negative #\n// f(int256,int256): 0xC000000000000000000000000000000000000000000000000000000000000001, -2 -> 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE\n// f(int256,int256): 0xC000000000000000000000000000000000000000000000000000000000000000, -2 -> FAILURE, hex\"4e487b71\", 0x11\n// f(int256,int256): -2, 0xC000000000000000000000000000000000000000000000000000000000000001 -> 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE\n// f(int256,int256): -2, 0xC000000000000000000000000000000000000000000000000000000000000000 -> FAILURE, hex\"4e487b71\", 0x11 # small type #\n// f(int256,int256): -2, 0xC000000000000000000000000000000000000000000000000000000000000000 -> FAILURE, hex\"4e487b71\", 0x11 # small type #\n// f(int256,int256): -2, 0xC000000000000000000000000000000000000000000000000000000000000000 -> FAILURE, hex\"4e487b71\", 0x11 # small type #\n// g(int8,int8): 5, 6 -> 30\n// g(int8,int8): -1, 1 -> -1\n// g(int8,int8): -1, 2 -> -2 # positive, positive #\n// g(int8,int8): 63, 2 -> 126\n// g(int8,int8): 64, 2 -> FAILURE, hex\"4e487b71\", 0x11\n// g(int8,int8): 2, 63 -> 126\n// g(int8,int8): 2, 64 -> FAILURE, hex\"4e487b71\", 0x11 # positive, negative #\n// g(int8,int8): 2, 64 -> FAILURE, hex\"4e487b71\", 0x11 # positive, negative #\n// g(int8,int8): 2, 64 -> FAILURE, hex\"4e487b71\", 0x11 # positive, negative #\n// g(int8,int8): 64, -2 -> -128\n// g(int8,int8): 65, -2 -> FAILURE, hex\"4e487b71\", 0x11\n// g(int8,int8): 2, -64 -> -128\n// g(int8,int8): 2, -65 -> FAILURE, hex\"4e487b71\", 0x11 # negative, positive #\n// g(int8,int8): 2, -65 -> FAILURE, hex\"4e487b71\", 0x11 # negative, positive #\n// g(int8,int8): 2, -65 -> FAILURE, hex\"4e487b71\", 0x11 # negative, positive #\n// g(int8,int8): -2, 64 -> -128\n// g(int8,int8): -2, 65 -> FAILURE, hex\"4e487b71\", 0x11\n// g(int8,int8): -64, 2 -> -128\n// g(int8,int8): -65, 2 -> FAILURE, hex\"4e487b71\", 0x11 # negative, negative #\n// g(int8,int8): -65, 2 -> FAILURE, hex\"4e487b71\", 0x11 # negative, negative #\n// g(int8,int8): -65, 2 -> FAILURE, hex\"4e487b71\", 0x11 # negative, negative #\n// g(int8,int8): -63, -2 -> 126\n// g(int8,int8): -64, -2 -> FAILURE, hex\"4e487b71\", 0x11\n// g(int8,int8): -2, -63 -> 126\n// g(int8,int8): -2, -64 -> FAILURE, hex\"4e487b71\", 0x11\n// h(int160,int160): -1, 1 -> -1\n// h(int160,int160): 1, -1 -> -1\n// h(int160,int160): -1, 2 -> -2\n// h(int160,int160): 2, -1 -> -2\n// h(int160,int160): -1, 0xFFFFFFFFFFFFFFFFFFFFFFFF8000000000000000000000000000000000000000 -> FAILURE, hex\"4e487b71\", 0x11\n// h(int160,int160): -1, 0xFFFFFFFFFFFFFFFFFFFFFFFF8000000000000000000000000000000000000000 -> FAILURE, hex\"4e487b71\", 0x11\n// h(int160,int160): 0xFFFFFFFFFFFFFFFFFFFFFFFF8000000000000000000000000000000000000000, -1 -> FAILURE, hex\"4e487b71\", 0x11\n// h(int160,int160): 0x0000000000000000000000004000000000000000000000000000000000000000, -2 -> 0xFFFFFFFFFFFFFFFFFFFFFFFF8000000000000000000000000000000000000000\n// h(int160,int160): -2, 0x0000000000000000000000004000000000000000000000000000000000000000 -> 0xFFFFFFFFFFFFFFFFFFFFFFFF8000000000000000000000000000000000000000\n// h(int160,int160): -2, 0x0000000000000000000000004000000000000000000000000000000000000001 -> FAILURE, hex\"4e487b71\", 0x11\n// h(int160,int160): 0x0000000000000000000000004000000000000000000000000000000000000001, -2 -> FAILURE, hex\"4e487b71\", 0x11\n// h(int160,int160): 0x0000000000000000000000004000000000000000000000000000000000000001, 2 -> FAILURE, hex\"4e487b71\", 0x11\n// h(int160,int160): 2, 0x0000000000000000000000004000000000000000000000000000000000000001 -> FAILURE, hex\"4e487b71\", 0x11\n// h(int160,int160): 0x0000000000000000000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, 2 -> 0x0000000000000000000000007FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE\n// h(int160,int160): 2, 0x0000000000000000000000004000000000000000000000000000000000000001 -> FAILURE, hex\"4e487b71\", 0x11\n"
        },
        "msg_sender.sol": {
            "content": "contract C {\n    function test() public view returns (bool) {\n        address x;\n        assembly { x := caller() }\n        return x == msg.sender;\n    }\n}\n// ----\n// test() -> true\n"
        },
        "keccak.sol": {
            "content": "contract C {\n    function keccak1() public pure returns (bytes32) {\n\t\treturn keccak256(\"123\");\n    }\n    function keccak2() public pure returns (bytes32) {\n\t\tbytes memory a = \"123\";\n\t\treturn keccak256(a);\n    }\n}\n// ----\n// keccak1() -> 0x64e604787cbf194841e7b68d7cd28786f6c9a0a3ab9f8b0a0e87cb4387ab0107\n// keccak2() -> 0x64e604787cbf194841e7b68d7cd28786f6c9a0a3ab9f8b0a0e87cb4387ab0107\n"
        },
        "negation_bug.sol": {
            "content": "contract C {\n\tfunction f() public pure {\n\t\t-(int8(0));\n\t\tunchecked {\n\t\t\t// Used to incorrectly use the checked unary negation function and revert.\n\t\t\t(-(type(int8).min));\n\t\t}\n\t}\n}\n// ----\n// f() ->\n"
        },
        "memory_struct_allow.sol": {
            "content": "contract C {\n    struct S {\n        uint256 a;\n        uint256 b;\n    }\n\n    function f() public pure returns (uint256 a, uint256 b){\n        assembly {\n            // Make free memory dirty to check that the struct allocation cleans it up again.\n            let freeMem := mload(0x40)\n            mstore(freeMem, 42)\n            mstore(add(freeMem, 32), 42)\n        }\n        S memory s;\n        return (s.a, s.b);\n    }\n}\n// ----\n// f() -> 0, 0\n"
        },
        "string_format.sol": {
            "content": "contract C {\n\tfunction f1() external pure returns (string memory) { return \"abcabc\"; }\n\tfunction f2() external pure returns (string memory) { return \"abcabc`~12345677890- _=+!@#$%^&*()[{]}|;:',<.>?\"; }\n\tfunction g() external pure returns (bytes32) { return \"abcabc\"; }\n\tfunction h() external pure returns (bytes4) { return 0xcafecafe; }\n}\n// ----\n// f1() -> 0x20, 6, left(0x616263616263)\n// f2() -> 32, 47, 44048183223289766195424279195050628400112610419087780792899004030957505095210, 18165586057823232067963737336409268114628061002662705707816940456850361417728\n// g() -> left(0x616263616263)\n// h() -> left(0xcafecafe)\n"
        },
        "virtual_functions.sol": {
            "content": "contract X {\n    function f() public returns (uint x) {\n        x = g();\n    }\n    function g() public virtual returns (uint x) {\n        x = 2;\n    }\n}\ncontract C is X {\n    function f1() public returns (uint x) {\n        // direct call\n        x = g();\n    }\n    function f2() public returns (uint x) {\n        // call via base\n        x = f();\n    }\n    function f3() public returns (uint x) {\n        // explicit call via base\n        //x = super.g();\n    }\n    function g() public override returns (uint x) {\n        x = 3;\n    }\n}\n// ----\n// f() -> 3\n// f1() -> 3\n// f2() -> 3\n// g() -> 3\n"
        },
        "empty_return_corrupted_free_memory_pointer.sol": {
            "content": "contract C {\n    function f() public {\n        assembly{ mstore(0x40, sub(0, 1)) }\n    }\n}\n// ----\n// f() ->\n"
        },
        "mapping_string_key.sol": {
            "content": "contract C {\n\tmapping (string => uint) map;\n\tfunction set(string memory s) public {\n\t\tmap[s];\n\t}\n}\n// ----\n// set(string): 0x20, 32, \"01234567890123456789012345678901\" ->\n"
        },
        "comparison.sol": {
            "content": "contract C {\n    function f(address a) public pure returns (bool) {\n        return a == address(0);\n    }\n    function g() public pure returns (bool) {\n        return bytes3(\"abc\") == bytes4(\"abc\");\n    }\n    function lt(uint a, uint b) public pure returns (bool) {\n        return a < b;\n    }\n    function slt(int a, int b) public pure returns (bool) {\n        return a < b;\n    }\n    function lte(uint a, uint b) public pure returns (bool) {\n        return a <= b;\n    }\n    function slte(int a, int b) public pure returns (bool) {\n        return a <= b;\n    }\n    function gt(uint a, uint b) public pure returns (bool) {\n        return a > b;\n    }\n    function sgt(int a, int b) public pure returns (bool) {\n        return a > b;\n    }\n    function gte(uint a, uint b) public pure returns (bool) {\n        return a >= b;\n    }\n    function sgte(int a, int b) public pure returns (bool) {\n        return a >= b;\n    }\n    function eq(uint a, uint b) public pure returns (bool) {\n        return a == b;\n    }\n    function neq(uint a, uint b) public pure returns (bool) {\n        return a != b;\n    }\n}\n// ----\n// f(address): 0x1234 -> false\n// f(address): 0x00 -> true\n// g() -> true\n// lt(uint256,uint256): 4, 5 -> true\n// lt(uint256,uint256): 5, 5 -> false\n// lt(uint256,uint256): 6, 5 -> false\n// gt(uint256,uint256): 4, 5 -> false\n// gt(uint256,uint256): 5, 5 -> false\n// gt(uint256,uint256): 6, 5 -> true\n// lte(uint256,uint256): 4, 5 -> true\n// lte(uint256,uint256): 5, 5 -> true\n// lte(uint256,uint256): 6, 5 -> false\n// gte(uint256,uint256): 4, 5 -> false\n// gte(uint256,uint256): 5, 5 -> true\n// gte(uint256,uint256): 6, 5 -> true\n// eq(uint256,uint256): 4, 5 -> false\n// eq(uint256,uint256): 5, 5 -> true\n// eq(uint256,uint256): 6, 5 -> false\n// neq(uint256,uint256): 4, 5 -> true\n// neq(uint256,uint256): 5, 5 -> false\n// neq(uint256,uint256): 6, 5 -> true\n// slt(int256,int256): -1, 0 -> true\n// slt(int256,int256): 0, 0 -> false\n// slt(int256,int256): 1, 0 -> false\n// sgt(int256,int256): -1, 0 -> false\n// sgt(int256,int256): 0, 0 -> false\n// sgt(int256,int256): 1, 0 -> true\n// slte(int256,int256): -1, 0 -> true\n// slte(int256,int256): 0, 0 -> true\n// slte(int256,int256): 1, 0 -> false\n// sgte(int256,int256): -1, 0 -> false\n// sgte(int256,int256): 0, 0 -> true\n// sgte(int256,int256): 1, 0 -> true\n"
        },
        "require.sol": {
            "content": "contract C {\n\tfunction f(bool a) public pure returns (bool x) {\n\t\tbool b = a;\n\t\tx = b;\n\t\trequire(b);\n\t}\n\tfunction fail() public pure returns (bool x) {\n\t\tx = true;\n\t\trequire(false);\n\t}\n\tfunction succeed() public pure returns (bool x) {\n\t\tx = true;\n\t\trequire(true);\n\t}\n\tfunction f2(bool a) public pure returns (bool x) {\n\t\tx = a;\n\t\tstring memory message;\n\t\tmessage = \"fancy message!\";\n\t\trequire(a, message);\n\t}\n\tfunction f3(bool a) public pure returns (bool x) {\n\t\tx = a;\n\t\trequire(a, \"msg\");\n\t}\n\tfunction f4(bool a) public pure returns (bool x) {\n\t\tx = a;\n\t\tstring memory message;\n\t\trequire(a, message);\n\t}\n}\n// ====\n// EVMVersion: >=byzantium\n// ----\n// f(bool): true -> true\n// f(bool): false -> FAILURE\n// fail() -> FAILURE\n// succeed() -> true\n// f2(bool): true -> true\n// f2(bool): false -> FAILURE, hex\"08c379a0\", 0x20, 14, \"fancy message!\"\n// f3(bool): true -> true\n// f3(bool): false -> FAILURE, hex\"08c379a0\", 0x20, 3, \"msg\"\n// f4(bool): true -> true\n// f4(bool): false -> FAILURE, hex\"08c379a0\", 0x20, 0\n"
        },
        "various_inline_asm.sol": {
            "content": "contract C {\n    function f() public pure returns (uint32 x) {\n        uint32 a;\n        uint32 b;\n        uint32 c;\n        assembly {\n            function myAwesomeFunction(param) -> returnMe {\n                let localVar := 10\n                returnMe := add(localVar, param)\n            }\n            let abc := sub(10, a)\n            let xyz := 20\n            a := abc\n            b := myAwesomeFunction(30)\n            c := xyz\n        }\n        x = a + b + c;\n    }\n}\n// ----\n// f() -> 70\n"
        },
        "dirty_memory_struct.sol": {
            "content": "contract C {\n    struct S {\n        uint8[] m;\n    }\n    function f() public pure returns (bool correct) {\n        S memory s;\n        s.m = new uint8[](1);\n        assembly {\n            mstore(add(s, 64), 257)\n        }\n        uint8 x = s.m[0];\n        uint r;\n        assembly {\n            r := x\n        }\n        correct = r == 0x01;\n    }\n}\n// ====\n// compileViaYul: true\n// ----\n// f() -> true\n"
        },
        "simple_inline_asm.sol": {
            "content": "contract C {\n    function f() public pure returns (uint32 x) {\n        uint32 a;\n        uint32 b;\n        uint32 c;\n        assembly {\n            a := 1\n            b := 2\n            c := 3\n        }\n        x = a + b + c;\n    }\n}\n// ----\n// f() -> 6\n"
        },
        "function_pointers.sol": {
            "content": "contract C {\n\tfunction f() public {\n\t\tfunction() internal returns (uint) _f;\n\t\t_f();\n\t}\n\tfunction g() public {\n\t\tfunction() external returns (uint) _g;\n\t\t_g();\n\t}\n\tfunction h1() internal returns (function() internal returns (uint) _h) {}\n\tfunction h2() public {\n\t\th1()();\n\t}\n\tfunction k1() internal returns (function() external returns (uint) _k) {}\n\tfunction k2() public {\n\t\tk1()();\n\t}\n}\n// ----\n// f() -> FAILURE, hex\"4e487b71\", 0x51\n// g() -> FAILURE\n// h2() -> FAILURE, hex\"4e487b71\", 0x51\n// k2() -> FAILURE\n"
        },
        "tuple_evaluation_order.sol": {
            "content": "contract C {\n    uint256 x;\n    uint256 y;\n    function set(uint256 v) public returns (uint256) { x = v; return v; }\n    function f() public returns (uint256, uint256) {\n       (y, y, y) = (set(1), set(2), set(3));\n       assert(y == 1 && x == 3);\n       return (x, y);\n    }\n}\n// ----\n// f() -> 3, 1\n"
        },
        "dirty_memory_uint32.sol": {
            "content": "contract C {\n    function f() public pure returns (bool correct) {\n        uint256[1] memory m;\n        assembly {\n            mstore(m, 0xdeadbeef15dead)\n        }\n        uint32 x = uint32(m[0]);\n        uint r;\n        assembly {\n            r := x\n        }\n        correct = (r == 0xef15dead) && (m[0] == 0xdeadbeef15dead);\n    }\n}\n// ====\n// compileViaYul: true\n// ----\n// f() -> true\n"
        },
        "detect_mod_zero_signed.sol": {
            "content": "contract C {\n    function f(int a, int b) public pure returns (int x) {\n        x = a % b;\n    }\n    function g(int8 a, int8 b) public pure returns (int8 x) {\n        x = a % b;\n    }\n}\n// ----\n// f(int256,int256): 10, 3 -> 1\n// f(int256,int256): 10, 2 -> 0\n// f(int256,int256): 11, 2 -> 1\n// f(int256,int256): -10, 3 -> -1\n// f(int256,int256): 10, -3 -> 1\n// f(int256,int256): -10, -3 -> -1\n// f(int256,int256): 2, 2 -> 0\n// f(int256,int256): 1, 0 -> FAILURE, hex\"4e487b71\", 0x12\n// f(int256,int256): -1, 0 -> FAILURE, hex\"4e487b71\", 0x12\n// f(int256,int256): 0, 0 -> FAILURE, hex\"4e487b71\", 0x12\n// f(int256,int256): 0, 1 -> 0\n// f(int256,int256): 0, -1 -> 0\n// g(int8,int8): 10, 3 -> 1\n// g(int8,int8): 10, 2 -> 0\n// g(int8,int8): 11, 2 -> 1\n// g(int8,int8): -10, 3 -> -1\n// g(int8,int8): 10, -3 -> 1\n// g(int8,int8): -10, -3 -> -1\n// g(int8,int8): 2, 2 -> 0\n// g(int8,int8): 1, 0 -> FAILURE, hex\"4e487b71\", 0x12\n// g(int8,int8): -1, 0 -> FAILURE, hex\"4e487b71\", 0x12\n// g(int8,int8): 0, 0 -> FAILURE, hex\"4e487b71\", 0x12\n// g(int8,int8): 0, 1 -> 0\n// g(int8,int8): 0, -1 -> 0\n// g(int8,int8): -128, -128 -> 0\n// g(int8,int8): -128, 127 -> -1\n"
        },
        "detect_add_overflow.sol": {
            "content": "contract C {\n    function f(uint a, uint b) public pure returns (uint x) {\n        x = a + b;\n    }\n    function g(uint8 a, uint8 b) public pure returns (uint8 x) {\n        x = a + b;\n    }\n}\n// ----\n// f(uint256,uint256): 5, 6 -> 11\n// f(uint256,uint256): -2, 1 -> -1\n// f(uint256,uint256): -2, 2 -> FAILURE, hex\"4e487b71\", 0x11\n// f(uint256,uint256): 2, -2 -> FAILURE, hex\"4e487b71\", 0x11\n// g(uint8,uint8): 128, 64 -> 192\n// g(uint8,uint8): 128, 127 -> 255\n// g(uint8,uint8): 128, 128 -> FAILURE, hex\"4e487b71\", 0x11\n"
        },
        "exp_various.sol": {
            "content": "contract C {\n    function f(uint8 x, uint8 y) public returns (uint) {\n        return x**y;\n    }\n    function g(uint x, uint y) public returns (uint) {\n        return x**y;\n    }\n}\n// ----\n// f(uint8,uint8): 0, 0 -> 1\n// f(uint8,uint8): 0, 1 -> 0x00\n// f(uint8,uint8): 0, 2 -> 0x00\n// f(uint8,uint8): 0, 3 -> 0x00\n// f(uint8,uint8): 1, 0 -> 1\n// f(uint8,uint8): 1, 1 -> 1\n// f(uint8,uint8): 1, 2 -> 1\n// f(uint8,uint8): 1, 3 -> 1\n// f(uint8,uint8): 2, 0 -> 1\n// f(uint8,uint8): 2, 1 -> 2\n// f(uint8,uint8): 2, 2 -> 4\n// f(uint8,uint8): 2, 3 -> 8\n// f(uint8,uint8): 3, 0 -> 1\n// f(uint8,uint8): 3, 1 -> 3\n// f(uint8,uint8): 3, 2 -> 9\n// f(uint8,uint8): 3, 3 -> 0x1b\n// f(uint8,uint8): 10, 0 -> 1\n// f(uint8,uint8): 10, 1 -> 0x0a\n// f(uint8,uint8): 10, 2 -> 100\n// g(uint256,uint256): 0, 0 -> 1\n// g(uint256,uint256): 0, 1 -> 0x00\n// g(uint256,uint256): 0, 2 -> 0x00\n// g(uint256,uint256): 0, 3 -> 0x00\n// g(uint256,uint256): 1, 0 -> 1\n// g(uint256,uint256): 1, 1 -> 1\n// g(uint256,uint256): 1, 2 -> 1\n// g(uint256,uint256): 1, 3 -> 1\n// g(uint256,uint256): 2, 0 -> 1\n// g(uint256,uint256): 2, 1 -> 2\n// g(uint256,uint256): 2, 2 -> 4\n// g(uint256,uint256): 2, 3 -> 8\n// g(uint256,uint256): 3, 0 -> 1\n// g(uint256,uint256): 3, 1 -> 3\n// g(uint256,uint256): 3, 2 -> 9\n// g(uint256,uint256): 3, 3 -> 0x1b\n// g(uint256,uint256): 10, 10 -> 10000000000\n// g(uint256,uint256): 10, 77 -> -15792089237316195423570985008687907853269984665640564039457584007913129639936\n// g(uint256,uint256): 256, 2 -> 0x010000\n// g(uint256,uint256): 256, 31 -> 0x0100000000000000000000000000000000000000000000000000000000000000\n"
        },
        "smoke_test.sol": {
            "content": "contract C {\n}\n// ====\n// allowNonExistingFunctions: true\n// ----\n// f() -> FAILURE\n"
        },
        "mapping_getters.sol": {
            "content": "contract test {\n    mapping(uint256 => uint256) public m1;\n    mapping(uint256 => mapping(uint256 => uint256)) public m2;\n    function set(uint256 k, uint256 v) public {\n        m1[k] = v;\n    }\n    function set(uint256 k1, uint256 k2, uint256 v) public {\n        m2[k1][k2] = v;\n    }\n}\n// ----\n// m1(uint256): 0 -> 0\n// m1(uint256): 0x01 -> 0\n// m1(uint256): 0xa7 -> 0\n// set(uint256,uint256): 0x01, 0xa1 ->\n// m1(uint256): 0 -> 0\n// m1(uint256): 0x01 -> 0xa1\n// m1(uint256): 0xa7 -> 0\n// set(uint256,uint256): 0x00, 0xef ->\n// m1(uint256): 0 -> 0xef\n// m1(uint256): 0x01 -> 0xa1\n// m1(uint256): 0xa7 -> 0\n// set(uint256,uint256): 0x01, 0x05 ->\n// m1(uint256): 0 -> 0xef\n// m1(uint256): 0x01 -> 0x05\n// m1(uint256): 0xa7 -> 0\n// m2(uint256,uint256): 0, 0 -> 0\n// m2(uint256,uint256): 0, 0x01 -> 0\n// m2(uint256,uint256): 0xa7, 0 -> 0\n// m2(uint256,uint256): 0xa7, 0x01 -> 0\n// set(uint256,uint256,uint256): 0xa7, 0x01, 0x23\n// m2(uint256,uint256): 0, 0x01 -> 0\n// m2(uint256,uint256): 0xa7, 0 -> 0\n// m2(uint256,uint256): 0xa7, 0x01 -> 0x23\n// set(uint256,uint256,uint256): 0, 0x01, 0xef\n// m2(uint256,uint256): 0, 0x01 -> 0xef\n// m2(uint256,uint256): 0xa7, 0 -> 0\n// m2(uint256,uint256): 0xa7, 0x01 -> 0x23\n"
        },
        "detect_sub_overflow.sol": {
            "content": "contract C {\n    function f(uint a, uint b) public pure returns (uint x) {\n        x = a - b;\n    }\n    function g(uint8 a, uint8 b) public pure returns (uint8 x) {\n        x = a - b;\n    }\n}\n// ----\n// f(uint256,uint256): 6, 5 -> 1\n// f(uint256,uint256): 6, 6 -> 0\n// f(uint256,uint256): 5, 6 -> FAILURE, hex\"4e487b71\", 0x11\n// g(uint8,uint8): 6, 5 -> 1\n// g(uint8,uint8): 6, 6 -> 0\n// g(uint8,uint8): 5, 6 -> FAILURE, hex\"4e487b71\", 0x11\n"
        },
        "function_selector.sol": {
            "content": "contract C {\n    function f() external returns (bytes4) {\n        return this.f.selector;\n    }\n    function h(function() external a) public returns (bytes4) {\n        return a.selector;\n    }\n}\n// ----\n// f() -> left(0x26121ff0)\n// h(function): left(0x1122334400112233445566778899AABBCCDDEEFF42424242) -> left(0x42424242)\n"
        },
        "unary_operations.sol": {
            "content": "contract C {\n\tfunction preincr_u8(uint8 a) public pure returns (uint8) {\n\t\treturn ++a + a;\n\t}\n\tfunction postincr_u8(uint8 a) public pure returns (uint8) {\n\t\treturn a++ + a;\n\t}\n\tfunction predecr_u8(uint8 a) public pure returns (uint8) {\n\t\treturn --a + a;\n\t}\n\tfunction postdecr_u8(uint8 a) public pure returns (uint8) {\n\t\treturn a-- + a;\n\t}\n\tfunction preincr_s8(int8 a) public pure returns (int8 ret1, int8 ret2) {\n\t\tret1 = ++a;\n\t\tret2 = a;\n\t}\n\tfunction postincr_s8(int8 a) public pure returns (int8 ret1, int8 ret2) {\n\t\tret1 = a++;\n\t\tret2 = a;\n\t}\n\tfunction predecr_s8(int8 a) public pure returns (int8 ret1, int8 ret2) {\n\t\tret1 = --a;\n\t\tret2 = a;\n\t}\n\tfunction postdecr_s8(int8 a) public pure returns (int8 ret1, int8 ret2) {\n\t\tret1 = a--;\n\t\tret2 = a;\n\t}\n\tfunction preincr(uint a) public pure returns (uint) {\n\t\treturn ++a + a;\n\t}\n\tfunction postincr(uint a) public pure returns (uint) {\n\t\treturn a++ + a;\n\t}\n\tfunction predecr(uint a) public pure returns (uint) {\n\t\treturn --a + a;\n\t}\n\tfunction postdecr(uint a) public pure returns (uint) {\n\t\treturn a-- + a;\n\t}\n\tfunction not(bool a) public pure returns (bool)\n\t{\n\t\treturn !a;\n\t}\n\tfunction bitnot(int256 a) public pure returns (int256)\n\t{\n\t\treturn ~a;\n\t}\n\tfunction bitnot_u8(uint8 a) public pure returns (uint256 ret)\n\t{\n\t\ta = ~a;\n\t\tassembly {\n\t\t\t// Tests that the lower bit parts are cleaned up\n\t\t\tret := a\n\t\t}\n\t}\n\tfunction bitnot_s8() public pure returns (int256 ret)\n\t{\n\t\tint8 a;\n\t\tassembly {\n\t\t\ta := 0x9C\n\t\t}\n\n\t\ta = ~a;\n\n\t\tassembly {\n\t\t\t// Tests that the lower bit parts are cleaned up\n\t\t\tret := a\n\t\t}\n\t}\n\tfunction negate(int256 a) public pure returns (int256)\n\t{\n\t\treturn -a;\n\t}\n\tfunction negate_s8(int8 a) public pure returns (int8)\n\t{\n\t\treturn -a;\n\t}\n\tfunction negate_s16(int16 a) public pure returns (int16)\n\t{\n\t\treturn -a;\n\t}\n}\n// ====\n// compileViaYul: true\n// ----\n// preincr_s8(int8): 128 -> FAILURE\n// postincr_s8(int8): 128 -> FAILURE\n// preincr_s8(int8): 127 -> FAILURE, hex\"4e487b71\", 0x11\n// postincr_s8(int8): 127 -> FAILURE, hex\"4e487b71\", 0x11\n// preincr_s8(int8): 126 -> 127, 127\n// postincr_s8(int8): 126 -> 126, 127\n// predecr_s8(int8): -128 -> FAILURE, hex\"4e487b71\", 0x11\n// postdecr_s8(int8): -128 -> FAILURE, hex\"4e487b71\", 0x11\n// predecr_s8(int8): -127 -> -128, -128\n// postdecr_s8(int8): -127 -> -127, -128\n// preincr_s8(int8): -5 -> -4, -4\n// postincr_s8(int8): -5 -> -5, -4\n// predecr_s8(int8): -5 -> -6, -6\n// postdecr_s8(int8): -5 -> -5, -6\n// preincr_u8(uint8): 255 -> FAILURE, hex\"4e487b71\", 0x11\n// postincr_u8(uint8): 255 -> FAILURE, hex\"4e487b71\", 0x11\n// preincr_u8(uint8): 254 -> FAILURE, hex\"4e487b71\", 0x11\n// postincr_u8(uint8): 254 -> FAILURE, hex\"4e487b71\", 0x11\n// predecr_u8(uint8): 0 -> FAILURE, hex\"4e487b71\", 0x11\n// postdecr_u8(uint8): 0 -> FAILURE, hex\"4e487b71\", 0x11\n// predecr_u8(uint8): 1 -> 0\n// postdecr_u8(uint8): 1 -> 1\n// preincr_u8(uint8): 2 -> 6\n// postincr_u8(uint8): 2 -> 5\n// predecr_u8(uint8): 2 -> 2\n// postdecr_u8(uint8): 2 -> 3\n// preincr(uint256): 2 -> 6\n// postincr(uint256): 2 -> 5\n// predecr(uint256): 2 -> 2\n// postdecr(uint256): 2 -> 3\n// not(bool): true -> false\n// not(bool): false -> true\n// bitnot(int256): 5 -> -6\n// bitnot(int256): 10 -> -11\n// bitnot(int256): 0 -> -1\n// bitnot(int256): -100 -> 99\n// bitnot_u8(uint8): 100 -> 155\n// bitnot_s8() -> 99\n// negate(int256): -57896044618658097711785492504343953926634992332820282019728792003956564819968 -> FAILURE, hex\"4e487b71\", 0x11\n// negate(int256): -57896044618658097711785492504343953926634992332820282019728792003956564819967 -> 57896044618658097711785492504343953926634992332820282019728792003956564819967\n// negate(int256): 0 -> 0\n// negate(int256): 1 -> -1\n// negate(int256): -1 -> 1\n// negate_s8(int8): -128 -> FAILURE, hex\"4e487b71\", 0x11\n// negate_s8(int8): -138 -> FAILURE\n// negate_s8(int8): -127 -> 127\n// negate_s8(int8): 127 -> -127\n// negate_s16(int16): -32768 -> FAILURE, hex\"4e487b71\", 0x11\n// negate_s16(int16): -32767 -> 32767\n"
        },
        "unary_fixedbytes.sol": {
            "content": "contract C {\n\tfunction conv(bytes25 a) public pure returns (bytes32) {\n\t\t// truncating and widening\n\t\treturn ~bytes32(bytes16(~a));\n\t}\n\n\tfunction upcast(bytes25 a) public pure returns (bytes32) {\n\t\t// implicit widening is allowed\n\t\treturn ~a;\n\t}\n\n\tfunction downcast(bytes25 a) public pure returns (bytes12) {\n\t\t// truncating cast must be explicit\n\t\treturn bytes12(~a);\n\t}\n\n\tfunction r_b32() public pure returns (bytes32) {\n\t\treturn ~bytes32(hex\"ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00\");\n\t}\n\tfunction r_b25() public pure returns (bytes25) {\n\t\treturn ~bytes25(hex\"ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff\");\n\t}\n\tfunction r_b16() public pure returns (bytes16) {\n\t\treturn ~bytes16(hex\"ff00ff00ff00ff00ff00ff00ff00ff00\");\n\t}\n\tfunction r_b8() public pure returns (bytes8) {\n\t\treturn ~bytes8(hex\"ff00ff00ff00ff00\");\n\t}\n\tfunction r_b4() public pure returns (bytes4) {\n\t\treturn ~bytes4(hex\"ff00ff00\");\n\t}\n\tfunction r_b1() public pure returns (bytes1) {\n\t\treturn ~bytes1(hex\"55\");\n\t}\n\n\tfunction a_b32() public pure returns (bytes32) {\n\t\tbytes32 r = ~bytes32(hex\"ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00\");\n\t\treturn r;\n\t}\n\tfunction a_b25() public pure returns (bytes25) {\n\t\tbytes25 r = ~bytes25(hex\"ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff\");\n\t\treturn r;\n\t}\n\tfunction a_b16() public pure returns (bytes16) {\n\t\tbytes16 r =  ~bytes16(hex\"ff00ff00ff00ff00ff00ff00ff00ff00\");\n\t\treturn r;\n\t}\n\tfunction a_b8() public pure returns (bytes8) {\n\t\tbytes8 r =  ~bytes8(hex\"ff00ff00ff00ff00\");\n\t\treturn r;\n\t}\n\tfunction a_b4() public pure returns (bytes4) {\n\t\tbytes4 r =  ~bytes4(hex\"ff00ff00\");\n\t\treturn r;\n\t}\n\tfunction a_b1() public pure returns (bytes1) {\n\t\tbytes1 r =  ~bytes1(hex\"55\");\n\t\treturn r;\n\t}\n}\n// ----\n// conv(bytes25): left(0xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff) -> 0xff00ff00ff00ff00ff00ff00ff00ff00ffffffffffffffffffffffffffffffff\n// upcast(bytes25): left(0xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff) -> 0xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff0000000000000000\n// downcast(bytes25): left(0xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff) -> 0xff00ff00ff00ff00ff00ff0000000000000000000000000000000000000000\n// r_b32() -> 0xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff\n// r_b25() -> 0xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff0000000000000000\n// r_b16() -> 0xff00ff00ff00ff00ff00ff00ff00ff00000000000000000000000000000000\n// r_b8() -> 0xff00ff00ff00ff000000000000000000000000000000000000000000000000\n// r_b4() -> 0xff00ff00000000000000000000000000000000000000000000000000000000\n// r_b1() -> 0xaa00000000000000000000000000000000000000000000000000000000000000\n// a_b32() -> 0xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff\n// a_b25() -> 0xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff0000000000000000\n// a_b16() -> 0xff00ff00ff00ff00ff00ff00ff00ff00000000000000000000000000000000\n// a_b8() -> 0xff00ff00ff00ff000000000000000000000000000000000000000000000000\n// a_b4() -> 0xff00ff00000000000000000000000000000000000000000000000000000000\n// a_b1() -> 0xaa00000000000000000000000000000000000000000000000000000000000000\n"
        },
        "delete.sol": {
            "content": "contract C {\n\tfunction internal_func() internal pure returns (int8)\n\t{\n\t\treturn 1;\n\t}\n\tfunction call_internal_func() public pure returns (bool ret)\n\t{\n\t\tfunction() internal pure returns(int8) func = internal_func;\n\n\t\treturn func() == internal_func();\n\t}\n\tfunction call_deleted_internal_func() public pure returns (bool ret)\n\t{\n\t\tfunction() internal pure returns(int8) func = internal_func;\n\n\t\tdelete func;\n\n\t\treturn func() == internal_func();\n\t}\n}\n// ----\n// call_deleted_internal_func() -> FAILURE, hex\"4e487b71\", 0x51\n// call_internal_func() -> true\n"
        },
        "assert.sol": {
            "content": "contract C {\n    function f(bool a) public pure returns (bool x) {\n        bool b = a;\n        x = b;\n        assert(b);\n    }\n    function fail() public pure returns (bool x) {\n        x = true;\n        assert(false);\n    }\n    function succeed() public pure returns (bool x) {\n        x = true;\n        assert(true);\n    }\n}\n// ----\n// f(bool): true -> true\n// f(bool): false -> FAILURE, hex\"4e487b71\", 0x01\n// fail() -> FAILURE, hex\"4e487b71\", 0x01\n// succeed() -> true\n"
        },
        "function_address.sol": {
            "content": "contract C {\n    function f() external returns (address) {\n        return this.f.address;\n    }\n    function g() external returns (bool) {\n      return this.f.address == address(this);\n    }\n    function h(function() external a) public returns (address) {\n      return a.address;\n    }\n}\n// ----\n// f() -> 0xc06afe3a8444fc0004668591e8306bfb9968e79e\n// g() -> true\n// h(function): left(0x1122334400112233445566778899AABBCCDDEEFF42424242) -> 0x1122334400112233445566778899AABBCCDDEEFF\n"
        },
        "local_bool_assignment.sol": {
            "content": "contract C {\n    function f(bool a) public pure returns (bool x) {\n        bool b = a;\n        x = b;\n    }\n}\n// ----\n// f(bool): true -> true\n"
        },
        "if.sol": {
            "content": "contract C {\n    function f(bool condition) public returns (uint x) {\n        x = 23;\n        if (condition)\n            x = 42;\n    }\n    function g(bool condition) public returns (uint x) {\n        x = 0;\n        if (condition)\n            x = 42;\n        else\n            x = 23;\n    }\n    function h(bool condition) public returns (uint x) {\n        if (condition)\n            return 42;\n        x = 23;\n    }\n    function i(bool condition) public returns (uint x) {\n        if (condition)\n            x = 10;\n        else\n            return 23;\n        x = 42;\n    }\n    function j(uint a, uint b) public returns (uint x, uint y) {\n        x = 42;\n        if (a + b < 10)\n            x = a;\n        else\n            x = b;\n        y = 100;\n    }\n    function k(uint a, uint b) public returns (uint x, uint y) {\n        x = 42;\n        do {\n            if (a + b < 10)\n            {\n                if (a == b)\n                {\n                    x = 99; y = 99;\n                    break;\n                }\n                else\n                {\n                    x = a;\n                }\n            }\n            else\n            {\n                x = b;\n                if (a != b)\n                    y = 17;\n                else\n                    y = 13;\n                break;\n            }\n            y = 100;\n        } while(false);\n    }\n}\n// ----\n// f(bool): 0 -> 23\n// f(bool): 1 -> 42\n// g(bool): 0 -> 23\n// g(bool): 1 -> 42\n// h(bool): 0 -> 23\n// h(bool): 1 -> 42\n// i(bool): 0 -> 23\n// i(bool): 1 -> 42\n// j(uint256,uint256): 1, 3 -> 1, 100\n// j(uint256,uint256): 3, 1 -> 3, 100\n// j(uint256,uint256): 10, 23 -> 23, 100\n// j(uint256,uint256): 23, 10 -> 10, 100\n// k(uint256,uint256): 1, 3 -> 1, 100\n// k(uint256,uint256): 3, 1 -> 3, 100\n// k(uint256,uint256): 3, 3 -> 99, 99\n// k(uint256,uint256): 10, 23 -> 23, 17\n// k(uint256,uint256): 23, 10 -> 10, 17\n// k(uint256,uint256): 23, 23 -> 23, 13\n"
        },
        "short_circuit.sol": {
            "content": "contract C {\n    function or(uint x) public returns (bool t, uint y) {\n        t = (x == 0 || ((x = 8) > 0));\n        y = x;\n    }\n    function and(uint x) public returns (bool t, uint y) {\n        t = (x == 0 && ((x = 8) > 0));\n        y = x;\n    }\n}\n// ----\n// or(uint256): 0 -> true, 0\n// and(uint256): 0 -> true, 8\n// or(uint256): 1 -> true, 8\n// and(uint256): 1 -> false, 1\n"
        },
        "detect_mod_zero.sol": {
            "content": "contract C {\n    function f(uint a, uint b) public pure returns (uint x) {\n        x = a % b;\n    }\n    function g(uint8 a, uint8 b) public pure returns (uint8 x) {\n        x = a % b;\n    }\n}\n// ----\n// f(uint256,uint256): 10, 3 -> 1\n// f(uint256,uint256): 10, 2 -> 0\n// f(uint256,uint256): 11, 2 -> 1\n// f(uint256,uint256): 2, 2 -> 0\n// f(uint256,uint256): 1, 0 -> FAILURE, hex\"4e487b71\", 0x12\n// f(uint256,uint256): 0, 0 -> FAILURE, hex\"4e487b71\", 0x12\n// f(uint256,uint256): 0, 1 -> 0\n// g(uint8,uint8): 10, 3 -> 1\n// g(uint8,uint8): 10, 2 -> 0\n// g(uint8,uint8): 11, 2 -> 1\n// g(uint8,uint8): 2, 2 -> 0\n// g(uint8,uint8): 1, 0 -> FAILURE, hex\"4e487b71\", 0x12\n// g(uint8,uint8): 0, 0 -> FAILURE, hex\"4e487b71\", 0x12\n// g(uint8,uint8): 0, 1 -> 0\n"
        },
        "detect_mul_overflow.sol": {
            "content": "contract C {\n    function f(uint a, uint b) public pure returns (uint x) {\n        x = a * b;\n    }\n    function g(uint8 a, uint8 b) public pure returns (uint8 x) {\n        x = a * b;\n    }\n}\n// ----\n// f(uint256,uint256): 5, 6 -> 30\n// f(uint256,uint256): -1, 1 -> -1\n// f(uint256,uint256): -1, 2 -> FAILURE, hex\"4e487b71\", 0x11\n// f(uint256,uint256): 0x8000000000000000000000000000000000000000000000000000000000000000, 2 -> FAILURE, hex\"4e487b71\", 0x11\n// f(uint256,uint256): 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, 2 -> -2\n// f(uint256,uint256): 2, 0x8000000000000000000000000000000000000000000000000000000000000000 -> FAILURE, hex\"4e487b71\", 0x11\n// f(uint256,uint256): 2, 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -> -2\n// f(uint256,uint256): 0x0100000000000000000000000000000000, 0x0100000000000000000000000000000000 -> FAILURE, hex\"4e487b71\", 0x11\n// f(uint256,uint256): 0x0100000000000000000000000000000000, 0x00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -> 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000\n// f(uint256,uint256): 0x00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, 0x0100000000000000000000000000000000 -> 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000\n// f(uint256,uint256): 0x0100000000000000000000000000000001, 0x00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -> -1\n// f(uint256,uint256): 0x00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, 0x0100000000000000000000000000000001 -> -1\n// f(uint256,uint256): 0x0100000000000000000000000000000002, 0x00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -> FAILURE, hex\"4e487b71\", 0x11\n// f(uint256,uint256): 0x00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, 0x0100000000000000000000000000000002 -> FAILURE, hex\"4e487b71\", 0x11\n// f(uint256,uint256): -1, 0 -> 0\n// f(uint256,uint256): 0, -1 -> 0\n// g(uint8,uint8): 5, 6 -> 30\n// g(uint8,uint8): 0x80, 2 -> FAILURE, hex\"4e487b71\", 0x11\n// g(uint8,uint8): 0x7F, 2 -> 254\n// g(uint8,uint8): 2, 0x7F -> 254\n// g(uint8,uint8): 0x10, 0x10 -> FAILURE, hex\"4e487b71\", 0x11\n// g(uint8,uint8): 0x0F, 0x11 -> 0xFF\n// g(uint8,uint8): 0x0F, 0x12 -> FAILURE, hex\"4e487b71\", 0x11\n// g(uint8,uint8): 0x12, 0x0F -> FAILURE, hex\"4e487b71\", 0x11\n// g(uint8,uint8): 0xFF, 0 -> 0\n// g(uint8,uint8): 0, 0xFF -> 0\n"
        },
        "mapping_enum_key_getter.sol": {
            "content": "pragma abicoder               v2;\ncontract test {\n    enum E { A, B, C }\n    mapping(E => uint8) public table;\n    function set(E k, uint8 v) public {\n        table[k] = v;\n    }\n}\n// ----\n// table(uint8): 0 -> 0\n// table(uint8): 0x01 -> 0\n// table(uint8): 0xa7 -> FAILURE\n// set(uint8,uint8): 0x01, 0xa1 ->\n// table(uint8): 0 -> 0\n// table(uint8): 0x01 -> 0xa1\n// table(uint8): 0xa7 -> FAILURE\n// set(uint8,uint8): 0x00, 0xef ->\n// table(uint8): 0 -> 0xef\n// table(uint8): 0x01 -> 0xa1\n// table(uint8): 0xa7 -> FAILURE\n// set(uint8,uint8): 0x01, 0x05 ->\n// table(uint8): 0 -> 0xef\n// table(uint8): 0x01 -> 0x05\n// table(uint8): 0xa7 -> FAILURE\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
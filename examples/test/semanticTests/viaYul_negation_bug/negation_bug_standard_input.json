{
    "language": "Solidity",
    "sources": {
        "return.sol": {
            "content": "contract C {\n    function f() public pure returns (uint x) {\n        return 7;\n        x = 3;\n    }\n}\n// ----\n// f() -> 7\n"
        },
        "detect_add_overflow_signed.sol": {
            "content": "contract C {\n    function f(int a, int b) public pure returns (int x) {\n        x = a + b;\n    }\n    function g(int8 a, int8 b) public pure returns (int8 x) {\n        x = a + b;\n    }\n}\n// ----\n// f(int256,int256): 5, 6 -> 11\n// f(int256,int256): -2, 1 -> -1\n// f(int256,int256): -2, 2 -> 0\n// f(int256,int256): 2, -2 -> 0\n// f(int256,int256): -5, -6 -> -11\n// f(int256,int256): 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0, 0x0F -> 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n// f(int256,int256): 0x0F, 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0 -> 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n// f(int256,int256): 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, 1 -> FAILURE, hex\"4e487b71\", 0x11\n// f(int256,int256): 1, 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -> FAILURE, hex\"4e487b71\", 0x11\n// f(int256,int256): 0x8000000000000000000000000000000000000000000000000000000000000001, -1 -> 0x8000000000000000000000000000000000000000000000000000000000000000\n// f(int256,int256): -1, 0x8000000000000000000000000000000000000000000000000000000000000001 -> 0x8000000000000000000000000000000000000000000000000000000000000000\n// f(int256,int256): 0x8000000000000000000000000000000000000000000000000000000000000000, -1 -> FAILURE, hex\"4e487b71\", 0x11\n// f(int256,int256): -1, 0x8000000000000000000000000000000000000000000000000000000000000000 -> FAILURE, hex\"4e487b71\", 0x11\n// g(int8,int8): 5, 6 -> 11\n// g(int8,int8): -2, 1 -> -1\n// g(int8,int8): -2, 2 -> 0\n// g(int8,int8): 2, -2 -> 0\n// g(int8,int8): -5, -6 -> -11\n// g(int8,int8): 126, 1 -> 127\n// g(int8,int8): 1, 126 -> 127\n// g(int8,int8): 127, 1 -> FAILURE, hex\"4e487b71\", 0x11\n// g(int8,int8): 1, 127 -> FAILURE, hex\"4e487b71\", 0x11\n// g(int8,int8): -127, -1 -> -128\n// g(int8,int8): -1, -127 -> -128\n// g(int8,int8): -127, -2 -> FAILURE, hex\"4e487b71\", 0x11\n// g(int8,int8): -2, -127 -> FAILURE, hex\"4e487b71\", 0x11\n// g(int8,int8): -128, 0 -> -128\n// g(int8,int8): 0, -128 -> -128\n"
        },
        "function_entry_checks.sol": {
            "content": "contract C {\n    function f() public returns (uint) {\n    }\n    function g(uint x, uint y) public returns (uint) {\n    }\n    function h() public payable returns (uint) {\n    }\n    function i(bytes32 b) public returns (bytes32) {\n    }\n    function j(bool b) public returns (bool) {\n    }\n    function k(bytes32 b) public returns (bytes32) {\n    }\n    function s() public returns (uint256[] memory) {\n    }\n    function t(uint) public pure {\n    }\n}\n// ----\n// f() -> 0\n// g(uint256,uint256): 1, -2 -> 0\n// h(), 1 ether -> 0\n// i(bytes32), 1 ether: 2 -> FAILURE\n// i(bytes32): 2 -> 0\n// j(bool): true -> false\n// k(bytes32): 0x31 -> 0x00\n// s(): hex\"4200ef\" -> 0x20, 0\n// t(uint256) -> FAILURE\n"
        },
        "copy_struct_invalid_ir_bug.sol": {
            "content": "contract C {\n\tstruct Struct {\n\t\tfunction () external el;\n\t}\n\tStruct[] array;\n\tint externalCalled = 0;\n\n\tfunction ext() external {\n\t\texternalCalled++;\n\t}\n\n\tfunction f() public {\n\t\tarray.push(Struct(this.ext));\n\t\tarray.push(array[0]);\n\n\t\tarray[0].el();\n\t\tarray[1].el();\n\n\t\tassert(externalCalled == 2);\n\t}\n}\n// ----\n// f() ->\n// gas irOptimized: 113117\n// gas legacy: 112888\n// gas legacyOptimized: 112580\n"
        },
        "exp_literals_success.sol": {
            "content": "contract C {\n    function exp_2(uint y) public returns (uint) {\n        return 2**y;\n    }\n    function exp_minus_2(uint y) public returns (int) {\n        return (-2)**y;\n    }\n\n    function exp_uint_max(uint y) public returns (uint) {\n        return (2**256 - 1)**y;\n    }\n    function exp_int_max(uint y) public returns (int) {\n        return ((-2)**255)**y;\n    }\n\n    function exp_5(uint y) public returns (uint) {\n        return 5**y;\n    }\n    function exp_minus_5(uint y) public returns (int) {\n        return (-5)**y;\n    }\n\n    function exp_256(uint y) public returns (uint) {\n        return 256**y;\n    }\n    function exp_minus_256(uint y) public returns (int) {\n        return (-256)**y;\n    }\n\n}\n// ----\n// exp_2(uint256): 255 -> 57896044618658097711785492504343953926634992332820282019728792003956564819968\n// exp_minus_2(uint256): 255 -> -57896044618658097711785492504343953926634992332820282019728792003956564819968\n// exp_uint_max(uint256): 1 -> 115792089237316195423570985008687907853269984665640564039457584007913129639935\n// exp_int_max(uint256): 1 -> -57896044618658097711785492504343953926634992332820282019728792003956564819968\n// exp_5(uint256): 110 -> 77037197775489434122239117703397092741524065928615527809597551822662353515625\n// exp_minus_5(uint256): 109 -> -15407439555097886824447823540679418548304813185723105561919510364532470703125\n// exp_256(uint256): 31 -> 452312848583266388373324160190187140051835877600158453279131187530910662656\n// exp_minus_256(uint256): 31 -> -452312848583266388373324160190187140051835877600158453279131187530910662656\n"
        },
        "dirty_calldata_struct.sol": {
            "content": "pragma abicoder               v2;\ncontract C {\n    struct S {\n        uint16[] m;\n    }\n    function f(S calldata s) public pure returns (bool correct) {\n        int8 x = int8(int16(s.m[0]));\n        uint r;\n        assembly {\n            r := x\n        }\n        correct = r == 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80;\n    }\n}\n// ====\n// compileViaYul: true\n// ----\n// f((uint16[])): 0x20, 0x20, 0x01, 0x0180 -> true\n"
        },
        "simple_assignment.sol": {
            "content": "contract C {\n    function f(uint a, uint b) public pure returns (uint x, uint y) {\n        x = a;\n        y = b;\n    }\n}\n// ----\n// f(uint256,uint256): 5, 6 -> 5, 6\n"
        },
        "dirty_memory_dynamic_array.sol": {
            "content": "contract C {\n    function f() public pure returns (bool correct) {\n        uint8[] memory m = new uint8[](1);\n        assembly {\n            mstore(add(m, 32), 258)\n        }\n        uint8 x = m[0];\n        uint r;\n        assembly {\n            r := x\n        }\n        correct = (m[0] == 0x02) && (r == 0x02);\n    }\n}\n// ====\n// compileViaYul: true\n// ----\n// f() -> true\n"
        },
        "detect_div_overflow.sol": {
            "content": "contract C {\n    function f(uint a, uint b) public pure returns (uint x) {\n        x = a / b;\n    }\n    function g(int8 a, int8 b) public pure returns (int8 x) {\n        x = a / b;\n    }\n    function h(uint256 a, uint256 b) public pure returns (uint256 x) {\n        x = a / b;\n    }\n}\n// ----\n// f(uint256,uint256): 10, 3 -> 3\n// f(uint256,uint256): 1, 0 -> FAILURE, hex\"4e487b71\", 0x12\n// f(uint256,uint256): 0, 0 -> FAILURE, hex\"4e487b71\", 0x12\n// f(uint256,uint256): 0, 1 -> 0\n// g(int8,int8): -10, 3 -> -3\n// g(int8,int8): -10, -3 -> 3\n// g(int8,int8): -10, 0 -> FAILURE, hex\"4e487b71\", 0x12\n// g(int8,int8): -128, 1 -> -128\n// g(int8,int8): -128, -2 -> 64\n// g(int8,int8): -128, 2 -> -64\n// g(int8,int8): -128, -1 -> FAILURE, hex\"4e487b71\", 0x11\n// g(int8,int8): -127, -1 -> 127\n// h(uint256,uint256): 0x8000000000000000000000000000000000000000000000000000000000000000, -1 -> 0\n"
        },
        "detect_mul_overflow_signed.sol": {
            "content": "contract C {\n    function f(int a, int b) public pure returns (int x) {\n        x = a * b;\n    }\n    function g(int8 a, int8 b) public pure returns (int8 x) {\n        x = a * b;\n    }\n    function h(int160 a, int160 b) public pure returns (int160 x) {\n        x = a * b;\n    }\n}\n// ----\n// f(int256,int256): 5, 6 -> 30\n// f(int256,int256): -1, 1 -> -1\n// f(int256,int256): -1, 2 -> -2 # positive, positive #\n// f(int256,int256): 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, 2 -> 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE\n// f(int256,int256): 0x4000000000000000000000000000000000000000000000000000000000000000, 2 -> FAILURE, hex\"4e487b71\", 0x11\n// f(int256,int256): 2, 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -> 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE\n// f(int256,int256): 2, 0x4000000000000000000000000000000000000000000000000000000000000000 -> FAILURE, hex\"4e487b71\", 0x11\n// f(int256,int256): -1, 0x8000000000000000000000000000000000000000000000000000000000000000 -> FAILURE, hex\"4e487b71\", 0x11\n// f(int256,int256): 0x8000000000000000000000000000000000000000000000000000000000000000, -1 -> FAILURE, hex\"4e487b71\", 0x11\n// f(int256,int256): 2, 0x4000000000000000000000000000000000000000000000000000000000000000 -> FAILURE, hex\"4e487b71\", 0x11 # positive, negative #\n// f(int256,int256): 2, 0x4000000000000000000000000000000000000000000000000000000000000000 -> FAILURE, hex\"4e487b71\", 0x11 # positive, negative #\n// f(int256,int256): 2, 0x4000000000000000000000000000000000000000000000000000000000000000 -> FAILURE, hex\"4e487b71\", 0x11 # positive, negative #\n// f(int256,int256): 0x4000000000000000000000000000000000000000000000000000000000000000, -2 -> 0x8000000000000000000000000000000000000000000000000000000000000000\n// f(int256,int256): 0x4000000000000000000000000000000000000000000000000000000000000001, -2 -> FAILURE, hex\"4e487b71\", 0x11\n// f(int256,int256): 2, 0xC000000000000000000000000000000000000000000000000000000000000000 -> 0x8000000000000000000000000000000000000000000000000000000000000000\n// f(int256,int256): 2, 0xBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -> FAILURE, hex\"4e487b71\", 0x11 # negative, positive #\n// f(int256,int256): 2, 0xBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -> FAILURE, hex\"4e487b71\", 0x11 # negative, positive #\n// f(int256,int256): 2, 0xBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -> FAILURE, hex\"4e487b71\", 0x11 # negative, positive #\n// f(int256,int256): -2, 0x4000000000000000000000000000000000000000000000000000000000000000 -> 0x8000000000000000000000000000000000000000000000000000000000000000\n// f(int256,int256): -2, 0x4000000000000000000000000000000000000000000000000000000000000001 -> FAILURE, hex\"4e487b71\", 0x11\n// f(int256,int256): 0xC000000000000000000000000000000000000000000000000000000000000000, 2 -> 0x8000000000000000000000000000000000000000000000000000000000000000\n// f(int256,int256): 0xBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, 2 -> FAILURE, hex\"4e487b71\", 0x11 # negative, negative #\n// f(int256,int256): 0xBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, 2 -> FAILURE, hex\"4e487b71\", 0x11 # negative, negative #\n// f(int256,int256): 0xBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, 2 -> FAILURE, hex\"4e487b71\", 0x11 # negative, negative #\n// f(int256,int256): 0xC000000000000000000000000000000000000000000000000000000000000001, -2 -> 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE\n// f(int256,int256): 0xC000000000000000000000000000000000000000000000000000000000000000, -2 -> FAILURE, hex\"4e487b71\", 0x11\n// f(int256,int256): -2, 0xC000000000000000000000000000000000000000000000000000000000000001 -> 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE\n// f(int256,int256): -2, 0xC000000000000000000000000000000000000000000000000000000000000000 -> FAILURE, hex\"4e487b71\", 0x11 # small type #\n// f(int256,int256): -2, 0xC000000000000000000000000000000000000000000000000000000000000000 -> FAILURE, hex\"4e487b71\", 0x11 # small type #\n// f(int256,int256): -2, 0xC000000000000000000000000000000000000000000000000000000000000000 -> FAILURE, hex\"4e487b71\", 0x11 # small type #\n// g(int8,int8): 5, 6 -> 30\n// g(int8,int8): -1, 1 -> -1\n// g(int8,int8): -1, 2 -> -2 # positive, positive #\n// g(int8,int8): 63, 2 -> 126\n// g(int8,int8): 64, 2 -> FAILURE, hex\"4e487b71\", 0x11\n// g(int8,int8): 2, 63 -> 126\n// g(int8,int8): 2, 64 -> FAILURE, hex\"4e487b71\", 0x11 # positive, negative #\n// g(int8,int8): 2, 64 -> FAILURE, hex\"4e487b71\", 0x11 # positive, negative #\n// g(int8,int8): 2, 64 -> FAILURE, hex\"4e487b71\", 0x11 # positive, negative #\n// g(int8,int8): 64, -2 -> -128\n// g(int8,int8): 65, -2 -> FAILURE, hex\"4e487b71\", 0x11\n// g(int8,int8): 2, -64 -> -128\n// g(int8,int8): 2, -65 -> FAILURE, hex\"4e487b71\", 0x11 # negative, positive #\n// g(int8,int8): 2, -65 -> FAILURE, hex\"4e487b71\", 0x11 # negative, positive #\n// g(int8,int8): 2, -65 -> FAILURE, hex\"4e487b71\", 0x11 # negative, positive #\n// g(int8,int8): -2, 64 -> -128\n// g(int8,int8): -2, 65 -> FAILURE, hex\"4e487b71\", 0x11\n// g(int8,int8): -64, 2 -> -128\n// g(int8,int8): -65, 2 -> FAILURE, hex\"4e487b71\", 0x11 # negative, negative #\n// g(int8,int8): -65, 2 -> FAILURE, hex\"4e487b71\", 0x11 # negative, negative #\n// g(int8,int8): -65, 2 -> FAILURE, hex\"4e487b71\", 0x11 # negative, negative #\n// g(int8,int8): -63, -2 -> 126\n// g(int8,int8): -64, -2 -> FAILURE, hex\"4e487b71\", 0x11\n// g(int8,int8): -2, -63 -> 126\n// g(int8,int8): -2, -64 -> FAILURE, hex\"4e487b71\", 0x11\n// h(int160,int160): -1, 1 -> -1\n// h(int160,int160): 1, -1 -> -1\n// h(int160,int160): -1, 2 -> -2\n// h(int160,int160): 2, -1 -> -2\n// h(int160,int160): -1, 0xFFFFFFFFFFFFFFFFFFFFFFFF8000000000000000000000000000000000000000 -> FAILURE, hex\"4e487b71\", 0x11\n// h(int160,int160): -1, 0xFFFFFFFFFFFFFFFFFFFFFFFF8000000000000000000000000000000000000000 -> FAILURE, hex\"4e487b71\", 0x11\n// h(int160,int160): 0xFFFFFFFFFFFFFFFFFFFFFFFF8000000000000000000000000000000000000000, -1 -> FAILURE, hex\"4e487b71\", 0x11\n// h(int160,int160): 0x0000000000000000000000004000000000000000000000000000000000000000, -2 -> 0xFFFFFFFFFFFFFFFFFFFFFFFF8000000000000000000000000000000000000000\n// h(int160,int160): -2, 0x0000000000000000000000004000000000000000000000000000000000000000 -> 0xFFFFFFFFFFFFFFFFFFFFFFFF8000000000000000000000000000000000000000\n// h(int160,int160): -2, 0x0000000000000000000000004000000000000000000000000000000000000001 -> FAILURE, hex\"4e487b71\", 0x11\n// h(int160,int160): 0x0000000000000000000000004000000000000000000000000000000000000001, -2 -> FAILURE, hex\"4e487b71\", 0x11\n// h(int160,int160): 0x0000000000000000000000004000000000000000000000000000000000000001, 2 -> FAILURE, hex\"4e487b71\", 0x11\n// h(int160,int160): 2, 0x0000000000000000000000004000000000000000000000000000000000000001 -> FAILURE, hex\"4e487b71\", 0x11\n// h(int160,int160): 0x0000000000000000000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, 2 -> 0x0000000000000000000000007FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE\n// h(int160,int160): 2, 0x0000000000000000000000004000000000000000000000000000000000000001 -> FAILURE, hex\"4e487b71\", 0x11\n"
        },
        "msg_sender.sol": {
            "content": "contract C {\n    function test() public view returns (bool) {\n        address x;\n        assembly { x := caller() }\n        return x == msg.sender;\n    }\n}\n// ----\n// test() -> true\n"
        },
        "keccak.sol": {
            "content": "contract C {\n    function keccak1() public pure returns (bytes32) {\n\t\treturn keccak256(\"123\");\n    }\n    function keccak2() public pure returns (bytes32) {\n\t\tbytes memory a = \"123\";\n\t\treturn keccak256(a);\n    }\n}\n// ----\n// keccak1() -> 0x64e604787cbf194841e7b68d7cd28786f6c9a0a3ab9f8b0a0e87cb4387ab0107\n// keccak2() -> 0x64e604787cbf194841e7b68d7cd28786f6c9a0a3ab9f8b0a0e87cb4387ab0107\n"
        },
        "negation_bug.sol": {
            "content": "contract C {\n\tfunction f() public pure {\n\t\t-(int8(0));\n\t\tunchecked {\n\t\t\t// Used to incorrectly use the checked unary negation function and revert.\n\t\t\t(-(type(int8).min));\n\t\t}\n\t}\n}\n// ----\n// f() ->\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
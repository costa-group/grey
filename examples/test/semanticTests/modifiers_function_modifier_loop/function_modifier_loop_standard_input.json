{"language": "Solidity", "sources": {"function_modifier_loop.sol": {"content": "contract C {\n    modifier repeat(uint256 count) {\n        uint256 i;\n        for (i = 0; i < count; ++i) _;\n    }\n\n    function f() public repeat(10) returns (uint256 r) {\n        r += 1;\n    }\n}\n// via yul disabled because the return variables are\n// fresh variables each time, while in the old code generator,\n// they share a stack slot when the function is\n// invoked multiple times via `_`.\n\n// ====\n// compileViaYul: false\n// ----\n// f() -> 10\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}, "viaIR": true}}
{"language": "Solidity", "sources": {"different_call_type_transient.sol": {"content": "contract B {\n    uint256 transient public value;\n\n    function setValue(uint256 v) public {\n        value += v;\n    }\n}\n\ncontract A {\n    uint256 transient public value;\n\n    function delegateSetValue(address otherContract, uint256 v) public {\n        (bool success, ) = otherContract.delegatecall(abi.encodeWithSignature(\"setValue(uint256)\", v));\n        require(success);\n    }\n    function callSetValue(address otherContract, uint256 v) public {\n        (bool success, ) = otherContract.call(abi.encodeWithSignature(\"setValue(uint256)\", v));\n        require(success);\n    }\n    function staticSetValue(address otherContract, uint256 v) view public returns (bool) {\n        (bool success, ) = otherContract.staticcall(abi.encodeWithSignature(\"setValue(uint256)\", v));\n        return success;\n    }\n}\n\ncontract Test {\n    A a = new A();\n    B b = new B();\n\n    function testDelegate() public returns (uint256, uint256) {\n        a.delegateSetValue(address(b), 7);\n        return (a.value(), b.value());\n    }\n    function testCall() public returns (uint256, uint256) {\n        a.callSetValue(address(b), 8);\n        return (a.value(), b.value());\n    }\n    function testStatic() view public returns (bool) {\n        return a.staticSetValue(address(b), 0);\n    }\n}\n\n// ====\n// EVMVersion: >=cancun\n// ----\n// testDelegate() -> 7, 0\n// testCall() -> 0, 8\n// testStatic() -> false\n// gas irOptimized: 96900694\n// gas legacy: 96901136\n// gas legacyOptimized: 96900725\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}, "viaIR": true}}
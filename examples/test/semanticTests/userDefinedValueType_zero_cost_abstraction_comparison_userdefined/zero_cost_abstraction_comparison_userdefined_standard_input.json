{
    "language": "Solidity",
    "sources": {
        "zero_cost_abstraction_comparison_userdefined.sol": {
            "content": "// a test to compare the cost between using user defined value types and elementary type. See the\n// test zero_cost_abstraction_elementary.sol for comparison.\n\npragma abicoder v2;\n\ntype MyInt is int;\ncontract C {\n    int x;\n    function setX(MyInt _x) external {\n        x = MyInt.unwrap(_x);\n    }\n    function getX() view external returns (MyInt) {\n        return MyInt.wrap(x);\n    }\n    function add(MyInt a, MyInt b) pure external returns(MyInt) {\n        return MyInt.wrap(MyInt.unwrap(a) + MyInt.unwrap(b));\n    }\n}\n// ----\n// getX() -> 0\n// gas irOptimized: 23379\n// gas legacy: 23608\n// gas legacyOptimized: 23311\n// setX(int256): 5 ->\n// gas irOptimized: 43510\n// gas legacy: 43724\n// gas legacyOptimized: 43516\n// getX() -> 5\n// gas irOptimized: 23379\n// gas legacy: 23608\n// gas legacyOptimized: 23311\n// add(int256,int256): 200, 99 -> 299\n// gas irOptimized: 21764\n// gas legacy: 22523\n// gas legacyOptimized: 21813\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
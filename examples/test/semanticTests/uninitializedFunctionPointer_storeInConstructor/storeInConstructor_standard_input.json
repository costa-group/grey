{
    "language": "Solidity",
    "sources": {
        "store2.sol": {
            "content": "pragma solidity >=0.4.0 <0.9.0;\n\ncontract InvalidTest {\n\n  function() internal storedFn;\n  uint public x;\n\n  constructor() {\n    uint _y1;\n    uint _y2;\n    uint _y3;\n    uint _y4;\n    uint _y5;\n    uint _y6;\n    uint _y7;\n    uint _y8;\n    uint _y9;\n    uint _y10;\n    uint _y11;\n    uint _y12;\n    uint _y13;\n    uint _y14;\n\n\n    function() internal invalid;\n    storedFn = invalid;\n  }\n\n  function run() public {\n    // this did not always cause revert in the past\n    storedFn();\n  }\n\n  function z() public {\n      x++;\n  }\n}\n// ----\n// run() -> FAILURE, hex\"4e487b71\", 0x51\n"
        },
        "uninitialized_internal_storage_function_legacy.sol": {
            "content": "contract Test {\n\tfunction() internal x;\n\tfunction f() public returns (bool) {\n\t\tfunction() internal t = x;\n\t\t// The legacy codegen  would use a specific function\n\t\t// entry tag that always panics.\n\t\t// Via Yul, the internal dispatch will panic instead.\n\t\tuint z;\n\t\tassembly { z := t }\n\t\tassert(z != 0);\n\t\treturn true;\n\t}\n}\n// ====\n// compileViaYul: false\n// ----\n// f() -> true\n"
        },
        "storeInConstructor.sol": {
            "content": "contract InvalidTest {\n\n  function() internal storedFn;\n\n  bool flag;\n\n  constructor() {\n    function() internal invalid;\n    storedFn = invalid;\n  }\n  function f() public returns (uint) {\n    if (flag) return 2;\n    flag = true;\n    storedFn();\n  }\n}\n// ----\n// f() -> FAILURE, hex\"4e487b71\", 0x51\n// f() -> FAILURE, hex\"4e487b71\", 0x51\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
{"language": "Solidity", "sources": {"operator_parameter_cleanup.sol": {"content": "type U8 is uint8;\nusing {f as ~, add as +} for U8 global;\n\nfunction f(U8 x) pure returns (U8 z) {\n    assembly {\n        // NOTE: Not using shr so that the test works pre-constantinople too\n        z := div(x, 256)\n    }\n}\n\nfunction add(U8 x, U8 y) pure returns (U8 z) {\n    assembly {\n        z := add(div(x, 256), div(x, 256))\n    }\n}\n\ncontract C {\n    function testUnary() external pure returns (U8, U8) {\n        U8 a;\n        assembly {\n            a := 0x4200\n        }\n        // If the result is not 0, no cleanup was performed.\n        return (~a, f(a));\n    }\n\n    function testBinary() external pure returns (U8, U8) {\n        U8 a;\n        U8 b;\n        assembly {\n            a := 0x4200\n            b := 0x4200\n        }\n        // If the result is not 0, no cleanup was performed.\n        return (a + b, add(a, b));\n    }\n}\n// ----\n// testUnary() -> 0x42, 0x42\n// testBinary() -> 0x84, 0x84\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}, "viaIR": true}}
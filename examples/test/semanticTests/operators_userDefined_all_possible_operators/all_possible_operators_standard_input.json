{
    "language": "Solidity",
    "sources": {
        "operator_definition_shadowing_builtin_keccak256.sol": {
            "content": "type Int is int16;\n\nusing {keccak256 as +} for Int global;\n\nfunction keccak256(Int a, Int b) pure returns (Int) {\n    return Int.wrap(Int.unwrap(a) + Int.unwrap(b));\n}\n\ncontract C {\n    function test() public returns (Int) {\n        return Int.wrap(3) + Int.wrap(4);\n    }\n}\n// ----\n// test() -> 7\n"
        },
        "all_possible_operators.sol": {
            "content": "type Int is int8;\nusing {\n    bitor as |, bitand as &, bitxor as ^, bitnot as ~,\n    add as +, sub as -, unsub as -, mul as *, div as /, mod as %,\n    eq as ==, noteq as !=, lt as <, gt as >, leq as <=, geq as >=\n} for Int global;\n\nfunction bitor(Int x, Int y) pure returns (Int) { return Int.wrap(Int.unwrap(x) | Int.unwrap(y)); }\nfunction bitand(Int x, Int y) pure returns (Int) { return Int.wrap(Int.unwrap(x) & Int.unwrap(y)); }\nfunction bitxor(Int x, Int y) pure returns (Int) { return Int.wrap(Int.unwrap(x) ^ Int.unwrap(y)); }\nfunction bitnot(Int x) pure returns (Int) { return Int.wrap(~Int.unwrap(x)); }\n\nfunction add(Int x, Int y) pure returns (Int) { return Int.wrap(Int.unwrap(x) + Int.unwrap(y)); }\nfunction sub(Int x, Int y) pure returns (Int) { return Int.wrap(Int.unwrap(x) - Int.unwrap(y)); }\nfunction unsub(Int x) pure returns (Int) { return Int.wrap(-Int.unwrap(x)); }\nfunction mul(Int x, Int y) pure returns (Int) { return Int.wrap(Int.unwrap(x) * Int.unwrap(y)); }\nfunction div(Int x, Int y) pure returns (Int) { return Int.wrap(Int.unwrap(x) / Int.unwrap(y)); }\nfunction mod(Int x, Int y) pure returns (Int) { return Int.wrap(Int.unwrap(x) % Int.unwrap(y)); }\n\nfunction eq(Int x, Int y) pure returns (bool) { return Int.unwrap(x) == Int.unwrap(y); }\nfunction noteq(Int x, Int y) pure returns (bool) { return Int.unwrap(x) != Int.unwrap(y); }\nfunction lt(Int x, Int y) pure returns (bool) { return Int.unwrap(x) < Int.unwrap(y); }\nfunction gt(Int x, Int y) pure returns (bool) { return Int.unwrap(x) > Int.unwrap(y); }\nfunction leq(Int x, Int y) pure returns (bool) { return Int.unwrap(x) <= Int.unwrap(y); }\nfunction geq(Int x, Int y) pure returns (bool) { return Int.unwrap(x) >= Int.unwrap(y); }\n\ncontract C {\n    Int constant ZERO = Int.wrap(0);\n    Int constant ONE = Int.wrap(1);\n    Int constant TWO = Int.wrap(2);\n    Int constant THREE = Int.wrap(3);\n    Int constant SIX = Int.wrap(6);\n\n    function testBitwise() public pure {\n        assert(Int.unwrap(ONE | TWO) == 3);\n        assert(Int.unwrap(ONE | ZERO) == 1);\n\n        assert(Int.unwrap(ONE & THREE) == 1);\n        assert(Int.unwrap(ONE & ONE) == 1);\n\n        assert(Int.unwrap(TWO ^ TWO) == 0);\n        assert(Int.unwrap(TWO ^ ONE) == 3);\n\n        assert(Int.unwrap(~ZERO) == -1);\n        assert(Int.unwrap(~ONE) == -2);\n        assert(Int.unwrap(~TWO) == -3);\n    }\n\n    function testArithmetic() public pure {\n        assert(Int.unwrap(ONE + TWO) == 3);\n        assert(Int.unwrap(ONE + ZERO) == 1);\n\n        assert(Int.unwrap(TWO - ONE) == 1);\n        assert(Int.unwrap(THREE - THREE) == 0);\n\n        assert(Int.unwrap(-TWO) == -2);\n        assert(Int.unwrap(-ZERO) == 0);\n\n        assert(Int.unwrap(ONE * ONE) == 1);\n        assert(Int.unwrap(THREE * TWO) == 6);\n\n        assert(Int.unwrap(SIX / TWO) == 3);\n        assert(Int.unwrap(THREE / TWO) == 1);\n\n        assert(Int.unwrap(SIX % TWO) == 0);\n        assert(Int.unwrap(THREE % TWO) == 1);\n    }\n\n    function testComparison() public pure {\n        assert((ONE == ONE) == true);\n        assert((ONE == TWO) == false);\n\n        assert((ONE != ONE) == false);\n        assert((ONE != TWO) == true);\n\n        assert((ONE < TWO) == true);\n        assert((TWO < ONE) == false);\n\n        assert((ONE <= TWO) == true);\n        assert((TWO <= ONE) == false);\n\n        assert((ONE > TWO) == false);\n        assert((TWO > ONE) == true);\n\n        assert((ONE >= TWO) == false);\n        assert((TWO >= ONE) == true);\n    }\n}\n// ----\n// testBitwise() ->\n// testArithmetic() ->\n// testComparison() ->\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
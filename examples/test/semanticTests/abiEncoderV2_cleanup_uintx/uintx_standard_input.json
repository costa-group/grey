{
    "language": "Solidity",
    "sources": {
        "uintx.sol": {
            "content": "pragma abicoder               v2;\n\ncontract C {\n    function ggg8(uint8 x) external pure returns (uint256) {\n        return x;\n    }\n    function gg16(uint16 x) external pure returns (uint256) {\n        return x;\n    }\n    function gg32(uint32 x) external pure returns (uint256) {\n        return x;\n    }\n    function gg64(uint64 x) external pure returns (uint256) {\n        return x;\n    }\n    function g128(uint128 x) external pure returns (uint256) {\n        return x;\n    }\n    function f8(uint256 a) external view returns (uint256) {\n        uint8 x = 0;\n        assembly { x := a }\n        return this.ggg8(x);\n    }\n    function f16(uint256 a) external view returns (uint256) {\n        uint16 x = 0;\n        assembly { x := a }\n        return this.gg16(x);\n    }\n    function f32(uint256 a) external view returns (uint256) {\n        uint32 x = 0;\n        assembly { x := a }\n        return this.gg32(x);\n    }\n    function f64(uint256 a) external view returns (uint256) {\n        uint64 x = 0;\n        assembly { x := a }\n        return this.gg64(x);\n    }\n    function f128(uint256 a) external view returns (uint256) {\n        uint128 x = 0;\n        assembly { x := a }\n        return this.g128(x);\n    }\n}\n// ----\n// f8(uint256): 0 -> 0\n// ggg8(uint8): 0 -> 0 # test validation as well as sanity check #\n// f8(uint256): 1 -> 1\n// ggg8(uint8): 1 -> 1\n// f8(uint256): 0xFE -> 0xFE\n// ggg8(uint8): 0xFE -> 0xFE\n// f8(uint256): 0xFF -> 0xFF\n// ggg8(uint8): 0xFF -> 0xFF\n// f8(uint256): 0x0100 -> 0x00\n// ggg8(uint8): 0x0100 -> FAILURE\n// f8(uint256): 0x0101 -> 0x01\n// ggg8(uint8): 0x0101 -> FAILURE\n// f8(uint256): -1 -> 0xFF\n// ggg8(uint8): -1 -> FAILURE\n// f16(uint256): 0 -> 0\n// gg16(uint16): 0 -> 0\n// f16(uint256): 1 -> 1\n// gg16(uint16): 1 -> 1\n// f16(uint256): 0xFFFE -> 0xFFFE\n// gg16(uint16): 0xFFFE -> 0xFFFE\n// f16(uint256): 0xFFFF -> 0xFFFF\n// gg16(uint16): 0xFFFF -> 0xFFFF\n// f16(uint256): 0x010000 -> 0x0000\n// gg16(uint16): 0x010000 -> FAILURE\n// f16(uint256): 0x010001 -> 0x0001\n// gg16(uint16): 0x010001 -> FAILURE\n// f16(uint256): -1 -> 0xFFFF\n// gg16(uint16): -1 -> FAILURE\n// f32(uint256): 0 -> 0\n// gg32(uint32): 0 -> 0\n// f32(uint256): 1 -> 1\n// gg32(uint32): 1 -> 1\n// f32(uint256): 0xFFFFFFFE -> 0xFFFFFFFE\n// gg32(uint32): 0xFFFFFFFE -> 0xFFFFFFFE\n// f32(uint256): 0xFFFFFFFF -> 0xFFFFFFFF\n// gg32(uint32): 0xFFFFFFFF -> 0xFFFFFFFF\n// f32(uint256): 0x0100000000 -> 0x00000000\n// gg32(uint32): 0x0100000000 -> FAILURE\n// f32(uint256): 0x0100000001 -> 0x00000001\n// gg32(uint32): 0x0100000001 -> FAILURE\n// f32(uint256): -1 -> 0xFFFFFFFF\n// gg32(uint32): -1 -> FAILURE\n// f64(uint256): 0 -> 0\n// gg64(uint64): 0 -> 0\n// f64(uint256): 1 -> 1\n// gg64(uint64): 1 -> 1\n// f64(uint256): 0xFFFFFFFFFFFFFFFE -> 0xFFFFFFFFFFFFFFFE\n// gg64(uint64): 0xFFFFFFFFFFFFFFFE -> 0xFFFFFFFFFFFFFFFE\n// f64(uint256): 0xFFFFFFFFFFFFFFFF -> 0xFFFFFFFFFFFFFFFF\n// gg64(uint64): 0xFFFFFFFFFFFFFFFF -> 0xFFFFFFFFFFFFFFFF\n// f64(uint256): 0x010000000000000000 -> 0x0000000000000000\n// gg64(uint64): 0x010000000000000000 -> FAILURE\n// f64(uint256): 0x010000000000000001 -> 0x0000000000000001\n// gg64(uint64): 0x010000000000000001 -> FAILURE\n// f64(uint256): -1 -> 0xFFFFFFFFFFFFFFFF\n// gg64(uint64): -1 -> FAILURE\n// f128(uint256): 0 -> 0\n// g128(uint128): 0 -> 0\n// f128(uint256): 1 -> 1\n// g128(uint128): 1 -> 1\n// f128(uint256): 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE -> 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE\n// g128(uint128): 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE -> 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE\n// f128(uint256): 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -> 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n// g128(uint128): 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -> 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n// f128(uint256): 0x0100000000000000000000000000000000 -> 0x00000000000000000000000000000000\n// g128(uint128): 0x0100000000000000000000000000000000 -> FAILURE\n// f128(uint256): 0x0100000000000000000000000000000001 -> 0x00000000000000000000000000000001\n// g128(uint128): 0x0100000000000000000000000000000001 -> FAILURE\n// f128(uint256): -1 -> 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n// g128(uint128): -1 -> FAILURE\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
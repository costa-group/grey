{
    "language": "Solidity",
    "sources": {
        "simple_struct.sol": {
            "content": "pragma abicoder               v2;\n\ncontract C {\n    struct S { uint8 a; bytes1 b; }\n    function gg(S calldata s) external pure returns (bytes memory) {\n        s.a; s.b; // only this will validate.\n        return msg.data;\n    }\n    function f(uint256 a, bytes32 b) public returns (bytes memory) {\n        S memory s = S(2,0x02);\n        assembly {\n            mstore(s, a)\n            mstore(add(s, 0x20), b)\n        }\n        return this.gg(s);\n    }\n}\n// ====\n// EVMVersion: >homestead\n// ----\n// f(uint256,bytes32): 1, left(0x01) -> 0x20, 0x44, hex\"b63240b0\", 1, left(0x01), hex\"00000000000000000000000000000000000000000000000000000000\"\n// gg((uint8,bytes1)): 1, left(0x01) -> 0x20, 0x44, hex\"b63240b0\", 1, left(0x01), hex\"00000000000000000000000000000000000000000000000000000000\"\n// f(uint256,bytes32): 0x0101, left(0x0101) -> 0x20, 0x44, hex\"b63240b0\", 1, left(0x01), hex\"00000000000000000000000000000000000000000000000000000000\"\n// gg((uint8,bytes1)): 0x0101, left(0x0101) -> FAILURE\n"
        },
        "bool.sol": {
            "content": "pragma abicoder               v2;\n\ncontract C {\n    function gggg(bool x) external pure returns (bool) {\n        return x;\n    }\n    function f(uint256 a) external view returns (bool) {\n        bool x = false;\n        assembly { x := a }\n        return this.gggg(x);\n    }\n}\n// ----\n// f(uint256): 0 -> false\n// gggg(bool): 0 -> false # test validation as well as sanity check #\n// f(uint256): 1 -> true\n// gggg(bool): 1 -> true\n// f(uint256): 2 -> true\n// gggg(bool): 2 -> FAILURE\n// f(uint256): 0x1000 -> true\n// gggg(bool): 0x1000 -> FAILURE\n"
        },
        "intx.sol": {
            "content": "pragma abicoder               v2;\n\ncontract C {\n    function ggg8(int8 x) external pure returns (int256) {\n        return x;\n    }\n    function gg16(int16 x) external pure returns (int256) {\n        return x;\n    }\n    function gg32(int32 x) external pure returns (int256) {\n        return x;\n    }\n    function gg64(int64 x) external pure returns (int256) {\n        return x;\n    }\n    function g128(int128 x) external pure returns (int256) {\n        return x;\n    }\n    function f8(int256 a) external view returns (int256) {\n        int8 x = 0;\n        assembly { x := a }\n        return this.ggg8(x);\n    }\n    function f16(int256 a) external view returns (int256) {\n        int16 x = 0;\n        assembly { x := a }\n        return this.gg16(x);\n    }\n    function f32(int256 a) external view returns (int256) {\n        int32 x = 0;\n        assembly { x := a }\n        return this.gg32(x);\n    }\n    function f64(int256 a) external view returns (int256) {\n        int64 x = 0;\n        assembly { x := a }\n        return this.gg64(x);\n    }\n    function f128(int256 a) external view returns (int256) {\n        int128 x = 0;\n        assembly { x := a }\n        return this.g128(x);\n    }\n}\n// ----\n// f8(int256): 0 -> 0\n// ggg8(int8): 0 -> 0 # test validation as well as sanity check #\n// f8(int256): 1 -> 1\n// ggg8(int8): 1 -> 1\n// f8(int256): -1 -> -1\n// ggg8(int8): -1 -> -1\n// f8(int256): 0x7F -> 0x7F\n// ggg8(int8): 0x7F -> 0x7F\n// f8(int256): 0x80 -> -128\n// ggg8(int8): 0x80 -> FAILURE\n// f8(int256): 0xFE -> -2\n// ggg8(int8): 0xFE -> FAILURE\n// f8(int256): 0xFF -> -1\n// ggg8(int8): 0xFF -> FAILURE\n// f8(int256): 0x0100 -> 0x00\n// ggg8(int8): 0x0100 -> FAILURE\n// f8(int256): 0x0101 -> 0x01\n// ggg8(int8): 0x0101 -> FAILURE\n// f8(int256): 0x01FF -> -1\n// ggg8(int8): 0x01FF -> FAILURE\n// f8(int256): 0x01FE -> -2\n// ggg8(int8): 0x01FE -> FAILURE\n// f16(int256): 0 -> 0\n// gg16(int16): 0 -> 0\n// f16(int256): 1 -> 1\n// gg16(int16): 1 -> 1\n// f16(int256): -1 -> -1\n// gg16(int16): -1 -> -1\n// f16(int256): 0x7FFF -> 0x7FFF\n// gg16(int16): 0x7FFF -> 0x7FFF\n// f16(int256): 0x8000 -> -32768\n// gg16(int16): 0x8000 -> FAILURE\n// f16(int256): 0xFFFE -> -2\n// gg16(int16): 0xFFFE -> FAILURE\n// f16(int256): 0xFFFF -> -1\n// gg16(int16): 0xFFFF -> FAILURE\n// f16(int256): 0x010000 -> 0x00\n// gg16(int16): 0x010000 -> FAILURE\n// f16(int256): 0x010001 -> 0x01\n// gg16(int16): 0x010001 -> FAILURE\n// f16(int256): 0x01FFFF -> -1\n// gg16(int16): 0x01FFFF -> FAILURE\n// f16(int256): 0x01FFFE -> -2\n// gg16(int16): 0x01FFFE -> FAILURE\n// f32(int256): 0 -> 0\n// gg32(int32): 0 -> 0\n// f32(int256): 1 -> 1\n// gg32(int32): 1 -> 1\n// f32(int256): -1 -> -1\n// gg32(int32): -1 -> -1\n// f32(int256): 0x7FFFFFFF -> 0x7FFFFFFF\n// gg32(int32): 0x7FFFFFFF -> 0x7FFFFFFF\n// f32(int256): 0x80000000 -> -2147483648\n// gg32(int32): 0x80000000 -> FAILURE\n// f32(int256): 0xFFFFFFFE -> -2\n// gg32(int32): 0xFFFFFFFE -> FAILURE\n// f32(int256): 0xFFFFFFFF -> -1\n// gg32(int32): 0xFFFFFFFF -> FAILURE\n// f32(int256): 0x0100000000 -> 0x00\n// gg32(int32): 0x0100000000 -> FAILURE\n// f32(int256): 0x0100000001 -> 0x01\n// gg32(int32): 0x0100000001 -> FAILURE\n// f32(int256): 0x01FFFFFFFF -> -1\n// gg32(int32): 0x01FFFFFFFF -> FAILURE\n// f32(int256): 0x01FFFFFFFE -> -2\n// gg32(int32): 0x01FFFFFFFE -> FAILURE\n// f64(int256): 0 -> 0\n// gg64(int64): 0 -> 0\n// f64(int256): 1 -> 1\n// gg64(int64): 1 -> 1\n// f64(int256): -1 -> -1\n// gg64(int64): -1 -> -1\n// f64(int256): 0x7FFFFFFFFFFFFFFF -> 0x7FFFFFFFFFFFFFFF\n// gg64(int64): 0x7FFFFFFFFFFFFFFF -> 0x7FFFFFFFFFFFFFFF\n// f64(int256): 0x8000000000000000 -> -9223372036854775808\n// gg64(int64): 0x8000000000000000 -> FAILURE\n// f64(int256): 0xFFFFFFFFFFFFFFFE -> -2\n// gg64(int64): 0xFFFFFFFFFFFFFFFE -> FAILURE\n// f64(int256): 0xFFFFFFFFFFFFFFFF -> -1\n// gg64(int64): 0xFFFFFFFFFFFFFFFF -> FAILURE\n// f64(int256): 0x010000000000000000 -> 0x00\n// gg64(int64): 0x010000000000000000 -> FAILURE\n// f64(int256): 0x010000000000000001 -> 0x01\n// gg64(int64): 0x010000000000000001 -> FAILURE\n// f64(int256): 0x01FFFFFFFFFFFFFFFF -> -1\n// gg64(int64): 0x01FFFFFFFFFFFFFFFF -> FAILURE\n// f64(int256): 0x01FFFFFFFFFFFFFFFE -> -2\n// gg64(int64): 0x01FFFFFFFFFFFFFFFE -> FAILURE\n// f128(int256): 0 -> 0\n// g128(int128): 0 -> 0\n// f128(int256): 1 -> 1\n// g128(int128): 1 -> 1\n// f128(int256): -1 -> -1\n// g128(int128): -1 -> -1\n// f128(int256): 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -> 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n// g128(int128): 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -> 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n// f128(int256): 0x80000000000000000000000000000000 -> -170141183460469231731687303715884105728\n// g128(int128): 0x80000000000000000000000000000000 -> FAILURE\n// f128(int256): 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE -> -2\n// g128(int128): 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE -> FAILURE\n// f128(int256): 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -> -1\n// g128(int128): 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -> FAILURE\n// f128(int256): 0x0100000000000000000000000000000000 -> 0x00\n// g128(int128): 0x0100000000000000000000000000000000 -> FAILURE\n// f128(int256): 0x0100000000000000000000000000000001 -> 0x01\n// g128(int128): 0x0100000000000000000000000000000001 -> FAILURE\n// f128(int256): 0x01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -> -1\n// g128(int128): 0x01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -> FAILURE\n// f128(int256): 0x01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE -> -2\n// g128(int128): 0x01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE -> FAILURE\n"
        },
        "bytesx.sol": {
            "content": "pragma abicoder               v2;\n\ncontract C {\n    function gg1(bytes1 x) external pure returns (bytes32) {\n        return x;\n    }\n    function f1(bytes32 a) external view returns (bytes32) {\n        bytes1 x;\n        assembly { x := a }\n        return this.gg1(x);\n    }\n    function gg2(bytes2 x) external pure returns (bytes32) {\n        return x;\n    }\n    function f2(bytes32 a) external view returns (bytes32) {\n        bytes2 x;\n        assembly { x := a }\n        return this.gg2(x);\n    }\n    function gg4(bytes4 x) external pure returns (bytes32) {\n        return x;\n    }\n    function f4(bytes32 a) external view returns (bytes32) {\n        bytes4 x;\n        assembly { x := a }\n        return this.gg4(x);\n    }\n    function gg8(bytes8 x) external pure returns (bytes32) {\n        return x;\n    }\n    function f8(bytes32 a) external view returns (bytes32) {\n        bytes8 x;\n        assembly { x := a }\n        return this.gg8(x);\n    }\n    function g16(bytes16 x) external pure returns (bytes32) {\n        return x;\n    }\n    function f16(bytes32 a) external view returns (bytes32) {\n        bytes16 x;\n        assembly { x := a }\n        return this.g16(x);\n    }\n}\n// ----\n// f1(bytes32): left(0) -> left(0)\n// gg1(bytes1): left(0) -> left(0) # test validation as well as sanity check #\n// f1(bytes32): left(1) -> left(1)\n// gg1(bytes1): left(1) -> left(1)\n// f1(bytes32): left(0xFE) -> left(0xFE)\n// gg1(bytes1): left(0xFE) -> left(0xFE)\n// f1(bytes32): left(0xFF) -> left(0xFF)\n// gg1(bytes1): left(0xFF) -> left(0xFF)\n// f1(bytes32): left(0x0001) -> left(0x00)\n// gg1(bytes1): left(0x0001) -> FAILURE\n// f1(bytes32): left(0x0101) -> left(0x01)\n// gg1(bytes1): left(0x0101) -> FAILURE\n// f1(bytes32): -1 -> left(0xFF)\n// gg1(bytes1): -1 -> FAILURE\n// f2(bytes32): left(0) -> left(0)\n// gg2(bytes2): left(0) -> left(0)\n// f2(bytes32): left(1) -> left(1)\n// gg2(bytes2): left(1) -> left(1)\n// f2(bytes32): left(0xFFFE) -> left(0xFFFE)\n// gg2(bytes2): left(0xFFFE) -> left(0xFFFE)\n// f2(bytes32): left(0xFFFF) -> left(0xFFFF)\n// gg2(bytes2): left(0xFFFF) -> left(0xFFFF)\n// f2(bytes32): left(0x000001) -> left(0x00)\n// gg2(bytes2): left(0x000001) -> FAILURE\n// f2(bytes32): left(0x010001) -> left(0x01)\n// gg2(bytes2): left(0x010001) -> FAILURE\n// f2(bytes32): -1 -> left(0xFFFF)\n// gg2(bytes2): -1 -> FAILURE\n// f4(bytes32): left(0) -> left(0)\n// gg4(bytes4): left(0) -> left(0)\n// f4(bytes32): left(1) -> left(1)\n// gg4(bytes4): left(1) -> left(1)\n// f4(bytes32): left(0xFFFFFFFE) -> left(0xFFFFFFFE)\n// gg4(bytes4): left(0xFFFFFFFE) -> left(0xFFFFFFFE)\n// f4(bytes32): left(0xFFFFFFFF) -> left(0xFFFFFFFF)\n// gg4(bytes4): left(0xFFFFFFFF) -> left(0xFFFFFFFF)\n// f4(bytes32): left(0x0000000001) -> left(0x00)\n// gg4(bytes4): left(0x0000000001) -> FAILURE\n// f4(bytes32): left(0x0100000001) -> left(0x01)\n// gg4(bytes4): left(0x0100000001) -> FAILURE\n// f4(bytes32): -1 -> left(0xFFFFFFFF)\n// gg4(bytes4): -1 -> FAILURE\n// f8(bytes32): left(0) -> left(0)\n// gg8(bytes8): left(0) -> left(0)\n// f8(bytes32): left(1) -> left(1)\n// gg8(bytes8): left(1) -> left(1)\n// f8(bytes32): left(0xFFFFFFFFFFFFFFFE) -> left(0xFFFFFFFFFFFFFFFE)\n// gg8(bytes8): left(0xFFFFFFFFFFFFFFFE) -> left(0xFFFFFFFFFFFFFFFE)\n// f8(bytes32): left(0xFFFFFFFFFFFFFFFF) -> left(0xFFFFFFFFFFFFFFFF)\n// gg8(bytes8): left(0xFFFFFFFFFFFFFFFF) -> left(0xFFFFFFFFFFFFFFFF)\n// f8(bytes32): left(0x000000000000000001) -> left(0x00)\n// gg8(bytes8): left(0x000000000000000001) -> FAILURE\n// f8(bytes32): left(0x010000000000000001) -> left(0x01)\n// gg8(bytes8): left(0x010000000000000001) -> FAILURE\n// f8(bytes32): -1 -> left(0xFFFFFFFFFFFFFFFF)\n// gg8(bytes8): -1 -> FAILURE\n// f16(bytes32): left(0) -> left(0)\n// g16(bytes16): left(0) -> left(0)\n// f16(bytes32): left(1) -> left(1)\n// g16(bytes16): left(1) -> left(1)\n// f16(bytes32): left(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE) -> left(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE)\n// g16(bytes16): left(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE) -> left(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE)\n// f16(bytes32): left(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) -> left(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n// g16(bytes16): left(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) -> left(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n// f16(bytes32): left(0x0000000000000000000000000000000001) -> left(0x00)\n// g16(bytes16): left(0x0000000000000000000000000000000001) -> FAILURE\n// f16(bytes32): left(0x0100000000000000000000000000000001) -> left(0x01)\n// g16(bytes16): left(0x0100000000000000000000000000000001) -> FAILURE\n// f16(bytes32): -1 -> left(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n// g16(bytes16): -1 -> FAILURE\n"
        },
        "address.sol": {
            "content": "pragma abicoder               v2;\n\ncontract C {\n    function g(address x) external pure returns (uint256 r) {\n        assembly { r := x }\n    }\n    function f(uint256 a) external view returns (uint256) {\n        address x;\n        assembly { x := a }\n        return this.g(x);\n    }\n}\n// ----\n// f(uint256): 0 -> 0\n// g(address): 0 -> 0 # test validation as well as sanity check #\n// f(uint256): 1 -> 1\n// g(address): 1 -> 1\n// f(uint256): 2 -> 2\n// g(address): 2 -> 2\n// f(uint256): 0xabcdef0123456789abcdef0123456789abcdefff -> 0xabcdef0123456789abcdef0123456789abcdefff\n// g(address): 0xabcdef0123456789abcdef0123456789abcdefff -> 0xabcdef0123456789abcdef0123456789abcdefff\n// f(uint256): 0xffffffffffffffffffffffffffffffffffffffff -> 0xffffffffffffffffffffffffffffffffffffffff\n// g(address): 0xffffffffffffffffffffffffffffffffffffffff -> 0xffffffffffffffffffffffffffffffffffffffff\n// f(uint256): 0x010000000000000000000000000000000000000000 -> 0\n// g(address): 0x010000000000000000000000000000000000000000 -> FAILURE\n// f(uint256): 0x01abcdef0123456789abcdef0123456789abcdefff -> 0xabcdef0123456789abcdef0123456789abcdefff\n// g(address): 0x01abcdef0123456789abcdef0123456789abcdefff -> FAILURE\n// f(uint256): 0x01ffffffffffffffffffffffffffffffffffffffff -> 0xffffffffffffffffffffffffffffffffffffffff\n// g(address): 0x01ffffffffffffffffffffffffffffffffffffffff -> FAILURE\n// f(uint256): -1 -> 0xffffffffffffffffffffffffffffffffffffffff\n// g(address): -1 -> FAILURE\n"
        },
        "cleanup.sol": {
            "content": "pragma abicoder               v2;\n\ncontract C {\n    function f(uint16 a, int16 b, address c, bytes3 d, bool e)\n            public pure returns (uint v, uint w, uint x, uint y, uint z) {\n        assembly { v := a  w := b x := c y := d z := e}\n    }\n}\n// ----\n// f(uint16,int16,address,bytes3,bool): 1, 2, 3, \"a\", true -> 1, 2, 3, \"a\", true\n// f(uint16,int16,address,bytes3,bool): 0xffffff, 0x1ffff, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, \"abcd\", 1 -> FAILURE\n// f(uint16,int16,address,bytes3,bool): 0xffffff, 0, 0, \"bcd\", 1 -> FAILURE\n// f(uint16,int16,address,bytes3,bool): 0, 0x1ffff, 0, \"ab\", 1 -> FAILURE\n// f(uint16,int16,address,bytes3,bool): 0, 0, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, \"ad\", 1 -> FAILURE\n// f(uint16,int16,address,bytes3,bool): 0, 0, 0, \"abcd\", 1 -> FAILURE\n// f(uint16,int16,address,bytes3,bool): 0, 0, 0, \"abc\", 2 -> FAILURE\n"
        },
        "function.sol": {
            "content": "pragma abicoder               v2;\n\ncontract C {\n    struct S { function() external f; }\n    function ggg(function() external x) external pure returns (uint256 r) {\n        assembly { r := calldataload(4) }\n    }\n    function h(S calldata x) external pure returns (uint256 r) {\n        x.f; // validation only happens here\n        assembly { r := calldataload(4) }\n    }\n    function dummy() external {}\n    function ffff(uint256 a) external view returns (uint256, uint256) {\n        S memory s = S(this.dummy);\n        assembly { mstore(s, a) }\n        return (this.ggg(s.f), this.h(s));\n    }\n}\n// ----\n// ffff(uint256): 0 -> 0, 0\n// ggg(function): 0 -> 0\n// ffff(uint256): \"01234567890123456789abcd\" -> \"01234567890123456789abcd\", \"01234567890123456789abcd\"\n// ggg(function): \"01234567890123456789abcd\" -> \"01234567890123456789abcd\"\n// h((function)): \"01234567890123456789abcd\" -> \"01234567890123456789abcd\"\n// h((function)): 0 -> 0\n// ffff(uint256): \"01234567890123456789abcdX\" -> \"01234567890123456789abcd\", \"01234567890123456789abcd\"\n// ggg(function): \"01234567890123456789abcdX\" -> FAILURE\n// h((function)): \"01234567890123456789abcdX\" -> FAILURE\n"
        },
        "uintx.sol": {
            "content": "pragma abicoder               v2;\n\ncontract C {\n    function ggg8(uint8 x) external pure returns (uint256) {\n        return x;\n    }\n    function gg16(uint16 x) external pure returns (uint256) {\n        return x;\n    }\n    function gg32(uint32 x) external pure returns (uint256) {\n        return x;\n    }\n    function gg64(uint64 x) external pure returns (uint256) {\n        return x;\n    }\n    function g128(uint128 x) external pure returns (uint256) {\n        return x;\n    }\n    function f8(uint256 a) external view returns (uint256) {\n        uint8 x = 0;\n        assembly { x := a }\n        return this.ggg8(x);\n    }\n    function f16(uint256 a) external view returns (uint256) {\n        uint16 x = 0;\n        assembly { x := a }\n        return this.gg16(x);\n    }\n    function f32(uint256 a) external view returns (uint256) {\n        uint32 x = 0;\n        assembly { x := a }\n        return this.gg32(x);\n    }\n    function f64(uint256 a) external view returns (uint256) {\n        uint64 x = 0;\n        assembly { x := a }\n        return this.gg64(x);\n    }\n    function f128(uint256 a) external view returns (uint256) {\n        uint128 x = 0;\n        assembly { x := a }\n        return this.g128(x);\n    }\n}\n// ----\n// f8(uint256): 0 -> 0\n// ggg8(uint8): 0 -> 0 # test validation as well as sanity check #\n// f8(uint256): 1 -> 1\n// ggg8(uint8): 1 -> 1\n// f8(uint256): 0xFE -> 0xFE\n// ggg8(uint8): 0xFE -> 0xFE\n// f8(uint256): 0xFF -> 0xFF\n// ggg8(uint8): 0xFF -> 0xFF\n// f8(uint256): 0x0100 -> 0x00\n// ggg8(uint8): 0x0100 -> FAILURE\n// f8(uint256): 0x0101 -> 0x01\n// ggg8(uint8): 0x0101 -> FAILURE\n// f8(uint256): -1 -> 0xFF\n// ggg8(uint8): -1 -> FAILURE\n// f16(uint256): 0 -> 0\n// gg16(uint16): 0 -> 0\n// f16(uint256): 1 -> 1\n// gg16(uint16): 1 -> 1\n// f16(uint256): 0xFFFE -> 0xFFFE\n// gg16(uint16): 0xFFFE -> 0xFFFE\n// f16(uint256): 0xFFFF -> 0xFFFF\n// gg16(uint16): 0xFFFF -> 0xFFFF\n// f16(uint256): 0x010000 -> 0x0000\n// gg16(uint16): 0x010000 -> FAILURE\n// f16(uint256): 0x010001 -> 0x0001\n// gg16(uint16): 0x010001 -> FAILURE\n// f16(uint256): -1 -> 0xFFFF\n// gg16(uint16): -1 -> FAILURE\n// f32(uint256): 0 -> 0\n// gg32(uint32): 0 -> 0\n// f32(uint256): 1 -> 1\n// gg32(uint32): 1 -> 1\n// f32(uint256): 0xFFFFFFFE -> 0xFFFFFFFE\n// gg32(uint32): 0xFFFFFFFE -> 0xFFFFFFFE\n// f32(uint256): 0xFFFFFFFF -> 0xFFFFFFFF\n// gg32(uint32): 0xFFFFFFFF -> 0xFFFFFFFF\n// f32(uint256): 0x0100000000 -> 0x00000000\n// gg32(uint32): 0x0100000000 -> FAILURE\n// f32(uint256): 0x0100000001 -> 0x00000001\n// gg32(uint32): 0x0100000001 -> FAILURE\n// f32(uint256): -1 -> 0xFFFFFFFF\n// gg32(uint32): -1 -> FAILURE\n// f64(uint256): 0 -> 0\n// gg64(uint64): 0 -> 0\n// f64(uint256): 1 -> 1\n// gg64(uint64): 1 -> 1\n// f64(uint256): 0xFFFFFFFFFFFFFFFE -> 0xFFFFFFFFFFFFFFFE\n// gg64(uint64): 0xFFFFFFFFFFFFFFFE -> 0xFFFFFFFFFFFFFFFE\n// f64(uint256): 0xFFFFFFFFFFFFFFFF -> 0xFFFFFFFFFFFFFFFF\n// gg64(uint64): 0xFFFFFFFFFFFFFFFF -> 0xFFFFFFFFFFFFFFFF\n// f64(uint256): 0x010000000000000000 -> 0x0000000000000000\n// gg64(uint64): 0x010000000000000000 -> FAILURE\n// f64(uint256): 0x010000000000000001 -> 0x0000000000000001\n// gg64(uint64): 0x010000000000000001 -> FAILURE\n// f64(uint256): -1 -> 0xFFFFFFFFFFFFFFFF\n// gg64(uint64): -1 -> FAILURE\n// f128(uint256): 0 -> 0\n// g128(uint128): 0 -> 0\n// f128(uint256): 1 -> 1\n// g128(uint128): 1 -> 1\n// f128(uint256): 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE -> 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE\n// g128(uint128): 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE -> 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE\n// f128(uint256): 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -> 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n// g128(uint128): 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -> 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n// f128(uint256): 0x0100000000000000000000000000000000 -> 0x00000000000000000000000000000000\n// g128(uint128): 0x0100000000000000000000000000000000 -> FAILURE\n// f128(uint256): 0x0100000000000000000000000000000001 -> 0x00000000000000000000000000000001\n// g128(uint128): 0x0100000000000000000000000000000001 -> FAILURE\n// f128(uint256): -1 -> 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n// g128(uint128): -1 -> FAILURE\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
{"language": "Solidity", "sources": {"cleanup.sol": {"content": "pragma abicoder v2;\ntype MyUInt8 is uint8;\n\n// Note that this wraps from a uint256\nfunction wrap(uint x) pure returns (MyUInt8 y) { assembly { y := x } }\nfunction unwrap(MyUInt8 x) pure returns (uint8 y) { assembly { y := x } }\n\ncontract C {\n    uint8 a;\n    MyUInt8 b;\n    uint8 c;\n    function ret() external returns(MyUInt8) {\n        return wrap(0x1ff);\n    }\n    function f(MyUInt8 x) external returns(MyUInt8) {\n        return x;\n    }\n    function mem() external returns (MyUInt8[] memory) {\n        MyUInt8[] memory x = new MyUInt8[](2);\n        x[0] = wrap(0x1ff);\n        x[1] = wrap(0xff);\n        require(unwrap(x[0]) == unwrap(x[1]));\n        assembly {\n            mstore(add(x, 0x20), 0x1ff)\n        }\n        require(unwrap(x[0]) == unwrap(x[1]));\n        return x;\n    }\n    function stor() external returns (uint8, MyUInt8, uint8) {\n        a = 1;\n        c = 2;\n        b = wrap(0x1ff);\n        return (a, b, c);\n    }\n}\n// ----\n// ret() -> 0xff\n// f(uint8): 0x1ff -> FAILURE\n// f(uint8): 0xff -> 0xff\n// mem() -> 0x20, 2, 0xff, 0xff\n// stor() -> 1, 0xff, 2\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}, "viaIR": true}}
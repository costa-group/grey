{
    "language": "Solidity",
    "sources": {
        "multiline.sol": {
            "content": "contract C {\n    function f(uint a, uint b, uint c, uint d, uint e) public returns (uint) {\n        return a + b + c + d + e;\n    }\n}\n// ====\n// allowNonExistingFunctions: true\n// ----\n// f(uint256,uint256,uint256,uint256,uint256): 1, 1, 1, 1, 1\n// -> 5\n// g()\n// # g() does not exist #\n// -> FAILURE\n"
        },
        "multiline_comments.sol": {
            "content": "contract C {\n    function f(uint a, uint b, uint c, uint d, uint e) public returns (uint) {\n        return a + b + c + d + e;\n    }\n}\n// ----\n// f(uint256,uint256,uint256,uint256,uint256): 1, 1, 1, 1, 1\n// # A comment on the function parameters. #\n// -> 5\n// f(uint256,uint256,uint256,uint256,uint256):\n// 1,\n// 1,\n// 1,\n// 1,\n// 1\n// -> 5\n// # Should return sum of all parameters. #\n"
        },
        "structs.sol": {
            "content": "pragma abicoder               v2;\n\ncontract C {\n    struct S {\n        uint a;\n        uint b;\n    }\n    struct T {\n        uint a;\n        uint b;\n        string s;\n    }\n    function s() public returns (S memory) {\n        return S(23, 42);\n    }\n    function t() public returns (T memory) {\n        return T(23, 42, \"any\");\n    }\n}\n// ----\n// s() -> 23, 42\n// t() -> 0x20, 23, 42, 0x60, 3, \"any\"\n"
        },
        "alignment.sol": {
            "content": "contract C {\n    uint256 public stateDecimal = 0x20;\n}\n\ncontract D {\n    bool public stateBool = true;\n    uint256 public stateDecimal = 42;\n    bytes32 public stateBytes = \"\\x42\\x00\\xef\";\n\n    function internalStateDecimal() public returns (uint256) {\n        return (new C()).stateDecimal();\n    }\n\n    function update(bool _bool, uint256 _decimal, bytes32 _bytes) public returns (bool, uint256, bytes32) {\n        stateBool = _bool;\n        stateDecimal = _decimal;\n        stateBytes = _bytes;\n        return (stateBool, stateDecimal, stateBytes);\n    }\n}\n// ----\n// stateBool() -> true\n// stateBool() -> right(true)\n// stateDecimal() -> 42\n// stateDecimal() -> right(42)\n// stateBytes() -> left(0x4200ef)\n// internalStateDecimal() -> 0x20\n// gas legacy: 76665\n// gas legacy code: 23600\n// update(bool,uint256,bytes32): false, -23, left(0x2300ef) -> false, -23, left(0x2300ef)\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
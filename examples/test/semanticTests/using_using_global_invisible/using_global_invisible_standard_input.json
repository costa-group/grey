{
    "language": "Solidity",
    "sources": {
        "A": {
            "content": "type T is uint;\nusing L for T global;\nlibrary L {\n    function inc(T x) internal pure returns (T) {\n        return T.wrap(T.unwrap(x) + 1);\n    }\n    function dec(T x) external pure returns (T) {\n        return T.wrap(T.unwrap(x) - 1);\n    }\n}\nusing {unwrap} for T global;\nfunction unwrap(T x) pure returns (uint) {\n    return T.unwrap(x);\n}"
        },
        "B": {
            "content": "contract C {\n    function f() public pure returns (T r1) {\n        r1 = r1.inc().inc();\n    }\n}\n\nimport {T} from \"A\";"
        },
        "C": {
            "content": "import {C} from \"B\";\n\ncontract D {\n    function test() public returns (uint) {\n        C c = new C();\n        // This tests that attached functions are available\n        // even if the type is not available by name.\n        // This is a regular function call, a\n        // public and an internal library call\n        // and a free function call.\n        return c.f().inc().inc().dec().unwrap();\n    }\n}\n// ----\n// library: \"A\":L\n// test() -> 3\n// gas legacy: 59680\n// gas legacy code: 61200"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
{
    "language": "Solidity",
    "sources": {
        "import.sol": {
            "content": "==== Source: A ====\nstruct S { uint x; }\nfunction set(S storage a, uint v) { a.x = v; }\n\n==== Source: B ====\nimport \"A\";\nimport \"A\" as A;\ncontract C {\n  A.S data;\n  function f(uint v) public returns (uint one, uint two) {\n    A.set(data, v);\n    one = data.x;\n    set(data, v + 1);\n    two = data.x;\n  }\n}\n// ----\n// f(uint256): 7 -> 7, 8\n"
        },
        "free_runtimecode.sol": {
            "content": "contract C {\n  uint public x = 2;\n}\n\nfunction test() returns (bool) {\n  return type(C).runtimeCode.length > 20;\n}\n\ncontract D {\n  function f() public returns (bool) {\n    return test();\n  }\n}\n// ----\n// f() -> true\n"
        },
        "overloads.sol": {
            "content": "function f(uint) returns (uint) {\n    return 2;\n}\nfunction f(string memory) returns (uint) {\n    return 3;\n}\n\ncontract C {\n  function g() public returns (uint, uint) {\n      return (f(2), f(\"abc\"));\n  }\n}\n// ----\n// g() -> 2, 3\n"
        },
        "libraries_from_free.sol": {
            "content": "library L {\n  function pub() public pure returns (uint) {\n    return 7;\n  }\n  function inter() internal pure returns (uint) {\n    return 8;\n  }\n}\n\nfunction fu() pure returns (uint, uint) {\n  return (L.pub(), L.inter());\n}\n\ncontract C {\n  function f() public pure returns (uint, uint) {\n    return fu();\n  }\n}\n// ----\n// library: L\n// f() -> 7, 8\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
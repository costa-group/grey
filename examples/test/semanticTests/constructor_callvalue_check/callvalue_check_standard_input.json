{
    "language": "Solidity",
    "sources": {
        "callvalue_check.sol": {
            "content": "contract A1 { constructor() {} }\ncontract B1 is A1 {}\n\ncontract A2 { constructor() payable {} }\ncontract B2 is A2 {}\n\ncontract B3 {}\n\ncontract B4 { constructor() {} }\n\ncontract C {\n\tfunction createWithValue(bytes memory c, uint256 value) public payable returns (bool) {\n\t\tuint256 y = 0;\n\t\t// TODO: This test is hard to recreate for EOF as for now eofcreate is disallowed in inline assembly.\n\t\tassembly { y := create(value, add(c, 0x20), mload(c)) }\n\t\treturn y != 0;\n\t}\n\tfunction f(uint256 value) public payable returns (bool) {\n\t\treturn createWithValue(type(B1).creationCode, value);\n\t}\n\tfunction g(uint256 value) public payable returns (bool) {\n\t\treturn createWithValue(type(B2).creationCode, value);\n\t}\n\tfunction h(uint256 value) public payable returns (bool) {\n\t\treturn createWithValue(type(B3).creationCode, value);\n\t}\n\tfunction i(uint256 value) public payable returns (bool) {\n\t\treturn createWithValue(type(B4).creationCode, value);\n\t}\n}\n// ====\n// EVMVersion: >homestead\n// bytecodeFormat: legacy\n// ----\n// f(uint256), 2000 ether: 0 -> true\n// f(uint256), 2000 ether: 100 -> false\n// g(uint256), 2000 ether: 0 -> true\n// g(uint256), 2000 ether: 100 -> false\n// h(uint256), 2000 ether: 0 -> true\n// h(uint256), 2000 ether: 100 -> false\n// i(uint256), 2000 ether: 0 -> true\n// i(uint256), 2000 ether: 100 -> false\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
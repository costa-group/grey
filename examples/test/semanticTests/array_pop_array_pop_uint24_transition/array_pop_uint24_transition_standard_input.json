{
    "language": "Solidity",
    "sources": {
        "parenthesized.sol": {
            "content": "contract C {\n  int[] data;\n  function f() public returns (uint) {\n    data.push(1);\n    (data.pop)();\n    return data.length;\n  }\n}\n// ----\n// f() -> 0\n"
        },
        "array_pop_isolated.sol": {
            "content": "// This tests that the compiler knows the correct size of the function on the stack.\ncontract c {\n    uint256[] data;\n\n    function test() public returns (uint256 x) {\n        x = 2;\n        data.pop;\n        x = 3;\n    }\n}\n// ----\n// test() -> 3\n"
        },
        "byte_array_pop.sol": {
            "content": "contract c {\n    bytes data;\n\n    function test() public returns (uint256 x, uint256 y, uint256 l) {\n        data.push(0x07);\n        data.push(0x03);\n        x = data.length;\n        data.pop();\n        data.pop();\n        data.push(0x02);\n        y = data.length;\n        l = data.length;\n    }\n}\n// ----\n// test() -> 2, 1, 1\n"
        },
        "array_pop.sol": {
            "content": "contract c {\n    uint256[] data;\n\n    function test() public returns (uint256 x, uint256 l) {\n        data.push(7);\n        data.push(3);\n        x = data.length;\n        data.pop();\n        x = data.length;\n        data.pop();\n        l = data.length;\n    }\n}\n// ----\n// test() -> 1, 0\n"
        },
        "array_pop_storage_empty.sol": {
            "content": "contract c {\n    uint[] data;\n    function test() public {\n        data.push(7);\n        data.pop();\n    }\n}\n// ----\n// test() ->\n// storageEmpty -> 1\n"
        },
        "array_pop_array_transition.sol": {
            "content": "contract c {\n    uint256 a;\n    uint256 b;\n    uint256 c;\n    uint16[] inner = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n    uint16[][] data;\n    function test() public returns (uint x, uint y, uint z) {\n        for (uint i = 1; i <= 48; i++)\n            data.push(inner);\n        for (uint j = 1; j <= 10; j++)\n            data.pop();\n        x = data[data.length - 1][0];\n        for (uint k = 1; k <= 10; k++)\n            data.pop();\n        y = data[data.length - 1][1];\n        for (uint l = 1; l <= 10; l++)\n            data.pop();\n        z = data[data.length - 1][2];\n        for (uint m = 1; m <= 18; m++)\n            data.pop();\n        delete inner;\n    }\n}\n// ----\n// test() -> 1, 2, 3\n// gas irOptimized: 1828226\n// gas legacy: 1822464\n// gas legacyOptimized: 1813404\n// storageEmpty -> 1\n"
        },
        "array_pop_uint16_transition.sol": {
            "content": "contract c {\n    uint16[] data;\n    function test() public returns (uint16 x, uint16 y, uint16 z) {\n        for (uint i = 1; i <= 48; i++)\n            data.push(uint16(i));\n        for (uint j = 1; j <= 10; j++)\n            data.pop();\n        x = data[data.length - 1];\n        for (uint k = 1; k <= 10; k++)\n            data.pop();\n        y = data[data.length - 1];\n        for (uint l = 1; l <= 10; l++)\n            data.pop();\n        z = data[data.length - 1];\n        for (uint m = 1; m <= 18; m++)\n            data.pop();\n    }\n}\n// ----\n// test() -> 38, 28, 18\n// gas irOptimized: 148380\n// gas legacy: 151182\n// gas legacyOptimized: 142418\n// storageEmpty -> 1\n"
        },
        "byte_array_pop_long_storage_empty.sol": {
            "content": "contract c {\n    uint256 a;\n    uint256 b;\n    uint256 c;\n    bytes data;\n    function test() public returns (bool) {\n        for (uint8 i = 0; i <= 40; i++)\n            data.push(bytes1(i+1));\n        for (int8 j = 40; j >= 0; j--) {\n            require(data[uint8(j)] == bytes1(uint8(j+1)));\n            require(data.length == uint8(j+1));\n            data.pop();\n        }\n        return true;\n    }\n}\n// ----\n// test() -> true\n// gas irOptimized: 138795\n// gas legacy: 178396\n// gas legacyOptimized: 163832\n// storageEmpty -> 1\n"
        },
        "byte_array_pop_long_storage_empty_garbage_ref.sol": {
            "content": "contract c {\n    uint256 a;\n    uint256 b;\n    bytes data;\n    function test() public {\n        for (uint8 i = 0; i <= 40; i++)\n            data.push(0x03);\n        for (uint8 j = 0; j <= 40; j++) {\n            assembly {\n                mstore(0, \"garbage\")\n            }\n            data.pop();\n        }\n    }\n}\n// ----\n// test() ->\n// gas irOptimized: 113631\n// gas legacy: 131256\n// gas legacyOptimized: 126668\n// storageEmpty -> 1\n"
        },
        "byte_array_pop_storage_empty.sol": {
            "content": "contract c {\n    bytes data;\n    function test() public {\n        data.push(0x07);\n        data.push(0x05);\n        data.push(0x03);\n        data.pop();\n        data.pop();\n        data.pop();\n    }\n}\n// ----\n// test() ->\n// storageEmpty -> 1\n"
        },
        "array_pop_empty_exception.sol": {
            "content": "contract c {\n    uint256[] data;\n\n    function test() public returns (bool) {\n        data.pop();\n        return true;\n    }\n}\n// ----\n// test() -> FAILURE, hex\"4e487b71\", 0x31\n"
        },
        "array_pop_uint24_transition.sol": {
            "content": "contract c {\n    uint256 a;\n    uint256 b;\n    uint256 c;\n    uint24[] data;\n    function test() public returns (uint24 x, uint24 y) {\n        for (uint i = 1; i <= 30; i++)\n            data.push(uint24(i));\n        for (uint j = 1; j <= 10; j++)\n            data.pop();\n        x = data[data.length - 1];\n        for (uint k = 1; k <= 10; k++)\n            data.pop();\n        y = data[data.length - 1];\n        for (uint l = 1; l <= 10; l++)\n            data.pop();\n    }\n}\n// ----\n// test() -> 20, 10\n// gas irOptimized: 125889\n// gas legacy: 127215\n// gas legacyOptimized: 122224\n// storageEmpty -> 1\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
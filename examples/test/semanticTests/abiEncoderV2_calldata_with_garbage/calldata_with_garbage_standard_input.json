{
    "language": "Solidity",
    "sources": {
        "calldata_with_garbage.sol": {
            "content": "pragma abicoder v2;\n\ncontract C {\n    uint[] aTmp;\n    uint[2] bTmp;\n\n    function f_memory(uint[] calldata a) public returns (uint[] memory) {\n        return a;\n    }\n\n    function f_encode(uint[] calldata a) public returns (bytes memory) {\n        return abi.encode(a);\n    }\n\n    function f_storage(uint[] calldata a) public returns (bytes memory) {\n        aTmp = a;\n        return abi.encode(aTmp);\n    }\n\n    function f_index(uint[] calldata a, uint which) public returns (uint) {\n        return a[which];\n    }\n\n    function g_memory(uint[] calldata a, uint[2] calldata b) public returns (uint[] memory, uint[2] memory) {\n        return (a, b);\n    }\n\n    function g_encode(uint[] calldata a, uint[2] calldata b) public returns (bytes memory) {\n        return abi.encode(a, b);\n    }\n\n    function g_storage(uint[] calldata a, uint[2] calldata b) public returns (bytes memory) {\n        aTmp = a;\n        bTmp = b;\n        return abi.encode(aTmp, bTmp);\n    }\n\n    function g_index(uint[] calldata a, uint[2] calldata b, uint which) public returns (uint, uint) {\n        return (a[which], b[0]);\n    }\n}\n// ----\n// f_memory(uint256[]): 0x80, 9, 9, 9, 0 -> 0x20, 0\n// f_memory(uint256[]): 0x80, 9, 9, 9, 1, 7 -> 0x20, 1, 7\n// f_memory(uint256[]): 0x80, 9, 9, 9, 2, 7 -> FAILURE\n// f_encode(uint256[]): 0x80, 9, 9, 9, 0 -> 0x20, 0x40, 0x20, 0\n// f_encode(uint256[]): 0x80, 9, 9, 9, 1, 7 -> 0x20, 0x60, 0x20, 1, 7\n// f_encode(uint256[]): 0x80, 9, 9, 9, 2, 7 -> FAILURE\n// f_storage(uint256[]): 0x80, 9, 9, 9, 0 -> 0x20, 0x40, 0x20, 0\n// f_storage(uint256[]): 0x80, 9, 9, 9, 1, 7 -> 0x20, 0x60, 0x20, 1, 7\n// f_storage(uint256[]): 0x80, 9, 9, 9, 2, 7 -> FAILURE\n// f_index(uint256[],uint256): 0xa0, 0, 9, 9, 9, 2, 7, 8 -> 7\n// f_index(uint256[],uint256): 0xa0, 1, 9, 9, 9, 2, 7, 8 -> 8\n// f_index(uint256[],uint256): 0xa0, 2, 9, 9, 9, 2, 7, 8 -> FAILURE, hex\"4e487b71\", 0x32\n// g_memory(uint256[],uint256[2]): 0xc0, 1, 2, 9, 9, 9, 0 -> 0x60, 1, 2, 0\n// g_memory(uint256[],uint256[2]): 0xc0, 1, 2, 9, 9, 9, 1, 7 -> 0x60, 1, 2, 1, 7\n// g_memory(uint256[],uint256[2]): 0xc0, 1, 2, 9, 9, 9, 2, 7 -> FAILURE\n// g_encode(uint256[],uint256[2]): 0xc0, 1, 2, 9, 9, 9, 0 -> 0x20, 0x80, 0x60, 1, 2, 0\n// g_encode(uint256[],uint256[2]): 0xc0, 1, 2, 9, 9, 9, 1, 7 -> 0x20, 0xa0, 0x60, 1, 2, 1, 7\n// g_encode(uint256[],uint256[2]): 0xc0, 1, 2, 9, 9, 9, 2, 7 -> FAILURE\n// g_storage(uint256[],uint256[2]): 0xc0, 1, 2, 9, 9, 9, 0 -> 0x20, 0x80, 0x60, 1, 2, 0\n// g_storage(uint256[],uint256[2]): 0xc0, 1, 2, 9, 9, 9, 1, 7 -> 0x20, 0xa0, 0x60, 1, 2, 1, 7\n// g_storage(uint256[],uint256[2]): 0xc0, 1, 2, 9, 9, 9, 2, 7 -> FAILURE\n// g_index(uint256[],uint256[2],uint256): 0xe0, 1, 2, 0, 9, 9, 9, 2, 7, 8 -> 7, 1\n// g_index(uint256[],uint256[2],uint256): 0xe0, 1, 2, 1, 9, 9, 9, 2, 7, 8 -> 8, 1\n// g_index(uint256[],uint256[2],uint256): 0xe0, 1, 2, 1, 9, 9, 9, 2, 7 -> FAILURE\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
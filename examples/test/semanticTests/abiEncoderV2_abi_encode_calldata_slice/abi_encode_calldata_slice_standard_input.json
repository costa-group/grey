{
    "language": "Solidity",
    "sources": {
        "abi_encode_calldata_slice.sol": {
            "content": "pragma abicoder               v2;\ncontract C {\n\tfunction enc_packed_bytes(bytes calldata data, uint256 start, uint256 end) external returns (bytes memory) {\n\t\treturn abi.encodePacked(data[start:end]);\n\t}\n\tfunction enc_packed_bytes_reference(bytes calldata data, uint256 start, uint256 end) external returns (bytes memory) {\n\t\treturn abi.encodePacked(bytes(data[start:end]));\n\t}\n\n\tfunction enc_bytes(bytes calldata data, uint256 start, uint256 end) external returns (bytes memory) {\n\t\treturn abi.encode(data[start:end]);\n\t}\n\tfunction enc_bytes_reference(bytes calldata data, uint256 start, uint256 end) external returns (bytes memory) {\n\t\treturn abi.encode(bytes(data[start:end]));\n\t}\n\n\tfunction enc_uint256(uint256[] calldata x, uint256 start, uint256 end) external returns (bytes memory) {\n\t\treturn abi.encode(x[start:end]);\n\t}\n\tfunction enc_uint256_reference(uint256[] calldata x, uint256 start, uint256 end) external returns (bytes memory) {\n\t\treturn abi.encode(x[start:end]);\n\t}\n\n\tfunction enc_packed_uint256(uint256[] calldata x, uint256 start, uint256 end) external returns (bytes memory) {\n\t\treturn abi.encodePacked(x[start:end]);\n\t}\n\tfunction enc_packed_uint256_reference(uint256[] calldata x, uint256 start, uint256 end) external returns (bytes memory) {\n\t\treturn abi.encodePacked(x[start:end]);\n\t}\n\n\tfunction compare(bytes memory x, bytes memory y) internal {\n\t\tassert(x.length == y.length);\n\t\tfor (uint i = 0; i < x.length; ++i)\n\t\t\tassert(x[i] == y[i]);\n\t}\n\n\tfunction test_bytes() public {\n\t\tbytes memory test = new bytes(3);\n\t\ttest[0] = 0x41; test[1] = 0x42; test[2] = 0x42;\n\t\tfor (uint i = 0; i < test.length; i++)\n\t\t\tfor (uint j = i; j <= test.length; j++)\n\t\t\t{\n\t\t\t\tcompare(this.enc_packed_bytes(test, i, j), this.enc_packed_bytes_reference(test, i, j));\n\t\t\t\tcompare(this.enc_bytes(test, i, j), this.enc_bytes_reference(test, i, j));\n\t\t\t}\n\t}\n\n\tfunction test_uint256() public {\n\t\tuint256[] memory test = new uint256[](3);\n\t\ttest[0] = 0x41; test[1] = 0x42; test[2] = 0x42;\n\t\tfor (uint i = 0; i < test.length; i++)\n\t\t\tfor (uint j = i; j <= test.length; j++)\n\t\t\t{\n\t\t\t\tcompare(this.enc_packed_uint256(test, i, j), this.enc_packed_uint256_reference(test, i, j));\n\t\t\t\tcompare(this.enc_uint256(test, i, j), this.enc_uint256_reference(test, i, j));\n\t\t\t}\n\t}\n}\n// ====\n// EVMVersion: >homestead\n// ----\n// test_bytes() ->\n// gas irOptimized: 314884\n// gas legacy: 305816\n// gas legacyOptimized: 253573\n// test_uint256() ->\n// gas irOptimized: 448346\n// gas legacy: 421304\n// gas legacyOptimized: 351544\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
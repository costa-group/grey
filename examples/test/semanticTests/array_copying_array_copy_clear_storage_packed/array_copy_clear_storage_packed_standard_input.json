{
    "language": "Solidity",
    "sources": {
        "array_copy_clear_storage_packed.sol": {
            "content": "contract C {\n    uint128[] x;\n    uint64[] x1;\n    uint120[] x2;\n    function f() public returns(uint128) {\n        x.push(42); x.push(42); x.push(42); x.push(42);\n        uint128[] memory y = new uint128[](1);\n        y[0] = 23;\n        x = y;\n        assembly { sstore(x.slot, 4) }\n        assert(x[0] == 23);\n        assert(x[2] == 0);\n        assert(x[3] == 0);\n        return x[1];\n    }\n\n    function g() public returns(uint64) {\n        x1.push(42); x1.push(42); x1.push(42); x1.push(42);\n        uint64[] memory y = new uint64[](1);\n        y[0] = 23;\n        x1 = y;\n        assembly { sstore(x1.slot, 4) }\n        assert(x1[0] == 23);\n        assert(x1[2] == 0);\n        assert(x1[3] == 0);\n        return x1[1];\n    }\n\n    function h() public returns(uint120) {\n        x2.push(42); x2.push(42); x2.push(42); x2.push(42);\n        uint120[] memory y = new uint120[](1);\n        y[0] = 23;\n        x2 = y;\n        assembly { sstore(x2.slot, 4) }\n        assert(x2[0] == 23);\n        assert(x2[2] == 0);\n        assert(x2[3] == 0);\n        return x2[1];\n    }\n}\n// ----\n// f() -> 0\n// gas irOptimized: 92800\n// gas legacy: 93006\n// gas legacyOptimized: 92261\n// g() -> 0\n// h() -> 0\n// gas irOptimized: 92862\n// gas legacy: 93028\n// gas legacyOptimized: 92303\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
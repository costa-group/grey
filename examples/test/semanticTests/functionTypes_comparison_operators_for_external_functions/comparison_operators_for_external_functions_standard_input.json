{"language": "Solidity", "sources": {"comparison_operators_for_external_functions.sol": {"content": "contract C {\n    function f() external {}\n    function g() external {}\n    function h() pure external {}\n    function i() view external {}\n\n    function comparison_operators_for_external_functions() public returns (bool) {\n        assert(\n            this.f != this.g &&\n            this.f != this.h &&\n            this.f != this.i &&\n\n            this.g != this.h &&\n            this.g != this.i &&\n\n            this.h != this.i &&\n\n            this.f == this.f &&\n            this.g == this.g &&\n            this.h == this.h &&\n            this.i == this.i\n        );\n        return true;\n    }\n\n    function comparison_operators_for_local_external_function_pointers() public returns (bool) {\n        function () external f_local = this.f;\n        function () external g_local = this.g;\n        function () external pure h_local = this.h;\n        function () external view i_local = this.i;\n\n        assert(\n            f_local == this.f &&\n            g_local == this.g &&\n            h_local == this.h &&\n            i_local == this.i &&\n\n            f_local != this.g &&\n            f_local != this.h &&\n            f_local != this.i &&\n\n            g_local != this.f &&\n            g_local != this.h &&\n            g_local != this.i &&\n\n            h_local != this.f &&\n            h_local != this.g &&\n            h_local != this.i &&\n\n            i_local != this.f &&\n            i_local != this.g &&\n            i_local != this.h\n        );\n\n        assert(\n            f_local == f_local &&\n            f_local != g_local &&\n            f_local != h_local &&\n            f_local != i_local\n        );\n\n        assert(\n            g_local == g_local &&\n            g_local != h_local &&\n            g_local != i_local\n        );\n\n        assert(\n            h_local == h_local &&\n            i_local == i_local &&\n            h_local != i_local\n        );\n\n        return true;\n    }\n}\n// ----\n// comparison_operators_for_external_functions() -> true\n// comparison_operators_for_local_external_function_pointers() -> true\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}, "viaIR": true}}
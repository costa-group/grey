{
    "language": "Solidity",
    "sources": {
        "event_selector_file_level.sol": {
            "content": "event E();\n\nlibrary L {\n    event E();\n}\n\ncontract C {\n    function main() external pure returns (bytes32, bytes32) {\n        assert(E.selector == L.E.selector);\n\n        return (E.selector, L.E.selector);\n    }\n}\n// ----\n// main() -> 0x92bbf6e823a631f3c8e09b1c8df90f378fb56f7fbc9701827e1ff8aad7f6a028, 0x92bbf6e823a631f3c8e09b1c8df90f378fb56f7fbc9701827e1ff8aad7f6a028\n"
        },
        "event_emit_via_interface.sol": {
            "content": "interface I {\n    event Event(address indexed _from, uint256 _value);\n}\n\ncontract C {\n    function emitEvent(uint256 _value) public {\n        emit I.Event(msg.sender, _value);\n    }\n}\n\n// ----\n// emitEvent(uint256): 100 ->\n// ~ emit Event(address,uint256): #0x1212121212121212121212121212120000000012, 0x64\n"
        },
        "event_access_through_base_name_emit.sol": {
            "content": "contract A {\n    event x();\n}\ncontract B is A {\n    function f() public returns (uint) {\n        emit A.x();\n        return 1;\n    }\n}\n// ----\n// f() -> 1\n// ~ emit x()\n"
        },
        "event_indexed_function2.sol": {
            "content": "contract C {\n    event TestA(function() external indexed);\n    event TestB(function(uint256) external indexed);\n    function f1() public {\n        emit TestA(this.f1);\n    }\n    function f2(uint256 a) public {\n        emit TestB(this.f2);\n    }\n}\n// ----\n// f1() ->\n// ~ emit TestA(function): #0xc06afe3a8444fc0004668591e8306bfb9968e79ec27fc3050000000000000000\n// f2(uint256): 1 ->\n// ~ emit TestB(function): #0xc06afe3a8444fc0004668591e8306bfb9968e79ebf3724af0000000000000000\n"
        },
        "event_struct_memory_v2.sol": {
            "content": "pragma abicoder v2;\ncontract C {\n    struct S { uint a; }\n    event E(S);\n    function createEvent(uint x) public {\n        emit E(S(x));\n    }\n}\n// ----\n// createEvent(uint256): 42 ->\n// ~ emit E((uint256)): 0x2a\n"
        },
        "event_dynamic_nested_array_storage_v2.sol": {
            "content": "pragma abicoder v2;\ncontract C {\n    event E(uint[][]);\n    uint[][] arr;\n    function createEvent(uint x) public {\n        arr.push(new uint[](2));\n        arr.push(new uint[](2));\n        arr[0][0] = x;\n        arr[0][1] = x + 1;\n        arr[1][0] = x + 2;\n        arr[1][1] = x + 3;\n        emit E(arr);\n    }\n}\n// ----\n// createEvent(uint256): 42 ->\n// ~ emit E(uint256[][]): 0x20, 0x02, 0x40, 0xa0, 0x02, 0x2a, 0x2b, 0x02, 0x2c, 0x2d\n// gas irOptimized: 185148\n// gas legacy: 187493\n// gas legacyOptimized: 184548\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
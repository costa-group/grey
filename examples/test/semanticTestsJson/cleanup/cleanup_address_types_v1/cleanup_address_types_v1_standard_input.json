{
    "language": "Solidity",
    "sources": {
        "cleanup_bytes_types_v1.sol": {
            "content": "pragma abicoder v1;\n// Checks that bytesXX types are properly cleaned before they are compared.\ncontract C {\n    function f(bytes2 a, uint16 x) public returns (uint256) {\n        if (a != \"ab\") return 1;\n        if (x != 0x0102) return 2;\n        if (bytes3(uint24(x)) != 0x000102) return 3;\n        return 0;\n    }\n}\n// ====\n// ABIEncoderV1Only: true\n// compileViaYul: false\n// ----\n// f(bytes2,uint16): \"abc\", 0x40102 -> 0x0 # We input longer data on purpose. #\n"
        },
        "cleanup_bytes_types_v2.sol": {
            "content": "pragma abicoder               v2;\n\n\n// Checks that bytesXX types are properly cleaned before they are compared.\ncontract C {\n    function f(bytes2 a, uint16 x) public returns (uint256) {\n        if (a != \"ab\") return 1;\n        if (x != 0x0102) return 2;\n        if (bytes3(uint24(x)) != 0x000102) return 3;\n        return 0;\n    }\n}\n// ----\n// f(bytes2,uint16): \"abc\", 0x40102 -> FAILURE # We input longer data on purpose. #\n"
        },
        "bool_conversion_v2.sol": {
            "content": "pragma abicoder               v2;\n\n\ncontract C {\n    function f(bool _b) public returns (uint256) {\n        if (_b) return 1;\n        else return 0;\n    }\n\n    function g(bool _in) public returns (bool _out) {\n        _out = _in;\n    }\n}\n// ----\n// f(bool): 0x0 -> 0x0\n// f(bool): 0x1 -> 0x1\n// f(bool): 0x2 -> FAILURE\n// f(bool): 0x3 -> FAILURE\n// f(bool): 0xff -> FAILURE\n// g(bool): 0x0 -> 0x0\n// g(bool): 0x1 -> 0x1\n// g(bool): 0x2 -> FAILURE\n// g(bool): 0x3 -> FAILURE\n// g(bool): 0xff -> FAILURE\n"
        },
        "bool_conversion_v1.sol": {
            "content": "pragma abicoder v1;\ncontract C {\n    function f(bool _b) public returns (uint256) {\n        if (_b) return 1;\n        else return 0;\n    }\n\n    function g(bool _in) public returns (bool _out) {\n        _out = _in;\n    }\n}\n// ====\n// ABIEncoderV1Only: true\n// compileViaYul: false\n// ----\n// f(bool): 0x0 -> 0x0\n// f(bool): 0x1 -> 0x1\n// f(bool): 0x2 -> 0x1\n// f(bool): 0x3 -> 0x1\n// f(bool): 0xff -> 0x1\n// g(bool): 0x0 -> 0x0\n// g(bool): 0x1 -> 0x1\n// g(bool): 0x2 -> 0x1\n// g(bool): 0x3 -> 0x1\n// g(bool): 0xff -> 0x1\n"
        },
        "exp_cleanup.sol": {
            "content": "contract C {\n    function f() public pure returns (uint x) {\n        unchecked {\n            uint8 y = uint8(2)**uint8(8);\n            return 0**y;\n        }\n    }\n}\n// ----\n// f() -> 0x1\n"
        },
        "cleanup_in_compound_assign.sol": {
            "content": "contract C {\n    function test() public returns (uint256, uint256) {\n        uint32 a = 0xffffffff;\n        uint16 x = uint16(a);\n        uint16 y = x;\n        x /= 0x100;\n        y = y / 0x100;\n        return (x, y);\n    }\n}\n// ----\n// test() -> 0xff, 0xff\n"
        },
        "cleanup_address_types_v1.sol": {
            "content": "pragma abicoder v1;\n// Checks that address types are properly cleaned before they are compared.\ncontract C {\n    function f(address a) public returns (uint256) {\n        if (a != 0x1234567890123456789012345678901234567890) return 1;\n        return 0;\n    }\n\n    function g(address payable a) public returns (uint256) {\n        if (a != 0x1234567890123456789012345678901234567890) return 1;\n        return 0;\n    }\n}\n// ====\n// ABIEncoderV1Only: true\n// compileViaYul: false\n// ----\n// f(address): 0xffff1234567890123456789012345678901234567890 -> 0x0 # We input longer data on purpose.#\n// g(address): 0xffff1234567890123456789012345678901234567890 -> 0x0\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
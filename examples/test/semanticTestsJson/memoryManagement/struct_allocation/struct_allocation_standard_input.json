{
    "language": "Solidity",
    "sources": {
        "struct_allocation.sol": {
            "content": "contract C {\n    struct S { uint x; uint y; uint z; }\n    function memorySize() internal pure returns (uint s) {\n        assembly { s := mload(0x40) }\n    }\n    function withValue() public pure returns (uint) {\n        S memory x = S(1, 2, 3);\n        uint memorySizeBefore = memorySize();\n        S memory t = x;\n        uint memorySizeAfter = memorySize();\n        return memorySizeAfter - memorySizeBefore;\n    }\n    function withoutValue() public pure returns (uint) {\n        uint memorySizeBefore = memorySize();\n        S memory t;\n        uint memorySizeAfter = memorySize();\n        return memorySizeAfter - memorySizeBefore;\n    }\n}\n// ----\n// withValue() -> 0x00\n// withoutValue() -> 0x60\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
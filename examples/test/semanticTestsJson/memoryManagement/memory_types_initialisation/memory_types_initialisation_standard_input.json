{
    "language": "Solidity",
    "sources": {
        "struct_allocation.sol": {
            "content": "contract C {\n    struct S { uint x; uint y; uint z; }\n    function memorySize() internal pure returns (uint s) {\n        assembly { s := mload(0x40) }\n    }\n    function withValue() public pure returns (uint) {\n        S memory x = S(1, 2, 3);\n        uint memorySizeBefore = memorySize();\n        S memory t = x;\n        uint memorySizeAfter = memorySize();\n        return memorySizeAfter - memorySizeBefore;\n    }\n    function withoutValue() public pure returns (uint) {\n        uint memorySizeBefore = memorySize();\n        S memory t;\n        uint memorySizeAfter = memorySize();\n        return memorySizeAfter - memorySizeBefore;\n    }\n}\n// ----\n// withValue() -> 0x00\n// withoutValue() -> 0x60\n"
        },
        "assembly_access.sol": {
            "content": "contract C {\n    function f() public pure {\n        uint[] memory x;\n        uint y;\n        assembly {\n            y := x\n        }\n        // The value of an uninitialized dynamic array is not zero but rather\n        // an address of a location in memory that has the value of zero.\n        assert(y != 0);\n    }\n}\n// ----\n// f() ->\n"
        },
        "static_memory_array_allocation.sol": {
            "content": "contract C {\n    function memorySize() internal pure returns (uint s) {\n        assembly { s := mload(0x40) }\n    }\n    function withValue() public pure returns (uint) {\n        uint[20] memory x;\n        uint memorySizeBefore = memorySize();\n        uint[20] memory t = x;\n        uint memorySizeAfter = memorySize();\n        return memorySizeAfter - memorySizeBefore;\n    }\n    function withoutValue() public pure returns (uint) {\n        uint[20] memory x;\n        uint memorySizeBefore = memorySize();\n        uint[20] memory t;\n        uint memorySizeAfter = memorySize();\n        return memorySizeAfter - memorySizeBefore;\n    }\n}\n// ----\n// withValue() -> 0x00\n// withoutValue() -> 0x0280\n"
        },
        "return_variable.sol": {
            "content": "contract C {\n    function memorySize() internal pure returns (uint s) {\n        assembly { s := mload(0x40) }\n    }\n    function f() public returns (uint, uint, uint) {\n        uint a = memorySize();\n        g();\n        uint b = memorySize();\n        h();\n        uint c = memorySize();\n        i();\n        uint d = memorySize();\n        return (b - a, c - b, d - c);\n    }\n    // In these functions, we do allocate memory in both cases.\n    // In `i()`, this could be avoided but we would have to check\n    // that all code paths return explicitly and provide a value.\n    function g() internal returns (uint[40] memory) {\n    }\n    function h() internal returns (uint[40] memory t) {\n    }\n    function i() internal returns (uint[40] memory) {\n        uint[40] memory x;\n        return x;\n    }\n}\n// ----\n// f() -> 0x0500, 0x0500, 0x0a00\n"
        },
        "memory_types_initialisation.sol": {
            "content": "contract Test {\n    mapping(uint=>uint) data;\n    function stat() public returns (uint[5] memory)\n    {\n        data[2] = 3; // make sure to use some memory\n    }\n    function dyn() public returns (uint[] memory) { stat(); }\n    function nested() public returns (uint[3][] memory) { stat(); }\n    function nestedStat() public returns (uint[3][7] memory) { stat(); }\n}\n// ----\n// stat() -> 0, 0, 0, 0, 0\n// dyn() -> 0x20, 0\n// nested() -> 0x20, 0\n// nestedStat() -> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
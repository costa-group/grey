{
    "language": "Solidity",
    "sources": {
        "operator_definition_shadowing_builtin_keccak256.sol": {
            "content": "type Int is int16;\n\nusing {keccak256 as +} for Int global;\n\nfunction keccak256(Int a, Int b) pure returns (Int) {\n    return Int.wrap(Int.unwrap(a) + Int.unwrap(b));\n}\n\ncontract C {\n    function test() public returns (Int) {\n        return Int.wrap(3) + Int.wrap(4);\n    }\n}\n// ----\n// test() -> 7\n"
        },
        "all_possible_operators.sol": {
            "content": "type Int is int8;\nusing {\n    bitor as |, bitand as &, bitxor as ^, bitnot as ~,\n    add as +, sub as -, unsub as -, mul as *, div as /, mod as %,\n    eq as ==, noteq as !=, lt as <, gt as >, leq as <=, geq as >=\n} for Int global;\n\nfunction bitor(Int x, Int y) pure returns (Int) { return Int.wrap(Int.unwrap(x) | Int.unwrap(y)); }\nfunction bitand(Int x, Int y) pure returns (Int) { return Int.wrap(Int.unwrap(x) & Int.unwrap(y)); }\nfunction bitxor(Int x, Int y) pure returns (Int) { return Int.wrap(Int.unwrap(x) ^ Int.unwrap(y)); }\nfunction bitnot(Int x) pure returns (Int) { return Int.wrap(~Int.unwrap(x)); }\n\nfunction add(Int x, Int y) pure returns (Int) { return Int.wrap(Int.unwrap(x) + Int.unwrap(y)); }\nfunction sub(Int x, Int y) pure returns (Int) { return Int.wrap(Int.unwrap(x) - Int.unwrap(y)); }\nfunction unsub(Int x) pure returns (Int) { return Int.wrap(-Int.unwrap(x)); }\nfunction mul(Int x, Int y) pure returns (Int) { return Int.wrap(Int.unwrap(x) * Int.unwrap(y)); }\nfunction div(Int x, Int y) pure returns (Int) { return Int.wrap(Int.unwrap(x) / Int.unwrap(y)); }\nfunction mod(Int x, Int y) pure returns (Int) { return Int.wrap(Int.unwrap(x) % Int.unwrap(y)); }\n\nfunction eq(Int x, Int y) pure returns (bool) { return Int.unwrap(x) == Int.unwrap(y); }\nfunction noteq(Int x, Int y) pure returns (bool) { return Int.unwrap(x) != Int.unwrap(y); }\nfunction lt(Int x, Int y) pure returns (bool) { return Int.unwrap(x) < Int.unwrap(y); }\nfunction gt(Int x, Int y) pure returns (bool) { return Int.unwrap(x) > Int.unwrap(y); }\nfunction leq(Int x, Int y) pure returns (bool) { return Int.unwrap(x) <= Int.unwrap(y); }\nfunction geq(Int x, Int y) pure returns (bool) { return Int.unwrap(x) >= Int.unwrap(y); }\n\ncontract C {\n    Int constant ZERO = Int.wrap(0);\n    Int constant ONE = Int.wrap(1);\n    Int constant TWO = Int.wrap(2);\n    Int constant THREE = Int.wrap(3);\n    Int constant SIX = Int.wrap(6);\n\n    function testBitwise() public pure {\n        assert(Int.unwrap(ONE | TWO) == 3);\n        assert(Int.unwrap(ONE | ZERO) == 1);\n\n        assert(Int.unwrap(ONE & THREE) == 1);\n        assert(Int.unwrap(ONE & ONE) == 1);\n\n        assert(Int.unwrap(TWO ^ TWO) == 0);\n        assert(Int.unwrap(TWO ^ ONE) == 3);\n\n        assert(Int.unwrap(~ZERO) == -1);\n        assert(Int.unwrap(~ONE) == -2);\n        assert(Int.unwrap(~TWO) == -3);\n    }\n\n    function testArithmetic() public pure {\n        assert(Int.unwrap(ONE + TWO) == 3);\n        assert(Int.unwrap(ONE + ZERO) == 1);\n\n        assert(Int.unwrap(TWO - ONE) == 1);\n        assert(Int.unwrap(THREE - THREE) == 0);\n\n        assert(Int.unwrap(-TWO) == -2);\n        assert(Int.unwrap(-ZERO) == 0);\n\n        assert(Int.unwrap(ONE * ONE) == 1);\n        assert(Int.unwrap(THREE * TWO) == 6);\n\n        assert(Int.unwrap(SIX / TWO) == 3);\n        assert(Int.unwrap(THREE / TWO) == 1);\n\n        assert(Int.unwrap(SIX % TWO) == 0);\n        assert(Int.unwrap(THREE % TWO) == 1);\n    }\n\n    function testComparison() public pure {\n        assert((ONE == ONE) == true);\n        assert((ONE == TWO) == false);\n\n        assert((ONE != ONE) == false);\n        assert((ONE != TWO) == true);\n\n        assert((ONE < TWO) == true);\n        assert((TWO < ONE) == false);\n\n        assert((ONE <= TWO) == true);\n        assert((TWO <= ONE) == false);\n\n        assert((ONE > TWO) == false);\n        assert((TWO > ONE) == true);\n\n        assert((ONE >= TWO) == false);\n        assert((TWO >= ONE) == true);\n    }\n}\n// ----\n// testBitwise() ->\n// testArithmetic() ->\n// testComparison() ->\n"
        },
        "operator_making_view_external_call.sol": {
            "content": "type Int32 is int32;\nusing {add as +, unsub as -} for Int32 global;\n\nfunction add(Int32 x, Int32 y) pure returns (Int32) {\n    return loadAdder().mul(x, y);\n}\n\nfunction unsub(Int32 x) pure returns (Int32) {\n    return loadAdder().inc(x);\n}\n\ninterface IAdderPure {\n    function mul(Int32, Int32) external pure returns (Int32);\n    function inc(Int32) external pure returns (Int32);\n}\n\ninterface IAdderView {\n    function mul(Int32, Int32) external view returns (Int32);\n    function inc(Int32) external view returns (Int32);\n}\n\ncontract Adder is IAdderView {\n    function mul(Int32 x, Int32 y) external view override returns (Int32) {\n        return Int32.wrap(Int32.unwrap(x) * Int32.unwrap(y));\n    }\n\n    function inc(Int32 x) external view override returns (Int32) {\n        return Int32.wrap(Int32.unwrap(x) + 1);\n    }\n}\n\nfunction storeAdder(IAdderView adder) pure {\n    assembly {\n        // This test would also work without assembly if we could hard-code an address here.\n        mstore(0, adder)\n    }\n}\n\nfunction loadAdder() pure returns (IAdderPure adder) {\n    assembly {\n        // The adder we stored is view but we cheat by using a modified version with pure functions\n        adder := mload(0)\n    }\n}\n\ncontract C {\n    function testMul(Int32 x, Int32 y) public returns (Int32) {\n        storeAdder(new Adder());\n\n        return x + y;\n    }\n\n    function testInc(Int32 x) public returns (Int32) {\n        storeAdder(new Adder());\n\n        return -x;\n    }\n}\n// ----\n// testMul(int32,int32): 42, 10 -> 420\n// gas irOptimized: 102563\n// gas legacy: 56978\n// gas legacy code: 127000\n// gas legacyOptimized: 55161\n// gas legacyOptimized code: 68400\n// testInc(int32): 42 -> 43\n// gas irOptimized: 102386\n// gas legacy: 56238\n// gas legacy code: 127000\n// gas legacyOptimized: 54851\n// gas legacyOptimized code: 68400\n"
        },
        "operator_return_parameter_cleanup.sol": {
            "content": "type U8 is uint8;\nusing {f as ~, g as +} for U8 global;\n\nfunction f(U8) pure returns (U8 z) {\n    assembly {\n        // Return a value with dirty bytes outside of uint8\n        z := 0xffff\n    }\n}\n\nfunction g(U8, U8) pure returns (U8 z) {\n    assembly {\n        // Return a value with dirty bytes outside of uint8\n        z := 0xffff\n    }\n}\n\ncontract C {\n    function testUnary() external pure returns (uint, uint) {\n        U8 a; // Value does not matter\n\n        U8 opResult = ~a;\n        U8 fResult = f(a);\n\n        // Get the slot, including bytes outside of uint8\n        uint opResultFull;\n        uint fResultFull;\n        assembly {\n            opResultFull := opResult\n            fResultFull := fResult\n        }\n\n        // If the result is not 0xff, no cleanup was performed.\n        return (opResultFull, fResultFull);\n    }\n\n    function testBinary() external pure returns (uint, uint) {\n        U8 a; // Value does not matter\n        U8 b; // Value does not matter\n\n        U8 opResult = a + b;\n        U8 fResult = g(a, b);\n\n        // Get the slot, including bytes outside of uint8\n        uint opResultFull;\n        uint fResultFull;\n        assembly {\n            opResultFull := opResult\n            fResultFull := fResult\n        }\n\n        // If the result is not 0xff, no cleanup was performed.\n        return (opResultFull, fResultFull);\n    }\n}\n// ----\n// testUnary() -> 0xffff, 0xffff\n// testBinary() -> 0xffff, 0xffff\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
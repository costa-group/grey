{
    "language": "Solidity",
    "sources": {
        "nested.sol": {
            "content": "contract C {\n    function g(bool b) public pure returns (uint, uint) {\n        require(b, \"failure\");\n        return (1, 2);\n    }\n    function f(bool cond1, bool cond2) public returns (uint x, uint y, bytes memory txt) {\n        try this.g(cond1) returns (uint a, uint b) {\n            try this.g(cond2) returns (uint a2, uint b2) {\n                (x, y) = (a, b);\n                txt = \"success\";\n            } catch Error(string memory s) {\n                x = 12;\n                txt = bytes(s);\n            } catch (bytes memory s) {\n                x = 13;\n                txt = s;\n            }\n        } catch Error(string memory s) {\n            x = 99;\n            txt = bytes(s);\n        } catch (bytes memory s) {\n            x = 98;\n            txt = s;\n        }\n    }\n}\n// ====\n// EVMVersion: >=byzantium\n// ----\n// f(bool,bool): true, true -> 1, 2, 96, 7, \"success\"\n// f(bool,bool): true, false -> 12, 0, 96, 7, \"failure\"\n// f(bool,bool): false, true -> 99, 0, 96, 7, \"failure\"\n// f(bool,bool): false, false -> 99, 0, 96, 7, \"failure\"\n"
        },
        "trivial.sol": {
            "content": "contract C {\n    function g(bool x) public pure {\n        require(x);\n    }\n    function f(bool x) public returns (uint) {\n        // Set the gas to make this work on pre-byzantium VMs\n        try this.g{gas: 8000}(x) {\n            return 1;\n        } catch {\n            return 2;\n        }\n    }\n}\n// ----\n// f(bool): true -> 1\n// f(bool): false -> 2\n"
        },
        "create.sol": {
            "content": "contract Reverts {\n    constructor(uint) { revert(\"test message.\"); }\n}\ncontract Succeeds {\n    constructor(uint) { }\n}\n\ncontract C {\n    function f() public returns (Reverts x, uint, string memory txt) {\n        uint i = 3;\n        try new Reverts(i) returns (Reverts r) {\n            x = r;\n            txt = \"success\";\n        } catch Error(string memory s) {\n            txt = s;\n        }\n    }\n    function g() public returns (Succeeds x, uint, string memory txt) {\n        uint i = 8;\n        try new Succeeds(i) returns (Succeeds r) {\n            x = r;\n            txt = \"success\";\n        } catch Error(string memory s) {\n            txt = s;\n        }\n    }\n}\n// ====\n// EVMVersion: >=byzantium\n// ----\n// f() -> 0, 0, 96, 13, \"test message.\"\n// g() -> 0x137aa4dfc0911524504fcd4d98501f179bc13b4a, 0, 96, 7, \"success\"\n"
        },
        "simple_notuple.sol": {
            "content": "contract C {\n    function g(bool b) public pure returns (uint x) {\n        require(b);\n        return 13;\n    }\n    function f(bool flag) public view returns (uint x) {\n        try this.g(flag) returns (uint a) {\n            x = a;\n        } catch {\n            x = 9;\n        }\n    }\n}\n// ====\n// EVMVersion: >=byzantium\n// ----\n// f(bool): true -> 13\n// f(bool): false -> 9\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
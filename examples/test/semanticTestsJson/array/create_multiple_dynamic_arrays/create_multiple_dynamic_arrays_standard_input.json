{
    "language": "Solidity",
    "sources": {
        "bytes_to_fixed_bytes_too_long.sol": {
            "content": "contract C {\n    bytes s = \"abcdefghabcdefghabcdefghabcdefgha\";\n\n    function fromMemory(bytes memory m) public returns (bytes32) {\n        return bytes32(m);\n    }\n    function fromCalldata(bytes calldata c) external returns (bytes32) {\n        return bytes32(c);\n    }\n    function fromStorage() external returns (bytes32) {\n        return bytes32(s);\n    }\n    function fromSlice(bytes calldata c) external returns (bytes32) {\n        return bytes32(c[0:33]);\n    }\n}\n// ----\n// fromMemory(bytes): 0x20, 33, \"abcdefghabcdefghabcdefghabcdefgh\", \"a\" -> \"abcdefghabcdefghabcdefghabcdefgh\"\n// fromCalldata(bytes): 0x20, 33, \"abcdefghabcdefghabcdefghabcdefgh\", \"a\" -> \"abcdefghabcdefghabcdefghabcdefgh\"\n// fromStorage() -> \"abcdefghabcdefghabcdefghabcdefgh\"\n// fromSlice(bytes): 0x20, 33, \"abcdefghabcdefghabcdefghabcdefgh\", \"a\" -> \"abcdefghabcdefghabcdefghabcdefgh\"\n"
        },
        "array_2d_new.sol": {
            "content": "contract C {\n\tfunction f(uint n) public pure returns (uint) {\n\t\tuint[][] memory a = new uint[][](2);\n\t\tfor (uint i = 0; i < 2; ++i)\n\t\t\ta[i] = new uint[](3);\n\t\treturn a[0][0] = n;\n\t}\n}\n// ----\n// f(uint256): 42 -> 42\n"
        },
        "array_3d_new.sol": {
            "content": "contract C {\n\tfunction f(uint n) public pure returns (uint) {\n\t\tuint[][][] memory a = new uint[][][](2);\n\t\tfor (uint i = 0; i < 2; ++i)\n\t\t{\n\t\t\ta[i] = new uint[][](3);\n\t\t\tfor (uint j = 0; j < 3; ++j)\n\t\t\t\ta[i][j] = new uint[](4);\n\t\t}\n\t\treturn a[1][1][1] = n;\n\t}\n}\n// ----\n// f(uint256): 42 -> 42\n"
        },
        "dynamic_multi_array_cleanup.sol": {
            "content": "contract c {\n    struct s { uint[][] d; }\n    s[] data;\n    function fill() public returns (uint) {\n        while (data.length < 3)\n            data.push();\n        while (data[2].d.length < 4)\n            data[2].d.push();\n        while (data[2].d[3].length < 5)\n            data[2].d[3].push();\n        data[2].d[3][4] = 8;\n        return data[2].d[3][4];\n    }\n    function clear() public { delete data; }\n}\n// ----\n// storageEmpty -> 1\n// fill() -> 8\n// gas irOptimized: 122985\n// gas legacy: 121602\n// gas legacyOptimized: 120589\n// storageEmpty -> 0\n// clear() ->\n// storageEmpty -> 1\n"
        },
        "create_multiple_dynamic_arrays.sol": {
            "content": "contract C {\n    function f() public returns (uint256) {\n        uint256[][] memory x = new uint256[][](42);\n        assert(x[0].length == 0);\n        x[0] = new uint256[](1);\n        x[0][0] = 1;\n        assert(x[4].length == 0);\n        x[4] = new uint256[](1);\n        x[4][0] = 2;\n        assert(x[10].length == 0);\n        x[10] = new uint256[](1);\n        x[10][0] = 44;\n        uint256[][] memory y = new uint256[][](24);\n        assert(y[0].length == 0);\n        y[0] = new uint256[](1);\n        y[0][0] = 1;\n        assert(y[4].length == 0);\n        y[4] = new uint256[](1);\n        y[4][0] = 2;\n        assert(y[10].length == 0);\n        y[10] = new uint256[](1);\n        y[10][0] = 88;\n        if (\n            (x[0][0] == y[0][0]) &&\n            (x[4][0] == y[4][0]) &&\n            (x[10][0] == 44) &&\n            (y[10][0] == 88)\n        ) return 7;\n        return 0;\n    }\n}\n// ----\n// f() -> 7\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
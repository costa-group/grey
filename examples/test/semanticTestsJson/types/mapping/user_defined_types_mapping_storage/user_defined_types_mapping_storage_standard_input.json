{
    "language": "Solidity",
    "sources": {
        "copy_struct_to_array_stored_in_mapping.sol": {
            "content": "pragma abicoder v2;\n\ncontract C {\n    struct S {\n        uint8 x;\n    }\n\n    constructor() {\n        s = S({x: 7});\n        m2[0].push();\n    }\n\n    S s;\n\n    mapping (uint8 => S[2]) m1;\n    mapping (uint8 => S[]) m2;\n\n    function from_storage_to_static_array() public returns (S[2] memory) {\n        m1[0][1] = s;\n        return m1[0];\n    }\n\n    function from_storage_to_dynamic_array() public returns (S[] memory) {\n        m2[0][0] = s;\n        return m2[0];\n    }\n\n    function from_memory_to_static_array() public returns (S[2] memory) {\n        S memory sLocal = s;\n        m1[0][1] = sLocal;\n        return m1[0];\n    }\n\n    function from_memory_to_dynamic_array() public returns (S[] memory) {\n        S memory sLocal = s;\n        m2[0][0] = sLocal;\n        return m2[0];\n    }\n\n    function from_calldata_to_static_array(S calldata sCalldata) public returns (S[2] memory) {\n        m1[0][1] = sCalldata;\n        return m1[0];\n    }\n\n    function from_calldata_to_dynamic_array(S calldata sCalldata) public returns (S[] memory) {\n        m2[0][0] = sCalldata;\n        return m2[0];\n    }\n}\n// ----\n// from_storage_to_static_array() -> 0, 7\n// from_storage_to_dynamic_array() -> 0x20, 1, 7\n// from_memory_to_static_array() -> 0, 7\n// from_memory_to_dynamic_array() -> 0x20, 1, 7\n// from_calldata_to_static_array((uint8)): 8 -> 0, 8\n// from_calldata_to_dynamic_array((uint8)): 8 -> 0x20, 1, 8\n"
        },
        "copy_from_mapping_to_mapping.sol": {
            "content": "pragma abicoder v2;\n\ncontract C {\n    struct S {\n        uint8[3] x;\n        uint8[][] y;\n        uint16 z;\n    }\n\n    mapping (uint8 => S) src;\n    mapping (uint8 => S) dst;\n\n    constructor() {\n        uint8[] memory d = new uint8[](2);\n        d[0] = 3;\n        d[1] = 4;\n\n        uint8[][] memory y = new uint8[][](2);\n        y[0] = d;\n        y[1] = d;\n\n        src[0] = S({x: [7, 8, 9], y: y, z: 13});\n    }\n\n    function f() public returns (S memory) {\n        dst[0] = src[0];\n        return dst[0];\n    }\n}\n// ----\n// f() -> 0x20, 7, 8, 9, 0xa0, 13, 2, 0x40, 0xa0, 2, 3, 4, 2, 3, 4\n// gas irOptimized: 197102\n// gas legacy: 199887\n// gas legacyOptimized: 196845\n"
        },
        "user_defined_types_mapping_storage.sol": {
            "content": "type A is uint;\ntype B is uint;\n\nlibrary L {\n  function f(mapping(A=>B) storage _m, B _v) public { _m[A.wrap(uint(2))] = _v; }\n  function f(mapping(uint=>uint) storage _m, uint _v) public { _m[uint(3)] = _v; }\n}\n\ncontract C {\n\tmapping(uint=>uint) uintMap;\n\tmapping(A=>B) abMap;\n\n\tfunction testAB() public returns (bool) {\n\t\tL.f(abMap, B.wrap(3));\n\t\treturn B.unwrap(abMap[A.wrap(uint(2))]) == 3;\n\t}\n\tfunction testUint() public returns (bool) {\n\t\tL.f(uintMap, 4);\n\t\treturn uintMap[3] == 4;\n\t}\n}\n// ----\n// library: L\n// testAB() -> true\n// testUint() -> true\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
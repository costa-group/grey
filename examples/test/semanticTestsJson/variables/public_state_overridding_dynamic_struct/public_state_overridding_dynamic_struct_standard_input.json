{
    "language": "Solidity",
    "sources": {
        "delete_transient_state_variable.sol": {
            "content": "contract C {\n    uint transient x;\n    function f() public returns (uint) {\n        x = 10;\n        delete x;\n        return x;\n    }\n}\n// ====\n// EVMVersion: >=cancun\n// ----\n// f() -> 0\n"
        },
        "transient_state_variable_cleanup_assignment.sol": {
            "content": "contract C {\n    uint8 transient x;\n    function f() public returns(uint256 r) {\n        uint8 y;\n        assembly { y := 0xFFFF }\n        x = y;\n        assembly {\n            r := tload(x.slot)\n        }\n\n    }\n}\n// ====\n// EVMVersion: >=cancun\n// ----\n// f() -> 0xff\n"
        },
        "transient_state_variable_tuple_assignment.sol": {
            "content": "contract C {\n    uint transient x;\n    uint y;\n    uint transient w;\n    uint z;\n\n    function f() public returns (uint, uint, uint) {\n        x = 1;\n        y = 2;\n        w = 3;\n        z = 4;\n\n        (x, y, w) = (y, w, z);\n        return (x, y, w);\n    }\n}\n// ====\n// EVMVersion: >=cancun\n// ----\n// f() -> 2, 3, 4\n"
        },
        "public_state_overridding.sol": {
            "content": "contract A\n{\n\tfunction test() external virtual returns (uint256)\n\t{\n\t\treturn 5;\n\t}\n}\ncontract X is A\n{\n\tuint256 public override test;\n\n\tfunction set() public { test = 2; }\n}\n// ----\n// test() -> 0\n// set() ->\n// test() -> 2\n"
        },
        "transient_function_type_state_variable.sol": {
            "content": "contract C {\n    function () external transient f;\n    function g() external {\n    }\n\n    function test() public returns (bool) {\n        assert(f != this.g);\n        f = this.g;\n\n        return f == this.g;\n    }\n}\n// ====\n// EVMVersion: >=cancun\n// ----\n// test() -> true\n"
        },
        "delete_transient_state_variable_non_zero_offset.sol": {
            "content": "contract C {\n    bytes14 transient x;\n    uint32  transient y;\n    uint112 transient z;\n\n    function f() public returns (bytes14, uint32, uint112) {\n        x = 0xffffffffffffffffffffffffffff;\n        y = 0xffffffff;\n        z = 0xffffffffffffffffffffffffffff;\n        delete y;\n        return (x, y, z);\n    }\n}\n// ====\n// EVMVersion: >=cancun\n// ----\n// f() -> 0xffffffffffffffffffffffffffff000000000000000000000000000000000000, 0, 0xffffffffffffffffffffffffffff\n"
        },
        "mapping_local_compound_assignment.sol": {
            "content": "contract test {\n    mapping(uint8 => uint8) m1;\n    mapping(uint8 => uint8) m2;\n    function f() public returns (uint8, uint8, uint8, uint8) {\n        mapping(uint8 => uint8) storage m = m1;\n        m[1] = 42;\n\n        (m = m2)[2] = 21;\n\n        return (m1[1], m1[2], m2[1], m2[2]);\n    }\n}\n// ----\n// f() -> 42, 0, 0, 21\n"
        },
        "transient_state_variable.sol": {
            "content": "contract C {\n    uint transient public x;\n\n    function f() public {\n        x = 8;\n    }\n    function g() public returns (uint) {\n        x = 0;\n        this.f();\n        return x;\n    }\n    function h() public returns (uint) {\n        return x;\n    }\n}\n// ====\n// EVMVersion: >=cancun\n// ----\n// x() -> 0\n// g() -> 8\n// h() -> 0\n"
        },
        "transient_state_variable_cleanup_tstore.sol": {
            "content": "contract C {\n    uint8 transient x;\n    function f() public returns(uint256 r) {\n        assembly {\n            tstore(x.slot, 0xFFFF)\n        }\n       return x;\n\n    }\n}\n// ====\n// EVMVersion: >=cancun\n// ----\n// f() -> 0xff\n"
        },
        "mapping_local_assignment.sol": {
            "content": "contract test {\n    mapping(uint8 => uint8) m1;\n    mapping(uint8 => uint8) m2;\n    function f() public returns (uint8, uint8, uint8, uint8) {\n        mapping(uint8 => uint8) storage m = m1;\n        m[1] = 42;\n\n        m = m2;\n        m[2] = 21;\n\n        return (m1[1], m1[2], m2[1], m2[2]);\n    }\n}\n// ----\n// f() -> 42, 0, 0, 21\n"
        },
        "mapping_local_tuple_assignment.sol": {
            "content": "contract test {\n    mapping(uint8 => uint8) m1;\n    mapping(uint8 => uint8) m2;\n    function f() public returns (uint8, uint8, uint8, uint8) {\n        mapping(uint8 => uint8) storage m = m1;\n        m[1] = 42;\n\n        uint8 v;\n        (m, v) = (m2, 21);\n        m[2] = v;\n\n        return (m1[1], m1[2], m2[1], m2[2]);\n    }\n}\n// ----\n// f() -> 42, 0, 0, 21\n"
        },
        "public_state_overridding_mapping_to_dynamic_struct.sol": {
            "content": "pragma abicoder               v2;\n\nstruct S { uint256 v; string s; }\n\ncontract A\n{\n\tfunction test(uint256 x) external virtual returns (uint256 v, string memory s)\n\t{\n\t    v = x;\n\t    s = \"test\";\n\t}\n}\ncontract X is A\n{\n\tmapping(uint256 => S) public override test;\n\n\tfunction set() public { test[42].v = 2; test[42].s = \"statevar\"; }\n}\n// ----\n// test(uint256): 0 -> 0, 64, 0\n// test(uint256): 42 -> 0, 64, 0\n// set() ->\n// test(uint256): 0 -> 0, 64, 0\n// test(uint256): 42 -> 2, 0x40, 8, \"statevar\"\n"
        },
        "transient_state_address_variable_members.sol": {
            "content": "contract C {\n    address transient a;\n    function f() public returns (uint) {\n        a = msg.sender;\n        return a.balance;\n    }\n    function g() public returns (uint) {\n        return a.balance;\n    }\n}\n// ====\n// EVMVersion: >=cancun\n// ----\n// constructor() ->\n// gas legacy: 59027\n// gas legacy code: 70400\n// account: 0 -> 0x1212121212121212121212121212120000000012\n// balance: 0x1212121212121212121212121212120000000012 -> 1267650600228229401496703205376\n// f() -> 1267650600228229401496703205376\n// g() -> 0\n"
        },
        "delete_local.sol": {
            "content": "contract test {\n    function delLocal() public returns (uint res){\n        uint v = 5;\n        delete v;\n        res = v;\n    }\n}\n// ----\n// delLocal() -> 0\n"
        },
        "transient_state_variable_slot_inline_assembly.sol": {
            "content": "contract C {\n    uint256 y;\n    uint256 transient x;\n    int8 transient w;\n    int z;\n    address transient a;\n    function f() public returns(uint256 s, uint256 o) {\n        assembly {\n            s := x.slot\n            o := x.offset\n        }\n    }\n    function g() public returns(uint256 s, uint256 o) {\n        assembly {\n            s := w.slot\n            o := w.offset\n        }\n    }\n    function h() public returns(uint256 s, uint256 o) {\n        assembly {\n            s := a.slot\n            o := a.offset\n        }\n    }\n}\n// ====\n// EVMVersion: >=cancun\n// ----\n// f() -> 0, 0\n// g() -> 1, 0\n// h() -> 1, 1\n"
        },
        "delete_locals.sol": {
            "content": "contract test {\n    function delLocal() public returns (uint res1, uint res2){\n        uint v = 5;\n        uint w = 6;\n        uint x = 7;\n        delete v;\n        res1 = w;\n        res2 = x;\n    }\n}\n// ----\n// delLocal() -> 6, 7\n"
        },
        "storing_invalid_boolean.sol": {
            "content": "contract C {\n    event Ev(bool);\n    bool public perm;\n    function set() public returns(uint) {\n        bool tmp;\n        assembly {\n            tmp := 5\n        }\n        perm = tmp;\n        return 1;\n    }\n    function ret() public returns(bool) {\n        bool tmp;\n        assembly {\n            tmp := 5\n        }\n        return tmp;\n    }\n    function ev() public returns(uint) {\n        bool tmp;\n        assembly {\n            tmp := 5\n        }\n        emit Ev(tmp);\n        return 1;\n    }\n}\n// ----\n// set() -> 1\n// perm() -> true\n// ret() -> true\n// ev() -> 1\n// ~ emit Ev(bool): true\n"
        },
        "transient_state_variable_slots_and_offsets.sol": {
            "content": "contract C {\n    uint128 transient x;\n    uint64 transient y;\n    uint64 transient w;\n    uint256 transient z;\n\n    function f() external returns (uint128, uint64, uint64, uint256) {\n        x = 1;\n        y = 2;\n        w = 3;\n        z = 4;\n\n        return (x, y, w, z);\n    }\n}\n\n// ====\n// EVMVersion: >=cancun\n// ----\n// f() -> 1, 2, 3, 4\n"
        },
        "transient_state_variable_udvt.sol": {
            "content": "type MyInt is int256;\ncontract C {\n    MyInt transient public x;\n\n    function f() public {\n        x = MyInt.wrap(2);\n    }\n    function g() public returns (MyInt) {\n        x = MyInt.wrap(0);\n        this.f();\n        return x;\n    }\n    function h() public returns (MyInt) {\n        return x;\n    }\n}\n// ====\n// EVMVersion: >=cancun\n// ----\n// x() -> 0\n// g() -> 2\n// h() -> 0\n"
        },
        "transient_state_enum_variable.sol": {
            "content": "contract C {\n    enum Pets { Dog, Cat, Bird, Fish }\n    Pets transient myPet;\n\n    function f() public {\n        myPet = Pets.Bird;\n        this.g();\n        assert(myPet == Pets.Cat);\n    }\n    function g() public {\n        myPet = Pets.Cat;\n    }\n}\n// ====\n// EVMVersion: >=cancun\n// ----\n// f() ->\n"
        },
        "public_state_overridding_dynamic_struct.sol": {
            "content": "pragma abicoder               v2;\n\nstruct S { uint256 v; string s; }\n\ncontract A\n{\n\tfunction test() external virtual returns (uint256 v, string memory s)\n\t{\n\t    v = 42;\n\t    s = \"test\";\n\t}\n}\ncontract X is A\n{\n\tS public override test;\n\n\tfunction set() public { test.v = 2; test.s = \"statevar\"; }\n}\n// ----\n// test() -> 0, 64, 0\n// set() ->\n// test() -> 2, 0x40, 8, \"statevar\"\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
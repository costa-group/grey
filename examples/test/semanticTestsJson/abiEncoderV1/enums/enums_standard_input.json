{
    "language": "Solidity",
    "sources": {
        "abi_decode_dynamic_array.sol": {
            "content": "contract C {\n    function f(bytes calldata data) external pure returns (uint256[] memory) {\n        return abi.decode(data, (uint256[]));\n    }\n}\n// ----\n// f(bytes): 0x20, 0xc0, 0x20, 0x4, 0x3, 0x4, 0x5, 0x6 -> 0x20, 0x4, 0x3, 0x4, 0x5, 0x6\n"
        },
        "return_dynamic_types_cross_call_out_of_range_2.sol": {
            "content": "contract C {\n    function dyn(uint x) public returns (bytes memory a) {\n        assembly {\n            mstore(0, 0x20)\n            mstore(0x20, 0x21)\n            return(0, x)\n        }\n    }\n    function f(uint x) public returns (bool) {\n        this.dyn(x);\n        return true;\n    }\n}\n// ====\n// EVMVersion: >homestead\n// ----\n// f(uint256): 0x60 -> FAILURE\n// f(uint256): 0x61 -> true\n// f(uint256): 0x80 -> true\n"
        },
        "dynamic_arrays.sol": {
            "content": "contract C {\n    function f(uint a, uint16[] memory b, uint c)\n            public pure returns (uint, uint, uint) {\n        return (b.length, b[a], c);\n    }\n}\n// ----\n// f(uint256,uint16[],uint256): 6, 0x60, 9, 7, 11, 12, 13, 14, 15, 16, 17 -> 7, 17, 9\n"
        },
        "byte_arrays.sol": {
            "content": "contract C {\n    function f(uint a, bytes memory b, uint c)\n            public pure returns (uint, uint, bytes1, uint) {\n        return (a, b.length, b[3], c);\n    }\n\n    function f_external(uint a, bytes calldata b, uint c)\n            external pure returns (uint, uint, bytes1, uint) {\n        return (a, b.length, b[3], c);\n    }\n}\n// ----\n// f(uint256,bytes,uint256): 6, 0x60, 9, 7, \"abcdefg\" -> 6, 7, \"d\", 9\n// f_external(uint256,bytes,uint256): 6, 0x60, 9, 7, \"abcdefg\" -> 6, 7, \"d\", 9\n"
        },
        "return_dynamic_types_cross_call_out_of_range_1.sol": {
            "content": "contract C {\n    function dyn(uint x) public returns (bytes memory a) {\n        assembly {\n            mstore(0, 0x20)\n            mstore(0x20, 0x21)\n            return(0, x)\n        }\n    }\n    function f(uint x) public returns (bool) {\n        this.dyn(x);\n        return true;\n    }\n}\n// ====\n// EVMVersion: =homestead\n// ----\n// f(uint256): 0x60 -> true\n// f(uint256): 0x7f -> true\n// f(uint256): 0x80 -> true"
        },
        "abi_encode_decode_simple.sol": {
            "content": "contract C {\n    function f() public pure returns (uint256, bytes memory) {\n        bytes memory arg = \"abcdefg\";\n        return abi.decode(abi.encode(uint256(33), arg), (uint256, bytes));\n    }\n}\n// ----\n// f() -> 0x21, 0x40, 0x7, \"abcdefg\"\n"
        },
        "abi_encode_rational.sol": {
            "content": "// Tests that rational numbers (even negative ones) are encoded properly.\ncontract C {\n    function f() public pure returns (bytes memory) {\n        return abi.encode(1, -2);\n    }\n}\n// ----\n// f() -> 0x20, 0x40, 0x1, -2\n"
        },
        "memory_params_in_external_function.sol": {
            "content": "contract C {\n    function f(bytes memory a, bytes calldata b, uint[] memory c)\n        external\n        pure\n        returns (uint, bytes1, uint, bytes1, uint, uint)\n    {\n        return (a.length, a[1], b.length, b[2], c.length, c[3]);\n    }\n    function g() public returns (uint, bytes1, uint, bytes1, uint, uint) {\n        uint[] memory x = new uint[](4);\n        x[3] = 7;\n        return this.f(\"abc\", \"def\", x);\n    }\n}\n// ----\n// g() -> 3, 0x6200000000000000000000000000000000000000000000000000000000000000, 3, 0x6600000000000000000000000000000000000000000000000000000000000000, 4, 7\n"
        },
        "bool_out_of_bounds.sol": {
            "content": "pragma abicoder v1;\ncontract C {\n\tfunction f(bool b) public pure returns (bool) { return b; }\n}\n// ====\n// ABIEncoderV1Only: true\n// compileViaYul: false\n// ----\n// f(bool): true -> true\n// f(bool): false -> false\n// f(bool): 0x000000 -> false\n// f(bool): 0xffffff -> true"
        },
        "return_dynamic_types_cross_call_simple.sol": {
            "content": "contract C {\n    function dyn() public returns (bytes memory) {\n        return \"1234567890123456789012345678901234567890\";\n    }\n    function f() public returns (bytes memory) {\n        return this.dyn();\n    }\n}\n// ====\n// EVMVersion: >homestead\n// ----\n// f() -> 0x20, 40, \"12345678901234567890123456789012\", \"34567890\"\n"
        },
        "abi_decode_trivial.sol": {
            "content": "contract C {\n    function f(bytes memory data) public pure returns (uint256) {\n        return abi.decode(data, (uint256));\n    }\n}\n// ----\n// f(bytes): 0x20, 0x20, 0x21 -> 33\n"
        },
        "abi_encode_empty_string.sol": {
            "content": "pragma abicoder v1;\ncontract C {\n    function f1() public returns (bytes memory) {\n        return abi.encode(\"\");\n    }\n    function f2(string calldata msg) public returns (bytes memory) {\n        return abi.encode(msg);\n    }\n    function g1() public returns (bytes memory) {\n        return abi.encodePacked(\"\");\n    }\n    function g2(string calldata msg) public returns (bytes memory) {\n        return abi.encodePacked(msg);\n    }\n    function h1() public returns (bytes memory) {\n        return abi.encodeWithSelector(0x00000001, \"\");\n    }\n    function h2(string calldata msg) public returns (bytes memory) {\n        return abi.encodeWithSelector(0x00000001, msg);\n    }\n}\n// ====\n// ABIEncoderV1Only: true\n// compileViaYul: false\n// ----\n// f1() -> 0x20, 0x40, 0x20, 0\n// f2(string): 0x20, 0 -> 0x20, 0x40, 0x20, 0\n// f2(string): 0x20, 0, 0 -> 0x20, 0x40, 0x20, 0\n// g1() -> 32, 0\n// g2(string): 0x20, 0 -> 0x20, 0\n// g2(string): 0x20, 0, 0 -> 0x20, 0\n// h1() -> 0x20, 0x44, 26959946667150639794667015087019630673637144422540572481103610249216, 862718293348820473429344482784628181556388621521298319395315527974912, 0\n// h2(string): 0x20, 0 -> 0x20, 0x44, 26959946667150639794667015087019630673637144422540572481103610249216, 862718293348820473429344482784628181556388621521298319395315527974912, 0\n// h2(string): 0x20, 0, 0 -> 0x20, 0x44, 26959946667150639794667015087019630673637144422540572481103610249216, 862718293348820473429344482784628181556388621521298319395315527974912, 0\n"
        },
        "enums.sol": {
            "content": "pragma abicoder v1;\ncontract C {\n    enum E { A, B }\n    function f(E e) public pure returns (uint x) {\n        assembly { x := e }\n    }\n}\n// ====\n// ABIEncoderV1Only: true\n// compileViaYul: false\n// ----\n// f(uint8): 0 -> 0\n// f(uint8): 1 -> 1\n// f(uint8): 2 -> 2\n// f(uint8): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff -> 0xff\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
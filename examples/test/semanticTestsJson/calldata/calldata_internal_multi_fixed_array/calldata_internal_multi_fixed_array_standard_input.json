{
    "language": "Solidity",
    "sources": {
        "calldata_struct.sol": {
            "content": "pragma abicoder v2;\n\nstruct S {\n    uint x;\n    uint y;\n}\n\nlibrary L {\n    function reverse(S calldata _s) internal pure returns (uint, uint) {\n        return (_s.y, _s.x);\n    }\n}\n\ncontract C {\n    function test(uint, S calldata _s, uint) external pure returns (uint, uint) {\n        return L.reverse(_s);\n    }\n}\n// ----\n// test(uint256,(uint256,uint256),uint256): 7, 66, 77, 4 -> 77, 66\n"
        },
        "calldata_array_index_range_access.sol": {
            "content": "pragma abicoder               v2;\ncontract C {\n    function f(uint256[] calldata x, uint256 s, uint256 e) external returns (uint256) {\n        return uint256[](x[s:e]).length;\n    }\n    function f(uint256[] calldata x, uint256 s, uint256 e, uint256 ss, uint256 ee) external returns (uint256) {\n        return uint256[](x[s:e][ss:ee]).length;\n    }\n    function f_s_only(uint256[] calldata x, uint256 s) external returns (uint256) {\n        return uint256[](x[s:]).length;\n    }\n    function f_e_only(uint256[] calldata x, uint256 e) external returns (uint256) {\n        return uint256[](x[:e]).length;\n    }\n    function g(uint256[] calldata x, uint256 s, uint256 e, uint256 idx) external returns (uint256) {\n        return uint256[](x[s:e])[idx];\n    }\n    function gg(uint256[] calldata x, uint256 s, uint256 e, uint256 idx) external returns (uint256) {\n        return x[s:e][idx];\n    }\n    function gg_s_only(uint256[] calldata x, uint256 s, uint256 idx) external returns (uint256) {\n        return x[s:][idx];\n    }\n    function gg_e_only(uint256[] calldata x, uint256 e, uint256 idx) external returns (uint256) {\n        return x[:e][idx];\n    }\n}\n// ----\n// f(uint256[],uint256,uint256): 0x60, 2, 4, 5, 1, 2, 3, 4, 5 -> 2\n// f(uint256[],uint256,uint256): 0x60, 2, 6, 5, 1, 2, 3, 4, 5 -> FAILURE\n// f(uint256[],uint256,uint256): 0x60, 3, 3, 5, 1, 2, 3, 4, 5 -> 0\n// f(uint256[],uint256,uint256): 0x60, 4, 3, 5, 1, 2, 3, 4, 5 -> FAILURE\n// f(uint256[],uint256,uint256): 0x60, 0, 3, 5, 1, 2, 3, 4, 5 -> 3\n// f(uint256[],uint256,uint256,uint256,uint256): 0xA0, 1, 3, 1, 2, 5, 1, 2, 3, 4, 5 -> 1\n// f(uint256[],uint256,uint256,uint256,uint256): 0xA0, 1, 3, 1, 4, 5, 1, 2, 3, 4, 5 -> FAILURE\n// f_s_only(uint256[],uint256): 0x40, 2, 5, 1, 2, 3, 4, 5 -> 3\n// f_s_only(uint256[],uint256): 0x40, 6, 5, 1, 2, 3, 4, 5 -> FAILURE\n// f_e_only(uint256[],uint256): 0x40, 3, 5, 1, 2, 3, 4, 5 -> 3\n// f_e_only(uint256[],uint256): 0x40, 6, 5, 1, 2, 3, 4, 5 -> FAILURE\n// g(uint256[],uint256,uint256,uint256): 0x80, 2, 4, 1, 5, 1, 2, 3, 4, 5 -> 4\n// g(uint256[],uint256,uint256,uint256): 0x80, 2, 4, 3, 5, 1, 2, 3, 4, 5 -> FAILURE, hex\"4e487b71\", 0x32\n// gg(uint256[],uint256,uint256,uint256): 0x80, 2, 4, 1, 5, 1, 2, 3, 4, 5 -> 4\n// gg(uint256[],uint256,uint256,uint256): 0x80, 2, 4, 3, 5, 1, 2, 3, 4, 5 -> FAILURE, hex\"4e487b71\", 0x32\n"
        },
        "calldata_array_length.sol": {
            "content": "pragma abicoder               v2;\ncontract C {\n    function f(uint256[] calldata x) external returns (uint256) {\n        return x.length;\n    }\n    function f(uint256[][] calldata x) external returns (uint256 l1, uint256 l2, uint256 l3) {\n        l1 = x.length;\n        if (l1 > 0) l2 = x[0].length;\n        if (l1 > 1) l3 = x[1].length;\n    }\n    function f(uint256[2] calldata x) external returns (uint256) {\n        return x.length;\n    }\n}\n// ----\n// f(uint256[]): 0x20, 0 -> 0\n// f(uint256[]): 0x20, 1, 23 -> 1\n// f(uint256[]): 0x20, 2, 23, 42 -> 2\n// f(uint256[]): 0x20, 3, 23, 42, 17 -> 3\n// f(uint256[2]): 23, 42 -> 2\n// f(uint256[][]): 0x20, 0 -> 0, 0, 0\n// f(uint256[][]): 0x20, 1, 0x20, 0 -> 1, 0, 0\n// f(uint256[][]): 0x20, 1, 0x00 -> 1, 0, 0\n// f(uint256[][]): 0x20, 1, 0x20, 1, 23 -> 1, 1, 0\n// f(uint256[][]): 0x20, 1, 0x20, 2, 23, 42 -> 1, 2, 0\n// f(uint256[][]): 0x20, 1, 0x40, 0, 2, 23, 42 -> 1, 2, 0\n// f(uint256[][]): 0x20, 1, -32 -> 1, 1, 0\n// f(uint256[][]): 0x20, 2, 0x40, 0x40, 2, 23, 42 -> 2, 2, 2\n// f(uint256[][]): 0x20, 2, 0x40, 0xa0, 2, 23, 42, 0 -> 2, 2, 0\n// f(uint256[][]): 0x20, 2, 0xA0, 0x40, 2, 23, 42, 0 -> 2, 0, 2\n// f(uint256[][]): 0x20, 2, 0x40, 0xA0, 2, 23, 42, 1, 17 -> 2, 2, 1\n// f(uint256[][]): 0x20, 2, 0x40, 0xA0, 2, 23, 42, 2, 17, 13 -> 2, 2, 2\n"
        },
        "calldata_attached_to_struct.sol": {
            "content": "pragma abicoder v2;\n\nstruct S {\n    uint x;\n    uint y;\n}\n\nlibrary L {\n    function reverse(S calldata _s) internal pure returns (uint, uint) {\n        return (_s.y, _s.x);\n    }\n}\n\ncontract C {\n    using L for S;\n\n    function test(uint, S calldata _s, uint) external pure returns (uint, uint) {\n        return _s.reverse();\n    }\n}\n// ----\n// test(uint256,(uint256,uint256),uint256): 7, 66, 77, 4 -> 77, 66\n"
        },
        "calldata_bytes_to_memory_encode.sol": {
            "content": "contract C {\n  function f(bytes calldata data) external returns (bytes memory) {\n    return abi.encode(bytes(data));\n  }\n}\n// ----\n// f(bytes): 0x20, 0x08, \"abcdefgh\" -> 0x20, 0x60, 0x20, 8, 44048183304486788309563647967830685498285570828042699209880294173606615711744\n"
        },
        "calldata_bytes_array_bounds.sol": {
            "content": "pragma abicoder               v2;\ncontract C {\n    function f(bytes[] calldata a, uint256 i) external returns (uint) {\n        return uint8(a[0][i]);\n    }\n}\n// ----\n// f(bytes[],uint256): 0x40, 0, 1, 0x20, 2, hex\"6162\" -> 0x61\n// f(bytes[],uint256): 0x40, 1, 1, 0x20, 2, hex\"6162\" -> 0x62\n// f(bytes[],uint256): 0x40, 2, 1, 0x20, 2, hex\"6162\" -> FAILURE, hex\"4e487b71\", 0x32\n"
        },
        "calldata_bytes_to_memory.sol": {
            "content": "contract C {\n  function f(bytes calldata data) external returns (bytes32) {\n    return keccak256(bytes(data));\n  }\n}\n// ----\n// f(bytes): 0x20, 0x08, \"abcdefgh\" -> 0x48624fa43c68d5c552855a4e2919e74645f683f5384f72b5b051b71ea41d4f2d\n"
        },
        "calldata_array_dynamic_bytes.sol": {
            "content": "pragma abicoder               v2;\n\n\ncontract C {\n    function f1(bytes[1] calldata a)\n        external\n        returns (uint256, uint256, uint256, uint256)\n    {\n        return (a[0].length, uint8(a[0][0]), uint8(a[0][1]), uint8(a[0][2]));\n    }\n\n    function f2(bytes[1] calldata a, bytes[1] calldata b)\n        external\n        returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256)\n    {\n        return (\n            a[0].length,\n            uint8(a[0][0]),\n            uint8(a[0][1]),\n            uint8(a[0][2]),\n            b[0].length,\n            uint8(b[0][0]),\n            uint8(b[0][1])\n        );\n    }\n\n    function g1(bytes[2] calldata a)\n        external\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        return (\n            a[0].length,\n            uint8(a[0][0]),\n            uint8(a[0][1]),\n            uint8(a[0][2]),\n            a[1].length,\n            uint8(a[1][0]),\n            uint8(a[1][1]),\n            uint8(a[1][2])\n        );\n    }\n\n    function g2(bytes[] calldata a) external returns (uint256[8] memory) {\n        return [\n            a.length,\n            a[0].length,\n            uint8(a[0][0]),\n            uint8(a[0][1]),\n            a[1].length,\n            uint8(a[1][0]),\n            uint8(a[1][1]),\n            uint8(a[1][2])\n        ];\n    }\n}\n\n// via yul disabled because of stack issues.\n\n// ====\n// compileViaYul: false\n// ----\n// f1(bytes[1]): 0x20, 0x20, 0x3, hex\"0102030000000000000000000000000000000000000000000000000000000000\" -> 0x3, 0x1, 0x2, 0x3\n// f2(bytes[1],bytes[1]): 0x40, 0xa0, 0x20, 0x3, hex\"0102030000000000000000000000000000000000000000000000000000000000\", 0x20, 0x2, hex\"0102000000000000000000000000000000000000000000000000000000000000\" -> 0x3, 0x1, 0x2, 0x3, 0x2, 0x1, 0x2\n// g1(bytes[2]): 0x20, 0x40, 0x80, 0x3, hex\"0102030000000000000000000000000000000000000000000000000000000000\", 0x3, hex\"0405060000000000000000000000000000000000000000000000000000000000\" -> 0x3, 0x1, 0x2, 0x3, 0x3, 0x4, 0x5, 0x6\n// g1(bytes[2]): 0x20, 0x40, 0x40, 0x3, hex\"0102030000000000000000000000000000000000000000000000000000000000\" -> 0x3, 0x1, 0x2, 0x3, 0x3, 0x1, 0x2, 0x3\n// g2(bytes[]): 0x20, 0x2, 0x40, 0x80, 0x2, hex\"0102000000000000000000000000000000000000000000000000000000000000\", 0x3, hex\"0405060000000000000000000000000000000000000000000000000000000000\" -> 0x2, 0x2, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6\n"
        },
        "calldata_array_three_dimensional.sol": {
            "content": "pragma abicoder               v2;\n\ncontract C {\n\tfunction f(uint256[][2][] calldata x, uint256 i, uint256 j, uint256 k) external returns (uint256 a, uint256 b, uint256 c, uint256 d) {\n\t\ta = x.length;\n\t\tb = x[i].length;\n\t\tc = x[i][j].length;\n\t\td = x[i][j][k];\n    }\n}\n// ----\n// f(uint256[][2][],uint256,uint256,uint256): 0x80, 0, 0, 0, 1, 0x20, 0x40, 0x80, 1, 42, 1, 23 -> 1, 2, 1, 42\n// f(uint256[][2][],uint256,uint256,uint256): 0x80, 0, 1, 0, 1, 0x20, 0x40, 0x80, 1, 42, 1, 23 -> 1, 2, 1, 23\n// f(uint256[][2][],uint256,uint256,uint256): 0x80, 0, 1, 0, 1, 0x20, 0x40, 0x80, 1, 42, 2, 23, 17 -> 1, 2, 2, 23\n// f(uint256[][2][],uint256,uint256,uint256): 0x80, 0, 1, 1, 1, 0x20, 0x40, 0x80, 1, 42, 2, 23, 17 -> 1, 2, 2, 17\n// f(uint256[][2][],uint256,uint256,uint256): 0x80, 1, 0, 0, 1, 0x20, 0x40, 0x80, 1, 42, 1, 23 -> FAILURE, hex\"4e487b71\", 0x32\n// f(uint256[][2][],uint256,uint256,uint256): 0x80, 0, 2, 0, 1, 0x20, 0x40, 0x80, 1, 42, 1, 23 -> FAILURE, hex\"4e487b71\", 0x32\n// f(uint256[][2][],uint256,uint256,uint256): 0x80, 0, 2, 0, 1, 0x20, 0x40, 0x80, 1, 42, 1, 23 -> FAILURE, hex\"4e487b71\", 0x32\n"
        },
        "calldata_struct_cleaning.sol": {
            "content": "pragma abicoder               v2;\n\n\ncontract C {\n    struct S {\n        uint8 a;\n        bytes1 b;\n    }\n\n    function f(S calldata s) external pure returns (uint256 a, bytes32 b) {\n        uint8 tmp1 = s.a;\n        bytes1 tmp2 = s.b;\n        assembly {\n            a := tmp1\n            b := tmp2\n        }\n    }\n}\n// ----\n// f((uint8,bytes1)): 0x12, hex\"3400000000000000000000000000000000000000000000000000000000000000\" -> 0x12, hex\"3400000000000000000000000000000000000000000000000000000000000000\" # double check that the valid case goes through #\n// f((uint8,bytes1)): 0x1234, hex\"5678000000000000000000000000000000000000000000000000000000000000\" -> FAILURE\n// f((uint8,bytes1)): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff -> FAILURE\n"
        },
        "calldata_internal_function_pointer.sol": {
            "content": "contract C {\n    function(bytes calldata) returns (bytes1) x;\n    constructor() { x = f; }\n    function f(bytes calldata b) internal pure returns (bytes1) {\n        return b[2];\n    }\n    function h(bytes calldata b) external returns (bytes1) {\n        return x(b);\n    }\n    function g() external returns (bytes1) {\n        bytes memory a = new bytes(34);\n        a[2] = bytes1(uint8(7));\n        return this.h(a);\n    }\n}\n// ----\n// g() -> 0x0700000000000000000000000000000000000000000000000000000000000000\n"
        },
        "calldata_internal_multi_fixed_array.sol": {
            "content": "contract C {\n    function g(uint[3][2] calldata s) internal pure returns (uint, uint[3] calldata) {\n        return (s[0][1], s[1]);\n    }\n    function f(uint, uint[3][2] calldata s, uint) external pure returns (uint, uint) {\n        (uint x, uint[3] calldata y) = g(s);\n        return (x, y[0]);\n    }\n    function g() public returns (uint, uint) {\n        uint[3][2] memory x;\n        x[0][1] = 7;\n        x[1][0] = 8;\n        return this.f(4, x, 5);\n    }\n}\n// ----\n// g() -> 7, 8\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
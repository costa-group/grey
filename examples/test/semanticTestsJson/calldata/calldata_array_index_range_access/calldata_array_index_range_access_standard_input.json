{
    "language": "Solidity",
    "sources": {
        "calldata_struct.sol": {
            "content": "pragma abicoder v2;\n\nstruct S {\n    uint x;\n    uint y;\n}\n\nlibrary L {\n    function reverse(S calldata _s) internal pure returns (uint, uint) {\n        return (_s.y, _s.x);\n    }\n}\n\ncontract C {\n    function test(uint, S calldata _s, uint) external pure returns (uint, uint) {\n        return L.reverse(_s);\n    }\n}\n// ----\n// test(uint256,(uint256,uint256),uint256): 7, 66, 77, 4 -> 77, 66\n"
        },
        "calldata_array_index_range_access.sol": {
            "content": "pragma abicoder               v2;\ncontract C {\n    function f(uint256[] calldata x, uint256 s, uint256 e) external returns (uint256) {\n        return uint256[](x[s:e]).length;\n    }\n    function f(uint256[] calldata x, uint256 s, uint256 e, uint256 ss, uint256 ee) external returns (uint256) {\n        return uint256[](x[s:e][ss:ee]).length;\n    }\n    function f_s_only(uint256[] calldata x, uint256 s) external returns (uint256) {\n        return uint256[](x[s:]).length;\n    }\n    function f_e_only(uint256[] calldata x, uint256 e) external returns (uint256) {\n        return uint256[](x[:e]).length;\n    }\n    function g(uint256[] calldata x, uint256 s, uint256 e, uint256 idx) external returns (uint256) {\n        return uint256[](x[s:e])[idx];\n    }\n    function gg(uint256[] calldata x, uint256 s, uint256 e, uint256 idx) external returns (uint256) {\n        return x[s:e][idx];\n    }\n    function gg_s_only(uint256[] calldata x, uint256 s, uint256 idx) external returns (uint256) {\n        return x[s:][idx];\n    }\n    function gg_e_only(uint256[] calldata x, uint256 e, uint256 idx) external returns (uint256) {\n        return x[:e][idx];\n    }\n}\n// ----\n// f(uint256[],uint256,uint256): 0x60, 2, 4, 5, 1, 2, 3, 4, 5 -> 2\n// f(uint256[],uint256,uint256): 0x60, 2, 6, 5, 1, 2, 3, 4, 5 -> FAILURE\n// f(uint256[],uint256,uint256): 0x60, 3, 3, 5, 1, 2, 3, 4, 5 -> 0\n// f(uint256[],uint256,uint256): 0x60, 4, 3, 5, 1, 2, 3, 4, 5 -> FAILURE\n// f(uint256[],uint256,uint256): 0x60, 0, 3, 5, 1, 2, 3, 4, 5 -> 3\n// f(uint256[],uint256,uint256,uint256,uint256): 0xA0, 1, 3, 1, 2, 5, 1, 2, 3, 4, 5 -> 1\n// f(uint256[],uint256,uint256,uint256,uint256): 0xA0, 1, 3, 1, 4, 5, 1, 2, 3, 4, 5 -> FAILURE\n// f_s_only(uint256[],uint256): 0x40, 2, 5, 1, 2, 3, 4, 5 -> 3\n// f_s_only(uint256[],uint256): 0x40, 6, 5, 1, 2, 3, 4, 5 -> FAILURE\n// f_e_only(uint256[],uint256): 0x40, 3, 5, 1, 2, 3, 4, 5 -> 3\n// f_e_only(uint256[],uint256): 0x40, 6, 5, 1, 2, 3, 4, 5 -> FAILURE\n// g(uint256[],uint256,uint256,uint256): 0x80, 2, 4, 1, 5, 1, 2, 3, 4, 5 -> 4\n// g(uint256[],uint256,uint256,uint256): 0x80, 2, 4, 3, 5, 1, 2, 3, 4, 5 -> FAILURE, hex\"4e487b71\", 0x32\n// gg(uint256[],uint256,uint256,uint256): 0x80, 2, 4, 1, 5, 1, 2, 3, 4, 5 -> 4\n// gg(uint256[],uint256,uint256,uint256): 0x80, 2, 4, 3, 5, 1, 2, 3, 4, 5 -> FAILURE, hex\"4e487b71\", 0x32\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
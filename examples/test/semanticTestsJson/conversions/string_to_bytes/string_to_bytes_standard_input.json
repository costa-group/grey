{
    "language": "Solidity",
    "sources": {
        "function_type_array_to_storage.sol": {
            "content": "contract C {\n    function () external returns(uint)[1] externalDefaultArray;\n    function () external view returns(uint)[1] externalViewArray;\n    function () external pure returns(uint)[1] externalPureArray;\n\n    function () internal returns(uint)[1] internalDefaultArray;\n    function () internal view returns(uint)[1] internalViewArray;\n    function () internal pure returns(uint)[1] internalPureArray;\n\n    function externalDefault() external returns(uint) { return 11; }\n    function externalView() external view returns(uint) { return 12; }\n    function externalPure() external pure returns(uint) { return 13; }\n\n    function internalDefault() internal returns(uint) { return 21; }\n    function internalView() internal view returns(uint) { return 22; }\n    function internalPure() internal pure returns(uint) { return 23; }\n\n    function testViewToDefault() public returns (uint, uint) {\n        externalDefaultArray = [this.externalView];\n        internalDefaultArray = [internalView];\n\n        return (externalDefaultArray[0](), internalDefaultArray[0]());\n    }\n\n    function testPureToDefault() public returns (uint, uint) {\n        externalDefaultArray = [this.externalPure];\n        internalDefaultArray = [internalPure];\n\n        return (externalDefaultArray[0](), internalDefaultArray[0]());\n    }\n\n    function testPureToView() public returns (uint, uint) {\n        externalViewArray = [this.externalPure];\n        internalViewArray = [internalPure];\n\n        return (externalViewArray[0](), internalViewArray[0]());\n    }\n}\n// ----\n// testViewToDefault() -> 12, 22\n// testPureToDefault() -> 13, 23\n// testPureToView() -> 13, 23\n"
        },
        "string_to_bytes.sol": {
            "content": "contract C {\n\tfunction f(string memory s) public pure returns (bytes memory t) {\n\t\tt = bytes(s);\n\t}\n}\n// ----\n// f(string): 32, 5, \"Hello\" -> 32, 5, \"Hello\"\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
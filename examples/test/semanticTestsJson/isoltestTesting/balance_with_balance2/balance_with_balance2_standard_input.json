{
    "language": "Solidity",
    "sources": {
        "balance_with_balance.sol": {
            "content": "contract ClientReceipt {\n    constructor() payable {}\n}\n// ----\n// constructor(), 1000 wei ->\n// balance -> 1000\n"
        },
        "account.sol": {
            "content": "contract AccountBuiltinTest {\n    function who_am_i() public returns (address result) {\n        result = msg.sender;\n    }\n}\n// ----\n// constructor()\n// account: 0 -> 0x1212121212121212121212121212120000000012\n// who_am_i() -> 0x1212121212121212121212121212120000000012\n// balance: 0x1212121212121212121212121212120000000012 -> 1267650600228229401496703205376\n// account: 1 -> 0x1212121212121212121212121212120000001012\n// who_am_i() -> 0x1212121212121212121212121212120000001012\n// balance: 0x1212121212121212121212121212120000001012 -> 1267650600228229401496703205376\n// account: 2 -> 0x1212121212121212121212121212120000002012\n// who_am_i() -> 0x1212121212121212121212121212120000002012\n// balance: 0x1212121212121212121212121212120000002012 -> 1267650600228229401496703205376\n// account: 3 -> 0x1212121212121212121212121212120000003012\n// who_am_i() -> 0x1212121212121212121212121212120000003012\n// balance: 0x1212121212121212121212121212120000003012 -> 1267650600228229401496703205376\n// account: 4 -> 0x1212121212121212121212121212120000004012\n// who_am_i() -> 0x1212121212121212121212121212120000004012\n// balance: 0x1212121212121212121212121212120000004012 -> 1267650600228229401496703205376\n// account: 5 -> 0x1212121212121212121212121212120000005012\n// who_am_i() -> 0x1212121212121212121212121212120000005012\n// balance: 0x1212121212121212121212121212120000005012 -> 1267650600228229401496703205376\n// account: 6 -> 0x1212121212121212121212121212120000006012\n// who_am_i() -> 0x1212121212121212121212121212120000006012\n// balance: 0x1212121212121212121212121212120000006012 -> 1267650600228229401496703205376\n// account: 7 -> 0x1212121212121212121212121212120000007012\n// who_am_i() -> 0x1212121212121212121212121212120000007012\n// balance: 0x1212121212121212121212121212120000007012 -> 1267650600228229401496703205376\n// account: 8 -> 0x1212121212121212121212121212120000008012\n// who_am_i() -> 0x1212121212121212121212121212120000008012\n// balance: 0x1212121212121212121212121212120000008012 -> 1267650600228229401496703205376\n// account: 9 -> 0x1212121212121212121212121212120000009012\n// who_am_i() -> 0x1212121212121212121212121212120000009012\n// balance: 0x1212121212121212121212121212120000009012 -> 1267650600228229401496703205376\n// account: 10 -> 0x121212121212121212121212121212000000a012\n// who_am_i() -> 0x121212121212121212121212121212000000a012\n// balance: 0x121212121212121212121212121212000000a012 -> 0\n// account: 11 -> 0x121212121212121212121212121212000000b012\n// who_am_i() -> 0x121212121212121212121212121212000000b012\n// balance: 0x121212121212121212121212121212000000b012 -> 0\n// account: 12 -> 0x121212121212121212121212121212000000c012\n// who_am_i() -> 0x121212121212121212121212121212000000c012\n// balance: 0x121212121212121212121212121212000000c012 -> 0\n"
        },
        "balance_without_balance.sol": {
            "content": "contract ClientReceipt {\n}\n// ----\n// balance -> 0\n// balance: 0x0000000000000000000000000000000000000000 -> 0\n"
        },
        "balance_other_contract.sol": {
            "content": "contract Other {\n    constructor() payable {\n    }\n    function getAddress() public returns (address) {\n        return address(this);\n    }\n}\ncontract ClientReceipt {\n    Other other;\n    constructor() payable {\n        other = new Other{value:500}();\n    }\n    function getAddress() public returns (address) {\n        return other.getAddress();\n    }\n}\n// ----\n// constructor(), 2000 wei ->\n// gas irOptimized: 114353\n// gas irOptimized code: 58800\n// gas legacy: 118617\n// gas legacy code: 111400\n// gas legacyOptimized: 114067\n// gas legacyOptimized code: 59800\n// balance -> 1500\n// gas irOptimized: 191881\n// gas legacy: 235167\n// gas legacyOptimized: 180756\n// getAddress() -> 0x137aa4dfc0911524504fcd4d98501f179bc13b4a\n// balance: 0x137aa4dfc0911524504fcd4d98501f179bc13b4a -> 500\n"
        },
        "format_raw_string_with_control_chars.sol": {
            "content": "contract C {\n    function f(string memory s) external pure returns (string memory) {\n        return s;\n    }\n}\n// NOTE: The test is here to illustrate the problem with formatting control chars in strings in\n// test expectations but unfortunately it can only be triggered manually. It does not test anything\n// unless you introduce a difference in expectations to force isoltest to reformat them.\n// ----\n// f(string): 0x20, 16, \"\\xf0\\x9f\\x98\\x83\\xf0\\x9f\\x98\\x83\\xf0\\x9f\\x98\\x83\\xf0\\x9f\\x98\\x83\" -> 0x20, 16, \"\\xf0\\x9f\\x98\\x83\\xf0\\x9f\\x98\\x83\\xf0\\x9f\\x98\\x83\\xf0\\x9f\\x98\\x83\" # Input/Output: \"\ud83d\ude03\ud83d\ude03\ud83d\ude03\ud83d\ude03\" #\n"
        },
        "balance_with_balance2.sol": {
            "content": "contract ClientReceipt {\n    constructor() payable {}\n}\n// ----\n// constructor(), 1 ether ->\n// balance -> 1000000000000000000\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
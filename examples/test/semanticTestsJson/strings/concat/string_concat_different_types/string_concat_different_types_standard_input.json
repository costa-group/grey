{
    "language": "Solidity",
    "sources": {
        "string_concat_empty_strings.sol": {
            "content": "contract C {\n    function f() public returns (string memory) {\n        string memory b = \"\";\n        return string.concat(\n            string.concat(b),\n            string.concat(b, b),\n            string.concat(\"\", b),\n            string.concat(b, \"\")\n        );\n    }\n\n    function g() public returns (string memory) {\n        return string.concat(\"\", \"abc\", hex\"\", \"abc\", unicode\"\");\n    }\n\n    function h() public returns (string memory) {\n        string memory b = \"\";\n        return string.concat(b, \"abc\", b, \"abc\", b);\n    }\n}\n// ----\n// f() -> 0x20, 0\n// g() -> 0x20, 6, \"abcabc\"\n// h() -> 0x20, 6, \"abcabc\"\n"
        },
        "string_concat_nested.sol": {
            "content": "contract C {\n    function f(string memory a, string memory b, string memory c) public returns (string memory) {\n        return string.concat(string.concat(a, b), c);\n    }\n}\n// ----\n// f(string,string,string): 0x60, 0x60, 0x60, 2, \"ab\" -> 0x20, 6, \"ababab\"\n"
        },
        "string_concat_2_args.sol": {
            "content": "contract C {\n    function f(string memory a, string memory b) public returns (string memory) {\n        return string.concat(a, b);\n    }\n}\n// ----\n// f(string,string): 0x40, 0x80, 32, \"abcdabcdabcdabcdabcdabcdabcdabcd\", 5, \"bcdef\" -> 0x20, 0x25, 0x6162636461626364616263646162636461626364616263646162636461626364, 44502269928904312298000709931354278973409164155382318144318241583783949107200\n// f(string,string): 0x40, 0xa0, 64, \"abcdabcdabcdabcdabcdabcdabcdabcd\", \"abcdabcdabcdabcdabcdabcdabcdabcd\", 5, \"bcdef\" -> 0x20, 0x45, 0x6162636461626364616263646162636461626364616263646162636461626364, 0x6162636461626364616263646162636461626364616263646162636461626364, 44502269928904312298000709931354278973409164155382318144318241583783949107200\n// f(string,string): 0x40, 0x80, 3, \"abc\", 3, \"def\" -> 0x20, 6, \"abcdef\"\n// f(string,string): 0x40, 0xa0, 34, \"abcdabcdabcdabcdabcdabcdabcdabcd\", \"ab\", 30, \"cdabcdabcdabcdabcdabcdabcdabcd\" -> 0x20, 0x40, 0x6162636461626364616263646162636461626364616263646162636461626364, 0x6162636461626364616263646162636461626364616263646162636461626364\n// f(string,string): 0x40, 0xa0, 34, \"abcdabcdabcdabcdabcdabcdabcdabcd\", \"ab\", 34, \"cdabcdabcdabcdabcdabcdabcdabcdab\", \"cd\" -> 0x20, 0x44, 0x6162636461626364616263646162636461626364616263646162636461626364, 0x6162636461626364616263646162636461626364616263646162636461626364, 44048183293808120317390542201052832727062033572611867748297851798484192067584\n// f(string,string): 0x40, 0x80, 3, \"abc\", 30, \"dabcdabcdabcdabcdabcdabcdabcda\" -> 0x20, 0x21, 0x6162636461626364616263646162636461626364616263646162636461626364, 43874346312576839672212443538448152585028080127215369968075725190498334277632\n"
        },
        "string_concat_empty_argument_list.sol": {
            "content": "contract C {\n    function f() public returns (string memory) {\n        return string.concat();\n    }\n}\n// ----\n// f() -> 0x20, 0\n"
        },
        "string_concat_different_types.sol": {
            "content": "contract C{\n    string s = \"bcdef\";\n\n    function f(string memory a) public returns (string memory) {\n        return string.concat(a, \"bcdef\");\n    }\n    function g(string calldata a) public returns (string memory) {\n        return string.concat(a, \"abcdefghabcdefghabcdefghabcdefghab\");\n    }\n    function h(string calldata a) public returns (string memory) {\n        return string.concat(a, s);\n    }\n    function j(string calldata a) public returns (string memory) {\n        string storage ref = s;\n        return string.concat(a, ref, s);\n    }\n    function k(string calldata a, bytes memory b) public returns (string memory) {\n        return string.concat(a, string(b));\n    }\n    function slice(string calldata a) public returns (string memory) {\n        require(bytes(a).length > 2, \"\");\n        return string.concat(a[:2], a[2:]);\n    }\n    function strParam(bytes calldata a) public returns (string memory) {\n        return string.concat(string(a), \"bcdef\");\n    }\n}\n// ----\n// f(string): 0x20, 32, \"abcdabcdabcdabcdabcdabcdabcdabcd\" -> 0x20, 0x25, 0x6162636461626364616263646162636461626364616263646162636461626364, 44502269928904312298000709931354278973409164155382318144318241583783949107200\n// g(string): 0x20, 32, \"abcdabcdabcdabcdabcdabcdabcdabcd\" -> 0x20, 0x42, 0x6162636461626364616263646162636461626364616263646162636461626364, 0x6162636465666768616263646566676861626364656667686162636465666768, 44047497324925121336511606693520958599579173549109180625971642598225011015680\n// h(string): 0x20, 32, \"abcdabcdabcdabcdabcdabcdabcdabcd\" -> 0x20, 0x25, 0x6162636461626364616263646162636461626364616263646162636461626364, 44502269928904312298000709931354278973409164155382318144318241583783949107200\n// j(string): 0x20, 32, \"abcdabcdabcdabcdabcdabcdabcdabcd\" -> 0x20, 0x2a, 0x6162636461626364616263646162636461626364616263646162636461626364, 44502269928944786876717917111204727192787026596791669343131645116682757734400\n// k(string,bytes): 0x40, 0x80, 32, \"abcdabcdabcdabcdabcdabcdabcdabcd\", 5, \"bcdef\" -> 0x20, 0x25, 0x6162636461626364616263646162636461626364616263646162636461626364, 44502269928904312298000709931354278973409164155382318144318241583783949107200\n// slice(string): 0x20, 4, \"abcd\" -> 0x20, 4, \"abcd\"\n// strParam(bytes): 0x20, 32, \"abcdabcdabcdabcdabcdabcdabcdabcd\" -> 0x20, 0x25, 0x6162636461626364616263646162636461626364616263646162636461626364, 44502269928904312298000709931354278973409164155382318144318241583783949107200\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
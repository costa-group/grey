{
    "language": "Solidity",
    "sources": {
        "conditional_expression_true_literal.sol": {
            "content": "contract test {\n    function f() public returns(uint d) {\n        return true ? 5 : 10;\n    }\n}\n// ----\n// f() -> 5\n"
        },
        "conditional_expression_functions.sol": {
            "content": "contract test {\n    function x() public returns (uint) { return 1; }\n    function y() public returns (uint) { return 2; }\n\n    function f(bool cond) public returns (uint) {\n        function () returns (uint) z = cond ? x : y;\n        return z();\n    }\n}\n// ----\n// f(bool): true -> 1\n// f(bool): false -> 2\n"
        },
        "inc_dec_operators.sol": {
            "content": "contract test {\n    uint8 x;\n    uint v;\n    function f() public returns (uint r) {\n        uint a = 6;\n        r = a;\n        r += (a++) * 0x10;\n        r += (++a) * 0x100;\n        v = 3;\n        r += (v++) * 0x1000;\n        r += (++v) * 0x10000;\n    }\n}\n// ----\n// f() -> 0x053866\n"
        },
        "module_from_ternary_expression.sol": {
            "content": "==== Source: A ====\ncontract D {\n}\n==== Source: B ====\nimport \"A\" as M;\n\ncontract C {\n    function f() public pure returns (bool) {\n        bool flag;\n        ((flag = true) ? M : M).D;\n        return flag;\n    }\n}\n// ----\n// f() -> true\n"
        },
        "bit_operators.sol": {
            "content": "contract test {\n    uint8 x;\n    uint v;\n    function f() public returns (uint x, uint y, uint z) {\n        uint16 a;\n        uint32 b;\n        assembly {\n            a := 0x0f0f0f0f0f\n            b := 0xff0fff0fff\n        }\n        x = a & b;\n        y = a | b;\n        z = a ^ b;\n    }\n}\n// ----\n// f() -> 3855, 268374015, 268370160\n"
        },
        "bytes_comparison.sol": {
            "content": "contract test {\n    function f() public returns (bool) {\n        bytes2 a = \"a\";\n        bytes2 x = \"aa\";\n        bytes2 b = \"b\";\n        return a < x && x < b;\n    }\n}\n// ----\n// f() -> true\n"
        },
        "exp_operator_const.sol": {
            "content": "contract test {\n    function f() public returns(uint d) { return 2 ** 3; }\n}\n// ----\n// f() -> 8\n"
        },
        "conditional_expression_tuples.sol": {
            "content": "contract test {\n    function f(bool cond) public returns (uint, uint) {\n        return cond ? (1, 2) : (3, 4);\n    }\n}\n// ----\n// f(bool): true -> 1, 2\n// f(bool): false -> 3, 4\n"
        },
        "uncalled_address_transfer_send.sol": {
            "content": "contract TransferTest {\n\tfallback() external payable {\n\t\t// This used to cause an ICE\n\t\tpayable(this).transfer;\n\t}\n\n\tfunction f() pure public {}\n}\n// ----\n// f() ->\n"
        },
        "conditional_expression_multiple.sol": {
            "content": "contract test {\n    function f(uint x) public returns(uint d) {\n        return x > 100 ?\n                    x > 1000 ? 1000 : 100\n                    :\n                    x > 50 ? 50 : 10;\n    }\n}\n// ----\n// f(uint256): 1001 -> 1000\n// f(uint256): 500 -> 100\n// f(uint256): 80 -> 50\n// f(uint256): 40 -> 10\n"
        },
        "conditional_expression_storage_memory_2.sol": {
            "content": "contract test {\n    bytes2[2] data1;\n    function f(bool cond) public returns (uint) {\n        data1[0] = \"cc\";\n\n        bytes2[2] memory x;\n        bytes2[2] memory y;\n        y[0] = \"bb\";\n\n        x = cond ? y : data1;\n\n        uint ret = 0;\n        if (x[0] == \"bb\")\n        {\n            ret = 1;\n        }\n\n        if (x[0] == \"cc\")\n        {\n            ret = 2;\n        }\n\n        return ret;\n    }\n}\n// ----\n// f(bool): true -> 1\n// f(bool): false -> 2\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}
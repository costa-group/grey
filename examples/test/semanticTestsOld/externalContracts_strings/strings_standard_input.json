{"language": "Solidity", "sources": {"strings.sol": {"content": "pragma abicoder v2;\nimport \"_stringutils/stringutils.sol\";\n\ncontract test {\n    using strings for bytes32;\n    using strings for string;\n    using strings for strings.slice;\n\n    function toSlice(string memory a) external pure returns (strings.slice memory) {\n        return a.toSlice();\n    }\n\n    function roundtrip(string memory a) external pure returns (string memory) {\n        return a.toSlice().toString();\n    }\n\n    function utf8len(string memory a) external pure returns (uint) {\n        return a.toSlice().len();\n    }\n\n    function multiconcat(string memory a, uint count) public pure returns (string memory) {\n        strings.slice memory s = a.toSlice();\n        for (uint i = 0; i < count; i++) {\n            s = s.concat(s).toSlice();\n        }\n        return s.toString();\n    }\n\n    function benchmark(string memory text, bytes32 seed) external pure returns (uint) {\n        // Grow text.\n        text = multiconcat(text, 10);\n\n        strings.slice memory a = text.toSlice();\n        strings.slice memory b = seed.toSliceB32();\n\n        // Some heavy computation.\n        bool c = b.equals(a) || b.startsWith(a);\n\n        // Join as a list.\n        strings.slice memory delim = c ? string(\",\").toSlice() : string(\";\").toSlice();\n        strings.slice[] memory parts = new strings.slice[](2);\n        parts[0] = a;\n        parts[1] = b;\n        string memory d = delim.join(parts);\n        return d.toSlice().len();\n    }\n}\n// ----\n// constructor()\n// gas irOptimized: 95303\n// gas irOptimized code: 520000\n// gas legacy: 126346\n// gas legacy code: 932600\n// gas legacyOptimized: 102639\n// gas legacyOptimized code: 612400\n// toSlice(string): 0x20, 11, \"hello world\" -> 11, 0xa0\n// gas irOptimized: 22660\n// gas legacy: 23190\n// gas legacyOptimized: 22508\n// roundtrip(string): 0x20, 11, \"hello world\" -> 0x20, 11, \"hello world\"\n// gas irOptimized: 23408\n// gas legacy: 23820\n// gas legacyOptimized: 23123\n// utf8len(string): 0x20, 16, \"\\xf0\\x9f\\x98\\x83\\xf0\\x9f\\x98\\x83\\xf0\\x9f\\x98\\x83\\xf0\\x9f\\x98\\x83\" -> 4 # Input: \"\ud83d\ude03\ud83d\ude03\ud83d\ude03\ud83d\ude03\" #\n// gas irOptimized: 24026\n// gas legacy: 25716\n// gas legacyOptimized: 24115\n// multiconcat(string,uint256): 0x40, 3, 11, \"hello world\" -> 0x20, 0x58, 0x68656c6c6f20776f726c6468656c6c6f20776f726c6468656c6c6f20776f726c, 0x6468656c6c6f20776f726c6468656c6c6f20776f726c6468656c6c6f20776f72, 49027192869463622675296414541903001712009715982962058146354235762728281047040 # concatenating 3 times #\n// gas irOptimized: 28440\n// gas legacy: 31621\n// gas legacyOptimized: 27914\n// benchmark(string,bytes32): 0x40, 0x0842021, 8, \"solidity\" -> 0x2020\n// gas irOptimized: 1976778\n// gas legacy: 4234020\n// gas legacyOptimized: 2318668"}}, "settings": {"optimizer": {"enabled": true, "runs": 200, "details": {"peephole": false, "inliner": false, "jumpdestRemover": false, "orderLiterals": false, "deduplicate": false, "cse": false, "constantOptimizer": false}}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}}}
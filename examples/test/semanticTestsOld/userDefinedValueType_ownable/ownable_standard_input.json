{"language": "Solidity", "sources": {"ownable.sol": {"content": "// Implementation of OpenZepplin's\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\n// using user defined value types.\n\ncontract Ownable {\n    type Owner is address;\n    Owner public owner = Owner.wrap(msg.sender);\n    error OnlyOwner();\n    modifier onlyOwner() {\n        if (Owner.unwrap(owner) != msg.sender)\n            revert OnlyOwner();\n\n        _;\n    }\n    event OwnershipTransferred(Owner indexed previousOwner, Owner indexed newOwner);\n    function setOwner(Owner newOwner) onlyOwner external {\n        emit OwnershipTransferred({previousOwner: owner, newOwner: newOwner});\n        owner = newOwner;\n    }\n    function renounceOwnership() onlyOwner external {\n        owner = Owner.wrap(address(0));\n    }\n}\n// ----\n// owner() -> 0x1212121212121212121212121212120000000012\n// setOwner(address): 0x1212121212121212121212121212120000000012 ->\n// ~ emit OwnershipTransferred(address,address): #0x1212121212121212121212121212120000000012, #0x1212121212121212121212121212120000000012\n// renounceOwnership() ->\n// owner() -> 0\n// setOwner(address): 0x1212121212121212121212121212120000000012 -> FAILURE, hex\"5fc483c5\"\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200, "details": {"peephole": false, "inliner": false, "jumpdestRemover": false, "orderLiterals": false, "deduplicate": false, "cse": false, "constantOptimizer": false}}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}}}
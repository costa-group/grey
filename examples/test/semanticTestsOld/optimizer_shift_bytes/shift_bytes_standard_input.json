{"language": "Solidity", "sources": {"shift_bytes.sol": {"content": "// This tests the optimizer rule\n// byte(A, shl(B, X))\n// ->\n// byte(A + B / 8, X)\n// given A <= 32 && B % 8 == 0 && B <= 256\n//\n// and the respective rule about shr\ncontract C {\n  function f(uint a) public returns (uint, uint, uint) {\n    uint x = a << (256 - 8);\n    assembly {\n      x := byte(0, x)\n    }\n    uint y = a << 8;\n    assembly {\n      y := byte(30, y)\n    }\n    uint z = a << 16;\n    assembly {\n      z := byte(1, z)\n    }\n    return (x, y, z);\n  }\n  function g(uint a) public returns (uint, uint, uint) {\n    uint x = a >> (256 - 16);\n    assembly {\n      x := byte(31, x)\n    }\n    uint y = a >> 8;\n    assembly {\n      y := byte(4, y)\n    }\n    uint z = a >> 16;\n    assembly {\n      z := byte(7, z)\n    }\n    return (x, y, z);\n  }\n}\n// ----\n// f(uint256): 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f -> 0x1f, 0x1f, 3\n// g(uint256): 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f -> 1, 3, 5\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200, "details": {"peephole": false, "inliner": false, "jumpdestRemover": false, "orderLiterals": false, "deduplicate": false, "cse": false, "constantOptimizer": false}}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}}}
{"language": "Solidity", "sources": {"memory_struct_allow.sol": {"content": "contract C {\n    struct S {\n        uint256 a;\n        uint256 b;\n    }\n\n    function f() public pure returns (uint256 a, uint256 b){\n        assembly {\n            // Make free memory dirty to check that the struct allocation cleans it up again.\n            let freeMem := mload(0x40)\n            mstore(freeMem, 42)\n            mstore(add(freeMem, 32), 42)\n        }\n        S memory s;\n        return (s.a, s.b);\n    }\n}\n// ----\n// f() -> 0, 0\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200, "details": {"peephole": false, "inliner": false, "jumpdestRemover": false, "orderLiterals": false, "deduplicate": false, "cse": false, "constantOptimizer": false}}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}}}
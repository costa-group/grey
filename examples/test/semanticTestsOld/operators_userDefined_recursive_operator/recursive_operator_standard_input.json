{"language": "Solidity", "sources": {"recursive_operator.sol": {"content": "type Uint is uint;\nusing {unaryCountdown as ~, binaryCountdown as ^, eq as ==} for Uint global;\n\nfunction unaryCountdown(Uint x) pure returns (Uint) {\n    if (x == Uint.wrap(0))\n        return Uint.wrap(0);\n\n    return ~Uint.wrap(Uint.unwrap(x) - 1);\n}\n\nfunction binaryCountdown(Uint x, Uint y) pure returns (Uint) {\n    if (x == Uint.wrap(0) && y == Uint.wrap(0))\n        return Uint.wrap(0);\n    if (x == Uint.wrap(0))\n        return y ^ x;\n\n    return Uint.wrap(Uint.unwrap(x) - 1) ^ y;\n}\n\nfunction eq(Uint x, Uint y) pure returns (bool) {\n    return Uint.unwrap(x) == Uint.unwrap(y);\n}\n\ncontract C {\n    function testUnary(Uint x) public pure returns (Uint) {\n        return ~x;\n    }\n\n    function testBinary(Uint x, Uint y) public pure returns (Uint) {\n        return x ^ y;\n    }\n}\n// ----\n// testUnary(uint256): 0 -> 0\n// testUnary(uint256): 1 -> 0\n// testUnary(uint256): 99999999999 -> FAILURE\n// testBinary(uint256,uint256): 0, 0 -> 0\n// testBinary(uint256,uint256): 1, 0 -> 0\n// testBinary(uint256,uint256): 0, 1 -> 0\n// testBinary(uint256,uint256): 1, 1 -> 0\n// testBinary(uint256,uint256): 99999999999, 99999999999 -> FAILURE\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200, "details": {"peephole": false, "inliner": false, "jumpdestRemover": false, "orderLiterals": false, "deduplicate": false, "cse": false, "constantOptimizer": false}}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}}}
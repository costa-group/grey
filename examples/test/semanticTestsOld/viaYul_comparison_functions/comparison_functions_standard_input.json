{"language": "Solidity", "sources": {"comparison_functions.sol": {"content": "contract C {\n\t// If these two functions are identical, the optimiser\n\t// on the old codegen path can deduplicate them, and breaking the test.\n\tfunction internal1() internal pure returns (bool) {\n\t\treturn true;\n\t}\n\tfunction internal2() internal pure returns (bool) {\n\t\treturn false;\n\t}\n\n\tfunction equal() public pure returns (bool same, bool diff, bool inv) {\n\t\tfunction() internal pure returns (bool) invalid;\n\t\tdelete invalid;\n\t\tsame = internal1 == internal1;\n\t\tdiff = internal1 == internal2;\n\t\tinv  = internal1 == invalid;\n\t}\n\n\tfunction unequal() public pure returns (bool same, bool diff, bool inv) {\n\t\tfunction() internal pure returns (bool) invalid;\n\t\tdelete invalid;\n\t\tsame = internal1 != internal1;\n\t\tdiff = internal1 != internal2;\n\t\tinv  = internal1 != invalid;\n\t}\n}\n// ----\n// equal() -> true, false, false\n// unequal() -> false, true, true\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200, "details": {"peephole": false, "inliner": false, "jumpdestRemover": false, "orderLiterals": false, "deduplicate": false, "cse": false, "constantOptimizer": false}}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}}}
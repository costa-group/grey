{"language": "Solidity", "sources": {"library_function_selectors.sol": {"content": "library L {\n    function f(uint256 x) external returns (uint) { return x; }\n    function g(uint256[] storage s) external returns (uint) { return s.length; }\n    function h(uint256[] memory m) public returns (uint) { return m.length; }\n}\ncontract C {\n    uint256[] s;\n    constructor() { while (s.length < 42) s.push(0); }\n    function f() public returns (bool, bool, uint256) {\n\t\t(bool success, bytes memory data) = address(L).delegatecall(abi.encodeWithSelector(L.f.selector, 7));\n\t\treturn (L.f.selector == bytes4(keccak256(\"f(uint256)\")), success, abi.decode(data, (uint256)));\n    }\n    function g() public returns (bool, bool, uint256) {\n\t\tuint256 s_ptr;\n\t\tassembly { s_ptr := s.slot }\n\t\t(bool success, bytes memory data) = address(L).delegatecall(abi.encodeWithSelector(L.g.selector, s_ptr));\n\t\treturn (L.g.selector == bytes4(keccak256(\"g(uint256[] storage)\")), success, abi.decode(data, (uint256)));\n    }\n    function h() public returns (bool, bool, uint256) {\n\t\t(bool success, bytes memory data) = address(L).delegatecall(abi.encodeWithSelector(L.h.selector, new uint256[](23)));\n\t\treturn (L.h.selector == bytes4(keccak256(\"h(uint256[])\")), success, abi.decode(data, (uint256)));\n    }\n}\n// ====\n// EVMVersion: >homestead\n// ----\n// library: L\n// f() -> true, true, 7\n// g() -> true, true, 42\n// h() -> true, true, 23\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200, "details": {"peephole": false, "inliner": false, "jumpdestRemover": false, "orderLiterals": false, "deduplicate": false, "cse": false, "constantOptimizer": false}}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}}}
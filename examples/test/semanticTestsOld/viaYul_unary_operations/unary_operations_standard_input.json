{"language": "Solidity", "sources": {"unary_operations.sol": {"content": "contract C {\n\tfunction preincr_u8(uint8 a) public pure returns (uint8) {\n\t\treturn ++a + a;\n\t}\n\tfunction postincr_u8(uint8 a) public pure returns (uint8) {\n\t\treturn a++ + a;\n\t}\n\tfunction predecr_u8(uint8 a) public pure returns (uint8) {\n\t\treturn --a + a;\n\t}\n\tfunction postdecr_u8(uint8 a) public pure returns (uint8) {\n\t\treturn a-- + a;\n\t}\n\tfunction preincr_s8(int8 a) public pure returns (int8 ret1, int8 ret2) {\n\t\tret1 = ++a;\n\t\tret2 = a;\n\t}\n\tfunction postincr_s8(int8 a) public pure returns (int8 ret1, int8 ret2) {\n\t\tret1 = a++;\n\t\tret2 = a;\n\t}\n\tfunction predecr_s8(int8 a) public pure returns (int8 ret1, int8 ret2) {\n\t\tret1 = --a;\n\t\tret2 = a;\n\t}\n\tfunction postdecr_s8(int8 a) public pure returns (int8 ret1, int8 ret2) {\n\t\tret1 = a--;\n\t\tret2 = a;\n\t}\n\tfunction preincr(uint a) public pure returns (uint) {\n\t\treturn ++a + a;\n\t}\n\tfunction postincr(uint a) public pure returns (uint) {\n\t\treturn a++ + a;\n\t}\n\tfunction predecr(uint a) public pure returns (uint) {\n\t\treturn --a + a;\n\t}\n\tfunction postdecr(uint a) public pure returns (uint) {\n\t\treturn a-- + a;\n\t}\n\tfunction not(bool a) public pure returns (bool)\n\t{\n\t\treturn !a;\n\t}\n\tfunction bitnot(int256 a) public pure returns (int256)\n\t{\n\t\treturn ~a;\n\t}\n\tfunction bitnot_u8(uint8 a) public pure returns (uint256 ret)\n\t{\n\t\ta = ~a;\n\t\tassembly {\n\t\t\t// Tests that the lower bit parts are cleaned up\n\t\t\tret := a\n\t\t}\n\t}\n\tfunction bitnot_s8() public pure returns (int256 ret)\n\t{\n\t\tint8 a;\n\t\tassembly {\n\t\t\ta := 0x9C\n\t\t}\n\n\t\ta = ~a;\n\n\t\tassembly {\n\t\t\t// Tests that the lower bit parts are cleaned up\n\t\t\tret := a\n\t\t}\n\t}\n\tfunction negate(int256 a) public pure returns (int256)\n\t{\n\t\treturn -a;\n\t}\n\tfunction negate_s8(int8 a) public pure returns (int8)\n\t{\n\t\treturn -a;\n\t}\n\tfunction negate_s16(int16 a) public pure returns (int16)\n\t{\n\t\treturn -a;\n\t}\n}\n// ====\n// compileViaYul: true\n// ----\n// preincr_s8(int8): 128 -> FAILURE\n// postincr_s8(int8): 128 -> FAILURE\n// preincr_s8(int8): 127 -> FAILURE, hex\"4e487b71\", 0x11\n// postincr_s8(int8): 127 -> FAILURE, hex\"4e487b71\", 0x11\n// preincr_s8(int8): 126 -> 127, 127\n// postincr_s8(int8): 126 -> 126, 127\n// predecr_s8(int8): -128 -> FAILURE, hex\"4e487b71\", 0x11\n// postdecr_s8(int8): -128 -> FAILURE, hex\"4e487b71\", 0x11\n// predecr_s8(int8): -127 -> -128, -128\n// postdecr_s8(int8): -127 -> -127, -128\n// preincr_s8(int8): -5 -> -4, -4\n// postincr_s8(int8): -5 -> -5, -4\n// predecr_s8(int8): -5 -> -6, -6\n// postdecr_s8(int8): -5 -> -5, -6\n// preincr_u8(uint8): 255 -> FAILURE, hex\"4e487b71\", 0x11\n// postincr_u8(uint8): 255 -> FAILURE, hex\"4e487b71\", 0x11\n// preincr_u8(uint8): 254 -> FAILURE, hex\"4e487b71\", 0x11\n// postincr_u8(uint8): 254 -> FAILURE, hex\"4e487b71\", 0x11\n// predecr_u8(uint8): 0 -> FAILURE, hex\"4e487b71\", 0x11\n// postdecr_u8(uint8): 0 -> FAILURE, hex\"4e487b71\", 0x11\n// predecr_u8(uint8): 1 -> 0\n// postdecr_u8(uint8): 1 -> 1\n// preincr_u8(uint8): 2 -> 6\n// postincr_u8(uint8): 2 -> 5\n// predecr_u8(uint8): 2 -> 2\n// postdecr_u8(uint8): 2 -> 3\n// preincr(uint256): 2 -> 6\n// postincr(uint256): 2 -> 5\n// predecr(uint256): 2 -> 2\n// postdecr(uint256): 2 -> 3\n// not(bool): true -> false\n// not(bool): false -> true\n// bitnot(int256): 5 -> -6\n// bitnot(int256): 10 -> -11\n// bitnot(int256): 0 -> -1\n// bitnot(int256): -100 -> 99\n// bitnot_u8(uint8): 100 -> 155\n// bitnot_s8() -> 99\n// negate(int256): -57896044618658097711785492504343953926634992332820282019728792003956564819968 -> FAILURE, hex\"4e487b71\", 0x11\n// negate(int256): -57896044618658097711785492504343953926634992332820282019728792003956564819967 -> 57896044618658097711785492504343953926634992332820282019728792003956564819967\n// negate(int256): 0 -> 0\n// negate(int256): 1 -> -1\n// negate(int256): -1 -> 1\n// negate_s8(int8): -128 -> FAILURE, hex\"4e487b71\", 0x11\n// negate_s8(int8): -138 -> FAILURE\n// negate_s8(int8): -127 -> 127\n// negate_s8(int8): 127 -> -127\n// negate_s16(int16): -32768 -> FAILURE, hex\"4e487b71\", 0x11\n// negate_s16(int16): -32767 -> 32767\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200, "details": {"peephole": false, "inliner": false, "jumpdestRemover": false, "orderLiterals": false, "deduplicate": false, "cse": false, "constantOptimizer": false}}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}}}
{"language": "Solidity", "sources": {"fixedpoint.sol": {"content": "// Represent a 18 decimal, 256 bit wide fixed point type using a user defined value type.\ntype UFixed256x18 is uint256;\n\n/// A minimal library to do fixed point operations on UFixed256x18.\nlibrary FixedMath {\n    uint constant multiplier = 10**18;\n    /// Adds two UFixed256x18 numbers. Reverts on overflow, relying on checked arithmetic on\n    /// uint256.\n    function add(UFixed256x18 a, UFixed256x18 b) internal returns (UFixed256x18) {\n        return UFixed256x18.wrap(UFixed256x18.unwrap(a) + UFixed256x18.unwrap(b));\n    }\n    /// Multiplies UFixed256x18 and uint256. Reverts on overflow, relying on checked arithmetic on\n    /// uint256.\n    function mul(UFixed256x18 a, uint256 b) internal returns (UFixed256x18) {\n        return UFixed256x18.wrap(UFixed256x18.unwrap(a) * b);\n    }\n    /// Take the floor of a UFixed256x18 number.\n    /// @return the largest integer that does not exceed `a`.\n    function floor(UFixed256x18 a) internal returns (uint256) {\n        return UFixed256x18.unwrap(a) / multiplier;\n    }\n    /// Turns a uint256 into a UFixed256x18 of the same value.\n    /// Reverts if the integer is too large.\n    function toUFixed256x18(uint256 a) internal pure returns (UFixed256x18) {\n        return UFixed256x18.wrap(a * multiplier);\n    }\n}\n\ncontract TestFixedMath {\n    function add(UFixed256x18 a, UFixed256x18 b) external returns (UFixed256x18) {\n        return FixedMath.add(a, b);\n    }\n    function mul(UFixed256x18 a, uint256 b) external returns (UFixed256x18) {\n        return FixedMath.mul(a, b);\n    }\n    function floor(UFixed256x18 a) external returns (uint256) {\n        return FixedMath.floor(a);\n    }\n    function toUFixed256x18(uint256 a) external returns (UFixed256x18) {\n        return FixedMath.toUFixed256x18(a);\n    }\n}\n// ----\n// add(uint256,uint256): 0, 0 -> 0\n// add(uint256,uint256): 25, 45 -> 0x46\n// add(uint256,uint256): 115792089237316195423570985008687907853269984665640564039457584007913129639935, 10 -> FAILURE, hex\"4e487b71\", 0x11\n// mul(uint256,uint256): 340282366920938463463374607431768211456, 45671926166590716193865151022383844364247891968 -> FAILURE, hex\"4e487b71\", 0x11\n// mul(uint256,uint256): 340282366920938463463374607431768211456, 20 -> 6805647338418769269267492148635364229120\n// floor(uint256): 11579208923731619542357098500868790785326998665640564039457584007913129639930 -> 11579208923731619542357098500868790785326998665640564039457\n// floor(uint256): 115792089237316195423570985008687907853269984665640564039457584007913129639935 -> 115792089237316195423570985008687907853269984665640564039457\n// toUFixed256x18(uint256): 0 -> 0\n// toUFixed256x18(uint256): 5 -> 5000000000000000000\n// toUFixed256x18(uint256): 115792089237316195423570985008687907853269984665640564039457 -> 115792089237316195423570985008687907853269984665640564039457000000000000000000\n// toUFixed256x18(uint256): 115792089237316195423570985008687907853269984665640564039458 -> FAILURE, hex\"4e487b71\", 0x11\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200, "details": {"peephole": false, "inliner": false, "jumpdestRemover": false, "orderLiterals": false, "deduplicate": false, "cse": false, "constantOptimizer": false}}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}}}
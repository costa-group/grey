{"language": "Solidity", "sources": {"try_catch_library_call.sol": {"content": "library L {\n    struct S { uint x; }\n    function integer(uint t, bool b) public view returns (uint) {\n        if (b) {\n            return t;\n        } else {\n            revert(\"failure\");\n        }\n    }\n    function stru(S storage t, bool b) public view returns (uint) {\n        if (b) {\n            return t.x;\n        } else {\n            revert(\"failure\");\n        }\n    }\n}\ncontract C {\n    using L for L.S;\n    L.S t;\n    function f(bool b) public returns (uint, string memory) {\n        uint x = 8;\n        try L.integer(x, b) returns (uint _x) {\n            return (_x, \"\");\n        } catch Error(string memory message) {\n            return (18, message);\n        }\n    }\n    function g(bool b) public returns (uint, string memory) {\n        t.x = 9;\n        try t.stru(b) returns (uint x) {\n            return (x, \"\");\n        } catch Error(string memory message) {\n            return (19, message);\n        }\n    }\n}\n// ====\n// EVMVersion: >=byzantium\n// ----\n// library: L\n// f(bool): true -> 8, 0x40, 0\n// f(bool): false -> 18, 0x40, 7, \"failure\"\n// g(bool): true -> 9, 0x40, 0\n// g(bool): false -> 19, 0x40, 7, \"failure\"\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200, "details": {"peephole": false, "inliner": false, "jumpdestRemover": false, "orderLiterals": false, "deduplicate": false, "cse": false, "constantOptimizer": false}}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}}}
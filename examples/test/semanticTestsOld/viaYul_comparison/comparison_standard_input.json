{"language": "Solidity", "sources": {"comparison.sol": {"content": "contract C {\n    function f(address a) public pure returns (bool) {\n        return a == address(0);\n    }\n    function g() public pure returns (bool) {\n        return bytes3(\"abc\") == bytes4(\"abc\");\n    }\n    function lt(uint a, uint b) public pure returns (bool) {\n        return a < b;\n    }\n    function slt(int a, int b) public pure returns (bool) {\n        return a < b;\n    }\n    function lte(uint a, uint b) public pure returns (bool) {\n        return a <= b;\n    }\n    function slte(int a, int b) public pure returns (bool) {\n        return a <= b;\n    }\n    function gt(uint a, uint b) public pure returns (bool) {\n        return a > b;\n    }\n    function sgt(int a, int b) public pure returns (bool) {\n        return a > b;\n    }\n    function gte(uint a, uint b) public pure returns (bool) {\n        return a >= b;\n    }\n    function sgte(int a, int b) public pure returns (bool) {\n        return a >= b;\n    }\n    function eq(uint a, uint b) public pure returns (bool) {\n        return a == b;\n    }\n    function neq(uint a, uint b) public pure returns (bool) {\n        return a != b;\n    }\n}\n// ----\n// f(address): 0x1234 -> false\n// f(address): 0x00 -> true\n// g() -> true\n// lt(uint256,uint256): 4, 5 -> true\n// lt(uint256,uint256): 5, 5 -> false\n// lt(uint256,uint256): 6, 5 -> false\n// gt(uint256,uint256): 4, 5 -> false\n// gt(uint256,uint256): 5, 5 -> false\n// gt(uint256,uint256): 6, 5 -> true\n// lte(uint256,uint256): 4, 5 -> true\n// lte(uint256,uint256): 5, 5 -> true\n// lte(uint256,uint256): 6, 5 -> false\n// gte(uint256,uint256): 4, 5 -> false\n// gte(uint256,uint256): 5, 5 -> true\n// gte(uint256,uint256): 6, 5 -> true\n// eq(uint256,uint256): 4, 5 -> false\n// eq(uint256,uint256): 5, 5 -> true\n// eq(uint256,uint256): 6, 5 -> false\n// neq(uint256,uint256): 4, 5 -> true\n// neq(uint256,uint256): 5, 5 -> false\n// neq(uint256,uint256): 6, 5 -> true\n// slt(int256,int256): -1, 0 -> true\n// slt(int256,int256): 0, 0 -> false\n// slt(int256,int256): 1, 0 -> false\n// sgt(int256,int256): -1, 0 -> false\n// sgt(int256,int256): 0, 0 -> false\n// sgt(int256,int256): 1, 0 -> true\n// slte(int256,int256): -1, 0 -> true\n// slte(int256,int256): 0, 0 -> true\n// slte(int256,int256): 1, 0 -> false\n// sgte(int256,int256): -1, 0 -> false\n// sgte(int256,int256): 0, 0 -> true\n// sgte(int256,int256): 1, 0 -> true\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200, "details": {"peephole": false, "inliner": false, "jumpdestRemover": false, "orderLiterals": false, "deduplicate": false, "cse": false, "constantOptimizer": false}}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}}}
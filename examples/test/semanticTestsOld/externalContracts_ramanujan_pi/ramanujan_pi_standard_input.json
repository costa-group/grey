{"language": "Solidity", "sources": {"ramanujan_pi.sol": {"content": "import \"_prbmath/PRBMathSD59x18.sol\";\n\n// The goal of this test file is to implement Ramanujan's pi approximation using various libraries.\n\nfunction factorial(uint n) pure returns (uint ret) {\n    ret = 1;\n    for (; n > 1; --n)\n        ret *= n;\n}\n\ncontract test {\n    using PRBMathSD59x18 for int256;\n\n    function prb_scale(uint n) internal pure returns (int256 ret) {\n        // Scale to SD59x18\n        ret = int256(n * 10e17);\n    }\n\n    // This dumb implementation of Ramanujan series calculates 1/pi\n    function prb_pi() external pure returns (int256 ret) {\n        uint n = 6; // More than 6 iterations results in failure\n        for (uint k = 0; k < n; k++) {\n            int256 a = prb_scale(factorial(4 * k)).div(prb_scale(factorial(k)).pow(4));\n            int256 b = (prb_scale(25390).mul(prb_scale(k)) + prb_scale(1103)).div(prb_scale(396).pow(4 * k));\n            ret += a.mul(b);\n        }\n        ret = ret.mul(prb_scale(2).sqrt().mul(prb_scale(2)).div(prb_scale(99).pow(2)));\n        ret = prb_scale(1).div(ret);\n    }\n}\n// ----\n// constructor()\n// gas irOptimized: 77816\n// gas irOptimized code: 307600\n// gas legacy: 92110\n// gas legacy code: 523600\n// gas legacyOptimized: 82667\n// gas legacyOptimized code: 369200\n// prb_pi() -> 3141592656369545286\n// gas irOptimized: 57478\n// gas legacy: 100657\n// gas legacyOptimized: 75735"}}, "settings": {"optimizer": {"enabled": true, "runs": 200, "details": {"peephole": false, "inliner": false, "jumpdestRemover": false, "orderLiterals": false, "deduplicate": false, "cse": false, "constantOptimizer": false}}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}}}
{"language": "Solidity", "sources": {"operator_making_view_external_call.sol": {"content": "type Int32 is int32;\nusing {add as +, unsub as -} for Int32 global;\n\nfunction add(Int32 x, Int32 y) pure returns (Int32) {\n    return loadAdder().mul(x, y);\n}\n\nfunction unsub(Int32 x) pure returns (Int32) {\n    return loadAdder().inc(x);\n}\n\ninterface IAdderPure {\n    function mul(Int32, Int32) external pure returns (Int32);\n    function inc(Int32) external pure returns (Int32);\n}\n\ninterface IAdderView {\n    function mul(Int32, Int32) external view returns (Int32);\n    function inc(Int32) external view returns (Int32);\n}\n\ncontract Adder is IAdderView {\n    function mul(Int32 x, Int32 y) external view override returns (Int32) {\n        return Int32.wrap(Int32.unwrap(x) * Int32.unwrap(y));\n    }\n\n    function inc(Int32 x) external view override returns (Int32) {\n        return Int32.wrap(Int32.unwrap(x) + 1);\n    }\n}\n\nfunction storeAdder(IAdderView adder) pure {\n    assembly {\n        // This test would also work without assembly if we could hard-code an address here.\n        mstore(0, adder)\n    }\n}\n\nfunction loadAdder() pure returns (IAdderPure adder) {\n    assembly {\n        // The adder we stored is view but we cheat by using a modified version with pure functions\n        adder := mload(0)\n    }\n}\n\ncontract C {\n    function testMul(Int32 x, Int32 y) public returns (Int32) {\n        storeAdder(new Adder());\n\n        return x + y;\n    }\n\n    function testInc(Int32 x) public returns (Int32) {\n        storeAdder(new Adder());\n\n        return -x;\n    }\n}\n// ----\n// testMul(int32,int32): 42, 10 -> 420\n// gas irOptimized: 102563\n// gas legacy: 56978\n// gas legacy code: 127000\n// gas legacyOptimized: 55161\n// gas legacyOptimized code: 68400\n// testInc(int32): 42 -> 43\n// gas irOptimized: 102386\n// gas legacy: 56238\n// gas legacy code: 127000\n// gas legacyOptimized: 54851\n// gas legacyOptimized code: 68400\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200, "details": {"peephole": false, "inliner": false, "jumpdestRemover": false, "orderLiterals": false, "deduplicate": false, "cse": false, "constantOptimizer": false}}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}}}
{"language": "Solidity", "sources": {"delete_struct.sol": {"content": "contract test {\n    struct topStruct {\n        nestedStruct nstr;\n        uint topValue;\n        mapping (uint => uint) topMapping;\n    }\n    uint toDelete;\n    topStruct str;\n    struct nestedStruct {\n        uint nestedValue;\n        mapping (uint => bool) nestedMapping;\n    }\n    constructor() {\n        toDelete = 5;\n        str.topValue = 1;\n        str.topMapping[0] = 1;\n        str.topMapping[1] = 2;\n\n        str.nstr.nestedValue = 2;\n        str.nstr.nestedMapping[0] = true;\n        str.nstr.nestedMapping[1] = false;\n        delete str;\n        delete toDelete;\n    }\n    function getToDelete() public returns (uint res){\n        res = toDelete;\n    }\n    function getTopValue() public returns(uint topValue){\n        topValue = str.topValue;\n    }\n    function getNestedValue() public returns(uint nestedValue){\n        nestedValue = str.nstr.nestedValue;\n    }\n    function getTopMapping(uint index) public returns(uint ret) {\n        ret = str.topMapping[index];\n    }\n    function getNestedMapping(uint index) public returns(bool ret) {\n        return str.nstr.nestedMapping[index];\n    }\n}\n// ----\n// getToDelete() -> 0\n// getTopValue() -> 0\n// getNestedValue() -> 0 #mapping values should be the same#\n// getTopMapping(uint256): 0 -> 1\n// getTopMapping(uint256): 1 -> 2\n// getNestedMapping(uint256): 0 -> true\n// getNestedMapping(uint256): 1 -> false\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200, "details": {"peephole": false, "inliner": false, "jumpdestRemover": false, "orderLiterals": false, "deduplicate": false, "cse": false, "constantOptimizer": false}}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}}}
{"language": "Solidity", "sources": {"calldata_slice_access.sol": {"content": "contract C {\n    function f(uint256[] calldata x, uint256 start, uint256 end) external pure {\n        x[start:end];\n    }\n    function g(uint256[] calldata x, uint256 start, uint256 end, uint256 index) external pure returns (uint256, uint256, uint256) {\n        return (x[start:end][index], x[start:][0:end-start][index], x[:end][start:][index]);\n    }\n}\n// ----\n// f(uint256[],uint256,uint256): 0x80, 0, 0, 0, 1, 42 ->\n// f(uint256[],uint256,uint256): 0x80, 0, 1, 0, 1, 42 ->\n// f(uint256[],uint256,uint256): 0x80, 0, 2, 0, 1, 42 -> FAILURE\n// f(uint256[],uint256,uint256): 0x80, 1, 0, 0, 1, 42 -> FAILURE\n// f(uint256[],uint256,uint256): 0x80, 1, 1, 0, 1, 42 ->\n// f(uint256[],uint256,uint256): 0x80, 1, 2, 0, 1, 42 -> FAILURE\n// f(uint256[],uint256,uint256): 0x80, 2, 0, 0, 1, 42 -> FAILURE\n// f(uint256[],uint256,uint256): 0x80, 2, 1, 0, 1, 42 -> FAILURE\n// f(uint256[],uint256,uint256): 0x80, 2, 2, 0, 1, 42 -> FAILURE\n// f(uint256[],uint256,uint256): 0x80, 0, 2, 1, 0, 42 -> FAILURE\n// f(uint256[],uint256,uint256): 0x80, 1, 2, 0, 2, 42, 23 ->\n// f(uint256[],uint256,uint256): 0x80, 1, 3, 0, 2, 42, 23 -> FAILURE\n// f(uint256[],uint256,uint256): 0x80, -1, 0, 0, 1, 42 -> FAILURE\n// f(uint256[],uint256,uint256): 0x80, -1, -1, 0, 1, 42 -> FAILURE\n// g(uint256[],uint256,uint256,uint256): 0x80, 0, 1, 0, 1, 42 -> 42, 42, 42\n// g(uint256[],uint256,uint256,uint256): 0x80, 0, 1, 1, 1, 42 -> FAILURE, hex\"4e487b71\", 0x32\n// g(uint256[],uint256,uint256,uint256): 0x80, 0, 0, 0, 1, 42 -> FAILURE, hex\"4e487b71\", 0x32\n// g(uint256[],uint256,uint256,uint256): 0x80, 1, 1, 0, 1, 42 -> FAILURE, hex\"4e487b71\", 0x32\n// g(uint256[],uint256,uint256,uint256): 0x80, 0, 5, 0, 5, 0x4201, 0x4202, 0x4203, 0x4204, 0x4205 -> 0x4201, 0x4201, 0x4201\n// g(uint256[],uint256,uint256,uint256): 0x80, 0, 5, 4, 5, 0x4201, 0x4202, 0x4203, 0x4204, 0x4205 -> 0x4205, 0x4205, 0x4205\n// g(uint256[],uint256,uint256,uint256): 0x80, 0, 5, 5, 5, 0x4201, 0x4202, 0x4203, 0x4204, 0x4205 -> FAILURE, hex\"4e487b71\", 0x32\n// g(uint256[],uint256,uint256,uint256): 0x80, 1, 5, 0, 5, 0x4201, 0x4202, 0x4203, 0x4204, 0x4205 -> 0x4202, 0x4202, 0x4202\n// g(uint256[],uint256,uint256,uint256): 0x80, 1, 5, 3, 5, 0x4201, 0x4202, 0x4203, 0x4204, 0x4205 -> 0x4205, 0x4205, 0x4205\n// g(uint256[],uint256,uint256,uint256): 0x80, 1, 5, 4, 5, 0x4201, 0x4202, 0x4203, 0x4204, 0x4205 -> FAILURE, hex\"4e487b71\", 0x32\n// g(uint256[],uint256,uint256,uint256): 0x80, 4, 5, 0, 5, 0x4201, 0x4202, 0x4203, 0x4204, 0x4205 -> 0x4205, 0x4205, 0x4205\n// g(uint256[],uint256,uint256,uint256): 0x80, 4, 5, 1, 5, 0x4201, 0x4202, 0x4203, 0x4204, 0x4205 -> FAILURE, hex\"4e487b71\", 0x32\n// g(uint256[],uint256,uint256,uint256): 0x80, 5, 5, 0, 5, 0x4201, 0x4202, 0x4203, 0x4204, 0x4205 -> FAILURE, hex\"4e487b71\", 0x32\n// g(uint256[],uint256,uint256,uint256): 0x80, 0, 1, 0, 5, 0x4201, 0x4202, 0x4203, 0x4204, 0x4205 -> 0x4201, 0x4201, 0x4201\n// g(uint256[],uint256,uint256,uint256): 0x80, 0, 1, 1, 5, 0x4201, 0x4202, 0x4203, 0x4204, 0x4205 -> FAILURE, hex\"4e487b71\", 0x32\n// g(uint256[],uint256,uint256,uint256): 0x80, 0, 1, 0, 5, 0x4201, 0x4202, 0x4203, 0x4204, 0x4205 -> 0x4201, 0x4201, 0x4201\n// g(uint256[],uint256,uint256,uint256): 0x80, 0, 1, 1, 5, 0x4201, 0x4202, 0x4203, 0x4204, 0x4205 -> FAILURE, hex\"4e487b71\", 0x32\n// g(uint256[],uint256,uint256,uint256): 0x80, 1, 2, 0, 5, 0x4201, 0x4202, 0x4203, 0x4204, 0x4205 -> 0x4202, 0x4202, 0x4202\n// g(uint256[],uint256,uint256,uint256): 0x80, 1, 2, 1, 5, 0x4201, 0x4202, 0x4203, 0x4204, 0x4205 -> FAILURE, hex\"4e487b71\", 0x32\n// g(uint256[],uint256,uint256,uint256): 0x80, 4, 5, 0, 5, 0x4201, 0x4202, 0x4203, 0x4204, 0x4205 -> 0x4205, 0x4205, 0x4205\n// g(uint256[],uint256,uint256,uint256): 0x80, 4, 5, 1, 5, 0x4201, 0x4202, 0x4203, 0x4204, 0x4205 -> FAILURE, hex\"4e487b71\", 0x32\n"}}, "settings": {"optimizer": {"enabled": true, "runs": 200, "details": {"peephole": false, "inliner": false, "jumpdestRemover": false, "orderLiterals": false, "deduplicate": false, "cse": false, "constantOptimizer": false}}, "outputSelection": {"*": {"*": ["abi", "metadata", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers"]}}, "metadata": {"appendCBOR": false}}}
{
    "language": "Yul",
    "sources": {
        "nested_loop_complex.yul": {
            "content": "{\n    for { let x := 0 } lt(x, 0x0101) {\n        sstore(x, 0x0202)\n        for { let y := 0 } lt(y, 0x0303) { y := add(y, 0x0404) } {\n            sstore(y, 0x0505)\n        }\n        x := add(x, 0x0202)\n    }\n    {\n        sstore(0x0606, 0x0606)\n        if sload(0x0707) { continue }\n        sstore(0x0808, 0x0808)\n        if sload(0x0909) { break }\n        sstore(0x0A0A, 0x0B0B)\n        for { let z := 0 } lt(z, 0x0C0C) { z := add(z, 1) } {\n            sstore(0x0D0D, 0x0D0D)\n            if sload(0x0E0E) {\n                continue\n            }\n            sstore(0x0F0F, 0x0F0F)\n            if sload(0x1010) {\n                break\n            }\n            sstore(0x1111, 0x1111)\n        }\n        sstore(0x1212, 0x1212)\n    }\n}\n// ----\n// digraph CFG {\n// nodesep=0.7;\n// node[shape=box];\n//\n// Entry [label=\"Entry\"];\n// Entry -> Block0;\n// Block0 [label=\"\\\n// Assignment(x): [ 0x00 ] => [ x ]\\l\\\n// \"];\n// Block0 -> Block0Exit [arrowhead=none];\n// Block0Exit [label=\"Jump\" shape=oval];\n// Block0Exit -> Block1;\n//\n// Block1 [label=\"\\\n// lt: [ 0x0101 x ] => [ TMP[lt, 0] ]\\l\\\n// \"];\n// Block1 -> Block1Exit;\n// Block1Exit [label=\"{ TMP[lt, 0]| { <0> Zero | <1> NonZero }}\" shape=Mrecord];\n// Block1Exit:0 -> Block2;\n// Block1Exit:1 -> Block3;\n//\n// Block2 [label=\"\\\n// \"];\n// Block2Exit [label=\"MainExit\"];\n// Block2 -> Block2Exit;\n//\n// Block3 [label=\"\\\n// sstore: [ 0x0606 0x0606 ] => [ ]\\l\\\n// sload: [ 0x0707 ] => [ TMP[sload, 0] ]\\l\\\n// \"];\n// Block3 -> Block3Exit;\n// Block3Exit [label=\"{ TMP[sload, 0]| { <0> Zero | <1> NonZero }}\" shape=Mrecord];\n// Block3Exit:0 -> Block4;\n// Block3Exit:1 -> Block5;\n//\n// Block4 [label=\"\\\n// sstore: [ 0x0808 0x0808 ] => [ ]\\l\\\n// sload: [ 0x0909 ] => [ TMP[sload, 0] ]\\l\\\n// \"];\n// Block4 -> Block4Exit;\n// Block4Exit [label=\"{ TMP[sload, 0]| { <0> Zero | <1> NonZero }}\" shape=Mrecord];\n// Block4Exit:0 -> Block6;\n// Block4Exit:1 -> Block7;\n//\n// Block5 [label=\"\\\n// \"];\n// Block5 -> Block5Exit [arrowhead=none];\n// Block5Exit [label=\"Jump\" shape=oval];\n// Block5Exit -> Block8;\n//\n// Block6 [label=\"\\\n// sstore: [ 0x0b0b 0x0a0a ] => [ ]\\l\\\n// Assignment(z): [ 0x00 ] => [ z ]\\l\\\n// \"];\n// Block6 -> Block6Exit [arrowhead=none];\n// Block6Exit [label=\"Jump\" shape=oval];\n// Block6Exit -> Block9;\n//\n// Block7 [label=\"\\\n// \"];\n// Block7 -> Block7Exit [arrowhead=none];\n// Block7Exit [label=\"Jump\" shape=oval];\n// Block7Exit -> Block2;\n//\n// Block8 [label=\"\\\n// sstore: [ 0x0202 x ] => [ ]\\l\\\n// Assignment(y): [ 0x00 ] => [ y ]\\l\\\n// \"];\n// Block8 -> Block8Exit [arrowhead=none];\n// Block8Exit [label=\"Jump\" shape=oval];\n// Block8Exit -> Block10;\n//\n// Block9 [label=\"\\\n// lt: [ 0x0c0c z ] => [ TMP[lt, 0] ]\\l\\\n// \"];\n// Block9 -> Block9Exit;\n// Block9Exit [label=\"{ TMP[lt, 0]| { <0> Zero | <1> NonZero }}\" shape=Mrecord];\n// Block9Exit:0 -> Block11;\n// Block9Exit:1 -> Block12;\n//\n// Block10 [label=\"\\\n// lt: [ 0x0303 y ] => [ TMP[lt, 0] ]\\l\\\n// \"];\n// Block10 -> Block10Exit;\n// Block10Exit [label=\"{ TMP[lt, 0]| { <0> Zero | <1> NonZero }}\" shape=Mrecord];\n// Block10Exit:0 -> Block13;\n// Block10Exit:1 -> Block14;\n//\n// Block11 [label=\"\\\n// sstore: [ 0x1212 0x1212 ] => [ ]\\l\\\n// \"];\n// Block11 -> Block11Exit [arrowhead=none];\n// Block11Exit [label=\"Jump\" shape=oval];\n// Block11Exit -> Block8;\n//\n// Block12 [label=\"\\\n// sstore: [ 0x0d0d 0x0d0d ] => [ ]\\l\\\n// sload: [ 0x0e0e ] => [ TMP[sload, 0] ]\\l\\\n// \"];\n// Block12 -> Block12Exit;\n// Block12Exit [label=\"{ TMP[sload, 0]| { <0> Zero | <1> NonZero }}\" shape=Mrecord];\n// Block12Exit:0 -> Block15;\n// Block12Exit:1 -> Block16;\n//\n// Block13 [label=\"\\\n// add: [ 0x0202 x ] => [ TMP[add, 0] ]\\l\\\n// Assignment(x): [ TMP[add, 0] ] => [ x ]\\l\\\n// \"];\n// Block13 -> Block13Exit [arrowhead=none];\n// Block13Exit [label=\"BackwardsJump\" shape=oval];\n// Block13Exit -> Block1;\n//\n// Block14 [label=\"\\\n// sstore: [ 0x0505 y ] => [ ]\\l\\\n// \"];\n// Block14 -> Block14Exit [arrowhead=none];\n// Block14Exit [label=\"Jump\" shape=oval];\n// Block14Exit -> Block17;\n//\n// Block15 [label=\"\\\n// sstore: [ 0x0f0f 0x0f0f ] => [ ]\\l\\\n// sload: [ 0x1010 ] => [ TMP[sload, 0] ]\\l\\\n// \"];\n// Block15 -> Block15Exit;\n// Block15Exit [label=\"{ TMP[sload, 0]| { <0> Zero | <1> NonZero }}\" shape=Mrecord];\n// Block15Exit:0 -> Block18;\n// Block15Exit:1 -> Block19;\n//\n// Block16 [label=\"\\\n// \"];\n// Block16 -> Block16Exit [arrowhead=none];\n// Block16Exit [label=\"Jump\" shape=oval];\n// Block16Exit -> Block20;\n//\n// Block17 [label=\"\\\n// add: [ 0x0404 y ] => [ TMP[add, 0] ]\\l\\\n// Assignment(y): [ TMP[add, 0] ] => [ y ]\\l\\\n// \"];\n// Block17 -> Block17Exit [arrowhead=none];\n// Block17Exit [label=\"BackwardsJump\" shape=oval];\n// Block17Exit -> Block10;\n//\n// Block18 [label=\"\\\n// sstore: [ 0x1111 0x1111 ] => [ ]\\l\\\n// \"];\n// Block18 -> Block18Exit [arrowhead=none];\n// Block18Exit [label=\"Jump\" shape=oval];\n// Block18Exit -> Block20;\n//\n// Block19 [label=\"\\\n// \"];\n// Block19 -> Block19Exit [arrowhead=none];\n// Block19Exit [label=\"Jump\" shape=oval];\n// Block19Exit -> Block11;\n//\n// Block20 [label=\"\\\n// add: [ 0x01 z ] => [ TMP[add, 0] ]\\l\\\n// Assignment(z): [ TMP[add, 0] ] => [ z ]\\l\\\n// \"];\n// Block20 -> Block20Exit [arrowhead=none];\n// Block20Exit [label=\"BackwardsJump\" shape=oval];\n// Block20Exit -> Block9;\n//\n// }\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200,
            "details": {
                "peephole": false,
                "inliner": false,
                "jumpdestRemover": false,
                "orderLiterals": false,
                "deduplicate": false,
                "cse": false,
                "constantOptimizer": false
            }
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "metadata",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ]
            }
        }
    }
}